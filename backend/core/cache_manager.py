"""
Cache Manager for KI AutoAgent
Auto-generated by CodeSmithAgent v4.0.4
"""

import hashlib
import json
import logging
from collections.abc import Callable
from functools import wraps
from typing import Any

logger = logging.getLogger(__name__)

# Try to import aioredis
try:
    import aioredis

    REDIS_AVAILABLE = True
except ImportError:
    logger.warning("aioredis not installed. Cache will be disabled.")
    REDIS_AVAILABLE = False


class CacheManager:
    """Manages caching for agent responses and system analysis"""

    def __init__(self, redis_url: str = "redis://localhost:6379"):
        self.redis_url = redis_url
        self.redis: "aioredis.Redis" | None = None
        self.enabled = REDIS_AVAILABLE

    async def connect(self):
        """Connect to Redis"""
        if not self.enabled:
            return

        try:
            self.redis = await aioredis.from_url(self.redis_url)
            await self.redis.ping()
            logger.info(f"✅ Connected to Redis at {self.redis_url}")
        except Exception as e:
            logger.error(f"❌ Failed to connect to Redis: {e}")
            self.enabled = False

    async def get(self, key: str) -> Any | None:
        """Get value from cache"""
        if not self.enabled or not self.redis:
            return None

        try:
            value = await self.redis.get(key)
            if value:
                return json.loads(value)
        except Exception as e:
            logger.error(f"Cache get error: {e}")

        return None

    async def set(self, key: str, value: Any, ttl: int = 3600):
        """Set value in cache with TTL"""
        if not self.enabled or not self.redis:
            return

        try:
            await self.redis.set(key, json.dumps(value), ex=ttl)
            logger.debug(f"Cached {key} for {ttl}s")
        except Exception as e:
            logger.error(f"Cache set error: {e}")

    async def delete(self, pattern: str):
        """Delete keys matching pattern"""
        if not self.enabled or not self.redis:
            return

        try:
            keys = await self.redis.keys(pattern)
            if keys:
                await self.redis.delete(*keys)
                logger.debug(f"Deleted {len(keys)} cached keys")
        except Exception as e:
            logger.error(f"Cache delete error: {e}")


def cache_agent_response(ttl: int = 1800):
    """
    Decorator for caching agent responses

    Usage:
        @cache_agent_response(ttl=3600)
        async def analyze_infrastructure(self, request):
            # Expensive operation
            return result
    """

    def decorator(func: Callable):
        @wraps(func)
        async def wrapper(self, *args, **kwargs):
            # Generate cache key from function name and arguments
            cache_key = f"{self.__class__.__name__}:{func.__name__}:"
            cache_key += hashlib.md5(f"{args}{kwargs}".encode()).hexdigest()

            # Initialize cache if needed
            if not hasattr(self, "_cache_manager"):
                self._cache_manager = CacheManager()
                await self._cache_manager.connect()

            # Try to get from cache
            cached = await self._cache_manager.get(cache_key)
            if cached:
                logger.info(f"🎯 Cache hit for {func.__name__}")
                return cached

            # Execute function and cache result
            logger.info(f"🔍 Cache miss for {func.__name__}, executing...")
            result = await func(self, *args, **kwargs)

            # Cache the result
            await self._cache_manager.set(cache_key, result, ttl)

            return result

        return wrapper

    return decorator


# Singleton instance
_cache_manager: CacheManager | None = None


async def get_cache_manager() -> CacheManager:
    """Get or create cache manager singleton"""
    global _cache_manager
    if _cache_manager is None:
        _cache_manager = CacheManager()
        await _cache_manager.connect()
    return _cache_manager
