"""
Tests for Cache Manager
Auto-generated by CodeSmithAgent
"""

import pytest
import asyncio
import json
from unittest.mock import Mock, patch, AsyncMock

from backend.core.cache_manager import CacheManager, cache_agent_response

@pytest.mark.asyncio
async def test_cache_manager_connect():
    """Test cache manager connection"""
    cache = CacheManager("redis://localhost:6379")

    with patch('aioredis.from_url') as mock_redis:
        mock_redis.return_value = AsyncMock()
        await cache.connect()
        assert cache.enabled

@pytest.mark.asyncio
async def test_cache_get_set():
    """Test cache get and set operations"""
    cache = CacheManager()
    cache.redis = AsyncMock()
    cache.enabled = True

    # Test set
    await cache.set("test_key", {"data": "test"}, ttl=60)
    cache.redis.set.assert_called_once()

    # Test get
    cache.redis.get.return_value = json.dumps({"data": "test"})
    result = await cache.get("test_key")
    assert result == {"data": "test"}

@pytest.mark.asyncio
async def test_cache_decorator():
    """Test cache_agent_response decorator"""

    class TestAgent:
        call_count = 0

        @cache_agent_response(ttl=60)
        async def expensive_operation(self, value):
            self.call_count += 1
            return f"result_{value}"

    agent = TestAgent()

    # Mock cache manager
    with patch('backend.core.cache_manager.CacheManager') as MockCache:
        mock_cache = AsyncMock()
        mock_cache.get.return_value = None  # First call - cache miss
        MockCache.return_value = mock_cache

        # First call should execute function
        result1 = await agent.expensive_operation("test")
        assert agent.call_count == 1

        # Second call with same args should use cache
        mock_cache.get.return_value = "cached_result"
        result2 = await agent.expensive_operation("test")
        # Call count should still be 1 (not executed again)
        assert agent.call_count == 1

if __name__ == "__main__":
    asyncio.run(test_cache_manager_connect())
