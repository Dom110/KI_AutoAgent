{
  "name": "ki-autoagent-vscode",
  "displayName": "KI AutoAgent",
  "description": "Universal Multi-Agent AI Development Platform for VS Code",
  "version": "5.0.0-unstable",
  "publisher": "ki-autoagent",
  "icon": "media/multi-agent-logo.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/dominikfoert/KI_AutoAgent"
  },
  "license": "MIT",
  "engines": {
    "vscode": "^1.90.0"
  },
  "categories": [
    "AI",
    "Chat",
    "Other"
  ],
  "keywords": [
    "ai",
    "chat",
    "assistant",
    "multi-agent",
    "development",
    "coding",
    "trading",
    "claude",
    "gpt",
    "anthropic",
    "openai"
  ],
  "author": "KI AutoAgent Team",
  "homepage": "https://github.com/dominikfoert/KI_AutoAgent",
  "bugs": {
    "url": "https://github.com/dominikfoert/KI_AutoAgent/issues"
  },
  "activationEvents": [
    "onStartupFinished",
    "onCommand:ki-autoagent.showChat",
    "onCommand:ki-autoagent.toggleChat",
    "onCommand:ki-autoagent.quickChat",
    "onChatParticipant:ki-autoagent.orchestrator",
    "onChatParticipant:ki-autoagent.richter",
    "onChatParticipant:ki-autoagent.architect",
    "onChatParticipant:ki-autoagent.codesmith",
    "onChatParticipant:ki-autoagent.docu",
    "onChatParticipant:ki-autoagent.reviewer",
    "onChatParticipant:ki-autoagent.fixer",
    "onChatParticipant:ki-autoagent.tradestrat",
    "onChatParticipant:ki-autoagent.research"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "chatParticipants": [
      {
        "id": "ki-autoagent.orchestrator",
        "name": "ki",
        "fullName": "KI AutoAgent Orchestrator",
        "description": "Universal AI assistant that automatically routes tasks to specialized agents",
        "isSticky": true,
        "disambiguation": [
          {
            "category": "development",
            "description": "Full-stack development assistance",
            "examples": [
              "Create a REST API with FastAPI",
              "Build a React component",
              "Implement a trading strategy"
            ]
          }
        ],
        "commands": [
          {
            "name": "task",
            "description": "Execute a development task with automatic agent selection"
          },
          {
            "name": "agents",
            "description": "Show available specialized agents"
          },
          {
            "name": "workflow",
            "description": "Create a multi-step development workflow"
          }
        ]
      },
      {
        "id": "ki-autoagent.architect",
        "name": "architect",
        "fullName": "ArchitectGPT",
        "description": "System Architecture & Design Expert powered by GPT-4o",
        "isSticky": false,
        "disambiguation": [
          {
            "category": "architecture",
            "description": "System design and architecture planning",
            "examples": [
              "Design a microservices architecture",
              "Plan a database schema",
              "Create system diagrams"
            ]
          }
        ],
        "commands": [
          {
            "name": "design",
            "description": "Create system architecture and design patterns"
          },
          {
            "name": "analyze",
            "description": "Analyze existing codebase architecture"
          },
          {
            "name": "plan",
            "description": "Create development and deployment plans"
          }
        ]
      },
      {
        "id": "ki-autoagent.codesmith",
        "name": "codesmith",
        "fullName": "CodeSmithClaude",
        "description": "Senior Python/Web Developer powered by Claude 3.5 Sonnet",
        "isSticky": false,
        "disambiguation": [
          {
            "category": "coding",
            "description": "Code implementation and optimization",
            "examples": [
              "Implement a Python class",
              "Create API endpoints",
              "Write unit tests"
            ]
          }
        ],
        "commands": [
          {
            "name": "implement",
            "description": "Implement code based on specifications"
          },
          {
            "name": "optimize",
            "description": "Optimize existing code for performance"
          },
          {
            "name": "test",
            "description": "Generate comprehensive test suites"
          }
        ]
      },
      {
        "id": "ki-autoagent.docu",
        "name": "docu",
        "fullName": "DocuBot",
        "description": "Technical Documentation Expert powered by GPT-4o",
        "isSticky": false,
        "disambiguation": [
          {
            "category": "documentation",
            "description": "Create comprehensive documentation",
            "examples": [
              "Write API documentation",
              "Create README files",
              "Generate code comments"
            ]
          }
        ],
        "commands": [
          {
            "name": "readme",
            "description": "Generate README and project documentation"
          },
          {
            "name": "api",
            "description": "Create API reference documentation"
          },
          {
            "name": "tutorial",
            "description": "Write tutorials and guides"
          }
        ]
      },
      {
        "id": "ki-autoagent.reviewer",
        "name": "reviewer",
        "fullName": "ReviewerGPT",
        "description": "Code Review & Security Expert powered by GPT-4o-mini",
        "isSticky": false,
        "disambiguation": [
          {
            "category": "quality",
            "description": "Code review and quality assurance",
            "examples": [
              "Review this function for bugs",
              "Check security vulnerabilities",
              "Analyze performance issues"
            ]
          }
        ],
        "commands": [
          {
            "name": "review",
            "description": "Perform comprehensive code review"
          },
          {
            "name": "security",
            "description": "Analyze security vulnerabilities"
          },
          {
            "name": "performance",
            "description": "Check performance and optimization opportunities"
          }
        ]
      },
      {
        "id": "ki-autoagent.fixer",
        "name": "fixer",
        "fullName": "FixerBot",
        "description": "Bug Fixing & Optimization Expert powered by Claude 3.5 Sonnet",
        "isSticky": false,
        "disambiguation": [
          {
            "category": "debugging",
            "description": "Debug and fix code issues",
            "examples": [
              "Fix this error message",
              "Debug performance issue",
              "Resolve import problems"
            ]
          }
        ],
        "commands": [
          {
            "name": "debug",
            "description": "Debug and diagnose code issues"
          },
          {
            "name": "fix",
            "description": "Fix bugs and errors"
          },
          {
            "name": "refactor",
            "description": "Refactor code for better maintainability"
          }
        ]
      },
      {
        "id": "ki-autoagent.tradestrat",
        "name": "tradestrat",
        "fullName": "TradeStrat",
        "description": "Trading Strategy Expert powered by Claude 3.5 Sonnet",
        "isSticky": false,
        "disambiguation": [
          {
            "category": "trading",
            "description": "Trading strategy development and analysis",
            "examples": [
              "Implement RON strategy",
              "Create backtesting framework",
              "Analyze risk metrics"
            ]
          }
        ],
        "commands": [
          {
            "name": "strategy",
            "description": "Develop and implement trading strategies"
          },
          {
            "name": "backtest",
            "description": "Create backtesting and validation systems"
          },
          {
            "name": "risk",
            "description": "Implement risk management and portfolio optimization"
          }
        ]
      },
      {
        "id": "ki-autoagent.research",
        "name": "research",
        "fullName": "ResearchBot",
        "description": "Research & Information Expert powered by Perplexity Pro",
        "isSticky": false,
        "disambiguation": [
          {
            "category": "research",
            "description": "Web research and information gathering",
            "examples": [
              "Research latest Python frameworks",
              "Find documentation for this library",
              "Analyze market trends"
            ]
          }
        ],
        "commands": [
          {
            "name": "search",
            "description": "Search web for current information"
          },
          {
            "name": "documentation",
            "description": "Find and analyze technical documentation"
          },
          {
            "name": "market",
            "description": "Research market trends and analysis"
          }
        ]
      },
      {
        "id": "ki-autoagent.richter",
        "name": "richter",
        "fullName": "OpusRichter",
        "description": "Supreme Quality Judge powered by Claude Opus 4.1 - Final decision maker for complex evaluations",
        "isSticky": false,
        "disambiguation": [
          {
            "category": "evaluation",
            "description": "Supreme quality judgment and final decision making",
            "examples": [
              "Judge the best architectural approach",
              "Evaluate competing solutions",
              "Make final quality assessment",
              "Resolve agent disagreements"
            ]
          }
        ],
        "commands": [
          {
            "name": "judge",
            "description": "Make supreme quality judgment on solutions or approaches"
          },
          {
            "name": "evaluate",
            "description": "Deep evaluation of complex technical decisions"
          },
          {
            "name": "resolve",
            "description": "Resolve disagreements between agents or approaches"
          },
          {
            "name": "verdict",
            "description": "Final verdict on system architecture or code quality"
          }
        ]
      }
    ],
    "commands": [
      {
        "command": "ki-autoagent.createFile",
        "title": "KI AutoAgent: Create File",
        "category": "KI AutoAgent"
      },
      {
        "command": "ki-autoagent.insertAtCursor",
        "title": "KI AutoAgent: Insert at Cursor",
        "category": "KI AutoAgent"
      },
      {
        "command": "ki-autoagent.applySuggestion",
        "title": "KI AutoAgent: Apply Suggestion",
        "category": "KI AutoAgent"
      },
      {
        "command": "ki-autoagent.showAgentStats",
        "title": "KI AutoAgent: Show Agent Statistics",
        "category": "KI AutoAgent"
      },
      {
        "command": "ki-autoagent.testClaudeCLI",
        "title": "KI AutoAgent: Test Claude CLI Integration",
        "category": "KI AutoAgent"
      },
      {
        "command": "ki-autoagent.toggleChat",
        "title": "KI AutoAgent: Toggle Chat",
        "category": "KI AutoAgent",
        "icon": "$(comment-discussion)"
      },
      {
        "command": "ki-autoagent.showChat",
        "title": "KI AutoAgent: Show Chat",
        "category": "KI AutoAgent"
      },
      {
        "command": "ki-autoagent.quickChat",
        "title": "KI AutoAgent: Quick Chat",
        "category": "KI AutoAgent"
      },
      {
        "command": "ki-autoagent.clearUnread",
        "title": "KI AutoAgent: Clear Unread Messages",
        "category": "KI AutoAgent"
      },
      {
        "command": "ki-autoagent.showHelp",
        "title": "KI AutoAgent: Show Help",
        "category": "KI AutoAgent"
      },
      {
        "command": "ki-autoagent.configureAgentModels",
        "title": "KI AutoAgent: Configure Agent Models",
        "category": "KI AutoAgent",
        "icon": "$(gear)"
      },
      {
        "command": "ki-autoagent.showAgentPerformance",
        "title": "KI AutoAgent: Show Agent Performance",
        "category": "KI AutoAgent",
        "icon": "$(pulse)"
      },
      {
        "command": "ki-autoagent.openConfigDirectory",
        "title": "KI AutoAgent: Open Configuration Directory",
        "category": "KI AutoAgent",
        "icon": "$(folder-opened)"
      },
      {
        "command": "ki-autoagent.configureIntentDetection",
        "title": "KI AutoAgent: Configure Intent Detection (When to Execute vs Explain)",
        "category": "KI AutoAgent",
        "icon": "$(settings-gear)"
      },
      {
        "command": "ki-autoagent.refreshModels",
        "title": "KI AutoAgent: Refresh Available AI Models",
        "category": "KI AutoAgent",
        "icon": "$(refresh)"
      },
      {
        "command": "ki-autoagent.selectOpenAIModel",
        "title": "KI AutoAgent: Select OpenAI/GPT Model",
        "category": "KI AutoAgent",
        "icon": "$(gear)"
      },
      {
        "command": "ki-autoagent.selectAnthropicModel",
        "title": "KI AutoAgent: Select Anthropic/Claude Model",
        "category": "KI AutoAgent",
        "icon": "$(gear)"
      },
      {
        "command": "ki-autoagent.selectPerplexityModel",
        "title": "KI AutoAgent: Select Perplexity Model",
        "category": "KI AutoAgent",
        "icon": "$(gear)"
      },
      {
        "command": "ki-autoagent.stopBackend",
        "title": "KI AutoAgent: Stop Backend",
        "category": "KI AutoAgent",
        "icon": "$(stop)"
      },
      {
        "command": "ki-autoagent.restartBackend",
        "title": "KI AutoAgent: Restart Backend",
        "category": "KI AutoAgent",
        "icon": "$(refresh)"
      },
      {
        "command": "ki-autoagent.showBackendStatus",
        "title": "KI AutoAgent: Show Backend Status",
        "category": "KI AutoAgent",
        "icon": "$(info)"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "ki-autoagent.showChat",
          "when": "true"
        },
        {
          "command": "ki-autoagent.toggleChat",
          "when": "true"
        },
        {
          "command": "ki-autoagent.quickChat",
          "when": "true"
        },
        {
          "command": "ki-autoagent.showAgentStats",
          "when": "true"
        },
        {
          "command": "ki-autoagent.showHelp",
          "when": "true"
        },
        {
          "command": "ki-autoagent.configureAgentModels",
          "when": "true"
        },
        {
          "command": "ki-autoagent.showAgentPerformance",
          "when": "true"
        },
        {
          "command": "ki-autoagent.openConfigDirectory",
          "when": "true"
        },
        {
          "command": "ki-autoagent.configureIntentDetection",
          "when": "true"
        }
      ],
      "view/title": [
        {
          "command": "ki-autoagent.showChat",
          "when": "view == workbench.panel.chat",
          "group": "navigation"
        }
      ]
    },
    "configuration": {
      "title": "KI AutoAgent",
      "properties": {
        "kiAutoAgent.anthropic.apiKey": {
          "type": "string",
          "markdownDescription": "🔑 **Anthropic API Key** for Claude models (Opus, Sonnet)\n- Get your key at [console.anthropic.com](https://console.anthropic.com)",
          "scope": "application"
        },
        "kiAutoAgent.openai.apiKey": {
          "type": "string",
          "markdownDescription": "🔑 **OpenAI API Key** for GPT models (GPT-4o, GPT-4o-mini)\n- Get your key at [platform.openai.com](https://platform.openai.com)",
          "scope": "application"
        },
        "kiAutoAgent.perplexity.apiKey": {
          "type": "string",
          "markdownDescription": "🔑 **Perplexity API Key** for web research (optional)\n- Get your key at [perplexity.ai](https://perplexity.ai)",
          "scope": "application"
        },
        "kiAutoAgent.backend.url": {
          "type": "string",
          "default": "localhost:8001",
          "markdownDescription": "🐍 **Python Backend URL**\n- Default: `localhost:8001` (v5.0.0 LangGraph)\n- The KI AutoAgent Python backend server with LangGraph integration\n- All AI intelligence runs here",
          "scope": "application"
        },
        "kiAutoAgent.backend.autoStart": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🚀 **Auto-Start Backend**\n- Automatically start Python backend on extension activation\n- Requires Python 3.8+ and backend dependencies installed",
          "scope": "application"
        },
        "kiAutoAgent.backend.pythonPath": {
          "type": "string",
          "default": "python3",
          "markdownDescription": "🐍 **Python Executable Path**\n- Path to Python executable\n- Default: `python3` (uses system Python)\n- Can be absolute path or command in PATH",
          "scope": "application"
        },
        "kiAutoAgent.backend.timeout": {
          "type": "number",
          "default": 180,
          "minimum": 30,
          "maximum": 600,
          "markdownDescription": "⏱️ **Backend Request Timeout (seconds)**\n- How long to wait for backend responses\n- Default: 180s (3 minutes) for complex tasks\n- Increase for infrastructure analysis or large codebases",
          "scope": "application"
        },
        "kiAutoAgent.models.openai.architect": {
          "type": "string",
          "enum": [
            "gpt-4o-2024-11-20",
            "gpt-5-mini-2025-09-20",
            "gpt-4o-mini-2024-07-18"
          ],
          "enumDescriptions": [
            "Optimized GPT-4 - Best for architecture and system design",
            "Fast GPT-5 Mini - Lightweight but capable",
            "Lightweight GPT-4 - Fast and cost-effective"
          ],
          "default": "gpt-4o-2024-11-20",
          "markdownDescription": "🏗️ **Model for ArchitectAgent**\n- System design and architecture\n- Infrastructure analysis",
          "scope": "application"
        },
        "kiAutoAgent.models.openai.orchestrator": {
          "type": "string",
          "enum": [
            "gpt-4o-2024-11-20",
            "chatgpt-4o-latest",
            "o1-preview",
            "o1-mini",
            "gpt-4o-mini-2024-07-18",
            "gpt-5-mini-2025-09-20"
          ],
          "enumDescriptions": [
            "GPT-4o (Nov 2024) - Balanced performance, multimodal (2.5/10 $/M) ⭐ Recommended",
            "ChatGPT-4o Latest - Always newest version, best features (5/15 $/M)",
            "o1 Preview - Advanced reasoning, slower but best for complex logic (15/60 $/M)",
            "o1 Mini - Fast reasoning, cost-effective for problem solving (3/12 $/M)",
            "GPT-4o Mini - Very fast, budget-friendly for simple tasks (0.15/0.6 $/M)",
            "GPT-5 Mini (2025) - Next-gen fast model, future-proof (0.2/0.8 $/M)"
          ],
          "default": "gpt-4o-2024-11-20",
          "markdownDescription": "🎯 **Model for Orchestrator Agent**\n\n**Current:** GPT-4o (November 2024)\n\n**Use For:**\n- Task decomposition & routing\n- Multi-agent coordination\n- Workflow planning\n\n**👍 Why GPT-4o?**\n- Excellent at breaking down complex tasks\n- Fast response times\n- Good cost/performance balance\n- 128K context window\n\n**🔄 Alternatives:**\n- `o1-preview` → Best reasoning for very complex workflows (slower, expensive)\n- `gpt-4o-mini` → Fast & cheap for simple routing\n- `chatgpt-4o-latest` → Always newest features\n\n**💡 Tip:** Use `KI AutoAgent: Configure Agent Models` to see all 15 GPT models with pros/cons/cost info.",
          "scope": "application"
        },
        "kiAutoAgent.models.openai.docubot": {
          "type": "string",
          "enum": [
            "gpt-4o-2024-11-20",
            "gpt-5-mini-2025-09-20",
            "gpt-4o-mini-2024-07-18"
          ],
          "enumDescriptions": [
            "Optimized GPT-4 - Best for comprehensive documentation",
            "Fast GPT-5 Mini - Lightweight but capable",
            "Lightweight GPT-4 - Fast and cost-effective"
          ],
          "default": "gpt-4o-2024-11-20",
          "markdownDescription": "📝 **Model for DocuBot**\n- Documentation generation\n- API documentation",
          "scope": "application"
        },
        "kiAutoAgent.models.openai.reviewer": {
          "type": "string",
          "enum": [
            "gpt-5-mini-2025-09-20",
            "gpt-4o-mini-2024-07-18",
            "gpt-4o-2024-11-20"
          ],
          "enumDescriptions": [
            "Fast GPT-5 Mini - Optimized for code review and validation",
            "Lightweight GPT-4 - Fast and cost-effective for reviews",
            "Optimized GPT-4 - More thorough but slower reviews"
          ],
          "default": "gpt-5-mini-2025-09-20",
          "markdownDescription": "🔍 **Model for ReviewerGPT**\n- Code review and validation\n- Security analysis",
          "scope": "application"
        },
        "kiAutoAgent.models.openai.performancebot": {
          "type": "string",
          "enum": [
            "gpt-4o-2024-11-20",
            "gpt-5-mini-2025-09-20",
            "gpt-4o-mini-2024-07-18"
          ],
          "enumDescriptions": [
            "Optimized GPT-4 - Best for performance analysis and optimization",
            "Fast GPT-5 Mini - Lightweight but capable",
            "Lightweight GPT-4 - Fast and cost-effective"
          ],
          "default": "gpt-4o-2024-11-20",
          "markdownDescription": "⚡ **Model for PerformanceBot**\n- Performance analysis\n- Optimization suggestions",
          "scope": "application"
        },
        "kiAutoAgent.models.anthropic.codesmith": {
          "type": "string",
          "enum": [
            "claude-4.1-sonnet-20250920",
            "claude-opus-4-1-20250805",
            "claude-3-7-sonnet-20250219",
            "claude-3-5-haiku-20241022",
            "claude-3-opus-20240229"
          ],
          "enumDescriptions": [
            "Claude Sonnet 4.1 - Best for coding, fast, balanced (3/15 $/M) ⭐ Recommended",
            "Claude Opus 4.1 - Supreme quality, best reasoning (15/75 $/M)",
            "Claude 3.7 Sonnet - Extended thinking, cost-effective (3/15 $/M)",
            "Claude 3.5 Haiku - Very fast, simple tasks (0.8/4 $/M)",
            "Claude 3 Opus Legacy - Proven reliability, older (15/75 $/M)"
          ],
          "default": "claude-4.1-sonnet-20250920",
          "markdownDescription": "💻 **Model for CodeSmith Agent**\n\n**Current:** Claude Sonnet 4.1\n\n**Use For:**\n- Code generation & implementation\n- Bug fixing & refactoring\n- Complex algorithms\n- Full-stack development\n\n**👍 Why Sonnet 4.1?**\n- Excellent at coding tasks\n- Fast response times\n- 200K context window\n- Best cost/performance for coding\n\n**🔄 Alternatives:**\n- `claude-opus-4-1` → Supreme quality for critical code (slower, 5x cost)\n- `claude-3-5-haiku` → Very fast for simple implementations\n- `claude-3-7-sonnet` → Extended thinking for complex logic\n\n**💡 Tip:** Use `KI AutoAgent: Configure Agent Models` to see all 5 Claude models with detailed pros/cons.",
          "scope": "application"
        },
        "kiAutoAgent.models.anthropic.fixer": {
          "type": "string",
          "enum": [
            "claude-4.1-sonnet-20250920",
            "claude-opus-4-1-20250805",
            "claude-3-7-sonnet-20250219"
          ],
          "enumDescriptions": [
            "Claude Sonnet 4.1 - Latest and most capable debugging model",
            "Supreme Claude Opus 4.1 - Ultimate reasoning for complex bugs",
            "Claude 3.7 Sonnet - Stable and reliable bug fixing"
          ],
          "default": "claude-4.1-sonnet-20250920",
          "markdownDescription": "🔧 **Model for FixerBot**\n- Bug fixing\n- Code optimization",
          "scope": "application"
        },
        "kiAutoAgent.models.anthropic.tradestrat": {
          "type": "string",
          "enum": [
            "claude-4.1-sonnet-20250920",
            "claude-opus-4-1-20250805",
            "claude-3-7-sonnet-20250219"
          ],
          "enumDescriptions": [
            "Claude Sonnet 4.1 - Latest and most capable trading strategy model",
            "Supreme Claude Opus 4.1 - Ultimate reasoning for complex trading logic",
            "Claude 3.7 Sonnet - Stable and reliable trading algorithms"
          ],
          "default": "claude-4.1-sonnet-20250920",
          "markdownDescription": "📈 **Model for TradeStrat**\n- Trading strategy development\n- Financial analysis",
          "scope": "application"
        },
        "kiAutoAgent.models.anthropic.opus": {
          "type": "string",
          "enum": [
            "claude-opus-4-1-20250805",
            "claude-4.1-sonnet-20250920",
            "claude-3-7-sonnet-20250219"
          ],
          "enumDescriptions": [
            "Supreme Claude Opus 4.1 - Ultimate reasoning and conflict resolution",
            "Claude Sonnet 4.1 - Strong reasoning capabilities",
            "Claude 3.7 Sonnet - Fallback for arbitration"
          ],
          "default": "claude-opus-4-1-20250805",
          "markdownDescription": "⚖️ **Model for OpusArbitrator**\n- Agent conflict resolution\n- Superior reasoning",
          "scope": "application"
        },
        "kiAutoAgent.models.perplexity.research": {
          "type": "string",
          "enum": [
            "llama-3.1-sonar-huge-128k-online",
            "llama-3.1-sonar-large-32k-online",
            "llama-3.1-sonar-small-128k-online"
          ],
          "enumDescriptions": [
            "Most capable search model - Best research quality",
            "Large search model - Good balance of speed and capability",
            "Fast search model - Quick results"
          ],
          "default": "llama-3.1-sonar-huge-128k-online",
          "markdownDescription": "🔍 **Model for ResearchAgent**\n- Web research\n- Real-time information",
          "scope": "application"
        },
        "kiAutoAgent.models.autoDiscover": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🔍 **Auto-Discover AI Models on Startup**\n\nAutomatically queries provider APIs for available models with detailed information:\n\n**📊 What's Discovered:**\n- ✅ **15 GPT models** including Realtime, o1 reasoning models\n- ✅ **5 Claude models** (Opus 4.1, Sonnet 4.1, Haiku)\n- ✅ **5 Perplexity models** (Sonar variants for research)\n\n**📝 Rich Information:**\n- Pros & Cons for each model\n- Cost per million tokens ($/M)\n- Best use cases\n- Performance tier (Premium, Fast, Budget)\n\n**💡 Commands:**\n- `KI AutoAgent: Refresh Models` - Manual refresh\n- `KI AutoAgent: Configure Agent Models` - Per-agent selection\n- `KI AutoAgent: Select OpenAI/Anthropic/Perplexity Model` - Browse all models\n\n**⚙️ Tip:** Disable this if you prefer manual model configuration or have API rate limits.",
          "scope": "application"
        },
        "kiAutoAgent.claude.serviceMode": {
          "type": "string",
          "enum": [
            "claude-code",
            "api",
            "web"
          ],
          "default": "claude-code",
          "markdownDescription": "🤖 **Claude Service Mode**\n- `claude-code`: Local CLI (install with `npm install -g @anthropic-ai/claude-code`)\n- `api`: Direct API access with Anthropic key\n- `web`: Browser proxy (deprecated)",
          "enumDescriptions": [
            "Claude Code CLI - Recommended for best performance",
            "API Mode - Direct Anthropic API access",
            "Web Mode - Legacy browser proxy (deprecated)"
          ]
        },
        "kiAutoAgent.defaultModel": {
          "type": "string",
          "default": "claude-sonnet-4",
          "enum": [
            "claude-opus-4.1",
            "claude-sonnet-4",
            "gpt-4o",
            "gpt-4o-mini"
          ],
          "markdownDescription": "🎯 **Default AI Model**\n- Opus 4.1: Supreme reasoning & conflict resolution\n- Sonnet 4: Best for coding & implementation\n- GPT-4o: Architecture & system design\n- GPT-4o Mini: Fast & cost-effective"
        },
        "kiAutoAgent.maxTokens": {
          "type": "number",
          "default": 4000,
          "minimum": 100,
          "maximum": 32000,
          "markdownDescription": "📝 **Max Tokens Per Request**\nHigher = longer responses but more cost"
        },
        "kiAutoAgent.temperature": {
          "type": "number",
          "default": 0.7,
          "minimum": 0,
          "maximum": 1,
          "markdownDescription": "🎨 **Temperature (Creativity)**\n- 0.0 = Deterministic, focused\n- 0.7 = Balanced (default)\n- 1.0 = Creative, varied"
        },
        "kiAutoAgent.enableLogging": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "📊 **Enable Debug Logging**\nShows detailed logs in Output panel"
        },
        "kiAutoAgent.autoDetectProjectType": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🔍 **Auto-Detect Project Type**\nAutomatically identifies Python, JavaScript, TypeScript, etc."
        },
        "kiAutoAgent.workspaceContext": {
          "type": "string",
          "enum": [
            "minimal",
            "standard",
            "full"
          ],
          "default": "standard",
          "markdownDescription": "📁 **Workspace Context Level**\n- `minimal`: Only current file\n- `standard`: Related files\n- `full`: Entire workspace structure",
          "enumDescriptions": [
            "Minimal - Only current file context",
            "Standard - Include related files",
            "Full - Complete workspace analysis"
          ]
        },
        "kiAutoAgent.ignorePatterns": {
          "type": "array",
          "default": [
            "node_modules",
            ".git",
            "dist",
            "build",
            "*.pyc",
            "__pycache__"
          ],
          "markdownDescription": "🚫 **Ignore Patterns**\nFiles/folders to exclude from analysis"
        },
        "kiAutoAgent.streamResponses": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "⚡ **Stream Responses**\nShow responses as they're generated"
        },
        "kiAutoAgent.showAgentThinking": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "🧠 **Show Agent Thinking**\nDisplay internal reasoning process"
        },
        "kiAutoAgent.autoSaveChat": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "💾 **Auto-Save Chat History**\nAutomatically save conversation history"
        },
        "kiAutoAgent.autoSelectAgent": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🎯 **Auto-Select Best Agent**\nAutomatically route to most suitable agent"
        },
        "kiAutoAgent.multiAgentMode": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "👥 **Multi-Agent Collaboration**\nAllow multiple agents to work together"
        },
        "kiAutoAgent.conflictResolution": {
          "type": "string",
          "enum": [
            "opus-arbitrator",
            "majority-vote",
            "first-response"
          ],
          "default": "opus-arbitrator",
          "markdownDescription": "⚖️ **Conflict Resolution Strategy**\nHow to handle conflicting agent responses",
          "enumDescriptions": [
            "Opus Arbitrator - Supreme judge decides",
            "Majority Vote - Most common answer wins",
            "First Response - Use first valid response"
          ]
        },
        "kiAutoAgent.webSearch.enabled": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🔍 **Enable Web Search**\nAllow agents to search the internet"
        },
        "kiAutoAgent.webSearch.provider": {
          "type": "string",
          "enum": [
            "perplexity",
            "tavily",
            "serp"
          ],
          "default": "perplexity",
          "markdownDescription": "🌐 **Search Provider**"
        },
        "kiAutoAgent.webSearch.maxResults": {
          "type": "number",
          "default": 5,
          "minimum": 1,
          "maximum": 20,
          "markdownDescription": "📊 **Max Search Results**"
        },
        "kiAutoAgent.cacheResponses": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "💾 **Cache AI Responses**\nCache identical requests to save API costs"
        },
        "kiAutoAgent.cacheDuration": {
          "type": "number",
          "default": 60,
          "minimum": 0,
          "maximum": 1440,
          "markdownDescription": "⏱️ **Cache Duration (minutes)**\n0 = no caching, 1440 = 24 hours"
        },
        "kiAutoAgent.historyLimit": {
          "type": "number",
          "default": 100,
          "minimum": 10,
          "maximum": 1000,
          "markdownDescription": "📚 **Chat History Limit**\nMax messages to keep in history"
        },
        "kiAutoAgent.timeout": {
          "type": "number",
          "default": 120,
          "minimum": 30,
          "maximum": 600,
          "markdownDescription": "⏱️ **Request Timeout (seconds)**\nMax time to wait for AI response"
        },
        "kiAutoAgent.retryAttempts": {
          "type": "number",
          "default": 3,
          "minimum": 0,
          "maximum": 10,
          "markdownDescription": "🔄 **Retry Attempts**\nRetries on temporary failures"
        },
        "kiAutoAgent.rateLimitDelay": {
          "type": "number",
          "default": 1000,
          "minimum": 0,
          "maximum": 10000,
          "markdownDescription": "⏸️ **Rate Limit Delay (ms)**\nDelay between rapid requests"
        },
        "kiAutoAgent.redactSecrets": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🛡️ **Redact Secrets**\nAutomatically hide API keys and passwords in outputs"
        },
        "kiAutoAgent.sandboxMode": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "🔒 **Sandbox Mode**\nRestrict code execution and file system access"
        },
        "kiAutoAgent.confirmDestructive": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "⚠️ **Confirm Destructive Actions**\nRequire confirmation for delete/overwrite operations"
        },
        "kiAutoAgent.testCommand": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🧪 **Enable Test Command**\nShow 'Test Claude CLI' command in palette"
        },
        "kiAutoAgent.verboseErrors": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "🐛 **Verbose Error Messages**\nShow detailed error information for debugging"
        },
        "kiAutoAgent.learning.enabled": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🧠 **Enable Learning System** ⚠️ [ORPHANED - NOT CONNECTED]\nAgents adapt based on successful interactions"
        },
        "kiAutoAgent.learning.adaptationThreshold": {
          "type": "number",
          "default": 0.8,
          "minimum": 0.5,
          "maximum": 0.99,
          "markdownDescription": "📊 **Learning Threshold** ⚠️ [ORPHANED - NOT CONNECTED]\nSuccess rate needed before adapting (0.8 = 80%)"
        },
        "kiAutoAgent.chat.showEmojis": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "😊 **Show Emojis** ⚠️ [ORPHANED - NOT CONNECTED]\nDisplay emojis in agent responses"
        },
        "kiAutoAgent.chat.showTimestamps": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🕐 **Show Timestamps** ⚠️ [ORPHANED - NOT CONNECTED]\nDisplay timestamps in agent responses"
        },
        "kiAutoAgent.chat.showDetailedResponses": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "📊 **Show Detailed Responses** ⚠️ [ORPHANED - NOT CONNECTED]\nShow additional details and metadata in agent responses"
        },
        "kiAutoAgent.chat.responseFormat": {
          "type": "string",
          "enum": [
            "simple",
            "detailed"
          ],
          "default": "detailed",
          "markdownDescription": "📝 **Response Format** ⚠️ [ORPHANED - NOT CONNECTED]\nChoose between simple or detailed response format"
        },
        "kiAutoAgent.chat.logLevel": {
          "type": "string",
          "enum": [
            "DEBUG",
            "INFO",
            "WARN",
            "ERROR"
          ],
          "default": "INFO",
          "markdownDescription": "🔍 **Log Level** ⚠️ [ORPHANED - NOT CONNECTED]\nMinimum log level for console output"
        },
        "kiAutoAgent.chat.fallbackMode": {
          "type": "string",
          "enum": [
            "graceful",
            "strict"
          ],
          "default": "graceful",
          "markdownDescription": "🔄 **Fallback Mode** ⚠️ [ORPHANED - NOT CONNECTED]\nHow to handle fallback scenarios"
        },
        "kiAutoAgent.agents.configuration": {
          "type": "object",
          "readOnly": true,
          "markdownDescription": "🤖 **Agent Configuration Overview**\n\n📚 Each agent has specialized instructions and models:\n\n**🎭 Workflow Coordination**\n• `OrchestratorAgent` → [orchestrator.md](file://./instructionsets/orchestrator.md)\n• Model: GPT-4o\n• Handles: Multi-agent workflows, task routing\n\n**⚖️ Conflict Resolution**\n• `OpusArbitratorAgent` → [richter.md](file://./instructionsets/richter.md)\n• Model: Claude Opus 4.1\n• Handles: Agent conflicts, final decisions\n\n**🏗️ Architecture & Design**\n• `ArchitectAgent` → [architect.md](file://./instructionsets/architect.md)\n• Model: GPT-4o\n• Handles: System design, patterns, scalability\n\n**💻 Code Implementation**\n• `CodeSmithAgent` → [codesmith.md](file://./instructionsets/codesmith.md)\n• Model: Claude Sonnet 4\n• Handles: Coding, testing, optimization\n\n**📈 Trading Strategies**\n• `TradeStratAgent` → [tradestrat.md](file://./instructionsets/tradestrat.md)\n• Model: Claude Sonnet 4\n• Handles: Trading algorithms, backtesting\n\n**🔍 Web Research**\n• `ResearchAgent` → [research.md](file://./instructionsets/research.md)\n• Model: Perplexity Sonar\n• Handles: Web search, documentation",
          "default": {
            "info": "View instruction files in ./vscode-extension/src/instructionsets/"
          }
        },
        "kiAutoAgent.agents.instructionSetsPath": {
          "type": "string",
          "default": "./vscode-extension/src/instructionsets",
          "markdownDescription": "📁 **Instruction Sets Directory**\nPath to agent instruction files",
          "scope": "window"
        },
        "kiAutoAgent.agents.showInstructions": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "📖 **Show Agent Instructions**\nDisplay which instruction set each agent uses",
          "scope": "window"
        },
        "kiAutoAgent.intentDetection.mode": {
          "type": "string",
          "enum": [
            "strict",
            "balanced",
            "relaxed"
          ],
          "default": "balanced",
          "markdownDescription": "🎯 **Intent Detection Mode** ⚠️ [ORPHANED - NOT CONNECTED]\n• **strict**: Favors classifying as tasks (less queries)\n• **balanced**: Standard detection logic\n• **relaxed**: Favors classifying as queries (less tasks)",
          "scope": "window"
        },
        "kiAutoAgent.intentDetection.queryKeywords": {
          "type": "array",
          "default": [
            "what",
            "how",
            "why",
            "when",
            "where",
            "who",
            "which",
            "explain",
            "describe",
            "tell me",
            "was",
            "wer",
            "wie",
            "warum",
            "wann",
            "wo",
            "welche",
            "erkläre"
          ],
          "markdownDescription": "❓ **Query Keywords** ⚠️ [ORPHANED - NOT CONNECTED]\nKeywords that indicate the request is likely a question/query",
          "scope": "window"
        },
        "kiAutoAgent.intentDetection.taskKeywords": {
          "type": "array",
          "default": [
            "implement",
            "create",
            "build",
            "fix",
            "update",
            "modify",
            "add",
            "remove",
            "delete",
            "write",
            "develop",
            "refactor",
            "optimize",
            "debug",
            "test",
            "deploy",
            "erstelle",
            "baue",
            "fixe",
            "aktualisiere",
            "füge hinzu",
            "lösche",
            "schreibe"
          ],
          "markdownDescription": "⚡ **Task Keywords** ⚠️ [ORPHANED - NOT CONNECTED]\nKeywords that indicate the request is likely an action/task",
          "scope": "window"
        },
        "kiAutoAgent.intentDetection.preferTaskExecution": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "🚀 **Prefer Task Execution** ⚠️ [ORPHANED - NOT CONNECTED]\nWhen uncertain, prefer executing as task rather than answering as query",
          "scope": "window"
        },
        "kiAutoAgent.intentDetection.confidenceThreshold": {
          "type": "number",
          "default": 0.7,
          "minimum": 0,
          "maximum": 1,
          "markdownDescription": "📊 **Confidence Threshold** ⚠️ [ORPHANED - NOT CONNECTED]\nMinimum confidence level (0.0-1.0) for intent classification",
          "scope": "window"
        },
        "kiAutoAgent.intentDetection.useAIClassification": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "🤖 **Use AI Classification** ⚠️ [ORPHANED - NOT CONNECTED]\nEnhance keyword-based detection with AI when confidence is low",
          "scope": "window"
        },
        "kiAutoAgent.intentDetection.debugLogging": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🐛 **Debug Logging** ⚠️ [ORPHANED - NOT CONNECTED]\nShow intent detection details in console",
          "scope": "window"
        },
        "kiAutoAgent.ai.intentClassification.enabled": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🧠 **Enable AI Intent Classification** ⚠️ [ORPHANED - NOT CONNECTED]\nUse advanced AI-based intent classification instead of keywords",
          "scope": "window"
        },
        "kiAutoAgent.ai.intentClassification.provider": {
          "type": "string",
          "enum": [
            "gpt-4",
            "claude",
            "auto"
          ],
          "default": "auto",
          "markdownDescription": "🤖 **AI Provider** ⚠️ [ORPHANED - NOT CONNECTED]\nWhich AI model to use for intent classification\n• **auto**: Automatically select best available\n• **gpt-4**: Use OpenAI GPT-4\n• **claude**: Use Anthropic Claude",
          "scope": "window"
        },
        "kiAutoAgent.ai.intentClassification.confidenceThreshold": {
          "type": "number",
          "default": 0.7,
          "minimum": 0.3,
          "maximum": 0.95,
          "markdownDescription": "📊 **AI Confidence Threshold** ⚠️ [ORPHANED - NOT CONNECTED]\nMinimum confidence (0.3-0.95) for automatic execution\n• <0.6: Always ask for clarification\n• 0.6-0.8: May ask for confirmation\n• >0.8: Execute without confirmation",
          "scope": "window"
        },
        "kiAutoAgent.ai.intentClassification.requireExplicitConfirmation": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "✅ **Require Explicit Confirmation** ⚠️ [ORPHANED - NOT CONNECTED]\nAlways ask for confirmation even with high confidence",
          "scope": "window"
        },
        "kiAutoAgent.ai.intentClassification.learnFromCorrections": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "📚 **Learn from Corrections** ⚠️ [ORPHANED - NOT CONNECTED]\nImprove classification accuracy by learning from user corrections",
          "scope": "window"
        },
        "kiAutoAgent.ai.intentClassification.multiModelConsensus": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "🤝 **Multi-Model Consensus** ⚠️ [ORPHANED - NOT CONNECTED]\nUse multiple AI models for critical decisions (slower but more accurate)",
          "scope": "window"
        },
        "kiAutoAgent.ai.intentClassification.detectSarcasm": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "😏 **Detect Sarcasm** ⚠️ [ORPHANED - NOT CONNECTED]\nDetect and handle sarcastic responses appropriately",
          "scope": "window"
        },
        "kiAutoAgent.ai.intentClassification.openaiApiKey": {
          "type": "string",
          "markdownDescription": "🔑 **OpenAI API Key for Classification** ⚠️ [ORPHANED - NOT CONNECTED]\nOptional dedicated key for intent classification (uses main key if not set)",
          "scope": "application"
        },
        "kiAutoAgent.ai.intentClassification.anthropicApiKey": {
          "type": "string",
          "markdownDescription": "🔑 **Anthropic API Key for Classification** ⚠️ [ORPHANED - NOT CONNECTED]\nOptional dedicated key for intent classification (uses main key if not set)",
          "scope": "application"
        },
        "kiAutoAgent.ai.intentClassification.cacheDuration": {
          "type": "number",
          "default": 5,
          "minimum": 0,
          "maximum": 60,
          "markdownDescription": "⏱️ **Cache Duration (seconds)** ⚠️ [ORPHANED - NOT CONNECTED]\nHow long to cache classification results (0 to disable)",
          "scope": "window"
        },
        "kiAutoAgent.history.maxConversations": {
          "type": "number",
          "default": 50,
          "minimum": 1,
          "maximum": 200,
          "markdownDescription": "📚 **Max Conversations** ⚠️ [ORPHANED - NOT CONNECTED]\nMaximum number of conversations to keep in history",
          "scope": "window"
        },
        "kiAutoAgent.history.maxMessagesPerConversation": {
          "type": "number",
          "default": 100,
          "minimum": 10,
          "maximum": 500,
          "markdownDescription": "💬 **Max Messages Per Conversation** ⚠️ [ORPHANED - NOT CONNECTED]\nMaximum messages to keep per conversation",
          "scope": "window"
        },
        "kiAutoAgent.history.autoSave": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "💾 **Auto Save** ⚠️ [ORPHANED - NOT CONNECTED]\nAutomatically save conversation history",
          "scope": "window"
        },
        "kiAutoAgent.ui.compactMode": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "📦 **Compact Mode** ⚠️ [ORPHANED - NOT CONNECTED]\nStart chat in compact message view",
          "scope": "window"
        },
        "kiAutoAgent.validationWorkflow.enabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "🔍 **Enable Validation Workflow** ⚠️ [ORPHANED - NOT CONNECTED]\nAutomatically validate implementations with ReviewerGPT after each task",
          "scope": "window"
        },
        "kiAutoAgent.validationWorkflow.maxIterations": {
          "type": "number",
          "default": 3,
          "minimum": 1,
          "maximum": 10,
          "markdownDescription": "🔄 **Max Validation Iterations** ⚠️ [ORPHANED - NOT CONNECTED]\nMaximum number of validation/fix cycles to perform",
          "scope": "window"
        },
        "kiAutoAgent.validationWorkflow.agents": {
          "type": "array",
          "default": [
            "reviewer",
            "fixerbot"
          ],
          "markdownDescription": "👥 **Validation Agents** ⚠️ [ORPHANED - NOT CONNECTED]\nAgents to use in the validation workflow",
          "scope": "window"
        },
        "kiAutoAgent.validationWorkflow.autoFix": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "🔧 **Auto-Fix Issues** ⚠️ [ORPHANED - NOT CONNECTED]\nAutomatically attempt to fix issues found during validation with FixerBot",
          "scope": "window"
        },
        "kiAutoAgent.langgraph.enabled": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🔀 **Enable LangGraph Workflow Engine**\n\nControls the v5.0 LangGraph-based multi-agent workflow system:\n\n**✅ Enabled (default):**\n- Advanced state management\n- Agent-to-agent communication\n- Automatic checkpointing\n- Workflow visualization\n\n**❌ Disabled:**\n- Falls back to simple agent calls\n- No state persistence\n- Limited error recovery\n\n**💡 Recommended:** Keep enabled for production workflows",
          "scope": "window"
        },
        "kiAutoAgent.langgraph.checkpointInterval": {
          "type": "number",
          "default": 5,
          "minimum": 1,
          "maximum": 50,
          "markdownDescription": "💾 **LangGraph Checkpoint Interval**\n\nHow often to save workflow state (in agent steps):\n\n- **1**: Save after every agent call (safest, slower)\n- **5**: Balance between safety and speed ⭐ Recommended\n- **10+**: Faster but risk losing progress on crash\n\n**Use Cases:**\n- Critical tasks: 1-3\n- Normal development: 5-7\n- Fast iterations: 10+",
          "scope": "window"
        },
        "kiAutoAgent.langgraph.maxIterations": {
          "type": "number",
          "default": 20,
          "minimum": 5,
          "maximum": 100,
          "markdownDescription": "🔄 **Max LangGraph Workflow Iterations**\n\nMaximum number of agent steps before stopping:\n\n**Prevents infinite loops in workflows**\n\n- **5-10**: Simple tasks (code review, documentation)\n- **20**: Complex tasks (architecture, refactoring) ⭐ Recommended\n- **50+**: Very complex multi-agent workflows\n\n**⚠️ Warning:** Higher values = more API cost",
          "scope": "window"
        },
        "kiAutoAgent.langgraph.parallelExecution": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "⚡ **Enable Parallel Agent Execution**\n\nAllow multiple agents to work simultaneously:\n\n**✅ Enabled:**\n- 2-3x faster for independent tasks\n- Higher API rate limit usage\n- More complex error handling\n\n**❌ Disabled (recommended):**\n- Sequential agent execution\n- Easier to debug\n- Lower API costs\n\n**💡 Tip:** Enable for large codebases or urgent tasks",
          "scope": "window"
        },
        "kiAutoAgent.langgraph.stateManagement": {
          "type": "string",
          "enum": [
            "memory",
            "sqlite",
            "checkpoint"
          ],
          "default": "sqlite",
          "markdownDescription": "🗄️ **LangGraph State Storage Backend**\n\nHow to persist workflow state:\n\n- **memory**: Fast but lost on restart (testing only)\n- **sqlite**: Persistent, good performance ⭐ Recommended\n- **checkpoint**: Full workflow snapshots (slower, safe)\n\n**Recommendation:** sqlite for production, memory for testing",
          "enumDescriptions": [
            "In-Memory - Fast but volatile",
            "SQLite Database - Persistent and balanced ⭐",
            "Checkpoint Files - Maximum safety, slower"
          ],
          "scope": "window"
        },
        "kiAutoAgent.agents.qualityThreshold": {
          "type": "number",
          "default": 0.75,
          "minimum": 0.5,
          "maximum": 0.95,
          "markdownDescription": "⭐ **Agent Quality Threshold**\n\nMinimum quality score (0.5-0.95) to accept agent output:\n\n**Score Ranges:**\n- **0.5-0.6**: Accept most outputs (fast, may have issues)\n- **0.7-0.8**: Balanced quality ⭐ Recommended\n- **0.85-0.95**: Very strict (slower, expensive, best quality)\n\n**How it works:**\n1. Agent produces output\n2. Reviewer scores quality (0-1)\n3. If < threshold → Send to Fixer\n4. Repeat until quality met or max iterations\n\n**💡 Tip:** Lower for prototyping, raise for production",
          "scope": "window"
        },
        "kiAutoAgent.agents.maxRetries": {
          "type": "number",
          "default": 3,
          "minimum": 1,
          "maximum": 10,
          "markdownDescription": "🔄 **Max Agent Retries**\n\nHow many times to retry an agent on failure:\n\n- **1**: Fail fast (good for testing)\n- **3**: Standard retries ⭐ Recommended\n- **5+**: Persistent retry (expensive)\n\n**Retry Triggers:**\n- API rate limits\n- Timeout errors\n- Quality below threshold\n- Agent exceptions\n\n**⚠️ Cost Impact:** Each retry = additional API call",
          "scope": "window"
        },
        "kiAutoAgent.agents.reviewerIterations": {
          "type": "number",
          "default": 2,
          "minimum": 1,
          "maximum": 5,
          "markdownDescription": "🔍 **Reviewer Iteration Cycles**\n\nHow many review passes before accepting code:\n\n- **1**: Single review (fast, may miss issues)\n- **2**: Double review ⭐ Recommended\n- **3+**: Thorough review (slower, expensive)\n\n**Workflow:**\n1. CodeSmith implements\n2. Reviewer checks (iteration 1)\n3. If issues → Fixer fixes\n4. Reviewer checks again (iteration 2)\n5. Accept or repeat\n\n**💡 Tip:** Use 3+ for critical production code",
          "scope": "window"
        },
        "kiAutoAgent.agents.fixerIterations": {
          "type": "number",
          "default": 3,
          "minimum": 1,
          "maximum": 5,
          "markdownDescription": "🔧 **Fixer Iteration Attempts**\n\nHow many times Fixer can attempt to fix issues:\n\n- **1**: One fix attempt (fast)\n- **3**: Multiple fix attempts ⭐ Recommended\n- **5**: Maximum fix persistence (expensive)\n\n**Escalation Path:**\n1. Fixer attempts fix (iteration 1-3)\n2. Reviewer validates each fix\n3. If all iterations fail → Escalate to OpusArbitrator\n\n**⚠️ Cost:** Each iteration = CodeSmith + Reviewer + Fixer calls",
          "scope": "window"
        },
        "kiAutoAgent.alternativeFixer.enabled": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🤖🔄 **Alternative Fixer AI (v5.1.0)**\n\nTry different AI model when primary fixer (Claude) fails:\n\n**Why this works:**\n- Different AI = different \"mental model\"\n- Fresh neural network = fresh perspective\n- Like asking a different developer\n\n**When triggered:**\n- After primary fixer fails multiple times\n- After information gathering attempts\n- Before asking user/OpusArbitrator\n\n**Models available:**\n- GPT-4o (fast, different approach)\n- GPT-5 (most capable, if available)\n- Claude Opus 4 (highest authority)\n\n**💡 Tip:** Enable for higher success rate (+10-15%)",
          "scope": "window"
        },
        "kiAutoAgent.alternativeFixer.model": {
          "type": "string",
          "enum": [
            "gpt-4o",
            "gpt-5",
            "gpt-5-mini",
            "claude-opus-4",
            "claude-sonnet-4"
          ],
          "default": "gpt-4o",
          "markdownDescription": "🤖 **Alternative Fixer AI Model**\n\nWhich AI to use as alternative fixer:\n\n**Recommended:**\n\n- **gpt-4o**: Fast, capable, different from Claude ⭐\n  - Speed: Very fast\n  - Cost: Moderate\n  - Best for: Most cases\n\n- **gpt-5**: Latest GPT (if available)\n  - Speed: Fast\n  - Cost: Higher\n  - Best for: Complex bugs\n\n**Budget:**\n\n- **gpt-5-mini**: Cheaper alternative\n  - Speed: Fastest\n  - Cost: Low\n  - Best for: Simple fixes\n\n**Not recommended:**\n\n- **claude-sonnet-4**: Same as primary fixer (no benefit!)\n- **claude-opus-4**: Save for OpusArbitrator level\n\n**💡 Current:** GPT-4o gives best balance",
          "enumDescriptions": [
            "GPT-4o - Fast and capable ⭐",
            "GPT-5 - Latest GPT model",
            "GPT-5-mini - Faster, budget option",
            "Claude Opus 4 - Highest authority (better for OpusArbitrator)",
            "Claude Sonnet 4 - Primary fixer (circular, not useful!)"
          ],
          "scope": "window"
        },
        "kiAutoAgent.alternativeFixer.triggerAfterIterations": {
          "type": "number",
          "default": 11,
          "minimum": 5,
          "maximum": 20,
          "markdownDescription": "🔢 **Alternative Fixer Trigger Point**\n\nAfter how many collaboration iterations to try alternative AI:\n\n**Timeline:**\n- **Iterations 1-4**: Normal Fixer attempts\n- **Iterations 5-6**: Broad information gathering\n- **Iterations 7-8**: Targeted research\n- **Iterations 9-10**: Alternative approach\n- **Iteration 11**: Alternative Fixer KI ⭐\n\n**Lower (5-8):**\n- Pros: Faster escalation to alternative AI\n- Cons: Less information gathered first\n\n**Higher (12-15):**\n- Pros: More information before alternative AI\n- Cons: More time/cost before trying\n\n**💡 Recommended:** 11 (after all research levels)",
          "scope": "window"
        },
        "kiAutoAgent.alternativeFixer.temperature": {
          "type": "number",
          "default": 0.7,
          "minimum": 0.0,
          "maximum": 1.0,
          "markdownDescription": "🌡️ **Alternative Fixer Creativity**\n\nTemperature for alternative fixer AI:\n\n**Lower (0.0-0.5):**\n- More deterministic and consistent\n- Follows patterns closely\n- Best for: Syntax errors, known bugs\n\n**Medium (0.6-0.8):** ⭐ Recommended\n- Balance of consistency + creativity\n- Can try different approaches\n- Best for: Most bugs\n\n**Higher (0.9-1.0):**\n- More creative and exploratory\n- May try unconventional solutions\n- Best for: Stuck on unusual bugs\n\n**💡 Tip:** 0.7 gives good balance for fresh perspective",
          "scope": "window"
        },
        "kiAutoAgent.routing.strategy": {
          "type": "string",
          "enum": [
            "keyword",
            "confidence",
            "hybrid"
          ],
          "default": "hybrid",
          "markdownDescription": "🎯 **Agent Routing Strategy**\n\nHow to select which agent handles a task:\n\n**Options:**\n\n- **keyword**: Fast pattern matching (90% accuracy)\n  - Pros: Very fast, predictable, low cost\n  - Cons: Can miss edge cases\n  - Best for: Clear, well-defined tasks\n\n- **confidence**: AI-based semantic routing (95% accuracy)\n  - Pros: Handles ambiguous requests\n  - Cons: Slower, costs 1 API call per routing\n  - Best for: Complex or unclear requests\n\n- **hybrid**: Keyword + confidence fallback ⭐ Recommended\n  - Pros: Fast + accurate, best of both worlds\n  - Cons: Slightly more complex logic\n  - Best for: Production use\n\n**💡 Current v5.0:** Hybrid system with priority keywords",
          "enumDescriptions": [
            "Keyword Matching - Fast pattern-based routing",
            "Confidence Scoring - AI-based semantic routing",
            "Hybrid Approach - Keywords + confidence fallback ⭐"
          ],
          "scope": "window"
        },
        "kiAutoAgent.routing.confidenceThreshold": {
          "type": "number",
          "default": 0.8,
          "minimum": 0.5,
          "maximum": 0.95,
          "markdownDescription": "📊 **Routing Confidence Threshold**\n\nMinimum confidence (0.5-0.95) to auto-route to an agent:\n\n**Confidence Levels:**\n- **< 0.6**: Ask user to clarify\n- **0.6-0.7**: Suggest agent, ask confirmation\n- **0.8-0.9**: Auto-route with notification ⭐ Recommended\n- **> 0.9**: Silent auto-routing\n\n**Example:**\n- \"fix this bug\" → 0.95 confidence → FixerBot (auto)\n- \"improve code\" → 0.65 confidence → Ask: FixerBot or Performance?\n- \"do something\" → 0.3 confidence → Ask user to clarify\n\n**💡 Tip:** Lower = more user interaction, Higher = more automation",
          "scope": "window"
        },
        "kiAutoAgent.routing.fallbackAgent": {
          "type": "string",
          "enum": [
            "orchestrator",
            "codesmith",
            "ask-user"
          ],
          "default": "orchestrator",
          "markdownDescription": "🔀 **Fallback Agent When Routing Fails**\n\nWhich agent to use when routing confidence is too low:\n\n- **orchestrator**: Let orchestrator decide ⭐ Recommended\n  - Pros: Intelligent decomposition\n  - Cons: Extra API call\n\n- **codesmith**: Default to CodeSmith\n  - Pros: Fast, direct\n  - Cons: May not be optimal choice\n\n- **ask-user**: Show agent picker\n  - Pros: User in control\n  - Cons: Interrupts workflow\n\n**💡 Recommended:** orchestrator for production",
          "enumDescriptions": [
            "Orchestrator - Let orchestrator decompose task ⭐",
            "CodeSmith - Default implementation agent",
            "Ask User - Show agent selection dialog"
          ],
          "scope": "window"
        },
        "kiAutoAgent.routing.enableKeywordMatching": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🔤 **Enable Keyword-Based Routing**\n\nUse fast keyword matching for agent selection:\n\n**✅ Enabled (recommended):**\n- 10x faster than AI routing\n- 90% accuracy for clear requests\n- No API cost for routing\n- Priority system for ambiguous keywords\n\n**❌ Disabled:**\n- Falls back to confidence scoring\n- Slower but more accurate\n- API cost for every routing decision\n\n**💡 Current v5.0:** Hybrid system - keywords first, then confidence if needed",
          "scope": "window"
        },
        "kiAutoAgent.routing.enableSemanticMatching": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🧠 **Enable Semantic Similarity Routing**\n\nUse AI-based semantic matching as fallback:\n\n**✅ Enabled (recommended):**\n- Handles ambiguous requests\n- Better for natural language\n- Costs 1 API call per uncertain routing\n\n**❌ Disabled:**\n- Falls back to `routing.fallbackAgent` setting\n- Faster but less accurate\n- No routing API costs\n\n**💡 Works with:** `routing.strategy = hybrid` or `confidence`",
          "scope": "window"
        },
        "kiAutoAgent.monitoring.enabled": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "📊 **Enable Performance Monitoring**\n\nTrack agent performance metrics:\n\n**✅ Enabled:**\n- Agent execution times\n- Routing success rates\n- Quality scores\n- API usage statistics\n- Error rates per agent\n\n**❌ Disabled:**\n- Minimal overhead\n- No performance data\n\n**💡 View Stats:** `KI AutoAgent: Show Agent Performance`",
          "scope": "window"
        },
        "kiAutoAgent.monitoring.logAgentMetrics": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "📈 **Log Agent Metrics to File**\n\nSave detailed agent metrics to `.kiautoagent/metrics.json`:\n\n**✅ Enabled:**\n- Persistent metrics history\n- Analyze trends over time\n- Debug performance issues\n- ~1MB per 1000 requests\n\n**❌ Disabled (recommended):**\n- In-memory only\n- Lower disk usage\n\n**💡 Tip:** Enable for 1-2 weeks to analyze patterns, then disable",
          "scope": "window"
        },
        "kiAutoAgent.monitoring.trackRoutingSuccess": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🎯 **Track Routing Success Rate**\n\nMonitor how often agents are routed correctly:\n\n**Metrics Tracked:**\n- Keyword match success rate\n- Confidence score distribution\n- User corrections (when user picks different agent)\n- Fallback frequency\n\n**💡 View:** `KI AutoAgent: Show Agent Performance` → Routing tab",
          "scope": "window"
        },
        "kiAutoAgent.monitoring.alertOnFailures": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🚨 **Show Alerts on Agent Failures**\n\nDisplay notifications when agents fail:\n\n**✅ Enabled (recommended):**\n- Immediate failure notification\n- Error details in popup\n- Suggest retry or alternative agent\n\n**❌ Disabled:**\n- Silent failures\n- Errors only in logs\n\n**💡 Recommended:** Keep enabled during development",
          "scope": "window"
        },
        "kiAutoAgent.context.maxTokensPerAgent": {
          "type": "number",
          "default": 8000,
          "minimum": 1000,
          "maximum": 128000,
          "markdownDescription": "📝 **Max Context Tokens Per Agent**\n\nMaximum tokens to send to each agent:\n\n**Token Budgets:**\n- **1000-2000**: Single file tasks\n- **4000-8000**: Multi-file tasks ⭐ Recommended\n- **16000-32000**: Large codebase analysis\n- **64000-128000**: Entire project context (expensive!)\n\n**⚠️ Cost Impact:**\n- 8K tokens ≈ $0.02-0.20 per request (varies by model)\n- Higher = more context but exponentially higher cost\n\n**💡 Tip:** Start with 8K, increase only if agent needs more context",
          "scope": "window"
        },
        "kiAutoAgent.context.includeHistory": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "💬 **Include Chat History in Context**\n\nSend previous conversation to agents:\n\n**✅ Enabled (recommended):**\n- Agents remember previous context\n- Better continuity\n- Higher token usage\n\n**❌ Disabled:**\n- Each agent call is independent\n- Lower token usage\n- May lose context\n\n**💡 Controlled by:** `context.historyDepth` setting",
          "scope": "window"
        },
        "kiAutoAgent.context.historyDepth": {
          "type": "number",
          "default": 10,
          "minimum": 0,
          "maximum": 50,
          "markdownDescription": "📚 **Chat History Depth**\n\nHow many previous messages to include:\n\n- **0**: No history (stateless agents)\n- **5-10**: Recent context ⭐ Recommended\n- **20-50**: Full conversation (expensive)\n\n**Token Impact:**\n- ~100-500 tokens per message\n- 10 messages ≈ 1K-5K tokens\n\n**💡 Tip:** 10 messages = good balance between context and cost",
          "scope": "window"
        },
        "kiAutoAgent.memory.enabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "🧠 **Enable Long-Term Memory**\n\n**⚠️ EXPERIMENTAL v5.0 Feature**\n\nAllow agents to remember across sessions:\n\n**✅ Enabled:**\n- Agents learn from past interactions\n- Remember project patterns\n- Improve over time\n- Stored in `.kiautoagent/memory.db`\n\n**❌ Disabled (recommended for now):**\n- Stateless agents\n- No cross-session memory\n\n**💡 Status:** Currently experimental, use with caution",
          "scope": "window"
        },
        "kiAutoAgent.memory.storageBackend": {
          "type": "string",
          "enum": [
            "sqlite",
            "json",
            "memory"
          ],
          "default": "sqlite",
          "markdownDescription": "🗄️ **Memory Storage Backend**\n\nHow to persist agent memory:\n\n- **sqlite**: Fast, persistent, queryable ⭐ Recommended\n- **json**: Simple files, easy to inspect\n- **memory**: RAM only, lost on restart (testing)\n\n**Storage Locations:**\n- SQLite: `.kiautoagent/memory.db`\n- JSON: `.kiautoagent/memory/*.json`\n- Memory: No persistence\n\n**💡 Tip:** sqlite for production, json for debugging",
          "enumDescriptions": [
            "SQLite Database - Fast and persistent ⭐",
            "JSON Files - Easy to inspect and edit",
            "In-Memory - Testing only, no persistence"
          ],
          "scope": "window"
        },
        "kiAutoAgent.cost.trackUsage": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "💰 **Track API Usage & Costs**\n\nMonitor API token usage and estimated costs:\n\n**✅ Enabled (recommended):**\n- Real-time cost tracking\n- Per-agent cost breakdown\n- Monthly/daily summaries\n- Budget alerts\n\n**❌ Disabled:**\n- No cost visibility\n\n**💡 View:** `KI AutoAgent: Show Agent Performance` → Costs tab",
          "scope": "window"
        },
        "kiAutoAgent.cost.monthlyBudget": {
          "type": "number",
          "default": 100,
          "minimum": 0,
          "maximum": 10000,
          "markdownDescription": "💵 **Monthly Budget Limit (USD)**\n\nMaximum monthly spend on API calls:\n\n**Budget Ranges:**\n- **$0**: Unlimited (no budget tracking)\n- **$10-50**: Personal projects\n- **$100-500**: Small team ⭐ Recommended\n- **$1000+**: Enterprise usage\n\n**What Happens at Limit:**\n1. Warning at 80% usage\n2. Confirmation required at 90%\n3. Blocked at 100% (configurable)\n\n**💡 Tip:** Set realistic budget, review monthly in performance stats",
          "scope": "window"
        },
        "kiAutoAgent.cost.alertOnThreshold": {
          "type": "number",
          "default": 0.8,
          "minimum": 0.5,
          "maximum": 0.95,
          "markdownDescription": "🚨 **Budget Alert Threshold**\n\nShow warning when reaching % of monthly budget:\n\n- **0.5** (50%): Early warning\n- **0.8** (80%): Standard warning ⭐ Recommended\n- **0.9** (90%): Late warning\n\n**Alert Actions:**\n- Notification with current spend\n- Suggest switching to cheaper models\n- Option to increase budget\n\n**💡 Tip:** 0.8 gives time to adjust before hitting limit",
          "scope": "window"
        },
        "kiAutoAgent.cost.preferCheaperModels": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "💸 **Prefer Cheaper Models When Possible**\n\nAutomatically use cost-effective models:\n\n**✅ Enabled:**\n- Simple tasks → Mini models (GPT-4o-mini, Haiku)\n- Complex tasks → Full models (GPT-4o, Sonnet)\n- Can save 60-90% on API costs\n- May reduce quality for edge cases\n\n**❌ Disabled (recommended):**\n- Always use configured models\n- Consistent quality\n- Higher costs\n\n**💡 Tip:** Enable when approaching budget limit",
          "scope": "window"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack --mode development",
    "watch": "webpack --mode development --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "version:bump": "node scripts/version-bump.js",
    "version:patch": "npm run version:bump patch",
    "version:minor": "npm run version:bump minor",
    "version:major": "npm run version:bump major",
    "build": "npm run version:patch && npm run compile"
  },
  "devDependencies": {
    "@types/node": "^20.0.0",
    "@types/vscode": "^1.90.0",
    "@types/ws": "^8.18.1",
    "ts-loader": "^9.5.4",
    "typescript": "^5.0.0",
    "webpack": "^5.101.3",
    "webpack-cli": "^6.0.1",
    "ws": "^8.18.3"
  },
  "dependencies": {
    "@anthropic-ai/claude-code": "^1.0.111",
    "@anthropic-ai/sdk": "^0.24.0",
    "axios": "^1.6.0",
    "eventemitter3": "^5.0.1",
    "openai": "^4.0.0"
  },
  "versionHistory": {
    "2.1.2": {
      "date": "2025-09-12T12:41:12.116Z",
      "description": "Fix OpusArbitrator visibility and extension output display",
      "timestamp": 1757680872116
    },
    "2.1.3": {
      "date": "2025-09-12T12:55:27.134Z",
      "description": "Fix Command Palette visibility for KI AutoAgent Chat commands",
      "timestamp": 1757681727135
    },
    "2.2.2": {
      "date": "2025-09-12T15:30:00.000Z",
      "description": "Added extensive debugging code to troubleshoot agent response issues",
      "timestamp": 1757691800000
    },
    "2.2.3": {
      "date": "2025-09-12T18:15:00.000Z",
      "description": "Fixed workflow to use only existing agents - mapped missing reviewer/fixer/docu agents to codesmith",
      "timestamp": 1757701500000
    },
    "2.3.0": {
      "date": "2025-09-12T19:00:00.000Z",
      "description": "MAJOR: Enhanced Agent Configuration System - Per-agent model selection, file-based instructions, self-adapting agents, auto-learning capabilities",
      "timestamp": 1757704200000
    },
    "2.3.1": {
      "date": "2025-09-12T19:30:00.000Z",
      "description": "HOTFIX: Fixed agent registration issues and double chat entries - agents now respond correctly",
      "timestamp": 1757706000000
    },
    "2.3.2": {
      "date": "2025-09-12T20:00:00.000Z",
      "description": "DEBUG: Added extensive debug logging system to identify agent registration and chat mode issues",
      "timestamp": 1757707800000
    }
  }
}