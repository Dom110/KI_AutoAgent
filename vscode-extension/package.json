{
  "name": "ki-autoagent-vscode",
  "displayName": "KI AutoAgent",
  "description": "Universal Multi-Agent AI Development Platform for VS Code",
  "version": "3.80.84",
  "publisher": "ki-autoagent",
  "icon": "media/multi-agent-logo.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/dominikfoert/KI_AutoAgent"
  },
  "license": "MIT",
  "engines": {
    "vscode": "^1.90.0"
  },
  "categories": [
    "AI",
    "Chat",
    "Other"
  ],
  "keywords": [
    "ai",
    "chat",
    "assistant",
    "multi-agent",
    "development",
    "coding",
    "trading",
    "claude",
    "gpt",
    "anthropic",
    "openai"
  ],
  "author": "KI AutoAgent Team",
  "homepage": "https://github.com/dominikfoert/KI_AutoAgent",
  "bugs": {
    "url": "https://github.com/dominikfoert/KI_AutoAgent/issues"
  },
  "activationEvents": [
    "onStartupFinished",
    "onCommand:ki-autoagent.showChat",
    "onCommand:ki-autoagent.toggleChat",
    "onCommand:ki-autoagent.quickChat",
    "onChatParticipant:ki-autoagent.orchestrator",
    "onChatParticipant:ki-autoagent.richter",
    "onChatParticipant:ki-autoagent.architect",
    "onChatParticipant:ki-autoagent.codesmith",
    "onChatParticipant:ki-autoagent.docu",
    "onChatParticipant:ki-autoagent.reviewer",
    "onChatParticipant:ki-autoagent.fixer",
    "onChatParticipant:ki-autoagent.tradestrat",
    "onChatParticipant:ki-autoagent.research"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "chatParticipants": [
      {
        "id": "ki-autoagent.orchestrator",
        "name": "ki",
        "fullName": "KI AutoAgent Orchestrator",
        "description": "Universal AI assistant that automatically routes tasks to specialized agents",
        "isSticky": true,
        "disambiguation": [
          {
            "category": "development",
            "description": "Full-stack development assistance",
            "examples": [
              "Create a REST API with FastAPI",
              "Build a React component",
              "Implement a trading strategy"
            ]
          }
        ],
        "commands": [
          {
            "name": "task",
            "description": "Execute a development task with automatic agent selection"
          },
          {
            "name": "agents",
            "description": "Show available specialized agents"
          },
          {
            "name": "workflow",
            "description": "Create a multi-step development workflow"
          }
        ]
      },
      {
        "id": "ki-autoagent.architect",
        "name": "architect",
        "fullName": "ArchitectGPT",
        "description": "System Architecture & Design Expert powered by GPT-4o",
        "isSticky": false,
        "disambiguation": [
          {
            "category": "architecture",
            "description": "System design and architecture planning",
            "examples": [
              "Design a microservices architecture",
              "Plan a database schema",
              "Create system diagrams"
            ]
          }
        ],
        "commands": [
          {
            "name": "design",
            "description": "Create system architecture and design patterns"
          },
          {
            "name": "analyze",
            "description": "Analyze existing codebase architecture"
          },
          {
            "name": "plan",
            "description": "Create development and deployment plans"
          }
        ]
      },
      {
        "id": "ki-autoagent.codesmith",
        "name": "codesmith",
        "fullName": "CodeSmithClaude",
        "description": "Senior Python/Web Developer powered by Claude 3.5 Sonnet",
        "isSticky": false,
        "disambiguation": [
          {
            "category": "coding",
            "description": "Code implementation and optimization",
            "examples": [
              "Implement a Python class",
              "Create API endpoints",
              "Write unit tests"
            ]
          }
        ],
        "commands": [
          {
            "name": "implement",
            "description": "Implement code based on specifications"
          },
          {
            "name": "optimize",
            "description": "Optimize existing code for performance"
          },
          {
            "name": "test",
            "description": "Generate comprehensive test suites"
          }
        ]
      },
      {
        "id": "ki-autoagent.docu",
        "name": "docu",
        "fullName": "DocuBot",
        "description": "Technical Documentation Expert powered by GPT-4o",
        "isSticky": false,
        "disambiguation": [
          {
            "category": "documentation",
            "description": "Create comprehensive documentation",
            "examples": [
              "Write API documentation",
              "Create README files",
              "Generate code comments"
            ]
          }
        ],
        "commands": [
          {
            "name": "readme",
            "description": "Generate README and project documentation"
          },
          {
            "name": "api",
            "description": "Create API reference documentation"
          },
          {
            "name": "tutorial",
            "description": "Write tutorials and guides"
          }
        ]
      },
      {
        "id": "ki-autoagent.reviewer",
        "name": "reviewer",
        "fullName": "ReviewerGPT",
        "description": "Code Review & Security Expert powered by GPT-4o-mini",
        "isSticky": false,
        "disambiguation": [
          {
            "category": "quality",
            "description": "Code review and quality assurance",
            "examples": [
              "Review this function for bugs",
              "Check security vulnerabilities",
              "Analyze performance issues"
            ]
          }
        ],
        "commands": [
          {
            "name": "review",
            "description": "Perform comprehensive code review"
          },
          {
            "name": "security",
            "description": "Analyze security vulnerabilities"
          },
          {
            "name": "performance",
            "description": "Check performance and optimization opportunities"
          }
        ]
      },
      {
        "id": "ki-autoagent.fixer",
        "name": "fixer",
        "fullName": "FixerBot",
        "description": "Bug Fixing & Optimization Expert powered by Claude 3.5 Sonnet",
        "isSticky": false,
        "disambiguation": [
          {
            "category": "debugging",
            "description": "Debug and fix code issues",
            "examples": [
              "Fix this error message",
              "Debug performance issue",
              "Resolve import problems"
            ]
          }
        ],
        "commands": [
          {
            "name": "debug",
            "description": "Debug and diagnose code issues"
          },
          {
            "name": "fix",
            "description": "Fix bugs and errors"
          },
          {
            "name": "refactor",
            "description": "Refactor code for better maintainability"
          }
        ]
      },
      {
        "id": "ki-autoagent.tradestrat",
        "name": "tradestrat",
        "fullName": "TradeStrat",
        "description": "Trading Strategy Expert powered by Claude 3.5 Sonnet",
        "isSticky": false,
        "disambiguation": [
          {
            "category": "trading",
            "description": "Trading strategy development and analysis",
            "examples": [
              "Implement RON strategy",
              "Create backtesting framework",
              "Analyze risk metrics"
            ]
          }
        ],
        "commands": [
          {
            "name": "strategy",
            "description": "Develop and implement trading strategies"
          },
          {
            "name": "backtest",
            "description": "Create backtesting and validation systems"
          },
          {
            "name": "risk",
            "description": "Implement risk management and portfolio optimization"
          }
        ]
      },
      {
        "id": "ki-autoagent.research",
        "name": "research",
        "fullName": "ResearchBot",
        "description": "Research & Information Expert powered by Perplexity Pro",
        "isSticky": false,
        "disambiguation": [
          {
            "category": "research",
            "description": "Web research and information gathering",
            "examples": [
              "Research latest Python frameworks",
              "Find documentation for this library",
              "Analyze market trends"
            ]
          }
        ],
        "commands": [
          {
            "name": "search",
            "description": "Search web for current information"
          },
          {
            "name": "documentation",
            "description": "Find and analyze technical documentation"
          },
          {
            "name": "market",
            "description": "Research market trends and analysis"
          }
        ]
      },
      {
        "id": "ki-autoagent.richter",
        "name": "richter",
        "fullName": "OpusRichter",
        "description": "Supreme Quality Judge powered by Claude Opus 4.1 - Final decision maker for complex evaluations",
        "isSticky": false,
        "disambiguation": [
          {
            "category": "evaluation",
            "description": "Supreme quality judgment and final decision making",
            "examples": [
              "Judge the best architectural approach",
              "Evaluate competing solutions",
              "Make final quality assessment",
              "Resolve agent disagreements"
            ]
          }
        ],
        "commands": [
          {
            "name": "judge",
            "description": "Make supreme quality judgment on solutions or approaches"
          },
          {
            "name": "evaluate",
            "description": "Deep evaluation of complex technical decisions"
          },
          {
            "name": "resolve",
            "description": "Resolve disagreements between agents or approaches"
          },
          {
            "name": "verdict",
            "description": "Final verdict on system architecture or code quality"
          }
        ]
      }
    ],
    "commands": [
      {
        "command": "ki-autoagent.createFile",
        "title": "KI AutoAgent: Create File",
        "category": "KI AutoAgent"
      },
      {
        "command": "ki-autoagent.insertAtCursor",
        "title": "KI AutoAgent: Insert at Cursor",
        "category": "KI AutoAgent"
      },
      {
        "command": "ki-autoagent.applySuggestion",
        "title": "KI AutoAgent: Apply Suggestion",
        "category": "KI AutoAgent"
      },
      {
        "command": "ki-autoagent.showAgentStats",
        "title": "KI AutoAgent: Show Agent Statistics",
        "category": "KI AutoAgent"
      },
      {
        "command": "ki-autoagent.testClaudeCLI",
        "title": "KI AutoAgent: Test Claude CLI Integration",
        "category": "KI AutoAgent"
      },
      {
        "command": "ki-autoagent.toggleChat",
        "title": "KI AutoAgent: Toggle Chat",
        "category": "KI AutoAgent",
        "icon": "$(comment-discussion)"
      },
      {
        "command": "ki-autoagent.showChat",
        "title": "KI AutoAgent: Show Chat",
        "category": "KI AutoAgent"
      },
      {
        "command": "ki-autoagent.quickChat",
        "title": "KI AutoAgent: Quick Chat",
        "category": "KI AutoAgent"
      },
      {
        "command": "ki-autoagent.clearUnread",
        "title": "KI AutoAgent: Clear Unread Messages",
        "category": "KI AutoAgent"
      },
      {
        "command": "ki-autoagent.showHelp",
        "title": "KI AutoAgent: Show Help",
        "category": "KI AutoAgent"
      },
      {
        "command": "ki-autoagent.configureAgentModels",
        "title": "KI AutoAgent: Configure Agent Models",
        "category": "KI AutoAgent",
        "icon": "$(gear)"
      },
      {
        "command": "ki-autoagent.showAgentPerformance",
        "title": "KI AutoAgent: Show Agent Performance",
        "category": "KI AutoAgent",
        "icon": "$(pulse)"
      },
      {
        "command": "ki-autoagent.openConfigDirectory",
        "title": "KI AutoAgent: Open Configuration Directory",
        "category": "KI AutoAgent",
        "icon": "$(folder-opened)"
      },
      {
        "command": "ki-autoagent.configureIntentDetection",
        "title": "KI AutoAgent: Configure Intent Detection (When to Execute vs Explain)",
        "category": "KI AutoAgent",
        "icon": "$(settings-gear)"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "ki-autoagent.showChat",
          "when": "true"
        },
        {
          "command": "ki-autoagent.toggleChat",
          "when": "true"
        },
        {
          "command": "ki-autoagent.quickChat",
          "when": "true"
        },
        {
          "command": "ki-autoagent.showAgentStats",
          "when": "true"
        },
        {
          "command": "ki-autoagent.showHelp",
          "when": "true"
        },
        {
          "command": "ki-autoagent.configureAgentModels",
          "when": "true"
        },
        {
          "command": "ki-autoagent.showAgentPerformance",
          "when": "true"
        },
        {
          "command": "ki-autoagent.openConfigDirectory",
          "when": "true"
        },
        {
          "command": "ki-autoagent.configureIntentDetection",
          "when": "true"
        }
      ],
      "view/title": [
        {
          "command": "ki-autoagent.showChat",
          "when": "view == workbench.panel.chat",
          "group": "navigation"
        }
      ]
    },
    "configuration": {
      "title": "KI AutoAgent",
      "properties": {
        "kiAutoAgent.anthropic.apiKey": {
          "type": "string",
          "markdownDescription": "🔑 **Anthropic API Key** for Claude models (Opus, Sonnet)\n- Get your key at [console.anthropic.com](https://console.anthropic.com)",
          "scope": "application"
        },
        "kiAutoAgent.openai.apiKey": {
          "type": "string",
          "markdownDescription": "🔑 **OpenAI API Key** for GPT models (GPT-4o, GPT-4o-mini)\n- Get your key at [platform.openai.com](https://platform.openai.com)",
          "scope": "application"
        },
        "kiAutoAgent.perplexity.apiKey": {
          "type": "string",
          "markdownDescription": "🔑 **Perplexity API Key** for web research (optional)\n- Get your key at [perplexity.ai](https://perplexity.ai)",
          "scope": "application"
        },
        "kiAutoAgent.claude.serviceMode": {
          "type": "string",
          "enum": [
            "claude-code",
            "api",
            "web"
          ],
          "default": "claude-code",
          "markdownDescription": "🤖 **Claude Service Mode**\n- `claude-code`: Local CLI (install with `npm install -g @anthropic-ai/claude-code`)\n- `api`: Direct API access with Anthropic key\n- `web`: Browser proxy (deprecated)",
          "enumDescriptions": [
            "Claude Code CLI - Recommended for best performance",
            "API Mode - Direct Anthropic API access",
            "Web Mode - Legacy browser proxy (deprecated)"
          ]
        },
        "kiAutoAgent.defaultModel": {
          "type": "string",
          "default": "claude-sonnet-4",
          "enum": [
            "claude-opus-4.1",
            "claude-sonnet-4",
            "gpt-4o",
            "gpt-4o-mini"
          ],
          "markdownDescription": "🎯 **Default AI Model**\n- Opus 4.1: Supreme reasoning & conflict resolution\n- Sonnet 4: Best for coding & implementation\n- GPT-4o: Architecture & system design\n- GPT-4o Mini: Fast & cost-effective"
        },
        "kiAutoAgent.maxTokens": {
          "type": "number",
          "default": 4000,
          "minimum": 100,
          "maximum": 32000,
          "markdownDescription": "📝 **Max Tokens Per Request**\nHigher = longer responses but more cost"
        },
        "kiAutoAgent.temperature": {
          "type": "number",
          "default": 0.7,
          "minimum": 0,
          "maximum": 1,
          "markdownDescription": "🎨 **Temperature (Creativity)**\n- 0.0 = Deterministic, focused\n- 0.7 = Balanced (default)\n- 1.0 = Creative, varied"
        },
        "kiAutoAgent.enableLogging": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "📊 **Enable Debug Logging**\nShows detailed logs in Output panel"
        },
        "kiAutoAgent.autoDetectProjectType": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🔍 **Auto-Detect Project Type**\nAutomatically identifies Python, JavaScript, TypeScript, etc."
        },
        "kiAutoAgent.workspaceContext": {
          "type": "string",
          "enum": [
            "minimal",
            "standard",
            "full"
          ],
          "default": "standard",
          "markdownDescription": "📁 **Workspace Context Level**\n- `minimal`: Only current file\n- `standard`: Related files\n- `full`: Entire workspace structure",
          "enumDescriptions": [
            "Minimal - Only current file context",
            "Standard - Include related files",
            "Full - Complete workspace analysis"
          ]
        },
        "kiAutoAgent.ignorePatterns": {
          "type": "array",
          "default": [
            "node_modules",
            ".git",
            "dist",
            "build",
            "*.pyc",
            "__pycache__"
          ],
          "markdownDescription": "🚫 **Ignore Patterns**\nFiles/folders to exclude from analysis"
        },
        "kiAutoAgent.streamResponses": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "⚡ **Stream Responses**\nShow responses as they're generated"
        },
        "kiAutoAgent.showAgentThinking": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "🧠 **Show Agent Thinking**\nDisplay internal reasoning process"
        },
        "kiAutoAgent.autoSaveChat": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "💾 **Auto-Save Chat History**\nAutomatically save conversation history"
        },
        "kiAutoAgent.autoSelectAgent": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🎯 **Auto-Select Best Agent**\nAutomatically route to most suitable agent"
        },
        "kiAutoAgent.multiAgentMode": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "👥 **Multi-Agent Collaboration**\nAllow multiple agents to work together"
        },
        "kiAutoAgent.conflictResolution": {
          "type": "string",
          "enum": [
            "opus-arbitrator",
            "majority-vote",
            "first-response"
          ],
          "default": "opus-arbitrator",
          "markdownDescription": "⚖️ **Conflict Resolution Strategy**\nHow to handle conflicting agent responses",
          "enumDescriptions": [
            "Opus Arbitrator - Supreme judge decides",
            "Majority Vote - Most common answer wins",
            "First Response - Use first valid response"
          ]
        },
        "kiAutoAgent.webSearch.enabled": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🔍 **Enable Web Search**\nAllow agents to search the internet"
        },
        "kiAutoAgent.webSearch.provider": {
          "type": "string",
          "enum": [
            "perplexity",
            "tavily",
            "serp"
          ],
          "default": "perplexity",
          "markdownDescription": "🌐 **Search Provider**"
        },
        "kiAutoAgent.webSearch.maxResults": {
          "type": "number",
          "default": 5,
          "minimum": 1,
          "maximum": 20,
          "markdownDescription": "📊 **Max Search Results**"
        },
        "kiAutoAgent.cacheResponses": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "💾 **Cache AI Responses**\nCache identical requests to save API costs"
        },
        "kiAutoAgent.cacheDuration": {
          "type": "number",
          "default": 60,
          "minimum": 0,
          "maximum": 1440,
          "markdownDescription": "⏱️ **Cache Duration (minutes)**\n0 = no caching, 1440 = 24 hours"
        },
        "kiAutoAgent.historyLimit": {
          "type": "number",
          "default": 100,
          "minimum": 10,
          "maximum": 1000,
          "markdownDescription": "📚 **Chat History Limit**\nMax messages to keep in history"
        },
        "kiAutoAgent.timeout": {
          "type": "number",
          "default": 120,
          "minimum": 30,
          "maximum": 600,
          "markdownDescription": "⏱️ **Request Timeout (seconds)**\nMax time to wait for AI response"
        },
        "kiAutoAgent.retryAttempts": {
          "type": "number",
          "default": 3,
          "minimum": 0,
          "maximum": 10,
          "markdownDescription": "🔄 **Retry Attempts**\nRetries on temporary failures"
        },
        "kiAutoAgent.rateLimitDelay": {
          "type": "number",
          "default": 1000,
          "minimum": 0,
          "maximum": 10000,
          "markdownDescription": "⏸️ **Rate Limit Delay (ms)**\nDelay between rapid requests"
        },
        "kiAutoAgent.redactSecrets": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🛡️ **Redact Secrets**\nAutomatically hide API keys and passwords in outputs"
        },
        "kiAutoAgent.sandboxMode": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "🔒 **Sandbox Mode**\nRestrict code execution and file system access"
        },
        "kiAutoAgent.confirmDestructive": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "⚠️ **Confirm Destructive Actions**\nRequire confirmation for delete/overwrite operations"
        },
        "kiAutoAgent.testCommand": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🧪 **Enable Test Command**\nShow 'Test Claude CLI' command in palette"
        },
        "kiAutoAgent.verboseErrors": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "🐛 **Verbose Error Messages**\nShow detailed error information for debugging"
        },
        "kiAutoAgent.learning.enabled": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🧠 **Enable Learning System**\nAgents adapt based on successful interactions"
        },
        "kiAutoAgent.learning.adaptationThreshold": {
          "type": "number",
          "default": 0.8,
          "minimum": 0.5,
          "maximum": 0.99,
          "markdownDescription": "📊 **Learning Threshold**\nSuccess rate needed before adapting (0.8 = 80%)"
        },
        "kiAutoAgent.chat.showEmojis": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "😊 **Show Emojis**\nDisplay emojis in agent responses"
        },
        "kiAutoAgent.chat.showTimestamps": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🕐 **Show Timestamps**\nDisplay timestamps in agent responses"
        },
        "kiAutoAgent.chat.showDetailedResponses": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "📊 **Show Detailed Responses**\nShow additional details and metadata in agent responses"
        },
        "kiAutoAgent.chat.responseFormat": {
          "type": "string",
          "enum": [
            "simple",
            "detailed"
          ],
          "default": "detailed",
          "markdownDescription": "📝 **Response Format**\nChoose between simple or detailed response format"
        },
        "kiAutoAgent.chat.logLevel": {
          "type": "string",
          "enum": [
            "DEBUG",
            "INFO",
            "WARN",
            "ERROR"
          ],
          "default": "INFO",
          "markdownDescription": "🔍 **Log Level**\nMinimum log level for console output"
        },
        "kiAutoAgent.chat.fallbackMode": {
          "type": "string",
          "enum": [
            "graceful",
            "strict"
          ],
          "default": "graceful",
          "markdownDescription": "🔄 **Fallback Mode**\nHow to handle fallback scenarios"
        },
        "kiAutoAgent.agents.configuration": {
          "type": "object",
          "readOnly": true,
          "markdownDescription": "🤖 **Agent Configuration Overview**\n\n📚 Each agent has specialized instructions and models:\n\n**🎭 Workflow Coordination**\n• `OrchestratorAgent` → [orchestrator.md](file://./instructionsets/orchestrator.md)\n• Model: GPT-4o\n• Handles: Multi-agent workflows, task routing\n\n**⚖️ Conflict Resolution**\n• `OpusArbitratorAgent` → [richter.md](file://./instructionsets/richter.md)\n• Model: Claude Opus 4.1\n• Handles: Agent conflicts, final decisions\n\n**🏗️ Architecture & Design**\n• `ArchitectAgent` → [architect.md](file://./instructionsets/architect.md)\n• Model: GPT-4o\n• Handles: System design, patterns, scalability\n\n**💻 Code Implementation**\n• `CodeSmithAgent` → [codesmith.md](file://./instructionsets/codesmith.md)\n• Model: Claude Sonnet 4\n• Handles: Coding, testing, optimization\n\n**📈 Trading Strategies**\n• `TradeStratAgent` → [tradestrat.md](file://./instructionsets/tradestrat.md)\n• Model: Claude Sonnet 4\n• Handles: Trading algorithms, backtesting\n\n**🔍 Web Research**\n• `ResearchAgent` → [research.md](file://./instructionsets/research.md)\n• Model: Perplexity Sonar\n• Handles: Web search, documentation",
          "default": {
            "info": "View instruction files in ./vscode-extension/src/instructionsets/"
          }
        },
        "kiAutoAgent.agents.instructionSetsPath": {
          "type": "string",
          "default": "./vscode-extension/src/instructionsets",
          "markdownDescription": "📁 **Instruction Sets Directory**\nPath to agent instruction files",
          "scope": "window"
        },
        "kiAutoAgent.agents.showInstructions": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "📖 **Show Agent Instructions**\nDisplay which instruction set each agent uses",
          "scope": "window"
        },
        "kiAutoAgent.intentDetection.mode": {
          "type": "string",
          "enum": [
            "strict",
            "balanced",
            "relaxed"
          ],
          "default": "balanced",
          "markdownDescription": "🎯 **Intent Detection Mode**\n• **strict**: Favors classifying as tasks (less queries)\n• **balanced**: Standard detection logic\n• **relaxed**: Favors classifying as queries (less tasks)",
          "scope": "window"
        },
        "kiAutoAgent.intentDetection.queryKeywords": {
          "type": "array",
          "default": [
            "what",
            "how",
            "why",
            "when",
            "where",
            "who",
            "which",
            "explain",
            "describe",
            "tell me",
            "was",
            "wer",
            "wie",
            "warum",
            "wann",
            "wo",
            "welche",
            "erkläre"
          ],
          "markdownDescription": "❓ **Query Keywords**\nKeywords that indicate the request is likely a question/query",
          "scope": "window"
        },
        "kiAutoAgent.intentDetection.taskKeywords": {
          "type": "array",
          "default": [
            "implement",
            "create",
            "build",
            "fix",
            "update",
            "modify",
            "add",
            "remove",
            "delete",
            "write",
            "develop",
            "refactor",
            "optimize",
            "debug",
            "test",
            "deploy",
            "erstelle",
            "baue",
            "fixe",
            "aktualisiere",
            "füge hinzu",
            "lösche",
            "schreibe"
          ],
          "markdownDescription": "⚡ **Task Keywords**\nKeywords that indicate the request is likely an action/task",
          "scope": "window"
        },
        "kiAutoAgent.intentDetection.preferTaskExecution": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "🚀 **Prefer Task Execution**\nWhen uncertain, prefer executing as task rather than answering as query",
          "scope": "window"
        },
        "kiAutoAgent.intentDetection.confidenceThreshold": {
          "type": "number",
          "default": 0.7,
          "minimum": 0,
          "maximum": 1,
          "markdownDescription": "📊 **Confidence Threshold**\nMinimum confidence level (0.0-1.0) for intent classification",
          "scope": "window"
        },
        "kiAutoAgent.intentDetection.useAIClassification": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "🤖 **Use AI Classification**\nEnhance keyword-based detection with AI when confidence is low",
          "scope": "window"
        },
        "kiAutoAgent.intentDetection.debugLogging": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🐛 **Debug Logging**\nShow intent detection details in console",
          "scope": "window"
        },
        "kiAutoAgent.ai.intentClassification.enabled": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "🧠 **Enable AI Intent Classification**\nUse advanced AI-based intent classification instead of keywords",
          "scope": "window"
        },
        "kiAutoAgent.ai.intentClassification.provider": {
          "type": "string",
          "enum": [
            "gpt-4",
            "claude",
            "auto"
          ],
          "default": "auto",
          "markdownDescription": "🤖 **AI Provider**\nWhich AI model to use for intent classification\n• **auto**: Automatically select best available\n• **gpt-4**: Use OpenAI GPT-4\n• **claude**: Use Anthropic Claude",
          "scope": "window"
        },
        "kiAutoAgent.ai.intentClassification.confidenceThreshold": {
          "type": "number",
          "default": 0.7,
          "minimum": 0.3,
          "maximum": 0.95,
          "markdownDescription": "📊 **AI Confidence Threshold**\nMinimum confidence (0.3-0.95) for automatic execution\n• <0.6: Always ask for clarification\n• 0.6-0.8: May ask for confirmation\n• >0.8: Execute without confirmation",
          "scope": "window"
        },
        "kiAutoAgent.ai.intentClassification.requireExplicitConfirmation": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "✅ **Require Explicit Confirmation**\nAlways ask for confirmation even with high confidence",
          "scope": "window"
        },
        "kiAutoAgent.ai.intentClassification.learnFromCorrections": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "📚 **Learn from Corrections**\nImprove classification accuracy by learning from user corrections",
          "scope": "window"
        },
        "kiAutoAgent.ai.intentClassification.multiModelConsensus": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "🤝 **Multi-Model Consensus**\nUse multiple AI models for critical decisions (slower but more accurate)",
          "scope": "window"
        },
        "kiAutoAgent.ai.intentClassification.detectSarcasm": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "😏 **Detect Sarcasm**\nDetect and handle sarcastic responses appropriately",
          "scope": "window"
        },
        "kiAutoAgent.ai.intentClassification.openaiApiKey": {
          "type": "string",
          "markdownDescription": "🔑 **OpenAI API Key for Classification**\nOptional dedicated key for intent classification (uses main key if not set)",
          "scope": "application"
        },
        "kiAutoAgent.ai.intentClassification.anthropicApiKey": {
          "type": "string",
          "markdownDescription": "🔑 **Anthropic API Key for Classification**\nOptional dedicated key for intent classification (uses main key if not set)",
          "scope": "application"
        },
        "kiAutoAgent.ai.intentClassification.cacheDuration": {
          "type": "number",
          "default": 5,
          "minimum": 0,
          "maximum": 60,
          "markdownDescription": "⏱️ **Cache Duration (seconds)**\nHow long to cache classification results (0 to disable)",
          "scope": "window"
        },
        "kiAutoAgent.history.maxConversations": {
          "type": "number",
          "default": 50,
          "minimum": 1,
          "maximum": 200,
          "markdownDescription": "📚 **Max Conversations**\nMaximum number of conversations to keep in history",
          "scope": "window"
        },
        "kiAutoAgent.history.maxMessagesPerConversation": {
          "type": "number",
          "default": 100,
          "minimum": 10,
          "maximum": 500,
          "markdownDescription": "💬 **Max Messages Per Conversation**\nMaximum messages to keep per conversation",
          "scope": "window"
        },
        "kiAutoAgent.history.autoSave": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "💾 **Auto Save**\nAutomatically save conversation history",
          "scope": "window"
        },
        "kiAutoAgent.ui.compactMode": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "📦 **Compact Mode**\nStart chat in compact message view",
          "scope": "window"
        },
        "kiAutoAgent.validationWorkflow.enabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "🔍 **Enable Validation Workflow**\nAutomatically validate implementations with ReviewerGPT after each task",
          "scope": "window"
        },
        "kiAutoAgent.validationWorkflow.maxIterations": {
          "type": "number",
          "default": 3,
          "minimum": 1,
          "maximum": 10,
          "markdownDescription": "🔄 **Max Validation Iterations**\nMaximum number of validation/fix cycles to perform",
          "scope": "window"
        },
        "kiAutoAgent.validationWorkflow.agents": {
          "type": "array",
          "default": [
            "reviewer",
            "fixerbot"
          ],
          "markdownDescription": "👥 **Validation Agents**\nAgents to use in the validation workflow",
          "scope": "window"
        },
        "kiAutoAgent.validationWorkflow.autoFix": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "🔧 **Auto-Fix Issues**\nAutomatically attempt to fix issues found during validation with FixerBot",
          "scope": "window"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack --mode development",
    "watch": "webpack --mode development --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "version:bump": "node scripts/version-bump.js",
    "version:patch": "npm run version:bump patch",
    "version:minor": "npm run version:bump minor",
    "version:major": "npm run version:bump major",
    "build": "npm run version:patch && npm run compile"
  },
  "devDependencies": {
    "@types/node": "^20.0.0",
    "@types/vscode": "^1.90.0",
    "@types/ws": "^8.18.1",
    "ts-loader": "^9.5.4",
    "typescript": "^5.0.0",
    "webpack": "^5.101.3",
    "webpack-cli": "^6.0.1",
    "ws": "^8.18.3"
  },
  "dependencies": {
    "@anthropic-ai/claude-code": "^1.0.111",
    "@anthropic-ai/sdk": "^0.24.0",
    "axios": "^1.6.0",
    "eventemitter3": "^5.0.1",
    "openai": "^4.0.0"
  },
  "versionHistory": {
    "2.1.2": {
      "date": "2025-09-12T12:41:12.116Z",
      "description": "Fix OpusArbitrator visibility and extension output display",
      "timestamp": 1757680872116
    },
    "2.1.3": {
      "date": "2025-09-12T12:55:27.134Z",
      "description": "Fix Command Palette visibility for KI AutoAgent Chat commands",
      "timestamp": 1757681727135
    },
    "2.2.2": {
      "date": "2025-09-12T15:30:00.000Z",
      "description": "Added extensive debugging code to troubleshoot agent response issues",
      "timestamp": 1757691800000
    },
    "2.2.3": {
      "date": "2025-09-12T18:15:00.000Z",
      "description": "Fixed workflow to use only existing agents - mapped missing reviewer/fixer/docu agents to codesmith",
      "timestamp": 1757701500000
    },
    "2.3.0": {
      "date": "2025-09-12T19:00:00.000Z",
      "description": "MAJOR: Enhanced Agent Configuration System - Per-agent model selection, file-based instructions, self-adapting agents, auto-learning capabilities",
      "timestamp": 1757704200000
    },
    "2.3.1": {
      "date": "2025-09-12T19:30:00.000Z",
      "description": "HOTFIX: Fixed agent registration issues and double chat entries - agents now respond correctly",
      "timestamp": 1757706000000
    },
    "2.3.2": {
      "date": "2025-09-12T20:00:00.000Z",
      "description": "DEBUG: Added extensive debug logging system to identify agent registration and chat mode issues",
      "timestamp": 1757707800000
    }
  }
}
