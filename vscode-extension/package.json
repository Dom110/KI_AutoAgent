{
  "name": "ki-autoagent-vscode",
  "displayName": "KI AutoAgent",
  "description": "Universal Multi-Agent AI Development Platform for VS Code",
  "version": "2.1.2",
  "publisher": "ki-autoagent",
  "icon": "media/multi-agent-logo.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/dominikfoert/KI_AutoAgent"
  },
  "license": "MIT",
  "engines": {
    "vscode": "^1.90.0"
  },
  "categories": [
    "AI",
    "Chat",
    "Other"
  ],
  "keywords": [
    "ai",
    "chat",
    "assistant",
    "multi-agent",
    "development",
    "coding",
    "trading",
    "claude",
    "gpt",
    "anthropic",
    "openai"
  ],
  "author": "KI AutoAgent Team",
  "homepage": "https://github.com/dominikfoert/KI_AutoAgent",
  "bugs": {
    "url": "https://github.com/dominikfoert/KI_AutoAgent/issues"
  },
  "activationEvents": [
    "onStartupFinished",
    "onCommand:ki-autoagent.showChat",
    "onChatParticipant:ki-autoagent.architect",
    "onChatParticipant:ki-autoagent.codesmith",
    "onChatParticipant:ki-autoagent.docu",
    "onChatParticipant:ki-autoagent.reviewer",
    "onChatParticipant:ki-autoagent.fixer",
    "onChatParticipant:ki-autoagent.tradestrat",
    "onChatParticipant:ki-autoagent.research",
    "onChatParticipant:ki-autoagent.richter",
    "onChatParticipant:ki-autoagent.orchestrator"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "chatParticipants": [
      {
        "id": "ki-autoagent.orchestrator",
        "name": "ki",
        "fullName": "KI AutoAgent Orchestrator",
        "description": "Universal AI assistant that automatically routes tasks to specialized agents",
        "isSticky": true,
        "disambiguation": [
          {
            "category": "development",
            "description": "Full-stack development assistance",
            "examples": [
              "Create a REST API with FastAPI",
              "Build a React component",
              "Implement a trading strategy"
            ]
          }
        ],
        "commands": [
          {
            "name": "task",
            "description": "Execute a development task with automatic agent selection"
          },
          {
            "name": "agents",
            "description": "Show available specialized agents"
          },
          {
            "name": "workflow",
            "description": "Create a multi-step development workflow"
          }
        ]
      },
      {
        "id": "ki-autoagent.architect",
        "name": "architect",
        "fullName": "ArchitectGPT",
        "description": "System Architecture & Design Expert powered by GPT-4o",
        "isSticky": false,
        "disambiguation": [
          {
            "category": "architecture",
            "description": "System design and architecture planning",
            "examples": [
              "Design a microservices architecture",
              "Plan a database schema",
              "Create system diagrams"
            ]
          }
        ],
        "commands": [
          {
            "name": "design",
            "description": "Create system architecture and design patterns"
          },
          {
            "name": "analyze",
            "description": "Analyze existing codebase architecture"
          },
          {
            "name": "plan",
            "description": "Create development and deployment plans"
          }
        ]
      },
      {
        "id": "ki-autoagent.codesmith",
        "name": "codesmith",
        "fullName": "CodeSmithClaude",
        "description": "Senior Python/Web Developer powered by Claude 3.5 Sonnet",
        "isSticky": false,
        "disambiguation": [
          {
            "category": "coding",
            "description": "Code implementation and optimization",
            "examples": [
              "Implement a Python class",
              "Create API endpoints",
              "Write unit tests"
            ]
          }
        ],
        "commands": [
          {
            "name": "implement",
            "description": "Implement code based on specifications"
          },
          {
            "name": "optimize",
            "description": "Optimize existing code for performance"
          },
          {
            "name": "test",
            "description": "Generate comprehensive test suites"
          }
        ]
      },
      {
        "id": "ki-autoagent.docu",
        "name": "docu",
        "fullName": "DocuBot",
        "description": "Technical Documentation Expert powered by GPT-4o",
        "isSticky": false,
        "disambiguation": [
          {
            "category": "documentation",
            "description": "Create comprehensive documentation",
            "examples": [
              "Write API documentation",
              "Create README files",
              "Generate code comments"
            ]
          }
        ],
        "commands": [
          {
            "name": "readme",
            "description": "Generate README and project documentation"
          },
          {
            "name": "api",
            "description": "Create API reference documentation"
          },
          {
            "name": "tutorial",
            "description": "Write tutorials and guides"
          }
        ]
      },
      {
        "id": "ki-autoagent.reviewer",
        "name": "reviewer",
        "fullName": "ReviewerGPT",
        "description": "Code Review & Security Expert powered by GPT-4o-mini",
        "isSticky": false,
        "disambiguation": [
          {
            "category": "quality",
            "description": "Code review and quality assurance",
            "examples": [
              "Review this function for bugs",
              "Check security vulnerabilities",
              "Analyze performance issues"
            ]
          }
        ],
        "commands": [
          {
            "name": "review",
            "description": "Perform comprehensive code review"
          },
          {
            "name": "security",
            "description": "Analyze security vulnerabilities"
          },
          {
            "name": "performance",
            "description": "Check performance and optimization opportunities"
          }
        ]
      },
      {
        "id": "ki-autoagent.fixer",
        "name": "fixer",
        "fullName": "FixerBot",
        "description": "Bug Fixing & Optimization Expert powered by Claude 3.5 Sonnet",
        "isSticky": false,
        "disambiguation": [
          {
            "category": "debugging",
            "description": "Debug and fix code issues",
            "examples": [
              "Fix this error message",
              "Debug performance issue",
              "Resolve import problems"
            ]
          }
        ],
        "commands": [
          {
            "name": "debug",
            "description": "Debug and diagnose code issues"
          },
          {
            "name": "fix",
            "description": "Fix bugs and errors"
          },
          {
            "name": "refactor",
            "description": "Refactor code for better maintainability"
          }
        ]
      },
      {
        "id": "ki-autoagent.tradestrat",
        "name": "tradestrat",
        "fullName": "TradeStrat",
        "description": "Trading Strategy Expert powered by Claude 3.5 Sonnet",
        "isSticky": false,
        "disambiguation": [
          {
            "category": "trading",
            "description": "Trading strategy development and analysis",
            "examples": [
              "Implement RON strategy",
              "Create backtesting framework",
              "Analyze risk metrics"
            ]
          }
        ],
        "commands": [
          {
            "name": "strategy",
            "description": "Develop and implement trading strategies"
          },
          {
            "name": "backtest",
            "description": "Create backtesting and validation systems"
          },
          {
            "name": "risk",
            "description": "Implement risk management and portfolio optimization"
          }
        ]
      },
      {
        "id": "ki-autoagent.research",
        "name": "research",
        "fullName": "ResearchBot",
        "description": "Research & Information Expert powered by Perplexity Pro",
        "isSticky": false,
        "disambiguation": [
          {
            "category": "research",
            "description": "Web research and information gathering",
            "examples": [
              "Research latest Python frameworks",
              "Find documentation for this library",
              "Analyze market trends"
            ]
          }
        ],
        "commands": [
          {
            "name": "search",
            "description": "Search web for current information"
          },
          {
            "name": "documentation",
            "description": "Find and analyze technical documentation"
          },
          {
            "name": "market",
            "description": "Research market trends and analysis"
          }
        ]
      },
      {
        "id": "ki-autoagent.richter",
        "name": "richter",
        "fullName": "OpusRichter",
        "description": "Supreme Quality Judge powered by Claude Opus 4.1 - Final decision maker for complex evaluations",
        "isSticky": false,
        "disambiguation": [
          {
            "category": "evaluation",
            "description": "Supreme quality judgment and final decision making",
            "examples": [
              "Judge the best architectural approach",
              "Evaluate competing solutions",
              "Make final quality assessment",
              "Resolve agent disagreements"
            ]
          }
        ],
        "commands": [
          {
            "name": "judge",
            "description": "Make supreme quality judgment on solutions or approaches"
          },
          {
            "name": "evaluate",
            "description": "Deep evaluation of complex technical decisions"
          },
          {
            "name": "resolve",
            "description": "Resolve disagreements between agents or approaches"
          },
          {
            "name": "verdict",
            "description": "Final verdict on system architecture or code quality"
          }
        ]
      }
    ],
    "commands": [
      {
        "command": "ki-autoagent.createFile",
        "title": "Create File"
      },
      {
        "command": "ki-autoagent.insertAtCursor",
        "title": "Insert at Cursor"
      },
      {
        "command": "ki-autoagent.applySuggestion",
        "title": "Apply Suggestion"
      },
      {
        "command": "ki-autoagent.showAgentStats",
        "title": "Show Agent Statistics"
      },
      {
        "command": "ki-autoagent.toggleChat",
        "title": "Toggle KI AutoAgent Chat",
        "icon": "$(comment-discussion)"
      },
      {
        "command": "ki-autoagent.showChat",
        "title": "Show KI AutoAgent Chat"
      },
      {
        "command": "ki-autoagent.quickChat",
        "title": "Quick Chat with KI AutoAgent"
      },
      {
        "command": "ki-autoagent.clearUnread",
        "title": "Clear Unread Messages"
      }
    ],
    "configuration": {
      "title": "KI AutoAgent",
      "properties": {
        "kiAutoAgent.openai.apiKey": {
          "type": "string",
          "description": "OpenAI API Key for GPT models",
          "scope": "application"
        },
        "kiAutoAgent.anthropic.apiKey": {
          "type": "string",
          "description": "Anthropic API Key for Claude models",
          "scope": "application"
        },
        "kiAutoAgent.perplexity.apiKey": {
          "type": "string",
          "description": "Perplexity API Key for research",
          "scope": "application"
        },
        "kiAutoAgent.defaultModel": {
          "type": "string",
          "default": "claude-sonnet-4",
          "enum": [
            "claude-opus-4.1",
            "claude-sonnet-4",
            "claude-3.5-sonnet",
            "gpt-4o",
            "gpt-4o-mini"
          ],
          "description": "Default AI model to use - Claude Opus 4.1 (Supreme Judge), Sonnet 4 (Best Coder), GPT-4o (Architect)"
        },
        "kiAutoAgent.enableLogging": {
          "type": "boolean",
          "default": true,
          "description": "Enable detailed logging for debugging"
        },
        "kiAutoAgent.maxTokens": {
          "type": "number",
          "default": 4000,
          "minimum": 100,
          "maximum": 32000,
          "description": "Maximum tokens per AI request"
        },
        "kiAutoAgent.webAccess.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable web access for research and real-time information"
        },
        "kiAutoAgent.webAccess.searchEngine": {
          "type": "string",
          "default": "perplexity",
          "enum": [
            "perplexity",
            "tavily",
            "serp",
            "custom"
          ],
          "description": "Search engine to use for web research"
        },
        "kiAutoAgent.webAccess.maxResults": {
          "type": "number",
          "default": 5,
          "minimum": 1,
          "maximum": 20,
          "description": "Maximum number of search results to process"
        },
        "kiAutoAgent.tavily.apiKey": {
          "type": "string",
          "description": "Tavily API Key for web search",
          "scope": "application"
        },
        "kiAutoAgent.serp.apiKey": {
          "type": "string",
          "description": "SERP API Key for Google search",
          "scope": "application"
        },
        "kiAutoAgent.customSearch.endpoint": {
          "type": "string",
          "description": "Custom search API endpoint URL",
          "scope": "application"
        },
        "kiAutoAgent.customSearch.apiKey": {
          "type": "string",
          "description": "Custom search API key",
          "scope": "application"
        },
        "kiAutoAgent.serviceMode": {
          "type": "string",
          "enum": [
            "api",
            "web"
          ],
          "default": "web",
          "description": "Choose service mode: 'api' for API key access, 'web' for Claude Pro web session"
        },
        "kiAutoAgent.claudeWeb.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable Claude Web integration (uses Claude Pro account via browser session)"
        },
        "kiAutoAgent.claudeWeb.serverUrl": {
          "type": "string",
          "default": "http://localhost:8000",
          "description": "Claude Web Proxy server URL (connects to your Claude Pro account)"
        },
        "kiAutoAgent.claudeWeb.autoStart": {
          "type": "boolean",
          "default": false,
          "description": "Automatically start Claude Web Proxy server when extension activates"
        },
        "kiAutoAgent.claudeWeb.planType": {
          "type": "string",
          "enum": [
            "pro",
            "max"
          ],
          "default": "pro",
          "description": "Claude plan type: 'pro' for Claude Pro, 'max' for Claude Max (higher rate limits)"
        },
        "kiAutoAgent.chat.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable the multi-agent chat interface"
        },
        "kiAutoAgent.chat.defaultMode": {
          "type": "string",
          "default": "auto",
          "enum": [
            "auto",
            "single",
            "workflow"
          ],
          "description": "Default chat mode - auto for intelligent routing, single for direct agent chat, workflow for multi-agent collaboration"
        },
        "kiAutoAgent.chat.showAgentCommunication": {
          "type": "boolean",
          "default": true,
          "description": "Show inter-agent communication in workflow mode"
        },
        "kiAutoAgent.chat.autoCollapseLongMessages": {
          "type": "boolean",
          "default": true,
          "description": "Automatically make long messages collapsible"
        },
        "kiAutoAgent.chat.messageCollapseThreshold": {
          "type": "number",
          "default": 500,
          "minimum": 100,
          "maximum": 2000,
          "description": "Number of characters before a message becomes collapsible"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack --mode development",
    "watch": "webpack --mode development --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "version:bump": "node scripts/version-bump.js",
    "version:patch": "npm run version:bump patch",
    "version:minor": "npm run version:bump minor",
    "version:major": "npm run version:bump major",
    "build": "npm run version:patch && npm run compile"
  },
  "devDependencies": {
    "@types/node": "^20.0.0",
    "@types/vscode": "^1.90.0",
    "ts-loader": "^9.5.4",
    "typescript": "^5.0.0",
    "webpack": "^5.101.3",
    "webpack-cli": "^6.0.1"
  },
  "dependencies": {
    "@anthropic-ai/claude-code": "^1.0.111",
    "@anthropic-ai/sdk": "^0.24.0",
    "axios": "^1.6.0",
    "openai": "^4.0.0"
  },
  "versionHistory": {
    "2.1.2": {
      "date": "2025-09-12T12:41:12.116Z",
      "description": "Fix OpusArbitrator visibility and extension output display",
      "timestamp": 1757680872116
    }
  }
}
