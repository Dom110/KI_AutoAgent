{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://ki-autoagent-vscode/external commonjs \"ws\"","webpack://ki-autoagent-vscode/./src/config/modelSettings.ts","webpack://ki-autoagent-vscode/./src/extension.ts","webpack://ki-autoagent-vscode/external commonjs \"vscode\"","webpack://ki-autoagent-vscode/external node-commonjs \"events\"","webpack://ki-autoagent-vscode/./src/backend/BackendClient.ts","webpack://ki-autoagent-vscode/./src/ui/MultiAgentChatPanel.ts","webpack://ki-autoagent-vscode/webpack/bootstrap","webpack://ki-autoagent-vscode/webpack/startup"],"sourcesContent":["module.exports = require(\"ws\");","/**\n * Model Configuration Settings for VS Code Extension\n * Manages dynamic AI model selection and discovery\n */\n\nimport * as vscode from 'vscode';\nimport { BackendClient } from '../backend/BackendClient';\n\nexport interface ModelConfig {\n    provider: string;\n    models: string[];\n    latest: string[];\n    recommended: {\n        general: string;\n        code: string;\n        fast: string;\n        reasoning: string;\n    };\n    descriptions?: Array<{\n        id: string;\n        name: string;\n        tier: string;\n        bestFor: string;\n        pros: string[];\n        cons: string[];\n        costPerMToken: {\n            input: number;\n            output: number;\n        };\n    }>;\n}\n\nexport class ModelSettingsManager {\n    private static instance: ModelSettingsManager;\n    private backendClient: BackendClient;\n    private cachedModels: Map<string, ModelConfig> = new Map();\n\n    private constructor(backendClient: BackendClient) {\n        this.backendClient = backendClient;\n    }\n\n    static getInstance(backendClient: BackendClient): ModelSettingsManager {\n        if (!ModelSettingsManager.instance) {\n            ModelSettingsManager.instance = new ModelSettingsManager(backendClient);\n        }\n        return ModelSettingsManager.instance;\n    }\n\n    /**\n     * Fetch available models from backend and update settings\n     */\n    async refreshAvailableModels(): Promise<void> {\n        try {\n            // Fetch all available models\n            const response = await fetch(`http://${this.backendClient.getBackendUrl()}/api/models`);\n            const allModels = await response.json();\n\n            // Fetch details for each provider\n            for (const provider of ['openai', 'anthropic', 'perplexity']) {\n                const providerResponse = await fetch(`http://${this.backendClient.getBackendUrl()}/api/models/${provider}`);\n                const providerData = await providerResponse.json() as ModelConfig;\n                this.cachedModels.set(provider, providerData);\n            }\n\n            // Update VS Code settings schema dynamically\n            await this.updateSettingsSchema();\n\n            const modelData = allModels as Record<string, any>;\n            vscode.window.showInformationMessage(`✅ Model discovery complete! Found models from ${Object.keys(modelData).length} providers`);\n        } catch (error) {\n            console.error('Failed to refresh models:', error);\n            vscode.window.showWarningMessage('⚠️ Failed to discover AI models. Using defaults.');\n        }\n    }\n\n    /**\n     * Discover models with rich descriptions on startup\n     * Differentiates GPT (15), Claude (5), Perplexity (5)\n     */\n    async discoverModelsOnStartup(): Promise<void> {\n        try {\n            console.log('🔍 Discovering available AI models with descriptions...');\n\n            // Fetch model descriptions from backend\n            const response = await fetch(`http://${this.backendClient.getBackendUrl()}/api/models/descriptions`);\n\n            if (!response.ok) {\n                // v6.0.0: Model discovery endpoint not available in integrated server\n                // This is expected - just use defaults silently\n                if (response.status === 404) {\n                    console.log('ℹ️  Model discovery not available in v6 backend (using defaults)');\n                    return;\n                }\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n\n            const descriptions = await response.json() as any;\n\n            // Store in cache with rich metadata\n            this.cachedModels.clear();\n            for (const [provider, data] of Object.entries(descriptions)) {\n                const providerData = data as any;\n                this.cachedModels.set(provider, {\n                    provider,\n                    models: providerData.models.map((m: any) => m.id),\n                    latest: providerData.models.slice(0, 3).map((m: any) => m.id),\n                    recommended: providerData.recommended,\n                    descriptions: providerData.models // Full descriptions with pros/cons\n                });\n            }\n\n            console.log(`✅ Discovered ${descriptions.openai.total} GPT models, ${descriptions.anthropic.total} Claude models, ${descriptions.perplexity.total} Perplexity models`);\n\n            // Show notification with summary\n            vscode.window.showInformationMessage(\n                `🤖 Model Discovery Complete!\\n` +\n                `• ${descriptions.openai.total} GPT models (incl. Realtime, o1)\\n` +\n                `• ${descriptions.anthropic.total} Claude models (Opus, Sonnet)\\n` +\n                `• ${descriptions.perplexity.total} Perplexity models (Research)`\n            );\n\n        } catch (error) {\n            // v6.0.0: Silently use defaults if backend doesn't support model discovery\n            console.log('ℹ️  Model discovery not available (using defaults)');\n            // Don't show warning - this is expected in v6\n        }\n    }\n\n    /**\n     * Show rich model picker with descriptions, pros/cons, and cost\n     */\n    async showRichModelPicker(provider: string, agentId?: string): Promise<string | undefined> {\n        const modelData = this.cachedModels.get(provider);\n\n        // If no cached data, discover first\n        if (!modelData || !modelData.descriptions) {\n            await this.discoverModelsOnStartup();\n            const refreshedData = this.cachedModels.get(provider);\n            if (!refreshedData || !refreshedData.descriptions) {\n                vscode.window.showWarningMessage(`No models available for ${provider}`);\n                return undefined;\n            }\n            return this.showRichModelPicker(provider, agentId);\n        }\n\n        // Build rich quick pick items\n        const items = modelData.descriptions.map((model: any) => {\n            const costInfo = `${model.costPerMToken.input}/${model.costPerMToken.output} $/M tokens`;\n            const prosText = model.pros.join(', ');\n            const consText = model.cons.join(', ');\n\n            return {\n                label: `$(star-full) ${model.name}`,\n                description: `${model.tier} • ${costInfo}`,\n                detail: `✅ Best for: ${model.bestFor}\\n` +\n                        `👍 Pros: ${prosText}\\n` +\n                        `👎 Cons: ${consText}`,\n                model: model.id\n            };\n        });\n\n        // Add recommended badge\n        if (modelData.recommended) {\n            const recommendedIds = Object.values(modelData.recommended);\n            items.forEach((item: { label: string; description: string; detail: string; model: string }) => {\n                if (recommendedIds.includes(item.model)) {\n                    item.label = `⭐ ${item.label} (Recommended)`;\n                }\n            });\n        }\n\n        const selected = await vscode.window.showQuickPick(items, {\n            placeHolder: agentId ?\n                `Select model for ${agentId}` :\n                `Select ${provider} model`,\n            title: `${provider.toUpperCase()} Model Selection`,\n            matchOnDescription: true,\n            matchOnDetail: true\n        });\n\n        return selected ? (selected as any).model : undefined;\n    }\n\n    /**\n     * Store discovered models for dropdown options\n     * NOTE: Does NOT automatically update user settings - user must select manually\n     */\n    private async updateSettingsSchema(): Promise<void> {\n        // Just cache the discovered models for dropdown options\n        // DO NOT automatically update user settings\n\n        const openaiModels = this.cachedModels.get('openai');\n        const anthropicModels = this.cachedModels.get('anthropic');\n        const perplexityModels = this.cachedModels.get('perplexity');\n\n        // Log available models for user information\n        if (openaiModels && openaiModels.latest.length > 0) {\n            console.log(`OpenAI models available: ${openaiModels.latest.join(', ')}`);\n        }\n\n        if (anthropicModels && anthropicModels.latest.length > 0) {\n            console.log(`Anthropic models available: ${anthropicModels.latest.join(', ')}`);\n        }\n\n        if (perplexityModels && perplexityModels.latest.length > 0) {\n            console.log(`Perplexity models available: ${perplexityModels.latest.join(', ')}`);\n        }\n\n        // The discovered models are now cached and can be used for dropdown options\n        // User must manually select them in VS Code settings\n    }\n\n    /**\n     * Get model selection for a specific agent\n     */\n    getAgentModel(agentName: string): string {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent.models');\n\n        // Map agent names to config keys\n        const agentModelMap: { [key: string]: string } = {\n            'architect': config.get('openai.architect') || 'gpt-4o-2024-11-20',\n            'orchestrator': config.get('openai.orchestrator') || 'gpt-4o-2024-11-20',\n            'docubot': config.get('openai.docubot') || 'gpt-4o-2024-11-20',\n            'reviewer': config.get('openai.reviewer') || 'gpt-4o-mini-2024-07-18',\n            'performancebot': config.get('openai.performancebot') || 'gpt-4o-2024-11-20',\n            'codesmith': config.get('anthropic.codesmith') || 'claude-3.5-sonnet-20241022',\n            'fixer': config.get('anthropic.fixer') || 'claude-3.5-sonnet-20241022',\n            'tradestrat': config.get('anthropic.tradestrat') || 'claude-3.5-sonnet-20241022',\n            'opus': config.get('anthropic.opus') || 'claude-3-opus-20240229',\n            'research': config.get('perplexity.research') || 'llama-3.1-sonar-huge-128k-online'\n        };\n\n        return agentModelMap[agentName.toLowerCase()] || 'gpt-4o-2024-11-20';\n    }\n\n    /**\n     * Show model selection quick pick\n     */\n    async showModelSelectionPicker(provider: string): Promise<string | undefined> {\n        const modelConfig = this.cachedModels.get(provider);\n        if (!modelConfig || modelConfig.models.length === 0) {\n            await this.refreshAvailableModels();\n        }\n\n        const models = this.cachedModels.get(provider)?.models || [];\n        if (models.length === 0) {\n            vscode.window.showWarningMessage(`No models available for ${provider}`);\n            return undefined;\n        }\n\n        const items = models.map(model => ({\n            label: model,\n            description: this.getModelDescription(model),\n            detail: this.isRecommended(provider, model) ? '⭐ Recommended' : undefined\n        }));\n\n        const selected = await vscode.window.showQuickPick(items, {\n            placeHolder: `Select a ${provider} model`,\n            title: `${provider.toUpperCase()} Model Selection`\n        });\n\n        return selected?.label;\n    }\n\n    private getModelDescription(model: string): string {\n        // Provide descriptions for common models\n        if (model.includes('gpt-5')) return '🚀 Latest GPT-5 model';\n        if (model.includes('gpt-4o')) return '⚡ Optimized GPT-4';\n        if (model.includes('gpt-4')) return '🧠 GPT-4 model';\n        if (model.includes('mini')) return '💨 Fast, lightweight model';\n        if (model.includes('opus')) return '🎭 Most capable Claude model';\n        if (model.includes('sonnet')) return '🎵 Balanced Claude model';\n        if (model.includes('haiku')) return '⚡ Fast Claude model';\n        if (model.includes('huge')) return '🔍 Most capable search model';\n        if (model.includes('large')) return '📊 Large search model';\n        if (model.includes('small')) return '💨 Fast search model';\n        return '🤖 AI Model';\n    }\n\n    private isRecommended(provider: string, model: string): boolean {\n        const config = this.cachedModels.get(provider);\n        if (!config) return false;\n\n        return Object.values(config.recommended).includes(model);\n    }\n\n    /**\n     * Register commands for model management\n     */\n    registerCommands(context: vscode.ExtensionContext): void {\n        // Command to refresh models\n        context.subscriptions.push(\n            vscode.commands.registerCommand('ki-autoagent.refreshModels', async () => {\n                await vscode.window.withProgress({\n                    location: vscode.ProgressLocation.Notification,\n                    title: \"Discovering AI Models\",\n                    cancellable: false\n                }, async (progress) => {\n                    progress.report({ message: \"Querying API endpoints...\" });\n                    await this.discoverModelsOnStartup();\n                });\n            })\n        );\n\n        // Command to configure agent models (per-agent selection)\n        context.subscriptions.push(\n            vscode.commands.registerCommand('ki-autoagent.configureAgentModels', async () => {\n                // Show agent picker first\n                const agents = [\n                    { label: '🎯 Orchestrator', id: 'orchestrator', provider: 'openai' },\n                    { label: '🏗️ Architect', id: 'architect', provider: 'openai' },\n                    { label: '💻 CodeSmith', id: 'codesmith', provider: 'anthropic' },\n                    { label: '🔍 Reviewer', id: 'reviewer', provider: 'openai' },\n                    { label: '🔧 Fixer', id: 'fixer', provider: 'anthropic' },\n                    { label: '📝 DocBot', id: 'docubot', provider: 'openai' },\n                    { label: '🔬 Research', id: 'research', provider: 'perplexity' },\n                    { label: '📈 TradeStrat', id: 'tradestrat', provider: 'anthropic' },\n                    { label: '⚖️ OpusArbitrator', id: 'opus', provider: 'anthropic' },\n                    { label: '⚡ Performance', id: 'performancebot', provider: 'openai' }\n                ];\n\n                const selectedAgent = await vscode.window.showQuickPick(agents, {\n                    placeHolder: 'Select agent to configure model',\n                    title: 'Agent Model Configuration'\n                });\n\n                if (!selectedAgent) return;\n\n                // Show rich model picker for that agent's provider\n                const model = await this.showRichModelPicker(\n                    selectedAgent.provider,\n                    selectedAgent.id\n                );\n\n                if (model) {\n                    const config = vscode.workspace.getConfiguration('kiAutoAgent.models');\n                    await config.update(\n                        `${selectedAgent.provider}.${selectedAgent.id}`,\n                        model,\n                        vscode.ConfigurationTarget.Global\n                    );\n\n                    vscode.window.showInformationMessage(\n                        `✅ ${selectedAgent.label} model set to: ${model}`\n                    );\n                }\n            })\n        );\n\n        // Command to select OpenAI model (shows all GPT models)\n        context.subscriptions.push(\n            vscode.commands.registerCommand('ki-autoagent.selectOpenAIModel', async () => {\n                const model = await this.showRichModelPicker('openai');\n                if (model) {\n                    vscode.window.showInformationMessage(`Selected GPT model: ${model}\\n\\nUse \"Configure Agent Models\" to assign it to a specific agent.`);\n                }\n            })\n        );\n\n        // Command to select Anthropic model (shows all Claude models)\n        context.subscriptions.push(\n            vscode.commands.registerCommand('ki-autoagent.selectAnthropicModel', async () => {\n                const model = await this.showRichModelPicker('anthropic');\n                if (model) {\n                    vscode.window.showInformationMessage(`Selected Claude model: ${model}\\n\\nUse \"Configure Agent Models\" to assign it to a specific agent.`);\n                }\n            })\n        );\n\n        // Command to select Perplexity model (shows all Perplexity models)\n        context.subscriptions.push(\n            vscode.commands.registerCommand('ki-autoagent.selectPerplexityModel', async () => {\n                const model = await this.showRichModelPicker('perplexity');\n                if (model) {\n                    vscode.window.showInformationMessage(`Selected Perplexity model: ${model}\\n\\nUse \"Configure Agent Models\" to assign it to a specific agent.`);\n                }\n            })\n        );\n    }\n}","/**\n * KI AutoAgent VS Code Extension - v6.0.0 INTEGRATION\n * Connects to manually started v6 Python backend\n * NO auto-start, NO BackendManager\n */\nimport * as vscode from 'vscode';\nimport { BackendClient } from './backend/BackendClient';\nimport { MultiAgentChatPanel } from './ui/MultiAgentChatPanel';\nimport { ModelSettingsManager } from './config/modelSettings';\n\n// Global instances\nlet outputChannel: vscode.OutputChannel;\nlet backendClient: BackendClient;\nlet modelSettingsManager: ModelSettingsManager;\n\nexport async function activate(context: vscode.ExtensionContext) {\n    // VERSION 6.0.0 - MANUAL BACKEND START (NO AUTO-START)\n    console.log('🚀 KI AutoAgent v6.0.0: v6 Integration Complete');\n\n    // Create output channel\n    outputChannel = vscode.window.createOutputChannel('KI AutoAgent');\n    outputChannel.clear();\n    outputChannel.show(true);\n\n    outputChannel.appendLine('🚀 KI AutoAgent Extension v6.0.0 Activating');\n    outputChannel.appendLine('============================================');\n    outputChannel.appendLine(`Time: ${new Date().toLocaleString()}`);\n    outputChannel.appendLine(`VS Code Version: ${vscode.version}`);\n    outputChannel.appendLine('');\n    outputChannel.appendLine('🆕 v6.0.0: 12 Intelligence Systems Integrated');\n    outputChannel.appendLine('🆕 v6.0.0: Manual Backend Start Required');\n    outputChannel.appendLine('🆕 v6.0.0: LangGraph Workflow Architecture');\n    outputChannel.appendLine('🆕 v6.0.0: Connects to ws://localhost:8002/ws/chat');\n    outputChannel.appendLine('');\n\n    // v6.0.0: NO BackendManager - Extension does NOT start backend!\n    // User must start backend manually with:\n    // ~/git/KI_AutoAgent/venv/bin/python3 backend/api/server_v6_integrated.py\n    outputChannel.appendLine('⚠️  v6.0.0: Extension does NOT auto-start backend');\n    outputChannel.appendLine('📝 Start backend manually: ~/git/KI_AutoAgent/venv/bin/python3 backend/api/server_v6_integrated.py');\n    outputChannel.appendLine('');\n\n    // Register commands early so they're always available\n    outputChannel.appendLine('📝 Registering commands...');\n    registerCommandsEarly(context);\n    outputChannel.appendLine('✅ Commands registered');\n\n    // Register status bar item\n    const statusBarItem = vscode.window.createStatusBarItem(\n        vscode.StatusBarAlignment.Right,\n        100\n    );\n    statusBarItem.text = '🤖 KI AutoAgent';\n    statusBarItem.tooltip = 'Click to open KI AutoAgent Chat';\n    statusBarItem.command = 'ki-autoagent.showChat';\n    statusBarItem.show();\n    context.subscriptions.push(statusBarItem);\n\n    try {\n\n        // v6.0.0: NO .env sync - backend manages its own .env at ~/.ki_autoagent/config/.env\n        outputChannel.appendLine('ℹ️  v6.0.0: Backend manages .env at ~/.ki_autoagent/config/.env');\n\n        // v6.0.0: Connect DIRECTLY to v6 server (NO BackendManager auto-start!)\n        outputChannel.appendLine('🔌 Initializing Backend Client for v6 server...');\n        const wsUrl = 'ws://localhost:8002/ws/chat';\n        backendClient = BackendClient.getInstance(wsUrl);\n\n        // Connect to backend\n        outputChannel.appendLine('🔗 Connecting to v6 backend WebSocket...');\n        outputChannel.appendLine('📍 URL: ws://localhost:8002/ws/chat');\n        try {\n            await backendClient.connect();\n            outputChannel.appendLine('✅ Connected to v6 backend!');\n        } catch (error: any) {\n            outputChannel.appendLine(`❌ Connection failed: ${error.message}`);\n            outputChannel.appendLine('');\n            outputChannel.appendLine('⚠️  Backend not running! Start manually:');\n            outputChannel.appendLine('    ~/git/KI_AutoAgent/venv/bin/python3 backend/api/server_v6_integrated.py');\n            outputChannel.appendLine('');\n            vscode.window.showWarningMessage(\n                'v6 Backend not running. Start manually: ~/git/KI_AutoAgent/venv/bin/python3 backend/api/server_v6_integrated.py'\n            );\n            // Continue activation even if connection fails (user can reconnect later)\n        }\n\n        // v6.0.0: Simplified model settings (NO auto-discovery in v6)\n        outputChannel.appendLine('🤖 Initializing Model Settings Manager...');\n        modelSettingsManager = ModelSettingsManager.getInstance(backendClient);\n        modelSettingsManager.registerCommands(context);\n        outputChannel.appendLine('ℹ️  v6.0.0: Model discovery disabled (v6 uses default models)');\n\n        // Set up event handlers\n        setupBackendEventHandlers();\n\n        // Register remaining commands that need backend\n        registerBackendCommands(context);\n\n        // Success message\n        outputChannel.appendLine('');\n        outputChannel.appendLine('✅ KI AutoAgent Extension v6.0.0 activated successfully!');\n        outputChannel.appendLine('✅ WebSocket connected to v6 backend: ws://localhost:8002/ws/chat');\n        outputChannel.appendLine('✅ All 12 v6 Intelligence Systems ready');\n        outputChannel.appendLine('');\n        outputChannel.appendLine('Use Ctrl+Shift+P and type \"KI AutoAgent\" to see available commands');\n\n        // Show success notification\n        vscode.window.showInformationMessage(\n            '🤖 KI AutoAgent v6.0.0 is ready! Connected to v6 backend.'\n        );\n\n    } catch (error: any) {\n        outputChannel.appendLine(`❌ Activation failed: ${error.message}`);\n        vscode.window.showErrorMessage(\n            `KI AutoAgent activation failed: ${error.message}`\n        );\n    }\n}\n\nfunction setupBackendEventHandlers() {\n    // Handle backend responses\n    backendClient.on('response', (message) => {\n        outputChannel.appendLine(`📨 Agent Response: ${message.agent}`);\n        // Forward to chat panel if open\n        MultiAgentChatPanel.sendMessageToPanel(message);\n    });\n\n    backendClient.on('thinking', (message) => {\n        outputChannel.appendLine(`🤔 Agent Thinking: ${message.agent}`);\n        MultiAgentChatPanel.sendMessageToPanel(message);\n    });\n\n    backendClient.on('progress', (message) => {\n        outputChannel.appendLine(`📊 ${message.agent}: ${message.message}`);\n        MultiAgentChatPanel.sendMessageToPanel({\n            type: 'progress',\n            agent: message.agent,\n            content: message.message\n        });\n    });\n\n    backendClient.on('error', (error) => {\n        outputChannel.appendLine(`❌ Backend Error: ${error.message || error}`);\n        vscode.window.showErrorMessage(`Backend error: ${error.message || error}`);\n    });\n\n    backendClient.on('disconnected', () => {\n        outputChannel.appendLine('❌ Disconnected from backend');\n        vscode.window.showWarningMessage(\n            'Disconnected from Python backend. Trying to reconnect...'\n        );\n    });\n\n    backendClient.on('connected', () => {\n        outputChannel.appendLine('✅ Reconnected to backend');\n        vscode.window.showInformationMessage('Reconnected to Python backend');\n    });\n}\n\n// Register commands that can work without backend\nfunction registerCommandsEarly(context: vscode.ExtensionContext) {\n    // Main chat command - can open even if backend not ready\n    const showChatCmd = vscode.commands.registerCommand(\n        'ki-autoagent.showChat',\n        () => {\n            if (!backendClient) {\n                // Create a temporary client if backend is not ready\n                const wsUrl = 'ws://localhost:8002/ws/chat';\n                backendClient = BackendClient.getInstance(wsUrl);\n            }\n            MultiAgentChatPanel.createOrShow(\n                context.extensionUri,\n                backendClient\n            );\n        }\n    );\n    context.subscriptions.push(showChatCmd);\n\n\n    // Help command\n    const helpCmd = vscode.commands.registerCommand(\n        'ki-autoagent.showHelp',\n        () => {\n            vscode.window.showInformationMessage(\n                'KI AutoAgent v6.0.0 - Use Ctrl+Shift+P and type \"KI AutoAgent\" to see all commands'\n            );\n        }\n    );\n    context.subscriptions.push(helpCmd);\n\n    // v6.0.0: Reconnect command (NO stop/start - backend is manually managed)\n    const restartBackendCmd = vscode.commands.registerCommand(\n        'ki-autoagent.restartBackend',\n        async () => {\n            if (backendClient) {\n                outputChannel.appendLine('🔄 Reconnecting to v6 backend...');\n                try {\n                    await backendClient.connect();\n                    vscode.window.showInformationMessage('✅ Reconnected to v6 backend successfully');\n                } catch (error: any) {\n                    outputChannel.appendLine(`❌ Reconnection failed: ${error.message}`);\n                    vscode.window.showErrorMessage(\n                        `Failed to reconnect. Start backend manually: ~/git/KI_AutoAgent/venv/bin/python3 backend/api/server_v6_integrated.py`\n                    );\n                }\n            } else {\n                vscode.window.showWarningMessage('Backend client not initialized');\n            }\n        }\n    );\n    context.subscriptions.push(restartBackendCmd);\n\n    // v6.0.0: Backend status command (simplified - just checks connection)\n    const backendStatusCmd = vscode.commands.registerCommand(\n        'ki-autoagent.showBackendStatus',\n        async () => {\n            if (backendClient) {\n                const connected = backendClient.isConnectedToBackend();\n                vscode.window.showInformationMessage(\n                    `v6 Backend: ${connected ? 'Connected ✅' : 'Disconnected ❌'} | ` +\n                    `URL: ws://localhost:8002/ws/chat`\n                );\n            } else {\n                vscode.window.showWarningMessage('Backend client not initialized');\n            }\n        }\n    );\n    context.subscriptions.push(backendStatusCmd);\n}\n\n// v6.0.0: Register minimal backend commands\nfunction registerBackendCommands(context: vscode.ExtensionContext) {\n    // v6.0.0: Manual backend start instructions\n    const showInstructionsCmd = vscode.commands.registerCommand(\n        'ki-autoagent.showBackendInstructions',\n        () => {\n            const panel = vscode.window.createWebviewPanel(\n                'backendInstructions',\n                'v6 Backend Start Instructions',\n                vscode.ViewColumn.One,\n                {}\n            );\n\n            panel.webview.html = `\n                <html>\n                <body>\n                    <h1>Start v6 Backend Manually</h1>\n                    <h2>Required for v6.0.0</h2>\n                    <ol>\n                        <li>Open a terminal</li>\n                        <li>Navigate to KI_AutoAgent directory: <code>cd ~/git/KI_AutoAgent</code></li>\n                        <li>Start v6 server: <code>./venv/bin/python3 backend/api/server_v6_integrated.py</code></li>\n                    </ol>\n                    <p>The backend will be available at:</p>\n                    <ul>\n                        <li>HTTP: <a href=\"http://localhost:8002\">http://localhost:8002</a></li>\n                        <li>WebSocket: <code>ws://localhost:8002/ws/chat</code></li>\n                    </ul>\n                    <h3>v6 Features:</h3>\n                    <ul>\n                        <li>✅ Query Classifier</li>\n                        <li>✅ Curiosity System</li>\n                        <li>✅ Predictive System</li>\n                        <li>✅ Neurosymbolic Engine</li>\n                        <li>✅ Tool Registry</li>\n                        <li>✅ Approval Manager</li>\n                        <li>✅ Workflow Adapter</li>\n                        <li>✅ Perplexity Integration</li>\n                        <li>✅ Asimov Rule 3</li>\n                        <li>✅ Learning System</li>\n                        <li>✅ Self-Diagnosis</li>\n                        <li>✅ Memory System v6</li>\n                    </ul>\n                </body>\n                </html>\n            `;\n        }\n    );\n    context.subscriptions.push(showInstructionsCmd);\n}\n\nexport function deactivate() {\n    outputChannel.appendLine('🛑 KI AutoAgent Extension deactivating...');\n\n    // v6.0.0: NO BackendManager - just disconnect client\n    // Backend stays running (manually managed)\n    if (backendClient) {\n        backendClient.disconnect();\n        backendClient.dispose();\n    }\n\n    outputChannel.appendLine('✅ Extension deactivated');\n    outputChannel.appendLine('ℹ️  v6 backend keeps running (manual management)');\n    outputChannel.dispose();\n}","module.exports = require(\"vscode\");","module.exports = require(\"events\");","/**\n * BackendClient - WebSocket client for Python backend communication\n * Handles all communication between VS Code extension and Python backend\n */\n\nimport * as vscode from 'vscode';\nimport WebSocket from 'ws';\nimport { EventEmitter } from 'events';\n\nexport interface BackendMessage {\n    type: 'chat' | 'command' | 'workflow' | 'agent_response' | 'agent_thinking' | 'agent_progress' | 'agent_complete' | 'agent_tool_start' | 'agent_tool_complete' | 'error' | 'connection' | 'complete' | 'progress' | 'stream_chunk' | 'pause' | 'resume' | 'stopAndRollback' | 'pauseActivated' | 'resumed' | 'stoppedAndRolledBack' | 'clarificationNeeded' | 'clarificationResponse' | 'session_restore' | 'connected' | 'initialized' | 'init' | 'response' | 'step_completed' | 'architecture_proposal' | 'architecture_proposal_revised' | 'architectureApprovalProcessed' | 'status' | 'approval_request' | 'approval_response' | 'workflow_complete' | 'result' | 'claude_cli_start' | 'claude_cli_complete' | 'claude_cli_error';\n    content?: string;\n    agent?: string;\n    model?: string;  // v6.1-alpha: Claude model name\n    metadata?: any;\n    timestamp?: string;\n    done?: boolean;  // For stream_chunk messages\n    message?: string;  // For error and progress messages\n    status?: string;  // For response status\n    error?: string;  // For error messages\n    details?: any;  // For additional error details\n    additionalInstructions?: string;  // For resume with instructions\n    data?: any;  // For pause/resume/rollback data\n    response?: any;  // For clarification response\n    task?: any;  // For session_restore - original task info\n    progress?: any[];  // For session_restore - progress messages\n    result?: any;  // For session_restore - completed result\n    session_id?: string;  // For initialized message\n    client_id?: string;  // For initialized message\n    workspace_path?: string;  // For initialized message\n    requires_init?: boolean;  // For connected message\n    proposal?: any;  // For architecture_proposal messages\n    decision?: string;  // For architectureApprovalProcessed messages\n    feedback?: string;  // For architecture_approval outgoing messages\n    tool?: string;  // For agent_tool_start/complete messages\n    tool_status?: string;  // For agent_tool_start/complete messages (\"running\" | \"success\" | \"error\")\n    tool_result?: string;  // For agent_tool_complete messages\n    tool_details?: {  // For agent_tool_start/complete messages (v5.8.1)\n        files_read?: string[];\n        files_written?: string[];\n        scanning?: string[];\n        ignoring?: string[];\n        todos_added?: string[];\n        todos_completed?: string[];\n        files_analyzed?: number;\n        languages?: string[];\n        loc?: number;\n        complexity_avg?: number;\n        security_issues?: number;\n        dependencies?: Record<string, string>;\n        [key: string]: any;  // Allow additional properties\n    };\n    // v6.0.0: Approval Manager fields\n    request_id?: string;  // For approval_request/response\n    action_type?: string;  // For approval_request\n    description?: string;  // For approval_request\n    approved?: boolean;  // For approval_response\n    // v6.0.0: Workflow complete fields\n    success?: boolean;  // For workflow_complete\n    quality_score?: number;  // For workflow_complete\n    execution_time?: number;  // For workflow_complete\n    analysis?: any;  // For workflow_complete (v6 insights)\n    adaptations?: any;  // For workflow_complete (v6 insights)\n    health?: any;  // For workflow_complete (v6 insights)\n    errors?: any[];  // For workflow_complete\n    warnings?: any[];  // For workflow_complete\n    v6_systems_used?: any;  // For workflow_complete\n}\n\nexport interface ChatRequest {\n    prompt: string;\n    agent?: string;\n    context?: any;\n    command?: string;\n    thinkingMode?: boolean;\n    mode?: 'single' | 'auto' | 'workflow';\n}\n\nexport class BackendClient extends EventEmitter {\n    private static instance: BackendClient;\n    private ws: WebSocket | null = null;\n    private reconnectTimer: NodeJS.Timeout | null = null;\n    private reconnectAttempts: number = 0;\n    private maxReconnectAttempts: number = 5;\n    private isConnected: boolean = false;\n    private messageQueue: BackendMessage[] = [];\n    private outputChannel: vscode.OutputChannel;\n    private debugChannel: vscode.OutputChannel | null = null;\n\n    private constructor(private wsUrl: string) {\n        super();\n        this.outputChannel = vscode.window.createOutputChannel('Backend Client');\n    }\n\n    /**\n     * Get the backend URL (without ws:// prefix)\n     */\n    public getBackendUrl(): string {\n        // Extract host:port from ws://host:port/ws/chat\n        const match = this.wsUrl.match(/ws:\\/\\/([^\\/]+)/);\n        if (match) {\n            return match[1];\n        }\n        // Fallback to default (v6.0.0 Integrated port)\n        return 'localhost:8002';\n    }\n\n    /**\n     * Set a debug channel to forward logs to\n     */\n    public setDebugChannel(channel: vscode.OutputChannel): void {\n        this.debugChannel = channel;\n        this.log('🔗 Debug channel connected to BackendClient');\n    }\n\n    /**\n     * Log to both output channel and optional debug channel\n     */\n    private log(message: string): void {\n        this.outputChannel.appendLine(message);\n        if (this.debugChannel) {\n            this.debugChannel.appendLine(`[BackendClient] ${message}`);\n        }\n    }\n\n    public static getInstance(wsUrl?: string): BackendClient {\n        // Get URL from configuration if not provided\n        if (!wsUrl) {\n            const config = vscode.workspace.getConfiguration('kiAutoAgent');\n            const backendUrl = config.get<string>('backend.url', 'localhost:8002');  // v6.0.0 Integrated port\n            const wsProtocol = backendUrl.startsWith('https') ? 'wss' : 'ws';\n            const cleanUrl = backendUrl.replace(/^https?:\\/\\//, '');\n            wsUrl = `${wsProtocol}://${cleanUrl}/ws/chat`;\n        }\n\n        if (!BackendClient.instance) {\n            BackendClient.instance = new BackendClient(wsUrl);\n        }\n        return BackendClient.instance;\n    }\n\n    /**\n     * Connect to the backend WebSocket\n     * v5.8.1: Send init message with workspace_path after connection\n     */\n    public async connect(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            try {\n                // Get workspace path for init message\n                const workspaceFolders = vscode.workspace.workspaceFolders;\n                const workspacePath = workspaceFolders && workspaceFolders.length > 0\n                    ? workspaceFolders[0].uri.fsPath\n                    : null;\n\n                if (!workspacePath) {\n                    const error = new Error('No workspace folder open. Please open a folder or workspace.');\n                    this.log(`❌ ${error.message}`);\n                    reject(error);\n                    return;\n                }\n\n                this.log(`🔌 Connecting to backend at ${this.wsUrl}...`);\n                this.log(`📂 Workspace: ${workspacePath}`);\n\n                this.ws = new WebSocket(this.wsUrl);\n\n                // Track initialization state\n                let isInitialized = false;\n\n                this.ws.on('open', () => {\n                    this.log('✅ WebSocket connected, waiting for server handshake...');\n                });\n\n                this.ws.on('message', (data: WebSocket.Data) => {\n                    try {\n                        const message = JSON.parse(data.toString()) as BackendMessage;\n\n                        // v5.8.1: Handle handshake sequence\n                        if (message.type === 'connected' && !isInitialized) {\n                            this.log('📩 Received server welcome, sending init message...');\n\n                            // Send init message with workspace_path\n                            const initMessage = {\n                                type: 'init',\n                                workspace_path: workspacePath\n                            };\n\n                            this.ws?.send(JSON.stringify(initMessage));\n                            this.log(`📤 Sent init message with workspace: ${workspacePath}`);\n                        }\n                        else if (message.type === 'initialized') {\n                            // Initialization complete\n                            isInitialized = true;\n                            this.isConnected = true;\n                            this.reconnectAttempts = 0;\n\n                            this.log(`✅ Workspace initialized: ${message.workspace_path}`);\n                            this.log(`🔑 Session ID: ${message.session_id}`);\n                            this.emit('connected');\n\n                            // Process queued messages\n                            this.processMessageQueue();\n\n                            resolve();\n                        }\n                        else if (message.type === 'error') {\n                            this.log(`❌ Server error: ${message.message || message.error}`);\n                            if (!isInitialized) {\n                                reject(new Error(message.message || 'Initialization failed'));\n                            }\n                        }\n                        else {\n                            // Normal message handling\n                            this.handleMessage(message);\n                        }\n                    } catch (error) {\n                        this.log(`❌ Failed to parse message: ${error}`);\n                    }\n                });\n\n                this.ws.on('error', (error) => {\n                    this.log(`❌ WebSocket error: ${error.message}`);\n                    this.emit('error', error);\n\n                    if (!this.isConnected) {\n                        reject(error);\n                    }\n                });\n\n                this.ws.on('close', () => {\n                    this.isConnected = false;\n                    this.log('❌ Disconnected from backend');\n                    this.emit('disconnected');\n\n                    // Attempt reconnection\n                    this.scheduleReconnect();\n                });\n\n            } catch (error) {\n                this.log(`❌ Connection failed: ${error}`);\n                reject(error);\n            }\n        });\n    }\n\n    /**\n     * Send a chat message to the backend\n     */\n    public async sendChatMessage(request: ChatRequest): Promise<void> {\n        const message: BackendMessage = {\n            type: 'chat',\n            content: request.prompt,\n            agent: request.agent || 'orchestrator',\n            metadata: {\n                context: request.context,\n                command: request.command,\n                thinkingMode: request.thinkingMode,\n                mode: request.mode\n            }\n        };\n\n        return this.sendMessage(message);\n    }\n\n    /**\n     * Send a command to the backend\n     */\n    public async sendCommand(command: string, args: any = {}): Promise<void> {\n        const message: BackendMessage = {\n            type: 'command',\n            content: command,\n            metadata: args\n        };\n\n        return this.sendMessage(message);\n    }\n\n    /**\n     * Send a workflow request to the backend\n     */\n    public async sendWorkflow(workflow: any): Promise<void> {\n        const message: BackendMessage = {\n            type: 'workflow',\n            metadata: { workflow }\n        };\n\n        return this.sendMessage(message);\n    }\n\n    /**\n     * Send a message to the backend\n     */\n    public async sendMessage(message: BackendMessage): Promise<void> {\n        if (!this.isConnected || !this.ws) {\n            this.log('⚠️ Not connected, queuing message');\n            this.messageQueue.push(message);\n\n            // Try to reconnect\n            if (!this.reconnectTimer) {\n                await this.connect();\n            }\n            return;\n        }\n\n        try {\n            this.ws.send(JSON.stringify(message));\n            this.log(`📤 Sent: ${message.type}`);\n        } catch (error) {\n            this.log(`❌ Failed to send message: ${error}`);\n            this.messageQueue.push(message);\n            throw error;\n        }\n    }\n\n    /**\n     * Handle incoming messages from the backend\n     */\n    private handleMessage(message: BackendMessage): void {\n        this.log(`📨 Received: ${message.type}`);\n\n        switch (message.type) {\n            case 'connection':\n            case 'connected':  // LangGraph v5.0.0 sends 'connected'\n                this.emit('welcome', message);\n                break;\n\n            case 'agent_thinking':\n                this.log(`💭 ${message.agent || 'Agent'} thinking: ${message.content || message.message || ''}`);\n                this.emit('thinking', message);\n                this.emit('agent_activity', message);  // v5.8.1: Also emit for new activity visualization\n                break;\n\n            case 'response':  // LangGraph v5.0.0 response\n                this.log(`✅ LangGraph Response: ${message.agent || 'orchestrator'} - Content: ${message.content ? 'Present' : 'Missing'}`);\n                // Log the actual content for debugging\n                if (message.content) {\n                    this.log(`📝 Content preview: ${message.content.substring(0, 100)}...`);\n                }\n                this.emit('response', message);\n                break;\n\n            case 'step_completed':  // LangGraph v5.0.0 intermediate step\n                this.log(`📊 Step Completed: ${message.agent || 'orchestrator'}`);\n                this.emit('step_completed', message);\n                break;\n\n            case 'agent_progress':\n                // Validate content before emitting\n                const progressContent = message.message || message.content || '';\n                if (!progressContent || progressContent === 'undefined') {\n                    this.log(`⚠️ Skipping agent_progress with undefined content from ${message.agent}`);\n                    break;\n                }\n                this.log(`📊 Agent Progress: ${message.agent} - ${progressContent}`);\n                this.emit('progress', message);\n                this.emit('agent_activity', message);  // v5.8.1: Also emit for new activity visualization\n                break;\n\n            case 'agent_response':\n                this.log(`✅ Agent Response: ${message.agent} - Status: ${message.status}`);\n                if (message.status === 'error') {\n                    this.log(`❌ Error Details: ${message.content}`);\n                }\n                this.emit('response', message);\n                break;\n\n            case 'stream_chunk':\n                // Handle streaming responses\n                if (message.done) {\n                    // Final chunk - emit as complete response\n                    this.emit('response', {\n                        ...message,\n                        type: 'agent_response'\n                    });\n                } else {\n                    // Intermediate chunk - validate content before emitting as progress\n                    const chunkContent = message.content || message.message || '';\n                    if (!chunkContent || chunkContent === 'undefined') {\n                        this.log(`⚠️ Skipping stream_chunk with undefined content from ${message.agent}`);\n                        break;\n                    }\n                    this.emit('progress', message);\n                }\n                break;\n\n            case 'error':\n                this.log(`❌ ERROR: ${message.message || message.error || JSON.stringify(message)}`);\n                if (message.agent) {\n                    this.log(`   Agent: ${message.agent}`);\n                }\n                if (message.details) {\n                    this.log(`   Details: ${JSON.stringify(message.details)}`);\n                }\n                this.emit('error', message);\n                break;\n\n            case 'complete':\n                this.emit('complete', message);\n                break;\n\n            case 'session_restore':\n                this.log(`🔄 Session restore: ${message.status} - ${message.message}`);\n                this.emit('session_restore', message);\n                break;\n\n            case 'architecture_proposal':\n            case 'architecture_proposal_revised':\n                this.log(`🏛️ Architecture Proposal ${message.type === 'architecture_proposal_revised' ? '(Revised)' : ''}`);\n                this.log(`📋 Proposal data: ${message.proposal ? 'Present' : 'Missing'}`);\n                // Forward to UI - use exact event name that MultiAgentChatPanel expects!\n                this.emit(message.type, message);  // v5.8.1: emit exact type (architecture_proposal or architecture_proposal_revised)\n                break;\n\n            case 'architectureApprovalProcessed':\n                this.log(`✅ Architecture approval processed: ${message.decision}`);\n                this.emit('architectureApprovalProcessed', message);\n                break;\n\n            case 'agent_complete':\n                this.log(`✅ ${message.agent} completed: ${message.content || ''}`);\n                this.emit('agent_activity', message);\n                break;\n\n            case 'agent_tool_start':\n            case 'agent_tool_complete':\n                const toolAction = message.type === 'agent_tool_start' ? 'started' : 'completed';\n                this.log(`🔧 ${message.agent} tool ${toolAction}: ${message.tool} [${message.tool_status}]`);\n                this.emit('agent_activity', message);\n                break;\n\n            case 'status':\n                // v6.0.0: Workflow status updates\n                this.log(`📊 v6 Status: ${message.status} - ${message.message}`);\n                this.emit('progress', message);\n                break;\n\n            case 'approval_request':\n                // v6.0.0: Approval requests from Approval Manager\n                this.log(`🔐 v6 Approval Request: ${message.action_type} - ${message.description}`);\n                this.emit('approval_request', message);\n                break;\n\n            case 'result':\n                // v6.1-alpha: Final workflow result (comprehensive format)\n                const resultMsg = message as any;\n                this.log(`🎉 Workflow Result - Success: ${resultMsg.success} - Quality: ${resultMsg.quality_score}`);\n                if (resultMsg.subtype === 'workflow_complete') {\n                    this.log(`   ⏱️ Execution Time: ${resultMsg.execution_time}`);\n                    this.log(`   📊 Agents Completed: ${resultMsg.agents_completed?.length || 0}`);\n                    this.log(`   💾 Files Generated: ${resultMsg.files_generated || 0}`);\n                }\n                // Emit as both 'result' and 'workflow_complete' for compatibility\n                this.emit('result', message);\n                this.emit('workflow_complete', message);\n                this.emit('complete', message);\n                break;\n\n            case 'workflow_complete':\n                // v6.0.0: Workflow completion with v6 insights\n                this.log(`🎉 v6 Workflow Complete - Quality: ${message.quality_score} - Success: ${message.success}`);\n                this.emit('workflow_complete', message);\n                this.emit('complete', message);\n                break;\n\n            case 'claude_cli_start':\n                // v6.1-alpha: Claude CLI subprocess started\n                this.log(`🚀 Claude CLI Started: ${message.agent} (${message.model})`);\n                this.log(`   Tools: ${(message as any).tools?.join(', ') || 'unknown'}`);\n                this.log(`   Permission Mode: ${(message as any).permission_mode || 'unknown'}`);\n                this.emit('agent_activity', {\n                    type: 'agent_progress',\n                    agent: message.agent,\n                    message: `🚀 Starting Claude CLI code generation...`,\n                    tool: 'claude-cli',\n                    tool_status: 'running'\n                });\n                break;\n\n            case 'claude_cli_complete':\n                // v6.1-alpha: Claude CLI subprocess completed successfully\n                const cliMsg = message as any;\n                this.log(`✅ Claude CLI Complete: ${message.agent}`);\n                this.log(`   Duration: ${cliMsg.duration_ms ? (cliMsg.duration_ms / 1000).toFixed(2) + 's' : 'unknown'}`);\n                this.log(`   Events: ${cliMsg.events_count || 'unknown'}`);\n                this.log(`   Output Length: ${cliMsg.output_length || 'unknown'} chars`);\n                this.emit('agent_activity', {\n                    type: 'agent_tool_complete',\n                    agent: message.agent,\n                    message: `✅ Code generation completed (${cliMsg.duration_ms ? (cliMsg.duration_ms / 1000).toFixed(1) + 's' : 'unknown'})`,\n                    tool: 'claude-cli',\n                    tool_status: 'success'\n                });\n                break;\n\n            case 'claude_cli_error':\n                // v6.1-alpha: Claude CLI subprocess failed\n                const errMsg = message as any;\n                this.log(`❌ Claude CLI Error: ${message.agent}`);\n                this.log(`   Error Type: ${errMsg.error_type || 'unknown'}`);\n                this.log(`   Error: ${errMsg.error || 'unknown'}`);\n                this.emit('agent_activity', {\n                    type: 'agent_tool_complete',\n                    agent: message.agent,\n                    message: `❌ Code generation failed: ${errMsg.error || 'unknown error'}`,\n                    tool: 'claude-cli',\n                    tool_status: 'error'\n                });\n                // Also emit as error for error handling\n                this.emit('error', {\n                    type: 'error',\n                    agent: message.agent,\n                    message: `Claude CLI error: ${errMsg.error}`,\n                    details: { error_type: errMsg.error_type, duration_ms: errMsg.duration_ms }\n                });\n                break;\n\n            default:\n                this.log(`⚠️ Unhandled message type: ${message.type}`);\n                this.emit('message', message);\n        }\n    }\n\n    /**\n     * Process queued messages after reconnection\n     */\n    private processMessageQueue(): void {\n        while (this.messageQueue.length > 0) {\n            const message = this.messageQueue.shift();\n            if (message) {\n                this.sendMessage(message).catch(error => {\n                    this.log(`❌ Failed to send queued message: ${error}`);\n                });\n            }\n        }\n    }\n\n    /**\n     * Schedule reconnection attempt\n     */\n    private scheduleReconnect(): void {\n        if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n            this.log('❌ Max reconnection attempts reached');\n            vscode.window.showErrorMessage(\n                'Failed to connect to Python backend. Please start it manually.'\n            );\n            return;\n        }\n\n        this.reconnectAttempts++;\n        const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 10000);\n\n        this.log(\n            `⏳ Reconnecting in ${delay}ms (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})`\n        );\n\n        this.reconnectTimer = setTimeout(() => {\n            this.reconnectTimer = null;\n            this.connect().catch(error => {\n                this.log(`❌ Reconnection failed: ${error}`);\n            });\n        }, delay);\n    }\n\n    /**\n     * Disconnect from the backend\n     */\n    public disconnect(): void {\n        if (this.reconnectTimer) {\n            clearTimeout(this.reconnectTimer);\n            this.reconnectTimer = null;\n        }\n\n        if (this.ws) {\n            this.ws.close();\n            this.ws = null;\n        }\n\n        this.isConnected = false;\n    }\n\n    /**\n     * Check if connected\n     */\n    public isConnectedToBackend(): boolean {\n        return this.isConnected;\n    }\n\n    /**\n     * Dispose and cleanup\n     */\n    public dispose(): void {\n        this.disconnect();\n        this.outputChannel.dispose();\n        this.removeAllListeners();\n    }\n}","/**\n * MultiAgentChatPanel - Backend Integrated Version\n * Chat UI that connects to Python backend via WebSocket\n */\n\nimport * as vscode from 'vscode';\nimport { BackendClient, BackendMessage } from '../backend/BackendClient';\n\nexport class MultiAgentChatPanel {\n    public static currentPanel: MultiAgentChatPanel | undefined;\n    private static readonly viewType = 'kiAutoAgentChat';\n\n    private readonly _panel: vscode.WebviewPanel;\n    private readonly _extensionUri: vscode.Uri;\n    private _disposables: vscode.Disposable[] = [];\n    private _isDisposed = false;\n    private backendClient: BackendClient;\n\n    // UI State\n    private _thinkingMode: boolean = false;\n    private _thinkingIntensity: 'quick' | 'normal' | 'deep' | 'layered' = 'normal';\n    private _isProcessing: boolean = false;\n    private _conversationHistory: any[] = [];\n    private _streamBuffer: Map<string, string> = new Map();\n    private static debugChannel: vscode.OutputChannel;\n\n    // Progress message deduplication\n    private lastProgressMessage: Map<string, string> = new Map();\n    private progressDebounceTimers: Map<string, NodeJS.Timeout> = new Map();\n    private processedMessages: Set<string> = new Set();\n\n    public static createOrShow(\n        extensionUri: vscode.Uri,\n        backendClient: BackendClient\n    ) {\n        const column = vscode.ViewColumn.Beside;\n\n        // If panel exists, reveal it\n        if (MultiAgentChatPanel.currentPanel) {\n            MultiAgentChatPanel.currentPanel._panel.reveal(column);\n            return;\n        }\n\n        // Create new panel\n        const panel = vscode.window.createWebviewPanel(\n            MultiAgentChatPanel.viewType,\n            '🤖 KI AutoAgent Chat',\n            column,\n            {\n                enableScripts: true,\n                retainContextWhenHidden: true\n            }\n        );\n\n        MultiAgentChatPanel.currentPanel = new MultiAgentChatPanel(\n            panel,\n            extensionUri,\n            backendClient\n        );\n    }\n\n    public static sendMessageToPanel(message: BackendMessage) {\n        if (MultiAgentChatPanel.currentPanel) {\n            MultiAgentChatPanel.currentPanel.sendMessage(message);\n        }\n    }\n\n    private constructor(\n        panel: vscode.WebviewPanel,\n        extensionUri: vscode.Uri,\n        backendClient: BackendClient\n    ) {\n        this._panel = panel;\n        this._extensionUri = extensionUri;\n        this.backendClient = backendClient;\n\n        // Create debug output channel if not exists\n        if (!MultiAgentChatPanel.debugChannel) {\n            MultiAgentChatPanel.debugChannel = vscode.window.createOutputChannel('KI AutoAgent Debug');\n            MultiAgentChatPanel.debugChannel.appendLine('🔍 Debug Console initialized');\n            MultiAgentChatPanel.debugChannel.show();\n        }\n\n        // Connect BackendClient to debug channel\n        if (this.backendClient && (this.backendClient as any).setDebugChannel) {\n            (this.backendClient as any).setDebugChannel(MultiAgentChatPanel.debugChannel);\n        }\n\n        // Set HTML content\n        this._update();\n\n        // Handle messages from webview\n        this._panel.webview.onDidReceiveMessage(\n            async (message) => {\n                switch (message.type) {\n                    case 'chat':\n                        await this.handleChatMessage(message);\n                        break;\n                    case 'selectAgent':\n                        await this.handleAgentSelection(message);\n                        break;\n                    case 'command':\n                        await this.handleCommand(message);\n                        break;\n                    case 'newChat':\n                        await this.handleNewChat();\n                        break;\n                    case 'pause':\n                        await this.handlePause();\n                        break;\n                    case 'resumeWithInstructions':\n                        await this.handleResumeWithInstructions(message.instructions);\n                        break;\n                    case 'stopAndRollback':\n                        await this.handleStopAndRollback();\n                        break;\n                    case 'toggleThinking':\n                        this.handleToggleThinking(message);\n                        break;\n                    case 'showHistory':\n                        await this.handleShowHistory();\n                        break;\n                    case 'loadHistory':\n                        await this.handleLoadHistory(message);\n                        break;\n                    case 'debug':\n                        this.handleDebugMessage(message);\n                        break;\n                    case 'architecture_approval':\n                        // v5.2.0: Forward architecture approval to backend\n                        await this.handleArchitectureApproval(message);\n                        break;\n                }\n            },\n            null,\n            this._disposables\n        );\n\n        // Handle panel disposal\n        this._panel.onDidDispose(() => this.dispose(), null, this._disposables);\n\n        // Setup backend event handlers\n        this.setupBackendHandlers();\n    }\n\n    private setupBackendHandlers() {\n        MultiAgentChatPanel.debugChannel.appendLine('🔗 Setting up backend handlers...');\n\n        // Handle responses from backend\n        this.backendClient.on('response', (message: BackendMessage) => {\n            const agent = message.agent || 'orchestrator';\n            const content = message.content || 'No content received';\n\n            MultiAgentChatPanel.debugChannel.appendLine(`📥 Received response from ${agent}: ${content.substring(0, 100)}...`);\n            MultiAgentChatPanel.debugChannel.appendLine(`📝 Full content length: ${content.length} characters`);\n\n            // Reset processing flag when we get a response\n            this._isProcessing = false;\n\n            // Clear stream buffer for this agent\n            this._streamBuffer.delete(agent);\n\n            // Send to webview\n            const msgToSend = {\n                type: 'response',  // Changed to 'response' for v5.0.0\n                agent: agent,\n                content: content,\n                timestamp: message.timestamp || new Date().toISOString()\n            };\n\n            MultiAgentChatPanel.debugChannel.appendLine(`🚀 Sending to webview: ${JSON.stringify(msgToSend).substring(0, 200)}...`);\n            this.sendMessage(msgToSend);\n\n            // Add to history\n            if (message.content) {\n                this._conversationHistory.push({\n                    role: 'assistant',\n                    content: message.content,\n                    agent: agent,\n                    timestamp: new Date().toISOString()\n                });\n            }\n        });\n\n        this.backendClient.on('thinking', (message: BackendMessage) => {\n            // v5.9.0 FIX: Filter out undefined/empty content before sending\n            const content = message.content || message.message || '';\n            if (!content || content === 'undefined' || content === 'null') {\n                MultiAgentChatPanel.debugChannel.appendLine(`⚠️ Skipping thinking message with undefined content from ${message.agent}`);\n                return;\n            }\n\n            MultiAgentChatPanel.debugChannel.appendLine(`💭 Agent thinking: ${message.agent || 'orchestrator'}`);\n            this.sendMessage({\n                type: 'agent_thinking',  // Use underscore for v5.0.0\n                agent: message.agent || 'orchestrator',\n                content: content\n            });\n        });\n\n        this.backendClient.on('progress', (message: BackendMessage) => {\n            // Handle progress updates from agents\n            const agent = message.agent || 'orchestrator';\n            const content = message.content || message.message || '';\n\n            // Skip empty or undefined content\n            if (!content || content === 'undefined') {\n                return;\n            }\n\n            // Check for duplicate message\n            const lastMessage = this.lastProgressMessage.get(agent);\n            if (lastMessage === content) {\n                return; // Skip duplicate\n            }\n\n            // Clear any existing debounce timer for this agent\n            if (this.progressDebounceTimers.has(agent)) {\n                clearTimeout(this.progressDebounceTimers.get(agent)!);\n            }\n\n            // Debounce rapid updates (50ms)\n            const timer = setTimeout(() => {\n                MultiAgentChatPanel.debugChannel.appendLine(`⏳ Progress from ${agent}: ${content}`);\n\n                // Send progress update to UI\n                this.sendMessage({\n                    type: 'progress',\n                    agent: agent,\n                    content: content,\n                    isStreaming: false,\n                    timestamp: Date.now()\n                });\n\n                // Store this as the last message for this agent\n                this.lastProgressMessage.set(agent, content);\n\n                // Clean up timer reference\n                this.progressDebounceTimers.delete(agent);\n            }, 50);\n\n            this.progressDebounceTimers.set(agent, timer);\n        });\n\n        this.backendClient.on('complete', (message: BackendMessage) => {\n            MultiAgentChatPanel.debugChannel.appendLine(`✅ Complete from ${message.agent}`);\n            // Also reset here for safety\n            this._isProcessing = false;\n            this.sendMessage({\n                type: 'complete',\n                agent: message.agent,\n                metadata: message.metadata\n            });\n        });\n\n        // Handle step_completed from LangGraph v5.0.0\n        this.backendClient.on('step_completed', (message: any) => {\n            MultiAgentChatPanel.debugChannel.appendLine(`📊 Step completed: ${message.agent} - ${message.task}`);\n            this.sendMessage({\n                type: 'step_completed',\n                agent: message.agent || 'orchestrator',\n                result: message.result || ''\n            });\n        });\n\n        // Handle errors\n        this.backendClient.on('error', (error: any) => {\n            MultiAgentChatPanel.debugChannel.appendLine(`❌ Backend error: ${error.message || error.error || JSON.stringify(error)}`);\n            this._isProcessing = false;\n            vscode.window.showErrorMessage(`Backend error: ${error.message || 'Unknown error'}`);\n        });\n\n        // Handle welcome/connection\n        this.backendClient.on('welcome', (message: any) => {\n            MultiAgentChatPanel.debugChannel.appendLine(`🎉 Connected to backend: ${message.message || 'Connection established'}`);\n        });\n\n        // Handle session restoration (reconnection to running tasks)\n        this.backendClient.on('session_restore', (message: any) => {\n            MultiAgentChatPanel.debugChannel.appendLine(`🔄 Session restore: ${message.status} - ${message.message}`);\n\n            if (message.status === 'running') {\n                // Show notification about running task\n                vscode.window.showInformationMessage(\n                    `🔄 You have a task still running: \"${message.task?.prompt?.substring(0, 50)}...\"`,\n                    'View Progress'\n                ).then(selection => {\n                    if (selection === 'View Progress') {\n                        // Show the last progress messages\n                        if (message.progress && message.progress.length > 0) {\n                            message.progress.forEach((p: any) => {\n                                this.sendMessage({\n                                    type: 'progress',\n                                    agent: message.task?.agent || 'orchestrator',\n                                    content: p.message,\n                                    isStreaming: false\n                                });\n                            });\n                        }\n                    }\n                });\n\n                // Mark as processing\n                this._isProcessing = true;\n            } else if (message.status === 'completed') {\n                // Show notification about completed task\n                vscode.window.showInformationMessage(\n                    `✅ Your previous task has completed: \"${message.task?.prompt?.substring(0, 50)}...\"`,\n                    'View Result'\n                ).then(selection => {\n                    if (selection === 'View Result') {\n                        // Display the result\n                        if (message.result) {\n                            this.sendMessage({\n                                type: 'agentResponse',\n                                agent: message.task?.agent || 'orchestrator',\n                                content: message.result.content || 'Task completed',\n                                timestamp: new Date().toISOString()\n                            });\n                        }\n                    }\n                });\n            }\n        });\n\n        // v5.2.0: Handle architecture proposal messages\n        this.backendClient.on('architecture_proposal', (message: any) => {\n            MultiAgentChatPanel.debugChannel.appendLine(`📋 Architecture proposal received`);\n            this.sendMessage({\n                type: 'architecture_proposal',\n                proposal: message.proposal,\n                session_id: message.session_id,\n                formatted_message: message.formatted_message\n            });\n        });\n\n        this.backendClient.on('architecture_proposal_revised', (message: any) => {\n            MultiAgentChatPanel.debugChannel.appendLine(`📋 Revised architecture proposal received`);\n            this.sendMessage({\n                type: 'architecture_proposal_revised',\n                proposal: message.proposal,\n                session_id: message.session_id,\n                formatted_message: message.formatted_message\n            });\n        });\n\n        this.backendClient.on('architectureApprovalProcessed', (message: any) => {\n            MultiAgentChatPanel.debugChannel.appendLine(`✅ Architecture approval processed: ${message.decision}`);\n            this.sendMessage({\n                type: 'architectureApprovalProcessed',\n                session_id: message.session_id,\n                decision: message.decision,\n                message: message.message\n            });\n        });\n\n        // v5.8.1: Agent Activity Visualization\n        this.backendClient.on('agent_activity', (message: any) => {\n            MultiAgentChatPanel.debugChannel.appendLine(`🔧 Agent activity: ${message.type} from ${message.agent}`);\n            this.sendMessage({\n                type: 'agent_activity',\n                activity_type: message.type,\n                agent: message.agent,\n                content: message.content,\n                tool: message.tool,\n                tool_status: message.tool_status,\n                tool_result: message.tool_result,\n                timestamp: message.timestamp\n            });\n        });\n\n        MultiAgentChatPanel.debugChannel.appendLine('✅ Backend handlers setup complete');\n    }\n\n    private async handleChatMessage(message: any) {\n        if (this._isProcessing) {\n            vscode.window.showWarningMessage('Please wait for the current operation to complete');\n            return;\n        }\n\n        this._isProcessing = true;\n\n        // Log to debug console\n        MultiAgentChatPanel.debugChannel.appendLine(`\\n📨 User Message: ${message.content}`);\n        MultiAgentChatPanel.debugChannel.appendLine(`   Agent: ${message.agent || 'orchestrator'}`);\n        MultiAgentChatPanel.debugChannel.appendLine(`   Mode: ${message.mode || 'auto'}`);\n\n        // Send user message to webview\n        this.sendMessage({\n            type: 'userMessage',\n            content: message.content\n        });\n\n        // Add to history\n        this._conversationHistory.push({\n            role: 'user',\n            content: message.content,\n            timestamp: new Date().toISOString()\n        });\n\n        // Get workspace path for backend\n        const workspaceFolders = vscode.workspace.workspaceFolders;\n        const workspacePath = workspaceFolders ? workspaceFolders[0].uri.fsPath : undefined;\n\n        // Send to backend with thinking mode and workspace path\n        MultiAgentChatPanel.debugChannel.appendLine(`📤 Sending message to backend...`);\n        MultiAgentChatPanel.debugChannel.appendLine(`   Workspace: ${workspacePath}`);\n        MultiAgentChatPanel.debugChannel.appendLine(`   Connected: ${this.backendClient.isConnectedToBackend()}`);\n\n        try {\n            await this.backendClient.sendChatMessage({\n            prompt: message.content,\n            agent: message.agent || 'orchestrator',\n            mode: message.mode || 'auto',\n            thinkingMode: this._thinkingMode,\n            context: {\n                workspace_path: workspacePath || process.cwd()\n            }\n            });\n            MultiAgentChatPanel.debugChannel.appendLine(`✅ Message sent successfully`);\n        } catch (error: any) {\n            MultiAgentChatPanel.debugChannel.appendLine(`❌ Failed to send message: ${error.message}`);\n            console.error('Send error:', error);\n        }\n    }\n\n    private async handleAgentSelection(message: any) {\n        // Update UI to show selected agent\n        this.sendMessage({\n            type: 'agentSelected',\n            agent: message.agent\n        });\n    }\n\n    private async handleCommand(message: any) {\n        await this.backendClient.sendCommand(message.command, message.args);\n    }\n\n    private async handleNewChat() {\n        this._conversationHistory = [];\n        this._isProcessing = false;\n        this.sendMessage({ type: 'clearChat' });\n        vscode.window.showInformationMessage('New chat session started');\n    }\n\n    // ============================================================================\n    // OBSOLETE v5.9.0: Backend message sending for pause/resume\n    // Reason: Backend doesn't implement pause/resume message handlers yet\n    // Error: \"Unknown message type: pause/resume\" from backend\n    // Status: Functionality works UI-only, backend integration pending\n    // Decision: Keep UI functionality, skip backend messages until implemented\n    // Marked for: Backend implementation OR removal after v5.9.0 testing\n    // ============================================================================\n\n    private async handlePause() {\n        // OBSOLETE v5.9.0: Backend call commented out - not yet implemented\n        // Original backend call that causes errors:\n        /*\n        if (this.backendClient) {\n            await this.backendClient.sendMessage({\n                type: 'pause'\n            });\n        }\n        */\n\n        // UI-only pause functionality (still works)\n        this.sendMessage({ type: 'pauseActivated' });\n        vscode.window.showInformationMessage('Task paused. You can add instructions or stop.');\n    }\n\n    private async handleResumeWithInstructions(instructions?: string) {\n        // OBSOLETE v5.9.0: Backend call commented out - not yet implemented\n        // Original backend call that causes errors:\n        /*\n        if (this.backendClient) {\n            await this.backendClient.sendMessage({\n                type: 'resume',\n                additionalInstructions: instructions\n            });\n        }\n        */\n\n        // UI-only resume functionality (still works)\n        this.sendMessage({ type: 'resumed' });\n        vscode.window.showInformationMessage(instructions ?\n            'Resuming with additional instructions' : 'Resuming task');\n    }\n\n    // ============================================================================\n    // END OBSOLETE SECTION - Backend pause/resume calls above marked for review\n    // ============================================================================\n\n    private async handleStopAndRollback() {\n        // Send stop and rollback signal\n        if (this.backendClient) {\n            await this.backendClient.sendMessage({\n                type: 'stopAndRollback'\n            });\n        }\n        this._isProcessing = false;\n        this.sendMessage({ type: 'stoppedAndRolledBack' });\n        vscode.window.showInformationMessage('Task stopped and rolled back to last checkpoint');\n    }\n\n    private handleToggleThinking(message: any) {\n        this._thinkingMode = message.enabled;\n        if (message.intensity) {\n            this._thinkingIntensity = message.intensity;\n        }\n        this.sendMessage({\n            type: 'thinkingModeChanged',\n            enabled: this._thinkingMode,\n            intensity: this._thinkingIntensity\n        });\n    }\n\n    private async handleShowHistory() {\n        if (this._conversationHistory.length === 0) {\n            vscode.window.showInformationMessage('No conversation history available');\n            return;\n        }\n\n        // For now, just show count - full history implementation can be added later\n        vscode.window.showInformationMessage(`Conversation has ${this._conversationHistory.length} messages`);\n    }\n\n    /**\n     * v5.2.0: Handle architecture proposal approval from user\n     */\n    private async handleArchitectureApproval(message: any) {\n        MultiAgentChatPanel.debugChannel.appendLine(`📋 Handling architecture approval: ${message.decision}`);\n\n        try {\n            // v5.8.1: Send approval as direct message type (not command!)\n            await this.backendClient.sendMessage({\n                type: 'architecture_approval' as any,\n                session_id: message.session_id,\n                decision: message.decision,\n                feedback: message.feedback || ''\n            });\n\n            MultiAgentChatPanel.debugChannel.appendLine(`✅ Architecture approval sent to backend: ${message.decision}`);\n\n        } catch (error) {\n            MultiAgentChatPanel.debugChannel.appendLine(`❌ Error sending architecture approval: ${error}`);\n            vscode.window.showErrorMessage(`Failed to send architecture approval: ${error}`);\n        }\n    }\n\n    private async handleLoadHistory(message: any) {\n        // Get project path\n        const workspaceFolders = vscode.workspace.workspaceFolders;\n        const projectPath = workspaceFolders ? workspaceFolders[0].uri.fsPath : undefined;\n\n        if (!projectPath) {\n            console.log('No workspace folder found, skipping history load');\n            return;\n        }\n\n        try {\n            // Request history from backend\n            const response = await fetch(`http://localhost:8002/api/conversation/history?limit=${message.limit || 20}&project_path=${encodeURIComponent(projectPath)}`);\n\n            if (response.ok) {\n                // Type the response data properly\n                interface HistoryResponse {\n                    history: Array<{\n                        role: string;\n                        content: string;\n                        agent?: string;\n                        timestamp?: string;\n                    }>;\n                    source: string;\n                    project?: string;\n                }\n\n                const data = await response.json() as HistoryResponse;\n\n                if (data.history && data.history.length > 0) {\n                    console.log(`Loaded ${data.history.length} messages from ${data.source} storage`);\n\n                    // Display history in chat\n                    for (const msg of data.history) {\n                        const isUser = msg.role === 'user';\n                        this.sendMessage({\n                            type: 'historyMessage',\n                            content: msg.content,\n                            agent: msg.agent || 'unknown',\n                            isUser: isUser,\n                            timestamp: msg.timestamp\n                        });\n                    }\n\n                    // Store in memory\n                    this._conversationHistory = data.history;\n                }\n            }\n        } catch (error) {\n            console.error('Failed to load conversation history:', error);\n        }\n    }\n\n    private sendMessage(message: any) {\n        // Check if webview is still active before sending messages\n        // This prevents \"Webview is disposed\" errors when chat is closed during processing\n        if (this._isDisposed) {\n            MultiAgentChatPanel.debugChannel.appendLine(`⚠️ Webview disposed, skipping message (normal if chat was closed)`);\n            return;\n        }\n\n        // Create unique message ID for deduplication (skip for certain message types that should always go through)\n        const skipDedup = ['userMessage', 'clearChat', 'agentResponse', 'error', 'complete', 'historyMessage', 'agentThinking', 'agent_thinking'];\n        if (!skipDedup.includes(message.type)) {\n            const messageId = `${message.type}-${message.agent || ''}-${message.content || ''}-${message.timestamp || ''}`;\n\n            // Check if already processed\n            if (this.processedMessages.has(messageId)) {\n                MultiAgentChatPanel.debugChannel.appendLine(`⚡ Skipping duplicate message: ${message.type} from ${message.agent}`);\n                return;\n            }\n\n            // Mark as processed\n            this.processedMessages.add(messageId);\n\n            // Clean old messages (keep last 100)\n            if (this.processedMessages.size > 100) {\n                const entries = Array.from(this.processedMessages);\n                entries.slice(0, entries.length - 100).forEach(id => {\n                    this.processedMessages.delete(id);\n                });\n            }\n        }\n\n        try {\n            if (this._panel && this._panel.webview) {\n                this._panel.webview.postMessage(message);\n            }\n        } catch (error) {\n            // v5.9.0 FIX: NEVER mark as disposed here - let dispose() handle it\n            // Race conditions can cause temporary errors that don't mean panel is disposed\n            MultiAgentChatPanel.debugChannel.appendLine(`⚠️ Error sending message (${message.type}): ${error}`);\n            // Don't set _isDisposed = true here!\n        }\n    }\n\n    private handleDebugMessage(message: any) {\n        // Log debug messages from webview to VS Code debug console\n        const timestamp = new Date().toLocaleTimeString();\n        const level = message.level || 'LOG';\n        const content = message.content || message.message || '';\n\n        MultiAgentChatPanel.debugChannel.appendLine(`[${timestamp}] [${level}] ${content}`);\n\n        // Also log details if provided\n        if (message.details) {\n            MultiAgentChatPanel.debugChannel.appendLine(`  Details: ${JSON.stringify(message.details, null, 2)}`);\n        }\n    }\n\n    private _update() {\n        const webview = this._panel.webview;\n        this._panel.title = '🤖 KI AutoAgent Chat';\n        this._panel.webview.html = this._getHtmlForWebview(webview);\n    }\n\n    private _getHtmlForWebview(webview: vscode.Webview) {\n        return `<!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>KI AutoAgent Chat</title>\n            <style>\n                body {\n                    font-family: var(--vscode-font-family);\n                    margin: 0;\n                    padding: 0;\n                    display: flex;\n                    flex-direction: column;\n                    height: 100vh;\n                    background: var(--vscode-editor-background);\n                    color: var(--vscode-editor-foreground);\n                }\n\n                #header {\n                    padding: 10px;\n                    background: var(--vscode-titleBar-activeBackground);\n                    color: var(--vscode-titleBar-activeForeground);\n                    display: flex;\n                    align-items: center;\n                    gap: 10px;\n                }\n\n                #messages {\n                    flex: 1;\n                    overflow-y: auto;\n                    padding: 20px;\n                }\n\n                .message {\n                    margin-bottom: 15px;\n                    padding: 10px;\n                    border-radius: 8px;\n                    max-width: 80%;\n                }\n\n                .user-message {\n                    background: var(--vscode-input-background);\n                    margin-left: auto;\n                    border: 1px solid var(--vscode-input-border);\n                }\n\n                .agent-message {\n                    background: var(--vscode-editor-inactiveSelectionBackground);\n                }\n\n                .agent-thinking {\n                    opacity: 0.7;\n                    font-style: italic;\n                }\n\n                .agent-badge {\n                    display: inline-block;\n                    padding: 2px 6px;\n                    border-radius: 4px;\n                    font-size: 0.85em;\n                    margin-right: 5px;\n                    background: var(--vscode-badge-background);\n                    color: var(--vscode-badge-foreground);\n                }\n\n                #input-container {\n                    padding: 20px;\n                    background: var(--vscode-sideBar-background);\n                    border-top: 1px solid var(--vscode-panel-border);\n                }\n\n                #input-row {\n                    display: flex;\n                    gap: 10px;\n                    align-items: flex-end;\n                }\n\n                #message-input {\n                    flex: 1;\n                    padding: 10px;\n                    background: var(--vscode-input-background);\n                    color: var(--vscode-input-foreground);\n                    border: 1px solid var(--vscode-input-border);\n                    border-radius: 4px;\n                    font-size: 14px;\n                    font-family: var(--vscode-font-family);\n                    resize: none;\n                    overflow-y: auto;\n                    min-height: 40px;\n                    max-height: 150px;\n                    line-height: 1.4;\n                }\n\n                #send-button {\n                    padding: 10px 20px;\n                    background: var(--vscode-button-background);\n                    color: var(--vscode-button-foreground);\n                    border: none;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    font-weight: bold;\n                }\n\n                #send-button:hover {\n                    background: var(--vscode-button-hoverBackground);\n                }\n\n                #agent-selector {\n                    margin-bottom: 10px;\n                    display: flex;\n                    gap: 5px;\n                    flex-wrap: wrap;\n                }\n\n                .agent-option {\n                    padding: 5px 10px;\n                    background: var(--vscode-button-secondaryBackground);\n                    color: var(--vscode-button-secondaryForeground);\n                    border: none;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    font-size: 12px;\n                }\n\n                #plan-first-btn {\n                    padding: 5px 10px;\n                    background: var(--vscode-button-background);\n                    color: var(--vscode-button-foreground);\n                    border: none;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    font-size: 12px;\n                    font-weight: bold;\n                    margin-right: 10px;\n                }\n\n                #plan-first-btn:hover {\n                    background: var(--vscode-button-hoverBackground);\n                }\n\n                #plan-first-btn.active {\n                    background: var(--vscode-editorWarning-foreground);\n                    color: var(--vscode-editor-background);\n                }\n\n                .agent-option.selected {\n                    background: var(--vscode-button-background);\n                    color: var(--vscode-button-foreground);\n                }\n\n                .agent-option:hover {\n                    opacity: 0.8;\n                }\n\n                .header-btn {\n                    padding: 5px 10px;\n                    background: var(--vscode-button-secondaryBackground);\n                    color: var(--vscode-button-secondaryForeground);\n                    border: none;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    font-size: 12px;\n                }\n\n                .header-btn:hover {\n                    background: var(--vscode-button-secondaryHoverBackground);\n                }\n\n                .header-btn.active {\n                    background: var(--vscode-button-background);\n                    color: var(--vscode-button-foreground);\n                }\n\n                .header-btn.danger {\n                    background: #d73a49;\n                    color: white;\n                }\n\n                .header-btn.danger:hover {\n                    background: #cb2431;\n                }\n\n                .header-btn.danger:disabled {\n                    background: #6a6a6a;\n                    opacity: 0.5;\n                    cursor: not-allowed;\n                }\n\n                /* Activity indicator */\n                .activity-indicator {\n                    position: fixed;\n                    bottom: 20px;\n                    right: 20px;\n                    padding: 12px 18px;\n                    background: var(--vscode-notifications-background, #1e1e1e);\n                    border: 2px solid var(--vscode-notifications-border, #454545);\n                    border-radius: 10px;\n                    display: none;\n                    align-items: center;\n                    gap: 12px;\n                    z-index: 9999;\n                    box-shadow: 0 4px 16px rgba(0,0,0,0.4);\n                    min-width: 200px;\n                    max-width: 400px;\n                    font-family: var(--vscode-font-family);\n                }\n\n                .activity-indicator.active {\n                    display: flex;\n                }\n\n                .activity-indicator .spinner {\n                    width: 16px;\n                    height: 16px;\n                    border: 2px solid var(--vscode-progressBar-background);\n                    border-top-color: transparent;\n                    border-radius: 50%;\n                    animation: spin 1s linear infinite;\n                }\n\n                @keyframes spin {\n                    to { transform: rotate(360deg); }\n                }\n\n                .activity-indicator .text {\n                    color: var(--vscode-foreground, #cccccc);\n                    font-size: 13px;\n                    font-weight: 500;\n                    line-height: 1.4;\n                    word-wrap: break-word;\n                }\n\n                /* Progress bubble for updates */\n                .message.progress-update {\n                    background: var(--vscode-editor-inactiveSelectionBackground) !important;\n                    border: 1px solid var(--vscode-panel-border);\n                    padding: 8px 12px;\n                    margin: 5px 0;\n                }\n\n                /* Agent-specific bubble colors for dark mode - semi-transparent */\n                body.vscode-dark .message.architect,\n                body.vscode-dark .message.architect-bubble {\n                    background: rgba(30, 58, 95, 0.3) !important;\n                    border: 1px solid rgba(42, 74, 127, 0.5);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-dark .message.codesmith,\n                body.vscode-dark .message.codesmith-bubble {\n                    background: rgba(58, 46, 95, 0.3) !important;\n                    border: 1px solid rgba(74, 62, 127, 0.5);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-dark .message.orchestrator,\n                body.vscode-dark .message.orchestrator-bubble {\n                    background: rgba(74, 46, 74, 0.3) !important;\n                    border: 1px solid rgba(106, 78, 106, 0.5);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-dark .message.research,\n                body.vscode-dark .message.research-bubble {\n                    background: rgba(46, 74, 58, 0.3) !important;\n                    border: 1px solid rgba(62, 106, 74, 0.5);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-dark .message.reviewer,\n                body.vscode-dark .message.reviewer-bubble {\n                    background: rgba(74, 58, 46, 0.3) !important;\n                    border: 1px solid rgba(106, 90, 62, 0.5);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-dark .message.performance_bot,\n                body.vscode-dark .message.performance-bubble,\n                body.vscode-dark .message.performance-bot-bubble {\n                    background: rgba(90, 58, 46, 0.3) !important;\n                    border: 1px solid rgba(122, 90, 62, 0.5);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-dark .message.fixer,\n                body.vscode-dark .message.fixer-bubble {\n                    background: rgba(46, 90, 74, 0.3) !important;\n                    border: 1px solid rgba(62, 122, 106, 0.5);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-dark .message.docubot,\n                body.vscode-dark .message.docubot-bubble {\n                    background: rgba(90, 74, 46, 0.3) !important;\n                    border: 1px solid rgba(122, 106, 62, 0.5);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-dark .message.tradestrat,\n                body.vscode-dark .message.tradestrat-bubble {\n                    background: rgba(74, 46, 90, 0.3) !important;\n                    border: 1px solid rgba(106, 62, 122, 0.5);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-dark .message.opus-arbitrator,\n                body.vscode-dark .message.opus-arbitrator-bubble {\n                    background: rgba(90, 46, 46, 0.3) !important;\n                    border: 1px solid rgba(122, 62, 62, 0.5);\n                    backdrop-filter: blur(8px);\n                }\n\n                /* Light mode colors - semi-transparent */\n                body.vscode-light .message.architect,\n                body.vscode-light .message.architect-bubble {\n                    background: rgba(230, 242, 255, 0.5) !important;\n                    border: 1px solid rgba(179, 217, 255, 0.7);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-light .message.codesmith,\n                body.vscode-light .message.codesmith-bubble {\n                    background: rgba(240, 230, 255, 0.5) !important;\n                    border: 1px solid rgba(217, 179, 255, 0.7);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-light .message.orchestrator,\n                body.vscode-light .message.orchestrator-bubble {\n                    background: rgba(255, 230, 240, 0.5) !important;\n                    border: 1px solid rgba(255, 179, 217, 0.7);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-light .message.research,\n                body.vscode-light .message.research-bubble {\n                    background: rgba(230, 255, 240, 0.5) !important;\n                    border: 1px solid rgba(179, 255, 217, 0.7);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-light .message.reviewer,\n                body.vscode-light .message.reviewer-bubble {\n                    background: rgba(255, 245, 230, 0.5) !important;\n                    border: 1px solid rgba(255, 223, 179, 0.7);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-light .message.performance_bot,\n                body.vscode-light .message.performance-bubble,\n                body.vscode-light .message.performance-bot-bubble {\n                    background: rgba(255, 230, 230, 0.5) !important;\n                    border: 1px solid rgba(255, 179, 179, 0.7);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-light .message.fixer,\n                body.vscode-light .message.fixer-bubble {\n                    background: rgba(230, 255, 245, 0.5) !important;\n                    border: 1px solid rgba(179, 255, 233, 0.7);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-light .message.docubot,\n                body.vscode-light .message.docubot-bubble {\n                    background: rgba(255, 250, 230, 0.5) !important;\n                    border: 1px solid rgba(255, 240, 179, 0.7);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-light .message.tradestrat,\n                body.vscode-light .message.tradestrat-bubble {\n                    background: rgba(250, 230, 255, 0.5) !important;\n                    border: 1px solid rgba(240, 179, 255, 0.7);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-light .message.opus-arbitrator,\n                body.vscode-light .message.opus-arbitrator-bubble {\n                    background: rgba(255, 230, 235, 0.5) !important;\n                    border: 1px solid rgba(255, 179, 190, 0.7);\n                    backdrop-filter: blur(8px);\n                }\n\n                #send-button {\n                    padding: 8px 16px;\n                    background: var(--vscode-button-background);\n                    color: var(--vscode-button-foreground);\n                    border: none;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    font-size: 14px;\n                    font-weight: 500;\n                    min-width: 80px;\n                }\n\n                #send-button:hover {\n                    background: var(--vscode-button-hoverBackground);\n                }\n\n                #send-button:active {\n                    transform: scale(0.98);\n                }\n\n                #send-button:disabled {\n                    opacity: 0.5;\n                    cursor: not-allowed;\n                }\n\n                /* Markdown Styles */\n                .message h1, .message h2, .message h3 {\n                    margin-top: 10px;\n                    margin-bottom: 5px;\n                    font-weight: bold;\n                }\n\n                .message h1 {\n                    font-size: 1.5em;\n                    color: var(--vscode-textLink-foreground);\n                }\n\n                .message h2 {\n                    font-size: 1.3em;\n                    color: var(--vscode-textLink-activeForeground);\n                }\n\n                .message h3 {\n                    font-size: 1.1em;\n                }\n\n                .message code {\n                    background: var(--vscode-textCodeBlock-background);\n                    color: var(--vscode-textPreformat-foreground);\n                    padding: 2px 4px;\n                    border-radius: 3px;\n                    font-family: var(--vscode-editor-font-family);\n                    font-size: 0.9em;\n                }\n\n                .message pre {\n                    background: var(--vscode-textCodeBlock-background);\n                    color: var(--vscode-textPreformat-foreground);\n                    padding: 10px;\n                    border-radius: 5px;\n                    overflow-x: auto;\n                    margin: 10px 0;\n                }\n\n                .message pre code {\n                    background: transparent;\n                    padding: 0;\n                }\n\n                .message ul, .message ol {\n                    margin: 5px 0;\n                    padding-left: 20px;\n                }\n\n                .message li {\n                    margin: 3px 0;\n                }\n\n                .message strong {\n                    font-weight: bold;\n                    color: var(--vscode-textLink-foreground);\n                }\n\n                .message em {\n                    font-style: italic;\n                    color: var(--vscode-descriptionForeground);\n                }\n\n                .message p {\n                    margin: 8px 0;\n                    line-height: 1.5;\n                }\n\n                .message blockquote {\n                    border-left: 3px solid var(--vscode-textBlockQuote-border);\n                    padding-left: 10px;\n                    margin: 10px 0;\n                    color: var(--vscode-textBlockQuote-color);\n                }\n\n                /* Warning button style for pause */\n                .header-btn.warning {\n                    background: #f0ad4e;\n                    color: white;\n                }\n\n                .header-btn.warning:hover {\n                    background: #ec971f;\n                }\n\n                .header-btn.warning:disabled {\n                    background: #6a6a6a;\n                    opacity: 0.5;\n                    cursor: not-allowed;\n                }\n\n                /* Pause overlay and dialog */\n                .pause-overlay {\n                    position: fixed;\n                    top: 0;\n                    left: 0;\n                    right: 0;\n                    bottom: 0;\n                    background: rgba(0, 0, 0, 0.5);\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                    z-index: 2000;\n                }\n\n                .pause-dialog {\n                    background: var(--vscode-editor-background);\n                    border: 1px solid var(--vscode-widget-border);\n                    border-radius: 8px;\n                    padding: 20px;\n                    max-width: 500px;\n                    width: 90%;\n                    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);\n                }\n\n                .pause-dialog h3 {\n                    margin: 0 0 15px 0;\n                    color: var(--vscode-foreground);\n                    font-size: 1.2em;\n                }\n\n                .pause-dialog p {\n                    margin: 10px 0;\n                    color: var(--vscode-foreground);\n                }\n\n                .pause-dialog textarea {\n                    width: 100%;\n                    background: var(--vscode-input-background);\n                    color: var(--vscode-input-foreground);\n                    border: 1px solid var(--vscode-input-border);\n                    border-radius: 4px;\n                    padding: 8px;\n                    font-family: var(--vscode-font-family);\n                    font-size: 14px;\n                    resize: vertical;\n                    margin-bottom: 15px;\n                }\n\n                .pause-dialog .pause-actions {\n                    display: flex;\n                    gap: 10px;\n                    justify-content: flex-end;\n                }\n\n                .pause-dialog .btn {\n                    padding: 8px 16px;\n                    border: none;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    font-size: 14px;\n                    transition: background 0.2s;\n                }\n\n                .pause-dialog .btn.primary {\n                    background: var(--vscode-button-background);\n                    color: var(--vscode-button-foreground);\n                }\n\n                .pause-dialog .btn.primary:hover {\n                    background: var(--vscode-button-hoverBackground);\n                }\n\n                .pause-dialog .btn.info {\n                    background: #17a2b8;\n                    color: white;\n                }\n\n                .pause-dialog .btn.info:hover {\n                    background: #138496;\n                }\n\n                .pause-dialog .btn.danger {\n                    background: #d73a49;\n                    color: white;\n                }\n\n                .pause-dialog .btn.danger:hover {\n                    background: #cb2431;\n                }\n\n                /* Initialization overlay */\n                .initialization-overlay {\n                    position: fixed;\n                    top: 0;\n                    left: 0;\n                    right: 0;\n                    bottom: 0;\n                    background: rgba(0, 0, 0, 0.85);\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    z-index: 10000;\n                    backdrop-filter: blur(5px);\n                }\n\n                .initialization-overlay.fade-out {\n                    animation: fadeOut 0.3s ease-out;\n                }\n\n                @keyframes fadeOut {\n                    from { opacity: 1; }\n                    to { opacity: 0; }\n                }\n\n                .initialization-content {\n                    background: var(--vscode-editor-background);\n                    border: 1px solid var(--vscode-panel-border);\n                    border-radius: 8px;\n                    padding: 30px;\n                    text-align: center;\n                    max-width: 400px;\n                }\n\n                .initialization-content .spinner {\n                    width: 50px;\n                    height: 50px;\n                    border: 3px solid var(--vscode-progressBar-background);\n                    border-top-color: transparent;\n                    border-radius: 50%;\n                    animation: spin 1s linear infinite;\n                    margin: 0 auto 20px;\n                }\n\n                .initialization-content h2 {\n                    margin: 0 0 10px;\n                    color: var(--vscode-editor-foreground);\n                }\n\n                .initialization-content p {\n                    margin: 0 0 20px;\n                    color: var(--vscode-descriptionForeground);\n                    font-size: 14px;\n                }\n\n                .progress-bar {\n                    width: 100%;\n                    height: 4px;\n                    background: var(--vscode-input-background);\n                    border-radius: 2px;\n                    overflow: hidden;\n                }\n\n                .progress-fill {\n                    height: 100%;\n                    background: var(--vscode-progressBar-background);\n                    width: 0;\n                    animation: progressAnimation 30s ease-out;\n                }\n\n                @keyframes progressAnimation {\n                    0% { width: 0%; }\n                    20% { width: 20%; }\n                    40% { width: 35%; }\n                    60% { width: 60%; }\n                    80% { width: 85%; }\n                    100% { width: 95%; }\n                }\n\n                /* Progress message styling */\n                .progress-update {\n                    background: var(--vscode-notebook-cellStatusBarItemHoverBackground);\n                    border-left: 3px solid var(--vscode-progressBar-background);\n                    padding: 10px;\n                    margin: 10px 0;\n                }\n\n                .progress-update .agent-badge {\n                    background: var(--vscode-progressBar-background);\n                    color: var(--vscode-editor-background);\n                    padding: 2px 8px;\n                    border-radius: 3px;\n                    font-size: 12px;\n                    font-weight: bold;\n                    margin-right: 8px;\n                }\n\n                .progress-content {\n                    color: var(--vscode-editor-foreground);\n                    margin-top: 5px;\n                }\n\n                /* v5.8.1: Agent Activity Visualization */\n                .agent-activity {\n                    background: var(--vscode-editor-inactiveSelectionBackground);\n                    border-radius: 8px;\n                    padding: 12px;\n                    margin: 12px 0;\n                    transition: opacity 0.3s ease;\n                }\n\n                .agent-activity .activity-header {\n                    margin-bottom: 8px;\n                }\n\n                .agent-activity .agent-badge {\n                    background: var(--vscode-badge-background);\n                    color: var(--vscode-badge-foreground);\n                    padding: 4px 10px;\n                    border-radius: 12px;\n                    font-size: 11px;\n                    font-weight: bold;\n                    text-transform: capitalize;\n                }\n\n                .agent-activity .activity-content {\n                    padding-left: 8px;\n                }\n\n                .agent-activity .activity-item {\n                    padding: 6px 0;\n                    font-size: 13px;\n                    color: var(--vscode-editor-foreground);\n                    opacity: 0.9;\n                }\n\n                .agent-activity .activity-item.thinking {\n                    font-style: italic;\n                    color: var(--vscode-descriptionForeground);\n                }\n\n                .agent-activity .activity-item.tool-running {\n                    color: var(--vscode-charts-blue);\n                }\n\n                .agent-activity .activity-item.tool-success {\n                    color: var(--vscode-charts-green);\n                }\n\n                .agent-activity .activity-item.tool-error {\n                    color: var(--vscode-charts-red);\n                }\n\n                .agent-activity .activity-item.complete {\n                    color: var(--vscode-charts-green);\n                    font-weight: 600;\n                }\n\n                /* Agent-specific activity colors (inherit from existing agent colors) */\n                .architect-activity {\n                    border-left: 4px solid rgba(42, 74, 127, 0.8);\n                }\n\n                .codesmith-activity {\n                    border-left: 4px solid rgba(74, 62, 127, 0.8);\n                }\n\n                .orchestrator-activity {\n                    border-left: 4px solid rgba(106, 78, 106, 0.8);\n                }\n\n                .reviewer-activity {\n                    border-left: 4px solid rgba(106, 90, 62, 0.8);\n                }\n\n                .fixer-activity {\n                    border-left: 4px solid rgba(62, 122, 106, 0.8);\n                }\n            </style>\n        </head>\n        <body>\n            <div id=\"header\">\n                <span style=\"font-size: 1.5em;\">🤖</span>\n                <h2 style=\"margin: 0;\">KI AutoAgent Chat</h2>\n                <div style=\"margin-left: auto; display: flex; gap: 10px; align-items: center;\">\n                    <button id=\"new-chat-btn\" class=\"header-btn\" title=\"New Chat\">➕ New</button>\n                    <button id=\"history-btn\" class=\"header-btn\" title=\"History\">📜 History</button>\n                    <button id=\"thinking-btn\" class=\"header-btn\" title=\"Toggle Thinking Mode\">💭 Thinking</button>\n                    <button id=\"agent-thinking-btn\" class=\"header-btn\" title=\"Agent Schritte anzeigen\">🧠 Agent Schritte</button>\n                    <button id=\"pause-btn\" class=\"header-btn warning\" title=\"Pause Task\">⏸️ Pause</button>\n                    <span style=\"opacity: 0.7; font-size: 0.9em;\">Backend ✅</span>\n                </div>\n            </div>\n\n            <div id=\"messages\"></div>\n\n            <div id=\"input-container\">\n                <div id=\"agent-selector\">\n                    <button id=\"plan-first-btn\" class=\"control-button\" title=\"Show plan before executing\">\n                        📋 Plan First\n                    </button>\n                    <button class=\"agent-option selected\" data-agent=\"orchestrator\">\n                        🎯 Orchestrator\n                    </button>\n                    <button class=\"agent-option\" data-agent=\"architect\">\n                        🏗️ Architect\n                    </button>\n                    <button class=\"agent-option\" data-agent=\"codesmith\">\n                        💻 CodeSmith\n                    </button>\n                    <button class=\"agent-option\" data-agent=\"research\">\n                        🔍 Research\n                    </button>\n                    <button class=\"agent-option\" data-agent=\"reviewer\">\n                        🔎 Reviewer\n                    </button>\n                    <button class=\"agent-option\" data-agent=\"docu\">\n                        📚 Documentation\n                    </button>\n                    <button class=\"agent-option\" data-agent=\"opus-arbitrator\">\n                        ⚖️ Arbitrator\n                    </button>\n                </div>\n\n                <div id=\"input-row\">\n                    <textarea\n                        id=\"message-input\"\n                        placeholder=\"Type your message... (Shift+Enter for new line)\"\n                        autofocus\n                        rows=\"1\"\n                    ></textarea>\n                    <button type=\"button\" id=\"send-button\">Send 📤</button>\n                    <button type=\"button\" id=\"stop-button\" style=\"display: none;\">Stop ⏹️</button>\n                </div>\n            </div>\n\n            <script>\n                const vscode = acquireVsCodeApi();\n\n                // Override console methods to send to VS Code debug console\n                const originalConsole = {\n                    log: console.log,\n                    error: console.error,\n                    warn: console.warn,\n                    debug: console.debug,\n                    info: console.info\n                };\n\n                function sendDebugMessage(level, args) {\n                    const message = Array.from(args).map(arg => {\n                        if (typeof arg === 'object') {\n                            return JSON.stringify(arg);\n                        }\n                        return String(arg);\n                    }).join(' ');\n\n                    vscode.postMessage({\n                        type: 'debug',\n                        level: level,\n                        content: message\n                    });\n\n                    // Also call original console method for webview developer tools\n                    originalConsole[level.toLowerCase()].apply(console, args);\n                }\n\n                console.log = function() { sendDebugMessage('LOG', arguments); };\n                console.error = function() { sendDebugMessage('ERROR', arguments); };\n                console.warn = function() { sendDebugMessage('WARN', arguments); };\n                console.debug = function() { sendDebugMessage('DEBUG', arguments); };\n                console.info = function() { sendDebugMessage('INFO', arguments); };\n\n                console.log('Chat UI Script initializing...');\n                const messagesDiv = document.getElementById('messages');\n                const messageInput = document.getElementById('message-input');\n                const sendButton = document.getElementById('send-button');\n                const stopButton = document.getElementById('stop-button');\n                const agentOptions = document.querySelectorAll('.agent-option');\n                const newChatBtn = document.getElementById('new-chat-btn');\n                const historyBtn = document.getElementById('history-btn');\n                const thinkingBtn = document.getElementById('thinking-btn');\n                const agentThinkingBtn = document.getElementById('agent-thinking-btn');\n                const pauseBtn = document.getElementById('pause-btn');\n                const planFirstBtn = document.getElementById('plan-first-btn');\n\n                // Debug check\n                console.log('Elements found:', {\n                    messagesDiv: !!messagesDiv,\n                    messageInput: !!messageInput,\n                    sendButton: !!sendButton,\n                    agentOptions: agentOptions.length\n                });\n\n                let selectedAgent = 'orchestrator';\n                let thinkingMode = false;\n                let isProcessing = false;\n                let planFirstMode = false;\n\n                // Load conversation history on startup\n                setTimeout(() => {\n                    console.log('Loading conversation history...');\n                    vscode.postMessage({\n                        type: 'loadHistory',\n                        limit: 20\n                    });\n                }, 500); // Small delay to ensure webview is ready\n\n                // Define addMessage function before it's used\n                function addMessage(content, type, agent) {\n                    const messageDiv = document.createElement('div');\n                    messageDiv.className = 'message ' + type + '-message';\n\n                    // Add agent-specific class for styling\n                    if (agent) {\n                        const agentClass = agent.toLowerCase().replace(/[^a-z0-9]/g, '-');\n                        messageDiv.classList.add(agentClass + '-bubble');\n                        const badge = document.createElement('span');\n                        badge.className = 'agent-badge';\n                        badge.textContent = agent;\n                        messageDiv.appendChild(badge);\n                    }\n\n                    const contentDiv = document.createElement('div');\n                    contentDiv.innerHTML = formatContent(content);\n                    messageDiv.appendChild(contentDiv);\n\n                    messagesDiv.appendChild(messageDiv);\n                    messagesDiv.scrollTop = messagesDiv.scrollHeight;\n                }\n\n                // Agent selection\n                agentOptions.forEach(option => {\n                    option.addEventListener('click', () => {\n                        agentOptions.forEach(opt => opt.classList.remove('selected'));\n                        option.classList.add('selected');\n                        selectedAgent = option.dataset.agent;\n\n                        vscode.postMessage({\n                            type: 'selectAgent',\n                            agent: selectedAgent\n                        });\n                    });\n                });\n\n                // Send message\n                function sendMessage() {\n                    const content = messageInput.value.trim();\n                    if (!content || isProcessing) {\n                        console.log('No content to send or still processing');\n                        return;\n                    }\n\n                    console.log('Sending message:', content, 'to agent:', selectedAgent);\n\n                    // Set processing state\n                    isProcessing = true;\n                    updatePauseButtonState();\n                    updateActivityIndicator(true, 'Sending message...');\n\n                    // Show stop button, hide send button\n                    if (stopButton) {\n                        stopButton.style.display = 'inline-block';\n                        sendButton.style.display = 'none';\n                    }\n\n                    // Disable inputs while processing\n                    if (messageInput) messageInput.disabled = true;\n\n                    vscode.postMessage({\n                        type: 'chat',\n                        content: content,\n                        agent: selectedAgent,\n                        mode: 'auto',\n                        planFirst: planFirstMode\n                    });\n\n                    messageInput.value = '';\n                    autoResizeTextarea();\n                }\n\n                // Bind send button\n                if (sendButton) {\n                    sendButton.addEventListener('click', (e) => {\n                        e.preventDefault();\n                        console.log('Send button clicked');\n                        sendMessage();\n                    });\n                } else {\n                    console.error('Send button not found!');\n                }\n\n                // Bind stop button\n                if (stopButton) {\n                    stopButton.addEventListener('click', (e) => {\n                        e.preventDefault();\n                        console.log('Stop button clicked');\n                        vscode.postMessage({\n                            type: 'stopAndRollback'\n                        });\n                        // Hide stop button, show send button\n                        stopButton.style.display = 'none';\n                        sendButton.style.display = 'inline-block';\n                        // Re-enable inputs\n                        if (messageInput) messageInput.disabled = false;\n                        isProcessing = false;\n                        updateActivityIndicator(false);\n                    });\n                }\n\n                // Header button handlers\n                newChatBtn.addEventListener('click', () => {\n                    if (confirm('Start a new chat session? Current conversation will be saved.')) {\n                        vscode.postMessage({ type: 'newChat' });\n                        messagesDiv.innerHTML = '';\n                    }\n                });\n\n                historyBtn.addEventListener('click', () => {\n                    vscode.postMessage({ type: 'showHistory' });\n                });\n\n                thinkingBtn.addEventListener('click', () => {\n                    thinkingMode = !thinkingMode;\n                    thinkingBtn.classList.toggle('active', thinkingMode);\n                    vscode.postMessage({\n                        type: 'toggleThinking',\n                        enabled: thinkingMode,\n                        intensity: 'normal'\n                    });\n                });\n\n                // Agent Thinking Button - zeigt interne Agent-Schritte\n                let showAgentThinking = false;\n                agentThinkingBtn.addEventListener('click', () => {\n                    showAgentThinking = !showAgentThinking;\n                    agentThinkingBtn.classList.toggle('active', showAgentThinking);\n                    vscode.postMessage({\n                        type: 'toggleAgentThinking',\n                        enabled: showAgentThinking\n                    });\n\n                    // Update existing messages visibility\n                    const thinkingMessages = document.querySelectorAll('.agent-thinking-message');\n                    thinkingMessages.forEach(msg => {\n                        msg.style.display = showAgentThinking ? 'block' : 'none';\n                    });\n                });\n\n                // Function to update pause button state\n                function updatePauseButtonState() {\n                    if (pauseBtn) {\n                        pauseBtn.disabled = !isProcessing || isPaused;\n                        pauseBtn.style.opacity = (isProcessing && !isPaused) ? '1.0' : '0.5';\n                        pauseBtn.style.cursor = (isProcessing && !isPaused) ? 'pointer' : 'not-allowed';\n                    }\n                }\n\n                let isPaused = false;\n\n                // Plan-First button handler\n                if (planFirstBtn) {\n                    planFirstBtn.addEventListener('click', () => {\n                        planFirstMode = !planFirstMode;\n                        planFirstBtn.classList.toggle('active', planFirstMode);\n\n                        // Show notification\n                        const mode = planFirstMode ? 'enabled' : 'disabled';\n                        const modeMessage = planFirstMode\n                            ? 'I will show you the execution plan before running tasks.'\n                            : 'I will execute tasks immediately.';\n                        addMessage('📋 Plan-First mode ' + mode + '. ' + modeMessage, 'system');\n\n                        // Save preference\n                        vscode.postMessage({\n                            type: 'planFirstMode',\n                            enabled: planFirstMode\n                        });\n                    });\n                }\n\n                pauseBtn.addEventListener('click', () => {\n                    if (isProcessing && !isPaused) {\n                        vscode.postMessage({ type: 'pause' });\n                        isPaused = true;\n                        showPauseUI();\n                        updatePauseButtonState();\n                    }\n                });\n\n                // Function to show pause UI with instruction input\n                function showPauseUI() {\n                    const pauseOverlay = document.createElement('div');\n                    pauseOverlay.className = 'pause-overlay';\n                    pauseOverlay.innerHTML = [\n                        '<div class=\"pause-dialog\">',\n                        '<h3>⏸️ Task Paused</h3>',\n                        '<p>Add additional instructions or stop the task:</p>',\n                        '<textarea id=\"pause-instructions\" placeholder=\"Enter additional instructions (optional)...\" rows=\"4\"></textarea>',\n                        '<div class=\"pause-actions\">',\n                        '<button id=\"resume-btn\" class=\"btn primary\">▶️ Resume</button>',\n                        '<button id=\"resume-with-instructions-btn\" class=\"btn info\">📝 Resume with Instructions</button>',\n                        '<button id=\"stop-rollback-btn\" class=\"btn danger\">🔄 Stop & Rollback</button>',\n                        '</div>',\n                        '</div>'\n                    ].join('');\n                    document.body.appendChild(pauseOverlay);\n\n                    // Handle pause dialog buttons\n                    document.getElementById('resume-btn').addEventListener('click', () => {\n                        vscode.postMessage({ type: 'resumeWithInstructions' });\n                        document.body.removeChild(pauseOverlay);\n                        isPaused = false;\n                        updatePauseButtonState();\n                    });\n\n                    document.getElementById('resume-with-instructions-btn').addEventListener('click', () => {\n                        const instructions = document.getElementById('pause-instructions').value;\n                        if (instructions.trim()) {\n                            vscode.postMessage({\n                                type: 'resumeWithInstructions',\n                                instructions: instructions\n                            });\n                            document.body.removeChild(pauseOverlay);\n                            isPaused = false;\n                            updatePauseButtonState();\n                        } else {\n                            alert('Please enter instructions or click Resume to continue without changes');\n                        }\n                    });\n\n                    document.getElementById('stop-rollback-btn').addEventListener('click', () => {\n                        if (confirm('Are you sure you want to stop and rollback to the last checkpoint?')) {\n                            vscode.postMessage({ type: 'stopAndRollback' });\n                            document.body.removeChild(pauseOverlay);\n                            isPaused = false;\n                            isProcessing = false;\n                            updatePauseButtonState();\n                        }\n                    });\n                }\n\n                // Create activity indicator\n                const activityIndicator = document.createElement('div');\n                activityIndicator.className = 'activity-indicator';\n\n                const spinner = document.createElement('div');\n                spinner.className = 'spinner';\n\n                const text = document.createElement('div');\n                text.className = 'text';\n                text.textContent = 'Processing...';\n\n                activityIndicator.appendChild(spinner);\n                activityIndicator.appendChild(text);\n                document.body.appendChild(activityIndicator);\n\n                function updateActivityIndicator(active, text = 'Processing...') {\n                    console.log('🔄 updateActivityIndicator called:', active, text);\n                    if (active) {\n                        activityIndicator.classList.add('active');\n                        const textElement = activityIndicator.querySelector('.text');\n                        if (textElement) {\n                            textElement.textContent = text;\n                        }\n                        console.log('✅ Activity indicator made active with text:', text);\n                    } else {\n                        activityIndicator.classList.remove('active');\n                        console.log('⏹️ Activity indicator hidden');\n                    }\n                }\n                // Auto-resize textarea\n                function autoResizeTextarea() {\n                    messageInput.style.height = 'auto';\n                    const newHeight = Math.min(messageInput.scrollHeight, 150);\n                    messageInput.style.height = newHeight + 'px';\n                }\n\n                // Handle textarea input\n                messageInput.addEventListener('input', autoResizeTextarea);\n\n                // Handle Enter key (send) vs Shift+Enter (new line)\n                messageInput.addEventListener('keydown', (e) => {\n                    if (e.key === 'Enter' && !e.shiftKey) {\n                        e.preventDefault();\n                        sendMessage();\n                    }\n                });\n\n                // Initialize textarea height\n                autoResizeTextarea();\n\n                // Handle messages from extension\n                window.addEventListener('message', event => {\n                    const message = event.data;\n\n                    switch (message.type) {\n                        case 'userMessage':\n                            addMessage(message.content, 'user');\n                            break;\n\n                        case 'historyMessage':\n                            // Display history message from persistent storage\n                            if (message.isUser) {\n                                addMessage(message.content, 'user');\n                            } else {\n                                addMessage(message.content, 'assistant', message.agent);\n                            }\n                            break;\n\n                        case 'agentThinking':\n                        case 'agent_thinking':  // LangGraph v5.0.0 sends 'agent_thinking' type\n                            isProcessing = true;\n                            updatePauseButtonState();\n                            updateActivityIndicator(true, message.content || message.message || 'Processing...');\n                            addThinkingMessage(message.agent || 'orchestrator', message.content || message.message);\n                            break;\n\n                        case 'progress':\n                            console.log('📊 Progress message received:', message.agent, message.content);\n                            // Update existing progress message or create new one\n                            updateProgressMessage(message.agent, message.content);\n                            updateActivityIndicator(true, message.content || 'Processing...');\n                            break;\n\n                        case 'agentResponse':\n                        case 'response':  // LangGraph v5.0.0 sends 'response' type\n                            // Always reset processing state on response\n                            isProcessing = false;\n                            updatePauseButtonState();\n                            updateActivityIndicator(false);\n                            removeThinkingMessage();\n                            removeProgressMessages();\n\n                            // Handle content - check if it's present\n                            if (message.content) {\n                                addMessage(message.content, 'agent', message.agent || 'orchestrator');\n                            } else {\n                                console.warn('Response received without content:', message);\n                            }\n\n                            // Re-enable input and button\n                            if (stopButton) {\n                                stopButton.style.display = 'none';\n                                sendButton.style.display = 'inline-block';\n                            }\n                            if (messageInput) messageInput.disabled = false;\n                            break;\n\n                        case 'complete':\n                        case 'step_completed':  // LangGraph v5.0.0 sends 'step_completed' for intermediate steps\n                            // For step_completed, don't reset processing state yet\n                            if (message.type === 'step_completed' && message.result) {\n                                // Show intermediate result\n                                updateProgressMessage(message.agent || 'orchestrator', message.result);\n                            } else {\n                                // For 'complete', reset everything\n                                isProcessing = false;\n                                updatePauseButtonState();\n                                updateActivityIndicator(false);\n                                removeThinkingMessage();\n                                removeProgressMessages();\n                                if (stopButton) {\n                                    stopButton.style.display = 'none';\n                                    sendButton.style.display = 'inline-block';\n                                }\n                                if (messageInput) messageInput.disabled = false;\n                            }\n                            break;\n\n                        case 'clearChat':\n                            messagesDiv.innerHTML = '';\n                            isProcessing = false;\n                            updatePauseButtonState();\n                            updateActivityIndicator(false);\n                            if (stopButton) {\n                                stopButton.style.display = 'none';\n                                sendButton.style.display = 'inline-block';\n                            }\n                            if (messageInput) messageInput.disabled = false;\n                            break;\n\n                        case 'pauseActivated':\n                            isPaused = true;\n                            updatePauseButtonState();\n                            break;\n\n                        case 'resumed':\n                            isPaused = false;\n                            updatePauseButtonState();\n                            break;\n\n                        case 'stoppedAndRolledBack':\n                            isProcessing = false;\n                            isPaused = false;\n                            updatePauseButtonState();\n                            updateActivityIndicator(false);\n                            removeThinkingMessage();\n                            removeProgressMessages();\n                            if (stopButton) {\n                                stopButton.style.display = 'none';\n                                sendButton.style.display = 'inline-block';\n                            }\n                            if (messageInput) messageInput.disabled = false;\n                            break;\n\n                        case 'architecture_proposal':\n                        case 'architecture_proposal_revised':\n                            // v5.2.0: Architecture Proposal System\n                            console.log('📋 Architecture proposal received:', message);\n\n                            // Remove any existing proposal cards\n                            const existingProposal = document.querySelector('.architecture-proposal-card');\n                            if (existingProposal) {\n                                existingProposal.remove();\n                            }\n\n                            // Create and display proposal card\n                            const proposalCard = createArchitectureProposalCard(\n                                message.proposal,\n                                message.session_id || '',\n                                message.type === 'architecture_proposal_revised'\n                            );\n                            messagesDiv.appendChild(proposalCard);\n                            messagesDiv.scrollTop = messagesDiv.scrollHeight;\n\n                            // Disable input while waiting for decision\n                            if (messageInput) messageInput.disabled = true;\n                            if (sendButton) sendButton.style.display = 'none';\n                            break;\n\n                        case 'architectureApprovalProcessed':\n                            // v5.2.0: Approval was processed\n                            console.log('✅ Architecture approval processed:', message.decision);\n\n                            // Remove proposal card\n                            const proposalToRemove = document.querySelector('.architecture-proposal-card');\n                            if (proposalToRemove) {\n                                proposalToRemove.remove();\n                            }\n\n                            // Show confirmation message\n                            addMessage(\n                                \\`Architecture proposal \\${message.decision}. Continuing with implementation...\\`,\n                                'system',\n                                'architect'\n                            );\n\n                            // Re-enable input\n                            if (messageInput) messageInput.disabled = false;\n                            if (sendButton) sendButton.style.display = 'inline-block';\n                            break;\n\n                        case 'agent_activity':\n                            // v5.8.1: Agent Activity Visualization\n                            showAgentActivity(message);\n                            break;\n                    }\n                });\n\n                function addThinkingMessage(agent, content) {\n                    removeThinkingMessage();\n\n                    const messageDiv = document.createElement('div');\n                    messageDiv.className = 'message agent-message agent-thinking';\n                    messageDiv.id = 'thinking-message';\n\n                    const badge = document.createElement('span');\n                    badge.className = 'agent-badge';\n                    badge.textContent = agent;\n                    messageDiv.appendChild(badge);\n\n                    const contentDiv = document.createElement('div');\n                    contentDiv.innerHTML = formatContent(content || 'Thinking...');\n                    messageDiv.appendChild(contentDiv);\n\n                    messagesDiv.appendChild(messageDiv);\n                    messagesDiv.scrollTop = messagesDiv.scrollHeight;\n                }\n\n                function removeThinkingMessage() {\n                    const thinkingMsg = document.getElementById('thinking-message');\n                    if (thinkingMsg) {\n                        thinkingMsg.remove();\n                    }\n                }\n\n                // Map to track progress messages by agent\n                const progressMessages = new Map();\n\n                function updateProgressMessage(agent, content) {\n                    let progressDiv = progressMessages.get(agent);\n\n                    if (!progressDiv) {\n                        // Create new progress message\n                        progressDiv = document.createElement('div');\n                        progressDiv.className = 'message system-message progress-update';\n                        progressDiv.id = 'progress-' + agent.replace(/[^a-z0-9]/gi, '-');\n\n                        const badge = document.createElement('span');\n                        badge.className = 'agent-badge';\n                        badge.textContent = agent + ' Progress';\n                        progressDiv.appendChild(badge);\n\n                        const contentDiv = document.createElement('div');\n                        contentDiv.className = 'progress-content';\n                        progressDiv.appendChild(contentDiv);\n\n                        messagesDiv.appendChild(progressDiv);\n                        progressMessages.set(agent, progressDiv);\n                    }\n\n                    // Update content\n                    const contentDiv = progressDiv.querySelector('.progress-content');\n                    if (contentDiv) {\n                        contentDiv.innerHTML = formatContent(content);\n                    }\n\n                    messagesDiv.scrollTop = messagesDiv.scrollHeight;\n                }\n\n                function removeProgressMessages() {\n                    progressMessages.forEach((div, agent) => {\n                        if (div.parentNode) {\n                            div.parentNode.removeChild(div);\n                        }\n                    });\n                    progressMessages.clear();\n                }\n\n                // ============================================================================\n                // v5.8.1: Agent Activity Visualization\n                // ============================================================================\n\n                const agentActivityMap = new Map();  // agent -> activity div\n\n                function showAgentActivity(message) {\n                    const {activity_type, agent, content, tool, tool_status, tool_result} = message;\n\n                    // v6.1-alpha: Extract message content (support both 'content' and 'message' fields)\n                    const messageContent = content || message.message || '';\n\n                    // Skip if no content available\n                    if (!messageContent && activity_type !== 'agent_tool_start' && activity_type !== 'agent_tool_complete') {\n                        console.warn('Agent activity has no content:', message);\n                        return;\n                    }\n\n                    // Get or create agent activity container\n                    let activityDiv = agentActivityMap.get(agent);\n\n                    if (!activityDiv) {\n                        activityDiv = document.createElement('div');\n                        activityDiv.className = \\`agent-activity \\${agent}-activity\\`;\n                        activityDiv.innerHTML = \\`\n                            <div class=\"activity-header\">\n                                <span class=\"agent-badge\">\\${agent}</span>\n                            </div>\n                            <div class=\"activity-content\"></div>\n                        \\`;\n                        messagesDiv.appendChild(activityDiv);\n                        agentActivityMap.set(agent, activityDiv);\n                    }\n\n                    const activityContent = activityDiv.querySelector('.activity-content');\n\n                    if (activity_type === 'agent_thinking') {\n                        activityContent.innerHTML = \\`<div class=\"activity-item thinking\">💭 \\${messageContent}</div>\\`;\n                    } else if (activity_type === 'agent_progress') {\n                        const progressItem = document.createElement('div');\n                        progressItem.className = 'activity-item progress';\n                        progressItem.innerHTML = \\`📊 \\${messageContent}\\`;\n                        activityContent.appendChild(progressItem);\n                    } else if (activity_type === 'agent_tool_start') {\n                        const toolItem = document.createElement('div');\n                        toolItem.className = 'activity-item tool-running';\n                        toolItem.id = \\`tool-\\${agent}-\\${tool}\\`;\n                        toolItem.innerHTML = \\`🔧 \\${tool}() → ⏳ Running...\\`;\n                        activityContent.appendChild(toolItem);\n                    } else if (activity_type === 'agent_tool_complete') {\n                        const toolItem = document.getElementById(\\`tool-\\${agent}-\\${tool}\\`);\n                        if (toolItem) {\n                            const icon = tool_status === 'success' ? '✅' : '❌';\n                            toolItem.className = \\`activity-item tool-\\${tool_status}\\`;\n                            toolItem.innerHTML = \\`🔧 \\${tool}() → \\${icon} \\${tool_status}\\`;\n                        }\n                    } else if (activity_type === 'agent_complete') {\n                        const completeItem = document.createElement('div');\n                        completeItem.className = 'activity-item complete';\n                        completeItem.innerHTML = \\`✅ \\${content || 'Completed'}\\`;\n                        activityContent.appendChild(completeItem);\n\n                        // Remove activity div after 2 seconds\n                        setTimeout(() => {\n                            if (activityDiv.parentNode) {\n                                activityDiv.style.opacity = '0';\n                                setTimeout(() => {\n                                    if (activityDiv.parentNode) activityDiv.parentNode.removeChild(activityDiv);\n                                    agentActivityMap.delete(agent);\n                                }, 300);\n                            }\n                        }, 2000);\n                    }\n\n                    messagesDiv.scrollTop = messagesDiv.scrollHeight;\n                }\n\n                // ============================================================================\n                // v5.2.0: Architecture Proposal Card\n                // ============================================================================\n\n                function createArchitectureProposalCard(proposal, sessionId, isRevised) {\n                    const card = document.createElement('div');\n                    card.className = 'architecture-proposal-card message';\n                    card.style.cssText = \\`\n                        background: var(--vscode-editor-background);\n                        border: 2px solid var(--vscode-focusBorder);\n                        border-radius: 8px;\n                        padding: 20px;\n                        margin: 16px 0;\n                        box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n                    \\`;\n\n                    // Header\n                    const header = document.createElement('div');\n                    header.style.cssText = 'border-bottom: 1px solid var(--vscode-panel-border); padding-bottom: 12px; margin-bottom: 16px;';\n                    header.innerHTML = \\`\n                        <h2 style=\"margin: 0; color: var(--vscode-foreground); font-size: 20px;\">\n                            🏛️ Architecture Proposal \\${isRevised ? '(Revised)' : ''}\n                        </h2>\n                        <p style=\"margin: 8px 0 0 0; color: var(--vscode-descriptionForeground); font-size: 13px;\">\n                            Please review the proposed architecture and provide your decision\n                        </p>\n                    \\`;\n                    card.appendChild(header);\n\n                    // Content sections\n                    const sections = [\n                        { title: '📊 Summary', content: proposal.summary, expanded: true },\n                        { title: '✨ Suggested Improvements', content: proposal.improvements, expanded: true },\n                        { title: '🛠️ Tech Stack', content: proposal.tech_stack, expanded: false },\n                        { title: '📁 Project Structure', content: proposal.structure, expanded: false },\n                        { title: '⚠️ Risks & Mitigations', content: proposal.risks, expanded: false },\n                        { title: '🔍 Research Insights', content: proposal.research_insights, expanded: false }\n                    ];\n\n                    sections.forEach((section, index) => {\n                        const sectionDiv = document.createElement('div');\n                        sectionDiv.style.cssText = 'margin-bottom: 16px;';\n\n                        const sectionHeader = document.createElement('div');\n                        sectionHeader.style.cssText = \\`\n                            cursor: pointer;\n                            padding: 8px;\n                            background: var(--vscode-list-hoverBackground);\n                            border-radius: 4px;\n                            font-weight: 600;\n                            display: flex;\n                            align-items: center;\n                            justify-content: space-between;\n                        \\`;\n\n                        const titleSpan = document.createElement('span');\n                        titleSpan.textContent = section.title;\n                        sectionHeader.appendChild(titleSpan);\n\n                        const toggleIcon = document.createElement('span');\n                        toggleIcon.textContent = section.expanded ? '▼' : '▶';\n                        toggleIcon.style.cssText = 'font-size: 10px;';\n                        sectionHeader.appendChild(toggleIcon);\n\n                        const sectionContent = document.createElement('div');\n                        sectionContent.style.cssText = \\`\n                            padding: 12px;\n                            margin-top: 8px;\n                            background: var(--vscode-editor-background);\n                            border-left: 3px solid var(--vscode-focusBorder);\n                            border-radius: 0 4px 4px 0;\n                            white-space: pre-wrap;\n                            display: \\${section.expanded ? 'block' : 'none'};\n                        \\`;\n                        sectionContent.innerHTML = formatContent(section.content || 'No information provided');\n\n                        sectionHeader.onclick = () => {\n                            const isExpanded = sectionContent.style.display !== 'none';\n                            sectionContent.style.display = isExpanded ? 'none' : 'block';\n                            toggleIcon.textContent = isExpanded ? '▶' : '▼';\n                        };\n\n                        sectionDiv.appendChild(sectionHeader);\n                        sectionDiv.appendChild(sectionContent);\n                        card.appendChild(sectionDiv);\n                    });\n\n                    // Feedback textarea (initially hidden)\n                    const feedbackSection = document.createElement('div');\n                    feedbackSection.style.cssText = 'margin: 16px 0; display: none;';\n                    feedbackSection.id = 'feedback-section';\n\n                    const feedbackLabel = document.createElement('label');\n                    feedbackLabel.textContent = 'Your feedback or requested changes:';\n                    feedbackLabel.style.cssText = 'display: block; margin-bottom: 8px; font-weight: 500;';\n\n                    const feedbackTextarea = document.createElement('textarea');\n                    feedbackTextarea.id = 'proposal-feedback';\n                    feedbackTextarea.placeholder = 'Describe what you would like to change...';\n                    feedbackTextarea.style.cssText = \\`\n                        width: 100%;\n                        min-height: 80px;\n                        padding: 8px;\n                        background: var(--vscode-input-background);\n                        color: var(--vscode-input-foreground);\n                        border: 1px solid var(--vscode-input-border);\n                        border-radius: 4px;\n                        font-family: var(--vscode-font-family);\n                        resize: vertical;\n                    \\`;\n\n                    feedbackSection.appendChild(feedbackLabel);\n                    feedbackSection.appendChild(feedbackTextarea);\n                    card.appendChild(feedbackSection);\n\n                    // Action buttons\n                    const buttonContainer = document.createElement('div');\n                    buttonContainer.style.cssText = 'display: flex; gap: 12px; margin-top: 20px; padding-top: 16px; border-top: 1px solid var(--vscode-panel-border);';\n\n                    const approveBtn = createProposalButton('✅ Approve', '#28a745', () => {\n                        sendArchitectureApproval(sessionId, 'approved', '');\n                        card.style.opacity = '0.6';\n                        card.style.pointerEvents = 'none';\n                    });\n\n                    const modifyBtn = createProposalButton('✏️ Modify', '#ffc107', () => {\n                        const feedbackSection = card.querySelector('#feedback-section');\n                        if (feedbackSection.style.display === 'none') {\n                            feedbackSection.style.display = 'block';\n                            modifyBtn.textContent = '📤 Submit Changes';\n                        } else {\n                            const feedback = feedbackTextarea.value.trim();\n                            if (!feedback) {\n                                vscode.postMessage({\n                                    command: 'showError',\n                                    message: 'Please provide feedback for modifications'\n                                });\n                                return;\n                            }\n                            sendArchitectureApproval(sessionId, 'modified', feedback);\n                            card.style.opacity = '0.6';\n                            card.style.pointerEvents = 'none';\n                        }\n                    });\n\n                    const rejectBtn = createProposalButton('❌ Reject', '#dc3545', () => {\n                        if (confirm('Are you sure you want to reject this architecture proposal?')) {\n                            sendArchitectureApproval(sessionId, 'rejected', '');\n                            card.style.opacity = '0.6';\n                            card.style.pointerEvents = 'none';\n                        }\n                    });\n\n                    buttonContainer.appendChild(approveBtn);\n                    buttonContainer.appendChild(modifyBtn);\n                    buttonContainer.appendChild(rejectBtn);\n                    card.appendChild(buttonContainer);\n\n                    return card;\n                }\n\n                function createProposalButton(text, color, onClick) {\n                    const btn = document.createElement('button');\n                    btn.textContent = text;\n                    btn.style.cssText = \\`\n                        flex: 1;\n                        padding: 10px 20px;\n                        background: \\${color};\n                        color: white;\n                        border: none;\n                        border-radius: 4px;\n                        font-weight: 600;\n                        cursor: pointer;\n                        transition: opacity 0.2s;\n                    \\`;\n                    btn.onmouseover = () => btn.style.opacity = '0.8';\n                    btn.onmouseout = () => btn.style.opacity = '1';\n                    btn.onclick = onClick;\n                    return btn;\n                }\n\n                function sendArchitectureApproval(sessionId, decision, feedback) {\n                    console.log(\\`📤 Sending architecture approval: \\${decision}\\`, { sessionId, feedback });\n                    vscode.postMessage({\n                        type: 'architecture_approval',\n                        session_id: sessionId,\n                        decision: decision,\n                        feedback: feedback\n                    });\n                }\n\n                // ============================================================================\n                // End of v5.2.0 Architecture Proposal Card\n                // ============================================================================\n\n                // Initialization overlay functions\n                function showInitializationOverlay() {\n                    if (document.getElementById('initialization-overlay')) return;\n\n                    const overlay = document.createElement('div');\n                    overlay.id = 'initialization-overlay';\n                    overlay.className = 'initialization-overlay';\n                    overlay.innerHTML = [\n                        '<div class=\"initialization-content\">',\n                        '    <div class=\"spinner\"></div>',\n                        '    <h2>🚀 Initializing System</h2>',\n                        '    <p id=\"init-status\">Preparing KI AutoAgent...</p>',\n                        '    <div id=\"init-progress\" class=\"progress-bar\">',\n                        '        <div class=\"progress-fill\"></div>',\n                        '    </div>',\n                        '</div>'\n                    ].join('');\n                    document.body.appendChild(overlay);\n                }\n\n                function hideInitializationOverlay() {\n                    const overlay = document.getElementById('initialization-overlay');\n                    if (overlay) {\n                        overlay.classList.add('fade-out');\n                        setTimeout(() => overlay.remove(), 300);\n                    }\n                    isInitializing = false;\n                }\n\n                function updateInitStatus(status) {\n                    const statusEl = document.getElementById('init-status');\n                    if (statusEl) {\n                        statusEl.textContent = status;\n                    }\n                }\n\n                function formatContent(content) {\n                    // Enhanced markdown and formatting support\n                    if (!content) return '';\n\n                    // First escape HTML for security\n                    const escapeMap = {\n                        '&': '&amp;',\n                        '<': '&lt;',\n                        '>': '&gt;',\n                        '\"': '&quot;',\n                        \"'\": '&#039;'\n                    };\n\n                    let escaped = '';\n                    for (let i = 0; i < content.length; i++) {\n                        const char = content[i];\n                        escaped += escapeMap[char] || char;\n                    }\n\n                    // Convert markdown-style formatting\n                    // Headers\n                    escaped = escaped.replace(/^### (.+)$/gm, '<h3>$1</h3>');\n                    escaped = escaped.replace(/^## (.+)$/gm, '<h2>$1</h2>');\n                    escaped = escaped.replace(/^# (.+)$/gm, '<h1>$1</h1>');\n\n                    // Bold and Italic\n                    escaped = escaped.replace(/\\\\*\\\\*(.+?)\\\\*\\\\*/g, '<strong>$1</strong>');\n                    escaped = escaped.replace(/\\\\*(.+?)\\\\*/g, '<em>$1</em>');\n\n                    // Code blocks - match triple backticks\n                    const codeBlockStart = escaped.indexOf('&lt;code&gt;&lt;code&gt;&lt;code&gt;');\n                    if (codeBlockStart !== -1) {\n                        const codeBlockEnd = escaped.indexOf('&lt;code&gt;&lt;code&gt;&lt;code&gt;', codeBlockStart + 1);\n                        if (codeBlockEnd !== -1) {\n                            const before = escaped.substring(0, codeBlockStart);\n                            const code = escaped.substring(codeBlockStart + 39, codeBlockEnd);\n                            const after = escaped.substring(codeBlockEnd + 39);\n                            escaped = before + '&lt;pre&gt;&lt;code&gt;' + code + '&lt;/code&gt;&lt;/pre&gt;' + after;\n                        }\n                    }\n\n                    // Inline code - match single backticks\n                    escaped = escaped.replace(/&lt;code&gt;([^&]+)&lt;code&gt;/g, '&lt;code&gt;$1&lt;/code&gt;');\n\n                    // Lists\n                    escaped = escaped.replace(/^\\\\* (.+)$/gm, '<li>$1</li>');\n                    escaped = escaped.replace(/^- (.+)$/gm, '<li>$1</li>');\n                    escaped = escaped.replace(/^\\\\d+\\\\. (.+)$/gm, '<li>$1</li>');\n\n                    // Wrap consecutive li elements in ul\n                    escaped = escaped.replace(/(<li>.+<\\\\/li>\\\\s*)+/g, function(match) {\n                        return '<ul>' + match + '</ul>';\n                    });\n\n                    // Line breaks\n                    escaped = escaped.split('\\\\n\\\\n').join('</p><p>');\n                    escaped = escaped.split('\\\\n').join('<br>');\n\n                    // Wrap in paragraph if not already wrapped\n                    if (!escaped.startsWith('<')) {\n                        escaped = '<p>' + escaped + '</p>';\n                    }\n\n                    return escaped;\n                }\n            </script>\n        </body>\n        </html>`;\n    }\n\n    public dispose() {\n        MultiAgentChatPanel.currentPanel = undefined;\n        this._isDisposed = true;\n\n        // Clean up BackendClient event listeners to prevent \"Webview is disposed\" errors\n        if (this.backendClient) {\n            this.backendClient.removeAllListeners('response');\n            this.backendClient.removeAllListeners('thinking');\n            this.backendClient.removeAllListeners('progress');\n            this.backendClient.removeAllListeners('complete');\n            this.backendClient.removeAllListeners('error');\n            this.backendClient.removeAllListeners('welcome');\n            this.backendClient.removeAllListeners('stream_chunk');\n            MultiAgentChatPanel.debugChannel.appendLine('✅ Cleaned up BackendClient event listeners');\n        }\n\n        this._panel.dispose();\n\n        while (this._disposables.length) {\n            const disposable = this._disposables.pop();\n            if (disposable) {\n                disposable.dispose();\n            }\n        }\n    }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["module","exports","require","ModelSettingsManager","backendClient","cachedModels","Map","this","getInstance","instance","refreshAvailableModels","response","fetch","getBackendUrl","allModels","json","provider","providerResponse","providerData","set","updateSettingsSchema","modelData","vscode","window","showInformationMessage","Object","keys","length","error","console","showWarningMessage","discoverModelsOnStartup","log","ok","status","Error","statusText","descriptions","clear","data","entries","models","map","m","id","latest","slice","recommended","openai","total","anthropic","perplexity","showRichModelPicker","agentId","get","refreshedData","items","model","costInfo","costPerMToken","input","output","prosText","pros","join","consText","cons","label","name","description","tier","detail","bestFor","recommendedIds","values","forEach","item","includes","selected","showQuickPick","placeHolder","title","toUpperCase","matchOnDescription","matchOnDetail","undefined","openaiModels","anthropicModels","perplexityModels","getAgentModel","agentName","config","workspace","getConfiguration","toLowerCase","showModelSelectionPicker","modelConfig","getModelDescription","isRecommended","registerCommands","context","subscriptions","push","commands","registerCommand","async","withProgress","location","ProgressLocation","Notification","cancellable","progress","report","message","selectedAgent","update","ConfigurationTarget","Global","outputChannel","createOutputChannel","show","appendLine","Date","toLocaleString","version","showChatCmd","wsUrl","BackendClient","MultiAgentChatPanel","createOrShow","extensionUri","helpCmd","restartBackendCmd","connect","showErrorMessage","backendStatusCmd","connected","isConnectedToBackend","registerCommandsEarly","statusBarItem","createStatusBarItem","StatusBarAlignment","Right","text","tooltip","command","modelSettingsManager","on","agent","sendMessageToPanel","type","content","showInstructionsCmd","createWebviewPanel","ViewColumn","One","webview","html","registerBackendCommands","disconnect","dispose","EventEmitter","super","ws","reconnectTimer","reconnectAttempts","maxReconnectAttempts","isConnected","messageQueue","debugChannel","match","setDebugChannel","channel","backendUrl","startsWith","replace","Promise","resolve","reject","workspaceFolders","workspacePath","uri","fsPath","isInitialized","JSON","parse","toString","workspace_path","session_id","emit","processMessageQueue","handleMessage","initMessage","send","stringify","scheduleReconnect","sendChatMessage","request","prompt","metadata","thinkingMode","mode","sendMessage","sendCommand","args","sendWorkflow","workflow","substring","progressContent","done","chunkContent","details","proposal","decision","toolAction","tool","tool_status","action_type","resultMsg","success","quality_score","subtype","execution_time","agents_completed","files_generated","tools","permission_mode","cliMsg","duration_ms","toFixed","events_count","output_length","errMsg","error_type","shift","catch","delay","Math","min","pow","setTimeout","clearTimeout","close","removeAllListeners","column","Beside","currentPanel","_panel","reveal","panel","viewType","enableScripts","retainContextWhenHidden","_disposables","_isDisposed","_thinkingMode","_thinkingIntensity","_isProcessing","_conversationHistory","_streamBuffer","lastProgressMessage","progressDebounceTimers","processedMessages","Set","_extensionUri","_update","onDidReceiveMessage","handleChatMessage","handleAgentSelection","handleCommand","handleNewChat","handlePause","handleResumeWithInstructions","instructions","handleStopAndRollback","handleToggleThinking","handleShowHistory","handleLoadHistory","handleDebugMessage","handleArchitectureApproval","onDidDispose","setupBackendHandlers","delete","msgToSend","timestamp","toISOString","role","has","timer","isStreaming","now","task","result","then","selection","p","formatted_message","activity_type","tool_result","process","cwd","enabled","intensity","feedback","projectPath","limit","encodeURIComponent","history","source","msg","isUser","messageId","add","size","Array","from","postMessage","toLocaleTimeString","level","_getHtmlForWebview","disposable","pop","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}