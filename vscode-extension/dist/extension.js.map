{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://ki-autoagent-vscode/./src/agents/ArchitectAgent.ts","webpack://ki-autoagent-vscode/./src/agents/CodeSmithAgent.ts","webpack://ki-autoagent-vscode/./src/utils/AnthropicService.ts","webpack://ki-autoagent-vscode/./src/core/VSCodeMasterDispatcher.ts","webpack://ki-autoagent-vscode/./src/agents/OpusArbitratorAgent.ts","webpack://ki-autoagent-vscode/./src/extension.ts","webpack://ki-autoagent-vscode/./src/agents/OrchestratorAgent.ts","webpack://ki-autoagent-vscode/external commonjs \"vscode\"","webpack://ki-autoagent-vscode/./src/utils/OpenAIService.ts","webpack://ki-autoagent-vscode/./src/agents/ResearchAgent.ts","webpack://ki-autoagent-vscode/./src/ui/ChatWidget.ts","webpack://ki-autoagent-vscode/./src/utils/ClaudeWebService.ts","webpack://ki-autoagent-vscode/./src/utils/WebSearchService.ts","webpack://ki-autoagent-vscode/./src/ui/MultiAgentChatPanel.ts","webpack://ki-autoagent-vscode/./src/agents/base/ChatAgent.ts","webpack://ki-autoagent-vscode/./src/agents/TradeStratAgent.ts","webpack://ki-autoagent-vscode/webpack/bootstrap","webpack://ki-autoagent-vscode/webpack/startup"],"sourcesContent":["/**\n * ArchitectGPT - System Architecture & Design Expert\n * Powered by GPT-4o for system design and architecture planning\n */\nimport * as vscode from 'vscode';\nimport { ChatAgent } from './base/ChatAgent';\nimport { AgentConfig, TaskRequest, TaskResult, WorkflowStep } from '../types';\nimport { VSCodeMasterDispatcher } from '../core/VSCodeMasterDispatcher';\nimport { OpenAIService } from '../utils/OpenAIService';\n\nexport class ArchitectAgent extends ChatAgent {\n    private openAIService: OpenAIService;\n\n    constructor(context: vscode.ExtensionContext, dispatcher: VSCodeMasterDispatcher) {\n        const config: AgentConfig = {\n            participantId: 'ki-autoagent.architect',\n            name: 'architect',\n            fullName: 'ArchitectGPT',\n            description: 'System Architecture & Design Expert powered by GPT-4o',\n            model: 'gpt-4o',\n            iconPath: vscode.Uri.joinPath(context.extensionUri, 'media', 'openai-icon.svg'),\n            capabilities: [\n                'System Design',\n                'Architecture Patterns',\n                'Tech Stack Planning',\n                'Scalability Analysis',\n                'Design Documentation'\n            ],\n            commands: [\n                { name: 'design', description: 'Create system architecture and design patterns', handler: 'handleDesignCommand' },\n                { name: 'analyze', description: 'Analyze existing codebase architecture', handler: 'handleAnalyzeCommand' },\n                { name: 'plan', description: 'Create development and deployment plans', handler: 'handlePlanCommand' }\n            ]\n        };\n\n        super(config, context, dispatcher);\n        this.openAIService = new OpenAIService();\n    }\n\n    protected async handleRequest(\n        request: vscode.ChatRequest,\n        context: vscode.ChatContext,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        if (!this.validateApiConfig()) {\n            stream.markdown('❌ OpenAI API key not configured. Please set it in VS Code settings.');\n            return;\n        }\n\n        const command = request.command;\n        const prompt = request.prompt;\n\n        this.log(`Processing ${command ? `/${command}` : 'general'} request: ${prompt.substring(0, 100)}...`);\n\n        if (command) {\n            await this.handleCommand(command, prompt, stream, token);\n        } else {\n            // General architecture request\n            await this.handleGeneralArchitectureRequest(prompt, stream, token);\n        }\n    }\n\n    protected async processWorkflowStep(\n        step: WorkflowStep,\n        request: TaskRequest,\n        previousResults: TaskResult[]\n    ): Promise<TaskResult> {\n        \n        const context = await this.getWorkspaceContext();\n        \n        let systemPrompt = '';\n        let userPrompt = '';\n\n        switch (step.id) {\n            case 'analyze':\n                systemPrompt = this.getAnalyzeSystemPrompt();\n                userPrompt = `Analyze the architecture requirements for: ${request.prompt}\\n\\nWorkspace Context:\\n${context}`;\n                break;\n                \n            case 'design':\n                systemPrompt = this.getDesignSystemPrompt();\n                userPrompt = `Create a system architecture design for: ${request.prompt}\\n\\nPrevious Analysis:\\n${this.extractPreviousContent(previousResults)}`;\n                break;\n                \n            default:\n                systemPrompt = this.getGeneralSystemPrompt();\n                userPrompt = `${request.prompt}\\n\\nContext:\\n${context}`;\n        }\n\n        try {\n            const response = await this.openAIService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            return {\n                status: 'success',\n                content: response,\n                metadata: { \n                    step: step.id,\n                    agent: 'architect',\n                    model: 'gpt-4o'\n                }\n            };\n\n        } catch (error) {\n            throw new Error(`Failed to process ${step.id}: ${(error as any).message}`);\n        }\n    }\n\n    // Command Handlers\n\n    private async handleDesignCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('🏗️ Analyzing requirements and creating system design...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getDesignSystemPrompt();\n        const userPrompt = `Create a comprehensive system architecture design for: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const response = await this.openAIService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown(response);\n\n            // Offer to create architecture documentation\n            this.createActionButton(\n                '📄 Create Architecture Document',\n                'ki-autoagent.createFile',\n                ['ARCHITECTURE.md', response],\n                stream\n            );\n\n            // Offer to proceed with implementation planning\n            this.createActionButton(\n                '⚡ Plan Implementation',\n                'ki-autoagent.planImplementation',\n                [prompt, response],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Error creating design: ${(error as any).message}`);\n        }\n    }\n\n    private async handleAnalyzeCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('🔍 Analyzing existing codebase architecture...');\n        \n        const context = await this.getWorkspaceContext();\n        \n        // Get project files for analysis\n        const workspaceFiles = await this.getProjectStructure();\n        \n        const systemPrompt = this.getAnalyzeSystemPrompt();\n        const userPrompt = `Analyze the architecture of this codebase: ${prompt}\\n\\nProject Structure:\\n${workspaceFiles}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const response = await this.openAIService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown(response);\n\n            // Offer architecture improvements\n            this.createActionButton(\n                '🚀 Suggest Improvements',\n                'ki-autoagent.suggestImprovements',\n                [response],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Error analyzing architecture: ${(error as any).message}`);\n        }\n    }\n\n    private async handlePlanCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('📋 Creating development and deployment plans...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getPlanSystemPrompt();\n        const userPrompt = `Create a detailed development and deployment plan for: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const response = await this.openAIService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown(response);\n\n            // Offer to create project roadmap\n            this.createActionButton(\n                '🗺️ Create Roadmap',\n                'ki-autoagent.createFile',\n                ['ROADMAP.md', response],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Error creating plan: ${(error as any).message}`);\n        }\n    }\n\n    private async handleGeneralArchitectureRequest(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('🤔 Processing architecture request...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getGeneralSystemPrompt();\n        const userPrompt = `${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const response = await this.openAIService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown(response);\n\n        } catch (error) {\n            stream.markdown(`❌ Error processing request: ${(error as any).message}`);\n        }\n    }\n\n    // System Prompts\n\n    private getGeneralSystemPrompt(): string {\n        return `You are ArchitectGPT, a senior system architect and design expert. You specialize in:\n\n- System architecture design and patterns\n- Technology stack selection and evaluation\n- Scalability and performance planning\n- Microservices and distributed systems\n- Database design and data modeling\n- API design and integration patterns\n- Security architecture\n- DevOps and deployment strategies\n\nAlways provide:\n1. Clear architectural reasoning\n2. Multiple solution options when applicable\n3. Trade-offs and considerations\n4. Implementation guidance\n5. Best practices and patterns\n\nFormat your responses with clear headings, diagrams where helpful (using mermaid syntax), and actionable recommendations.`;\n    }\n\n    private getDesignSystemPrompt(): string {\n        return `You are ArchitectGPT creating a comprehensive system architecture design. Follow this structure:\n\n## System Architecture Design\n\n### 1. Requirements Analysis\n- Functional requirements\n- Non-functional requirements (performance, scalability, security)\n- Constraints and assumptions\n\n### 2. High-Level Architecture\n- System overview\n- Major components and their responsibilities\n- Data flow and interactions\n\n### 3. Technology Stack\n- Recommended technologies with rationale\n- Alternatives considered\n- Integration points\n\n### 4. Database Design\n- Data model\n- Storage strategy\n- Performance considerations\n\n### 5. API Design\n- Interface specifications\n- Authentication/authorization\n- Rate limiting and caching\n\n### 6. Security Architecture\n- Security measures\n- Authentication/authorization\n- Data protection\n\n### 7. Deployment Architecture\n- Infrastructure requirements\n- Scaling strategy\n- Monitoring and observability\n\n### 8. Implementation Roadmap\n- Development phases\n- Dependencies and milestones\n- Risk mitigation\n\nUse mermaid diagrams where appropriate to illustrate the architecture.`;\n    }\n\n    private getAnalyzeSystemPrompt(): string {\n        return `You are ArchitectGPT analyzing an existing codebase architecture. Provide:\n\n## Architecture Analysis\n\n### 1. Current Architecture Overview\n- Identify architectural patterns used\n- Component structure and organization\n- Technology stack assessment\n\n### 2. Strengths\n- What's working well\n- Good design decisions\n- Proper patterns implementation\n\n### 3. Areas for Improvement\n- Architectural debt\n- Performance bottlenecks\n- Security concerns\n- Scalability limitations\n\n### 4. Recommendations\n- Prioritized improvement suggestions\n- Refactoring opportunities\n- Technology upgrades\n\n### 5. Next Steps\n- Immediate actions\n- Long-term architectural goals\n- Migration strategies\n\nBe specific and provide actionable insights based on the codebase structure.`;\n    }\n\n    private getPlanSystemPrompt(): string {\n        return `You are ArchitectGPT creating development and deployment plans. Structure your response as:\n\n## Development & Deployment Plan\n\n### 1. Project Setup\n- Repository structure\n- Development environment\n- Tool and dependency setup\n\n### 2. Development Phases\n- Phase breakdown with deliverables\n- Timeline estimates\n- Resource requirements\n\n### 3. Implementation Strategy\n- Development methodology\n- Code review process\n- Testing strategy\n\n### 4. Deployment Strategy\n- Environment setup (dev, staging, prod)\n- CI/CD pipeline\n- Rollback procedures\n\n### 5. Risk Management\n- Identified risks\n- Mitigation strategies\n- Contingency plans\n\n### 6. Success Metrics\n- KPIs and measurements\n- Monitoring and alerting\n- Performance benchmarks\n\nProvide realistic timelines and clear milestones.`;\n    }\n\n    // Helper Methods\n\n    private async getProjectStructure(): Promise<string> {\n        try {\n            const files = await vscode.workspace.findFiles('**/*.{py,js,ts,jsx,tsx,json,md}', '**/node_modules/**', 50);\n            return files.map(file => file.fsPath.split('/').slice(-3).join('/')).join('\\n');\n        } catch (error) {\n            return 'Unable to read project structure';\n        }\n    }\n\n    private extractPreviousContent(previousResults: TaskResult[]): string {\n        return previousResults\n            .map(result => result.content)\n            .join('\\n\\n---\\n\\n')\n            .substring(0, 2000); // Limit context size\n    }\n}","/**\n * CodeSmithClaude - Senior Python/Web Developer\n * Powered by Claude 3.5 Sonnet for code implementation and optimization\n */\nimport * as vscode from 'vscode';\nimport { ChatAgent } from './base/ChatAgent';\nimport { AgentConfig, TaskRequest, TaskResult, WorkflowStep } from '../types';\nimport { VSCodeMasterDispatcher } from '../core/VSCodeMasterDispatcher';\nimport { AnthropicService } from '../utils/AnthropicService';\nimport { ClaudeWebService } from '../utils/ClaudeWebService';\n\nexport class CodeSmithAgent extends ChatAgent {\n    private anthropicService: AnthropicService;\n    private claudeWebService: ClaudeWebService;\n\n    constructor(context: vscode.ExtensionContext, dispatcher: VSCodeMasterDispatcher) {\n        const config: AgentConfig = {\n            participantId: 'ki-autoagent.codesmith',\n            name: 'codesmith',\n            fullName: 'CodeSmithClaude',\n            description: 'Senior Python/Web Developer powered by Claude 3.5 Sonnet',\n            model: 'claude-3.5-sonnet',\n            iconPath: vscode.Uri.joinPath(context.extensionUri, 'media', 'claude-icon.svg'),\n            capabilities: [\n                'Python Development',\n                'Web Development',\n                'API Implementation',\n                'Testing & TDD',\n                'Code Optimization',\n                'Framework Integration'\n            ],\n            commands: [\n                { name: 'implement', description: 'Implement code based on specifications', handler: 'handleImplementCommand' },\n                { name: 'optimize', description: 'Optimize existing code for performance', handler: 'handleOptimizeCommand' },\n                { name: 'test', description: 'Generate comprehensive test suites', handler: 'handleTestCommand' }\n            ]\n        };\n\n        super(config, context, dispatcher);\n        this.anthropicService = new AnthropicService();\n        this.claudeWebService = new ClaudeWebService();\n    }\n\n    protected async handleRequest(\n        request: vscode.ChatRequest,\n        context: vscode.ChatContext,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        const validationResult = await this.validateServiceConfig(stream);\n        if (!validationResult) {\n            return;\n        }\n\n        const command = request.command;\n        const prompt = request.prompt;\n\n        this.log(`Processing ${command ? `/${command}` : 'general'} request: ${prompt.substring(0, 100)}...`);\n\n        if (command) {\n            await this.handleCommand(command, prompt, stream, token);\n        } else {\n            await this.handleGeneralImplementationRequest(prompt, stream, token);\n        }\n    }\n\n    protected async processWorkflowStep(\n        step: WorkflowStep,\n        request: TaskRequest,\n        previousResults: TaskResult[]\n    ): Promise<TaskResult> {\n        \n        const context = await this.getWorkspaceContext();\n        \n        let systemPrompt = '';\n        let userPrompt = '';\n\n        switch (step.id) {\n            case 'implement':\n                systemPrompt = this.getImplementationSystemPrompt();\n                userPrompt = `Implement the following: ${request.prompt}\\n\\nWorkspace Context:\\n${context}`;\n                break;\n                \n            case 'test':\n                systemPrompt = this.getTestingSystemPrompt();\n                userPrompt = `Create comprehensive tests for: ${request.prompt}\\n\\nPrevious Implementation:\\n${this.extractPreviousContent(previousResults)}`;\n                break;\n                \n            case 'optimize':\n                systemPrompt = this.getOptimizationSystemPrompt();\n                userPrompt = `Optimize this implementation: ${request.prompt}\\n\\nContext:\\n${context}`;\n                break;\n                \n            default:\n                systemPrompt = this.getGeneralSystemPrompt();\n                userPrompt = `${request.prompt}\\n\\nContext:\\n${context}`;\n        }\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            return {\n                status: 'success',\n                content: response,\n                metadata: { \n                    step: step.id,\n                    agent: 'codesmith',\n                    model: 'claude-3.5-sonnet'\n                }\n            };\n\n        } catch (error) {\n            throw new Error(`Failed to process ${step.id}: ${(error as any).message}`);\n        }\n    }\n\n    // Command Handlers\n\n    private async handleImplementCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('⚡ Implementing your requirements...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getImplementationSystemPrompt();\n        const userPrompt = `Implement the following requirements: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown(response);\n\n            // Extract code blocks for file creation\n            const codeBlocks = this.extractCodeBlocks(response);\n            \n            for (const block of codeBlocks) {\n                if (block.filename) {\n                    this.createActionButton(\n                        `📄 Create ${block.filename}`,\n                        'ki-autoagent.createFile',\n                        [block.filename, block.code],\n                        stream\n                    );\n                }\n            }\n\n            // Offer to create tests\n            this.createActionButton(\n                '🧪 Generate Tests',\n                'ki-autoagent.generateTests',\n                [prompt, response],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Error during implementation: ${(error as any).message}`);\n        }\n    }\n\n    private async handleOptimizeCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('🚀 Optimizing code for performance...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getOptimizationSystemPrompt();\n        \n        // Include current file content if available\n        let codeToOptimize = '';\n        if (context.includes('Selected text:')) {\n            codeToOptimize = context;\n        } else if (vscode.window.activeTextEditor) {\n            const document = vscode.window.activeTextEditor.document;\n            codeToOptimize = `Current file: ${document.fileName}\\n\\`\\`\\`${document.languageId}\\n${document.getText()}\\n\\`\\`\\``;\n        }\n        \n        const userPrompt = `Optimize the following code: ${prompt}\\n\\nCode to optimize:\\n${codeToOptimize}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown(response);\n\n            // Offer to apply optimizations\n            const optimizedCode = this.extractMainCodeBlock(response);\n            if (optimizedCode) {\n                this.createActionButton(\n                    '✨ Apply Optimization',\n                    'ki-autoagent.insertAtCursor',\n                    [optimizedCode],\n                    stream\n                );\n            }\n\n        } catch (error) {\n            stream.markdown(`❌ Error during optimization: ${(error as any).message}`);\n        }\n    }\n\n    private async handleTestCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('🧪 Generating comprehensive test suite...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getTestingSystemPrompt();\n        const userPrompt = `Generate comprehensive tests for: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown(response);\n\n            // Extract test files for creation\n            const testFiles = this.extractTestFiles(response);\n            \n            for (const testFile of testFiles) {\n                this.createActionButton(\n                    `🧪 Create ${testFile.filename}`,\n                    'ki-autoagent.createFile',\n                    [testFile.filename, testFile.code],\n                    stream\n                );\n            }\n\n            // Offer to run tests\n            this.createActionButton(\n                '▶️ Run Tests',\n                'ki-autoagent.runTests',\n                [],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Error generating tests: ${(error as any).message}`);\n        }\n    }\n\n    private async handleGeneralImplementationRequest(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('💻 Processing implementation request...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getGeneralSystemPrompt();\n        const userPrompt = `${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown(response);\n\n            // Auto-detect and offer file creation\n            const codeBlocks = this.extractCodeBlocks(response);\n            for (const block of codeBlocks) {\n                if (block.filename) {\n                    this.createActionButton(\n                        `📄 Create ${block.filename}`,\n                        'ki-autoagent.createFile',\n                        [block.filename, block.code],\n                        stream\n                    );\n                }\n            }\n\n        } catch (error) {\n            stream.markdown(`❌ Error processing request: ${(error as any).message}`);\n        }\n    }\n\n    // System Prompts\n\n    private getGeneralSystemPrompt(): string {\n        return `You are CodeSmithClaude, a senior Python and web developer with expertise in:\n\n- Python development (Django, FastAPI, Flask, Streamlit)\n- Web development (React, TypeScript, JavaScript)\n- API design and implementation\n- Database design and ORM usage\n- Testing strategies (pytest, unittest, Jest)\n- Code optimization and performance\n- Modern development practices\n\nAlways provide:\n1. Clean, readable, and well-documented code\n2. Proper error handling and validation\n3. Performance considerations\n4. Security best practices\n5. Testing recommendations\n\nFormat your responses with clear explanations and working code examples.`;\n    }\n\n    private getImplementationSystemPrompt(): string {\n        return `You are CodeSmithClaude implementing code based on specifications. Follow this structure:\n\n## Implementation Plan\n\n### 1. Analysis\n- Break down requirements\n- Identify components needed\n- Choose appropriate patterns\n\n### 2. Core Implementation\n- Main functionality with proper structure\n- Error handling and validation\n- Clear documentation\n\n### 3. Integration Points\n- How this connects to existing code\n- Dependencies and imports\n- Configuration requirements\n\n### 4. Usage Examples\n- How to use the implemented code\n- Example scenarios\n- Common patterns\n\n### 5. Next Steps\n- Testing recommendations\n- Potential improvements\n- Deployment considerations\n\nProvide complete, working code with filenames when appropriate. Focus on clean, maintainable solutions.`;\n    }\n\n    private getOptimizationSystemPrompt(): string {\n        return `You are CodeSmithClaude optimizing code for performance. Follow this approach:\n\n## Code Optimization Analysis\n\n### 1. Current Code Analysis\n- Identify performance bottlenecks\n- Analyze complexity and efficiency\n- Spot potential issues\n\n### 2. Optimization Strategies\n- Algorithm improvements\n- Data structure optimizations\n- Caching opportunities\n- Memory efficiency\n\n### 3. Optimized Implementation\n- Improved code with explanations\n- Performance comparisons\n- Benchmark suggestions\n\n### 4. Trade-offs\n- Performance vs readability\n- Memory vs speed\n- Complexity considerations\n\nAlways maintain code readability while improving performance. Explain your optimization choices.`;\n    }\n\n    private getTestingSystemPrompt(): string {\n        return `You are CodeSmithClaude creating comprehensive test suites. Structure your tests as:\n\n## Test Suite Design\n\n### 1. Test Strategy\n- Test types needed (unit, integration, e2e)\n- Coverage goals\n- Testing framework choice\n\n### 2. Unit Tests\n- Test individual functions/methods\n- Edge cases and error conditions\n- Mocking strategies\n\n### 3. Integration Tests\n- Component interactions\n- API endpoint testing\n- Database integration\n\n### 4. Test Utilities\n- Fixtures and test data\n- Helper functions\n- Setup/teardown\n\n### 5. Test Configuration\n- Test runner setup\n- CI/CD integration\n- Coverage reporting\n\nProvide complete, runnable tests with clear assertions and good coverage.`;\n    }\n\n    // Service Configuration Methods\n\n    private async validateServiceConfig(stream?: vscode.ChatResponseStream): Promise<boolean> {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent');\n        const serviceMode = config.get<string>('serviceMode', 'web');\n\n        if (serviceMode === 'api') {\n            if (!config.get<string>('anthropic.apiKey')) {\n                if (stream) {\n                    stream.markdown('❌ **Anthropic API key not configured**\\n\\nPlease set your API key in VS Code settings:\\n- Go to Settings\\n- Search for \"KI AutoAgent\"\\n- Set your Anthropic API key');\n                }\n                return false;\n            }\n        } else if (serviceMode === 'web') {\n            const isWebServiceAvailable = await this.claudeWebService.testConnection();\n            if (!isWebServiceAvailable) {\n                if (stream) {\n                    const status = await this.claudeWebService.getServerStatus();\n                    stream.markdown(`❌ **Claude Web Service not available**\\n\\nError: ${status.error || 'Connection failed'}\\n\\n**To fix this:**\\n1. Make sure Claude Web Proxy server is running\\n2. Check server URL: ${status.url}\\n3. Ensure you're logged into Claude.ai in your browser`);\n                }\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private async getClaudeService(): Promise<{ chat: (messages: any[]) => Promise<string> }> {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent');\n        const serviceMode = config.get<string>('serviceMode', 'web');\n\n        if (serviceMode === 'web') {\n            return {\n                chat: async (messages: any[]) => {\n                    return await this.claudeWebService.chat(messages);\n                }\n            };\n        } else {\n            return {\n                chat: async (messages: any[]) => {\n                    return await this.anthropicService.chat(messages);\n                }\n            };\n        }\n    }\n\n    // Helper Methods\n\n    private extractCodeBlocks(content: string): Array<{filename?: string, language: string, code: string}> {\n        const codeBlockRegex = /```(\\w+)?\\s*(?:\\/\\/\\s*(.+\\.[\\w]+))?\\n([\\s\\S]*?)```/g;\n        const blocks: Array<{filename?: string, language: string, code: string}> = [];\n        \n        let match;\n        while ((match = codeBlockRegex.exec(content)) !== null) {\n            const language = match[1] || 'text';\n            const filename = match[2] || this.inferFilename(language, match[3]);\n            const code = match[3];\n            \n            blocks.push({ filename, language, code });\n        }\n        \n        return blocks;\n    }\n\n    private extractTestFiles(content: string): Array<{filename: string, code: string}> {\n        const blocks = this.extractCodeBlocks(content);\n        return blocks\n            .filter(block => \n                block.filename && \n                (block.filename.includes('test') || block.filename.includes('spec'))\n            )\n            .map(block => ({ filename: block.filename!, code: block.code }));\n    }\n\n    private extractMainCodeBlock(content: string): string {\n        const blocks = this.extractCodeBlocks(content);\n        return blocks.length > 0 ? blocks[0].code : '';\n    }\n\n    private inferFilename(language: string, code: string): string {\n        // Try to infer filename from code content\n        if (language === 'python') {\n            const classMatch = code.match(/class\\s+(\\w+)/);\n            if (classMatch) {\n                return `${classMatch[1].toLowerCase()}.py`;\n            }\n            return 'main.py';\n        } else if (language === 'typescript' || language === 'javascript') {\n            const classMatch = code.match(/(?:class|interface)\\s+(\\w+)/);\n            if (classMatch) {\n                return `${classMatch[1]}.${language === 'typescript' ? 'ts' : 'js'}`;\n            }\n            return `index.${language === 'typescript' ? 'ts' : 'js'}`;\n        }\n        \n        return `code.${language}`;\n    }\n\n    private extractPreviousContent(previousResults: TaskResult[]): string {\n        return previousResults\n            .map(result => result.content)\n            .join('\\n\\n---\\n\\n')\n            .substring(0, 2000); // Limit context size\n    }\n}","/**\n * Anthropic Service for Claude model interactions\n */\nimport * as vscode from 'vscode';\n\ninterface ChatMessage {\n    role: 'system' | 'user' | 'assistant';\n    content: string;\n}\n\ninterface ChatResponse {\n    content: Array<{\n        text: string;\n        type: string;\n    }>;\n}\n\nexport class AnthropicService {\n    private apiKey: string;\n    private baseURL: string;\n\n    constructor() {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent');\n        this.apiKey = config.get<string>('anthropic.apiKey', '');\n        this.baseURL = 'https://api.anthropic.com/v1';\n    }\n\n    async chat(\n        messages: ChatMessage[],\n        model: string = 'claude-3-5-sonnet-20241022',\n        maxTokens: number = 4000,\n        temperature: number = 0.7\n    ): Promise<string> {\n        \n        if (!this.apiKey) {\n            throw new Error('Anthropic API key not configured');\n        }\n\n        // Anthropic expects system message separate from messages\n        const systemMessage = messages.find(m => m.role === 'system');\n        const conversationMessages = messages.filter(m => m.role !== 'system');\n\n        const requestBody = {\n            model,\n            max_tokens: maxTokens,\n            temperature,\n            system: systemMessage?.content || '',\n            messages: conversationMessages.map(msg => ({\n                role: msg.role,\n                content: msg.content\n            }))\n        };\n\n        try {\n            const response = await fetch(`${this.baseURL}/messages`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-API-Key': this.apiKey,\n                    'anthropic-version': '2023-06-01'\n                },\n                body: JSON.stringify(requestBody)\n            });\n\n            if (!response.ok) {\n                const errorData = await response.json().catch(() => ({ error: { message: response.statusText } }));\n                throw new Error(`Anthropic API error: ${(errorData as any).error?.message || response.statusText}`);\n            }\n\n            const data= await response.json() as ChatResponse;\n            \n            if (!data.content || data.content.length === 0) {\n                throw new Error('No response from Anthropic API');\n            }\n\n            // Extract text from content blocks\n            return data.content\n                .filter(block => block.type === 'text')\n                .map(block => block.text)\n                .join('');\n\n        } catch (error) {\n            if (error instanceof Error) {\n                throw error;\n            }\n            throw new Error(`Anthropic API request failed: ${error}`);\n        }\n    }\n\n    async streamChat(\n        messages: ChatMessage[],\n        onChunk: (chunk: string) => void,\n        model: string = 'claude-3-5-sonnet-20241022',\n        maxTokens: number = 4000,\n        temperature: number = 0.7\n    ): Promise<void> {\n        \n        if (!this.apiKey) {\n            throw new Error('Anthropic API key not configured');\n        }\n\n        const systemMessage = messages.find(m => m.role === 'system');\n        const conversationMessages = messages.filter(m => m.role !== 'system');\n\n        const requestBody = {\n            model,\n            max_tokens: maxTokens,\n            temperature,\n            system: systemMessage?.content || '',\n            messages: conversationMessages.map(msg => ({\n                role: msg.role,\n                content: msg.content\n            })),\n            stream: true\n        };\n\n        try {\n            const response = await fetch(`${this.baseURL}/messages`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-API-Key': this.apiKey,\n                    'anthropic-version': '2023-06-01'\n                },\n                body: JSON.stringify(requestBody)\n            });\n\n            if (!response.ok) {\n                throw new Error(`Anthropic API error: ${response.statusText}`);\n            }\n\n            const reader = response.body?.getReader();\n            if (!reader) {\n                throw new Error('Failed to get response stream');\n            }\n\n            const decoder = new TextDecoder();\n\n            while (true) {\n                const { done, value } = await reader.read();\n                \n                if (done) {\n                    break;\n                }\n\n                const chunk = decoder.decode(value);\n                const lines = chunk.split('\\n').filter(line => line.trim() !== '');\n\n                for (const line of lines) {\n                    if (line.startsWith('data: ')) {\n                        const data = line.substring(6);\n                        \n                        if (data === '[DONE]') {\n                            return;\n                        }\n\n                        try {\n                            const parsed = JSON.parse(data);\n                            \n                            if (parsed.type === 'content_block_delta') {\n                                const text = parsed.delta?.text;\n                                if (text) {\n                                    onChunk(text);\n                                }\n                            }\n                        } catch (error) {\n                            // Ignore parsing errors for incomplete chunks\n                        }\n                    }\n                }\n            }\n\n        } catch (error) {\n            throw new Error(`Anthropic streaming failed: ${error}`);\n        }\n    }\n\n    validateApiKey(): boolean {\n        return !!this.apiKey && this.apiKey.startsWith('sk-ant-');\n    }\n\n    async testConnection(): Promise<boolean> {\n        try {\n            await this.chat([\n                { role: 'user', content: 'Test connection' }\n            ], 'claude-3-5-sonnet-20241022', 10);\n            return true;\n        } catch (error) {\n            return false;\n        }\n    }\n}","/**\n * VS Code Master Dispatcher - Orchestrates AI agents in VS Code context\n * Adapted from CLI MasterDispatcher for VS Code extension environment\n */\nimport * as vscode from 'vscode';\nimport { TaskRequest, TaskResult, Intent, WorkspaceContext, ProjectTypeDefinition, WorkflowStep } from '../types';\n\nexport class VSCodeMasterDispatcher {\n    private agents: Map<string, any> = new Map();\n    private projectTypes: Map<string, ProjectTypeDefinition> = new Map();\n    private intentPatterns: Map<string, RegExp[]> = new Map();\n    private context: vscode.ExtensionContext;\n\n    constructor(context: vscode.ExtensionContext) {\n        this.context = context;\n        this.initializeProjectTypes();\n        this.initializeIntentPatterns();\n    }\n\n    /**\n     * Process a task request and route to appropriate agents\n     */\n    async processRequest(request: TaskRequest): Promise<TaskResult> {\n        try {\n            // Get workspace context\n            const workspaceContext = await this.getWorkspaceContext();\n            \n            // Detect intent and project type\n            const intent = await this.detectIntent(request.prompt);\n            const projectType = request.projectType || await this.detectProjectType(workspaceContext);\n            \n            // Create workflow\n            const workflow = this.createWorkflow(intent, projectType);\n            \n            // Execute workflow\n            const result = await this.executeWorkflow(workflow, {\n                ...request,\n                context: workspaceContext,\n                projectType\n            });\n\n            return result;\n        } catch (error) {\n            return {\n                status: 'error',\n                content: `Error processing request: ${(error as any).message}`,\n                metadata: { error: (error as any).message }\n            };\n        }\n    }\n\n    /**\n     * Detect user intent from prompt\n     */\n    async detectIntent(prompt: string): Promise<Intent> {\n        const lowerPrompt = prompt.toLowerCase();\n        \n        // Architecture patterns\n        if (this.matchesPatterns(lowerPrompt, ['design', 'architecture', 'system', 'plan', 'structure'])) {\n            return { type: 'architecture', confidence: 0.9, agent: 'architect' };\n        }\n        \n        // Implementation patterns\n        if (this.matchesPatterns(lowerPrompt, ['implement', 'code', 'create', 'build', 'develop'])) {\n            return { type: 'implementation', confidence: 0.85, agent: 'codesmith' };\n        }\n        \n        // Documentation patterns\n        if (this.matchesPatterns(lowerPrompt, ['document', 'readme', 'docs', 'explain', 'tutorial'])) {\n            return { type: 'documentation', confidence: 0.9, agent: 'docu' };\n        }\n        \n        // Review patterns\n        if (this.matchesPatterns(lowerPrompt, ['review', 'check', 'analyze', 'audit', 'security'])) {\n            return { type: 'review', confidence: 0.85, agent: 'reviewer' };\n        }\n        \n        // Debug/Fix patterns\n        if (this.matchesPatterns(lowerPrompt, ['fix', 'debug', 'error', 'bug', 'problem', 'issue'])) {\n            return { type: 'debug', confidence: 0.9, agent: 'fixer' };\n        }\n        \n        // Trading patterns\n        if (this.matchesPatterns(lowerPrompt, ['trading', 'strategy', 'backtest', 'ron', 'market', 'stock'])) {\n            return { type: 'trading', confidence: 0.95, agent: 'tradestrat' };\n        }\n        \n        // Research patterns\n        if (this.matchesPatterns(lowerPrompt, ['research', 'search', 'find', 'information', 'latest'])) {\n            return { type: 'research', confidence: 0.8, agent: 'research' };\n        }\n        \n        // Default to implementation\n        return { type: 'implementation', confidence: 0.5, agent: 'codesmith' };\n    }\n\n    /**\n     * Detect project type from workspace context\n     */\n    async detectProjectType(context?: WorkspaceContext): Promise<string> {\n        if (!context?.workspaceRoots || context.workspaceRoots.length === 0) {\n            return 'generic_software';\n        }\n\n        const workspaceRoot = context.workspaceRoots[0];\n        \n        try {\n            // Check for package.json\n            const packageJsonUri = vscode.Uri.joinPath(workspaceRoot.uri, 'package.json');\n            try {\n                const packageJsonContent = await vscode.workspace.fs.readFile(packageJsonUri);\n                const packageJson = JSON.parse(packageJsonContent.toString());\n                \n                // Trading system indicators\n                if (packageJson.dependencies?.['streamlit'] || \n                    packageJson.dependencies?.['yfinance'] ||\n                    packageJson.dependencies?.['pandas']) {\n                    return 'trading_system';\n                }\n                \n                // Web API indicators\n                if (packageJson.dependencies?.['fastapi'] ||\n                    packageJson.dependencies?.['express'] ||\n                    packageJson.dependencies?.['flask']) {\n                    return 'web_api';\n                }\n                \n                // React/Frontend indicators\n                if (packageJson.dependencies?.['react'] ||\n                    packageJson.dependencies?.['vue'] ||\n                    packageJson.dependencies?.['angular']) {\n                    return 'web_frontend';\n                }\n            } catch (error) {\n                // package.json not found or invalid\n            }\n\n            // Check for requirements.txt (Python)\n            const requirementsUri = vscode.Uri.joinPath(workspaceRoot.uri, 'requirements.txt');\n            try {\n                const requirementsContent = await vscode.workspace.fs.readFile(requirementsUri);\n                const requirements = requirementsContent.toString();\n                \n                if (requirements.includes('yfinance') || \n                    requirements.includes('pandas') ||\n                    requirements.includes('streamlit')) {\n                    return 'trading_system';\n                }\n                \n                if (requirements.includes('fastapi') ||\n                    requirements.includes('flask') ||\n                    requirements.includes('django')) {\n                    return 'web_api';\n                }\n            } catch (error) {\n                // requirements.txt not found\n            }\n\n            // Check for specific files\n            const files = await vscode.workspace.findFiles('**/*.{py,js,ts,jsx,tsx}', '**/node_modules/**', 50);\n            const filenames = files.map(uri => uri.fsPath.toLowerCase());\n            \n            if (filenames.some(f => f.includes('strategy') || f.includes('trading') || f.includes('backtest'))) {\n                return 'trading_system';\n            }\n            \n            if (filenames.some(f => f.includes('api') || f.includes('server') || f.includes('endpoint'))) {\n                return 'web_api';\n            }\n\n        } catch (error) {\n            console.error('Error detecting project type:', error);\n        }\n\n        return 'generic_software';\n    }\n\n    /**\n     * Create workflow based on intent and project type\n     */\n    createWorkflow(intent: Intent, projectType: string): WorkflowStep[] {\n        const projectDef = this.projectTypes.get(projectType);\n        \n        // Base workflow based on intent\n        let workflow: WorkflowStep[] = [];\n        \n        switch (intent.type) {\n            case 'architecture':\n                workflow = [\n                    { id: 'analyze', agent: 'architect', description: 'Analyze requirements and context' },\n                    { id: 'design', agent: 'architect', description: 'Create architecture design' },\n                    { id: 'review', agent: 'reviewer', description: 'Review architecture for best practices' }\n                ];\n                break;\n                \n            case 'implementation':\n                workflow = [\n                    { id: 'plan', agent: 'architect', description: 'Plan implementation approach' },\n                    { id: 'implement', agent: 'codesmith', description: 'Implement the solution' },\n                    { id: 'test', agent: 'codesmith', description: 'Create tests' },\n                    { id: 'review', agent: 'reviewer', description: 'Review implementation' }\n                ];\n                break;\n                \n            case 'trading':\n                workflow = [\n                    { id: 'strategy_design', agent: 'tradestrat', description: 'Design trading strategy' },\n                    { id: 'implement', agent: 'codesmith', description: 'Implement strategy code' },\n                    { id: 'backtest', agent: 'tradestrat', description: 'Create backtesting framework' },\n                    { id: 'review', agent: 'reviewer', description: 'Review for trading best practices' }\n                ];\n                break;\n                \n            case 'debug':\n                workflow = [\n                    { id: 'analyze', agent: 'fixer', description: 'Analyze the problem' },\n                    { id: 'fix', agent: 'fixer', description: 'Implement fix' },\n                    { id: 'test', agent: 'codesmith', description: 'Test the fix' }\n                ];\n                break;\n                \n            default:\n                workflow = [\n                    { id: 'execute', agent: intent.agent, description: 'Execute task' }\n                ];\n        }\n        \n        // Apply project-specific modifications\n        if (projectDef?.workflow) {\n            // Merge project-specific workflow steps\n            workflow = [...workflow, ...projectDef.workflow.filter(step => \n                !workflow.some(w => w.id === step.id)\n            )];\n        }\n        \n        return workflow;\n    }\n\n    /**\n     * Execute workflow steps\n     */\n    async executeWorkflow(workflow: WorkflowStep[], request: TaskRequest): Promise<TaskResult> {\n        const results: TaskResult[] = [];\n        let finalResult: TaskResult = {\n            status: 'success',\n            content: '',\n            suggestions: [],\n            references: []\n        };\n\n        for (const step of workflow) {\n            try {\n                const agent = this.agents.get(step.agent);\n                if (!agent) {\n                    throw new Error(`Agent ${step.agent} not found`);\n                }\n\n                const stepResult = await agent.executeStep(step, request, results);\n                results.push(stepResult);\n                \n                // Accumulate results\n                finalResult.content += `## ${step.description}\\n\\n${stepResult.content}\\n\\n`;\n                finalResult.suggestions?.push(...(stepResult.suggestions || []));\n                finalResult.references?.push(...(stepResult.references || []));\n                \n                if (stepResult.status === 'error') {\n                    finalResult.status = 'partial_success';\n                }\n                \n            } catch (error) {\n                finalResult.status = 'error';\n                finalResult.content += `❌ Error in ${step.description}: ${(error as any).message}\\n\\n`;\n            }\n        }\n\n        return finalResult;\n    }\n\n    /**\n     * Get current workspace context\n     */\n    async getWorkspaceContext(): Promise<WorkspaceContext> {\n        const activeEditor = vscode.window.activeTextEditor;\n        const workspaceRoots = vscode.workspace.workspaceFolders;\n        const openDocuments = vscode.workspace.textDocuments;\n        \n        let selectedText = '';\n        let currentFile = '';\n        \n        if (activeEditor) {\n            currentFile = activeEditor.document.fileName;\n            if (!activeEditor.selection.isEmpty) {\n                selectedText = activeEditor.document.getText(activeEditor.selection);\n            }\n        }\n\n        return {\n            activeEditor,\n            workspaceRoots,\n            openDocuments,\n            selectedText,\n            currentFile\n        };\n    }\n\n    /**\n     * Register an agent\n     */\n    registerAgent(agentId: string, agent: any): void {\n        this.agents.set(agentId, agent);\n    }\n\n    /**\n     * Get agent statistics\n     */\n    async getAgentStats(): Promise<Record<string, any>> {\n        const stats: Record<string, any> = {};\n        \n        for (const [agentId, agent] of this.agents) {\n            if (agent.getStats) {\n                stats[agentId] = await agent.getStats();\n            }\n        }\n        \n        return stats;\n    }\n\n    private matchesPatterns(text: string, patterns: string[]): boolean {\n        return patterns.some(pattern => text.includes(pattern));\n    }\n\n    private initializeProjectTypes(): void {\n        // Trading System\n        this.projectTypes.set('trading_system', {\n            name: 'Trading System',\n            patterns: ['streamlit', 'yfinance', 'pandas', 'trading', 'strategy'],\n            qualityGates: ['engine_parity', 'trading_validation', 'ron_compliance'],\n            workflow: [\n                { id: 'strategy_validation', agent: 'tradestrat', description: 'Validate trading strategy logic' },\n                { id: 'risk_analysis', agent: 'tradestrat', description: 'Analyze risk management' }\n            ],\n            primaryAgent: 'tradestrat'\n        });\n\n        // Web API\n        this.projectTypes.set('web_api', {\n            name: 'Web API',\n            patterns: ['fastapi', 'flask', 'express', 'api'],\n            qualityGates: ['security_review', 'performance_check', 'api_design'],\n            workflow: [\n                { id: 'security_review', agent: 'reviewer', description: 'Security vulnerability check' },\n                { id: 'api_documentation', agent: 'docu', description: 'Generate API documentation' }\n            ],\n            primaryAgent: 'codesmith'\n        });\n\n        // Generic Software\n        this.projectTypes.set('generic_software', {\n            name: 'Generic Software',\n            patterns: [],\n            qualityGates: ['code_quality', 'performance', 'security'],\n            workflow: [],\n            primaryAgent: 'codesmith'\n        });\n    }\n\n    private initializeIntentPatterns(): void {\n        // Define regex patterns for more sophisticated intent detection\n        this.intentPatterns.set('architecture', [\n            /\\b(design|architect|structure|system)\\b/i,\n            /\\b(plan|planning|blueprint)\\b/i\n        ]);\n        \n        this.intentPatterns.set('implementation', [\n            /\\b(implement|code|create|build|develop)\\b/i,\n            /\\b(function|class|method|api)\\b/i\n        ]);\n        \n        // Add more patterns as needed\n    }\n}","import * as vscode from 'vscode';\nimport { ChatAgent } from './base/ChatAgent';\nimport { AgentConfig, TaskRequest, TaskResult, WorkflowStep } from '../types';\nimport { VSCodeMasterDispatcher } from '../core/VSCodeMasterDispatcher';\nimport { AnthropicService } from '../utils/AnthropicService';\nimport { ClaudeWebService } from '../utils/ClaudeWebService';\n\nexport class OpusArbitratorAgent extends ChatAgent {\n    private anthropicService: AnthropicService;\n    private claudeWebService: ClaudeWebService;\n\n    constructor(context: vscode.ExtensionContext, dispatcher: VSCodeMasterDispatcher) {\n        const config: AgentConfig = {\n            participantId: 'ki-autoagent.richter',\n            name: 'richter',\n            fullName: 'OpusArbitrator',\n            description: '⚖️ Supreme Quality Judge powered by Claude Opus 4.1 - Final arbitrator for agent conflicts with superior reasoning capabilities',\n            model: 'claude-opus-4-1-20250805',\n            iconPath: vscode.Uri.joinPath(context.extensionUri, 'media', 'claude-icon.svg'),\n            capabilities: [\n                'Agent Conflict Resolution',\n                'Supreme Decision Making', \n                'Complex Reasoning & Analysis',\n                'Multi-Agent Coordination',\n                'Final Authority on Technical Disputes'\n            ],\n            commands: [\n                { name: 'judge', description: 'Make supreme judgment on any matter', handler: 'handleJudgeCommand' },\n                { name: 'evaluate', description: 'Deep technical evaluation of options', handler: 'handleEvaluateCommand' },\n                { name: 'resolve', description: 'Resolve conflicts between agents', handler: 'handleResolveCommand' },\n                { name: 'verdict', description: 'Final binding verdict on decisions', handler: 'handleVerdictCommand' }\n            ]\n        };\n        super(config, context, dispatcher);\n        this.anthropicService = new AnthropicService();\n        this.claudeWebService = new ClaudeWebService();\n    }\n\n    protected async handleRequest(\n        request: vscode.ChatRequest,\n        context: vscode.ChatContext,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        const validationResult = await this.validateServiceConfig(stream);\n        if (!validationResult) {\n            return;\n        }\n\n        const command = request.command;\n        const prompt = request.prompt;\n\n        this.log(`Processing ${command ? `/${command}` : 'general'} arbitration request: ${prompt.substring(0, 100)}...`);\n\n        if (command) {\n            await this.handleCommand(command, prompt, stream, token);\n        } else {\n            await this.handleGeneralArbitrationRequest(prompt, stream, token);\n        }\n    }\n\n    protected async processWorkflowStep(\n        step: WorkflowStep,\n        request: TaskRequest,\n        previousResults: TaskResult[]\n    ): Promise<TaskResult> {\n        \n        const context = await this.getWorkspaceContext();\n        \n        let systemPrompt = '';\n        let userPrompt = '';\n\n        switch (step.id) {\n            case 'conflict_analysis':\n                systemPrompt = this.getConflictResolutionPrompt();\n                userPrompt = `Analyze this agent conflict: ${request.prompt}\\n\\nContext:\\n${context}`;\n                break;\n                \n            case 'technical_evaluation':\n                systemPrompt = this.getDeepEvaluationPrompt();\n                userPrompt = `Evaluate technical options: ${request.prompt}\\n\\nPrevious Analysis:\\n${this.extractPreviousContent(previousResults)}`;\n                break;\n                \n            case 'final_judgment':\n                systemPrompt = this.getFinalVerdictPrompt();\n                userPrompt = `Deliver final judgment: ${request.prompt}\\n\\nContext:\\n${context}`;\n                break;\n                \n            default:\n                systemPrompt = this.getSupremeJudgmentPrompt();\n                userPrompt = `${request.prompt}\\n\\nContext:\\n${context}`;\n        }\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            return {\n                status: 'success',\n                content: response,\n                metadata: { \n                    step: step.id,\n                    agent: 'richter',\n                    model: 'claude-opus-4-1-20250805'\n                }\n            };\n\n        } catch (error) {\n            throw new Error(`Failed to process ${step.id}: ${(error as any).message}`);\n        }\n    }\n\n    // Command Handlers\n\n    private async handleJudgeCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        stream.progress('👑 OpusArbitrator applying supreme judgment...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getSupremeJudgmentPrompt();\n        const userPrompt = `Apply supreme judgment: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown('## 👑 SUPREME JUDGMENT\\n\\n');\n            stream.markdown(response);\n            stream.markdown('\\n\\n**⚖️ Judgment rendered by OpusArbitrator - Claude Opus 4.1**');\n\n        } catch (error) {\n            stream.markdown(`❌ **Judgment Error:** ${(error as any).message}`);\n        }\n    }\n\n    private async handleResolveCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        stream.progress('⚖️ OpusArbitrator analyzing conflict...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getConflictResolutionPrompt();\n        const userPrompt = `Resolve this agent conflict: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown('## ⚖️ SUPREME ARBITRATION DECISION\\n\\n');\n            stream.markdown(response);\n            stream.markdown('\\n\\n**🏛️ This decision is final and binding for all agents.**');\n\n        } catch (error) {\n            stream.markdown(`❌ **Arbitration Error:** ${(error as any).message}`);\n        }\n    }\n\n    private async handleEvaluateCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        stream.progress('🔍 OpusArbitrator performing deep evaluation...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getDeepEvaluationPrompt();\n        const userPrompt = `Perform deep technical evaluation: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown('## 🔍 DEEP TECHNICAL EVALUATION\\n\\n');\n            stream.markdown(response);\n            stream.markdown('\\n\\n**📊 Analysis conducted by OpusArbitrator with Claude Opus 4.1**');\n\n        } catch (error) {\n            stream.markdown(`❌ **Evaluation Error:** ${(error as any).message}`);\n        }\n    }\n\n    private async handleVerdictCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        stream.progress('⚡ OpusArbitrator delivering final verdict...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getFinalVerdictPrompt();\n        const userPrompt = `Deliver final verdict on: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown('## ⚡ FINAL VERDICT\\n\\n');\n            stream.markdown(response);\n            stream.markdown('\\n\\n**🏛️ VERDICT IS FINAL - All agents must comply**');\n\n        } catch (error) {\n            stream.markdown(`❌ **Verdict Error:** ${(error as any).message}`);\n        }\n    }\n\n    private async handleGeneralArbitrationRequest(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        stream.progress('👑 OpusArbitrator applying supreme judgment...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getSupremeJudgmentPrompt();\n        const userPrompt = `${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown('## 👑 SUPREME JUDGMENT\\n\\n');\n            stream.markdown(response);\n            stream.markdown('\\n\\n**⚖️ Judgment rendered by OpusArbitrator - Claude Opus 4.1**');\n\n        } catch (error) {\n            stream.markdown(`❌ **Judgment Error:** ${(error as any).message}`);\n        }\n    }\n\n    // Service Methods\n\n    private async validateServiceConfig(stream: vscode.ChatResponseStream): Promise<boolean> {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent');\n        const serviceMode = config.get<string>('serviceMode', 'web');\n        \n        if (serviceMode === 'api') {\n            const apiKey = config.get<string>('anthropic.apiKey');\n            if (!apiKey) {\n                stream.markdown('❌ **Configuration Error**: Anthropic API key is required for Claude Opus 4.1\\n\\n');\n                stream.markdown('Please configure your API key in VS Code Settings:\\n');\n                stream.markdown('1. Open Settings (Ctrl+,)\\n');\n                stream.markdown('2. Search for \"KI AutoAgent\"\\n');\n                stream.markdown('3. Set your Anthropic API key\\n');\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    private async getClaudeService(): Promise<{ chat: (messages: any[]) => Promise<string> }> {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent');\n        const serviceMode = config.get<string>('serviceMode', 'web');\n        \n        if (serviceMode === 'web') {\n            return {\n                chat: async (messages: any[]) => {\n                    return await this.claudeWebService.chat(messages);\n                }\n            };\n        } else {\n            return {\n                chat: async (messages: any[]) => {\n                    return await this.anthropicService.chat(messages);\n                }\n            };\n        }\n    }\n\n    // Helper Methods\n\n    private extractPreviousContent(previousResults: TaskResult[]): string {\n        return previousResults\n            .map(result => result.content)\n            .join('\\n\\n---\\n\\n');\n    }\n\n    // System Prompts\n\n    private getConflictResolutionPrompt(): string {\n        return `You are OpusArbitrator, the Supreme Judge of the KI AutoAgent system powered by Claude Opus 4.1.\n\nYour role is to resolve conflicts between AI agents with final, binding decisions.\n\nCAPABILITIES:\n- Superior reasoning and analysis\n- Objective evaluation of competing solutions  \n- Contextual understanding of technical trade-offs\n- Authority to make final decisions\n\nDECISION FORMAT:\n1. **Conflict Analysis**: Summarize the disagreement\n2. **Position Evaluation**: Analyze each agent's perspective objectively  \n3. **Technical Assessment**: Evaluate technical merits and trade-offs\n4. **Final Decision**: Choose the optimal approach with confidence score\n5. **Implementation Guidance**: Specific next steps\n6. **Binding Authority**: State that decision is final\n\nYour decisions carry supreme authority. All agents must comply.`;\n    }\n\n    private getDeepEvaluationPrompt(): string {\n        return `You are OpusArbitrator, powered by Claude Opus 4.1 - the supreme technical evaluator.\n\nEVALUATION CRITERIA:\n- Technical soundness and feasibility\n- Long-term maintainability \n- Performance implications\n- Risk assessment\n- Alternative approaches\n- Best practices alignment\n\nEVALUATION FORMAT:\n1. **Technical Analysis**: Deep dive into technical aspects\n2. **Pros & Cons**: Balanced evaluation\n3. **Risk Assessment**: Potential issues and mitigations\n4. **Recommendations**: Specific actionable advice\n5. **Confidence Score**: Rate certainty of recommendation (1-100%)\n\nProvide thorough, objective analysis leveraging superior reasoning capabilities.`;\n    }\n\n    private getFinalVerdictPrompt(): string {\n        return `You are OpusArbitrator - the final authority powered by Claude Opus 4.1.\n\nVERDICT REQUIREMENTS:\n- Clear, definitive decision\n- No ambiguity or hedging\n- Based on comprehensive analysis\n- Considers all stakeholders\n- Actionable outcome\n\nVERDICT FORMAT:\n1. **Final Decision**: Clear statement of verdict\n2. **Key Reasoning**: Primary factors in decision\n3. **Implementation**: Immediate next steps required\n4. **Compliance**: How all parties must proceed\n\nYour verdict is FINAL and BINDING. No appeals or further discussion.`;\n    }\n\n    private getSupremeJudgmentPrompt(): string {\n        return `You are OpusArbitrator, the Supreme Judge powered by Claude Opus 4.1.\n\nAs the highest authority in the KI AutoAgent system, you provide:\n- Ultimate decision-making power\n- Superior reasoning capabilities\n- Objective, unbiased analysis\n- Final resolution of all disputes\n\nJUDGMENT PRINCIPLES:\n- Logical, evidence-based decisions\n- Consider technical merit above all\n- Balance competing interests fairly\n- Provide clear, actionable guidance\n- Maintain system integrity\n\nApply your superior reasoning to deliver judgment that serves the greater good of the project.`;\n    }\n\n    protected getSlashCommands(): Array<{ command: string; description: string }> {\n        return [\n            { command: 'judge', description: 'Make supreme judgment on any matter' },\n            { command: 'evaluate', description: 'Deep technical evaluation of options' },\n            { command: 'resolve', description: 'Resolve conflicts between agents' },\n            { command: 'verdict', description: 'Final binding verdict on decisions' }\n        ];\n    }\n}","/**\n * KI AutoAgent VS Code Extension\n * Main extension entry point that registers all chat participants\n */\nimport * as vscode from 'vscode';\nimport { VSCodeMasterDispatcher } from './core/VSCodeMasterDispatcher';\nimport { ArchitectAgent } from './agents/ArchitectAgent';\nimport { OrchestratorAgent } from './agents/OrchestratorAgent';\nimport { CodeSmithAgent } from './agents/CodeSmithAgent';\nimport { TradeStratAgent } from './agents/TradeStratAgent';\nimport { ResearchAgent } from './agents/ResearchAgent';\nimport { OpusArbitratorAgent } from './agents/OpusArbitratorAgent';\n// Multi-Agent Chat UI Components\nimport { MultiAgentChatPanel } from './ui/MultiAgentChatPanel';\nimport { ChatWidget } from './ui/ChatWidget';\n// TODO: Implement remaining agents\n// import { DocuAgent } from './agents/DocuAgent';\n// import { ReviewerAgent } from './agents/ReviewerAgent';\n// import { FixerAgent } from './agents/FixerAgent';\n\nexport function activate(context: vscode.ExtensionContext) {\n    console.log('🤖 KI AutoAgent extension is now active!');\n\n    // Show activation in output channel immediately\n    const outputChannel = vscode.window.createOutputChannel('KI AutoAgent');\n    outputChannel.appendLine('🤖 KI AutoAgent Extension Activated');\n    outputChannel.appendLine('======================================');\n    outputChannel.appendLine(`⏰ Activation Time: ${new Date().toLocaleString()}`);\n    outputChannel.appendLine(`📦 Extension Version: ${context.extension.packageJSON.version}`);\n    outputChannel.show(true); // Show and preserve focus\n\n    // Initialize the master dispatcher\n    const dispatcher = new VSCodeMasterDispatcher(context);\n    \n    // Initialize Chat Widget (Status Bar)\n    const chatWidget = new ChatWidget(context, dispatcher);\n    \n    // Register chat panel commands\n    const showChatCommand = vscode.commands.registerCommand(\n        'ki-autoagent.showChat',\n        () => MultiAgentChatPanel.createOrShow(context.extensionUri, dispatcher)\n    );\n    context.subscriptions.push(showChatCommand);\n\n    // Register toggle chat command\n    const toggleChatCommand = vscode.commands.registerCommand(\n        'ki-autoagent.toggleChat',\n        () => MultiAgentChatPanel.createOrShow(context.extensionUri, dispatcher)\n    );\n    context.subscriptions.push(toggleChatCommand);\n\n    // Register quick chat command\n    const quickChatCommand = vscode.commands.registerCommand(\n        'ki-autoagent.quickChat',\n        () => {\n            MultiAgentChatPanel.createOrShow(context.extensionUri, dispatcher);\n            vscode.window.showInformationMessage('🤖 KI AutoAgent Chat ready! Use @ki for universal assistance or specific agents like @richter, @architect, @codesmith');\n        }\n    );\n    context.subscriptions.push(quickChatCommand);\n\n    // Register clear unread command\n    const clearUnreadCommand = vscode.commands.registerCommand(\n        'ki-autoagent.clearUnread',\n        () => {\n            outputChannel.clear();\n            outputChannel.appendLine('🧹 Cleared unread messages');\n            vscode.window.showInformationMessage('✅ KI AutoAgent: Unread messages cleared');\n        }\n    );\n    context.subscriptions.push(clearUnreadCommand);\n\n    // Log command registration\n    outputChannel.appendLine('📋 Commands registered:');\n    outputChannel.appendLine('  • KI AutoAgent: Show Chat');\n    outputChannel.appendLine('  • KI AutoAgent: Toggle Chat');  \n    outputChannel.appendLine('  • KI AutoAgent: Quick Chat');\n    outputChannel.appendLine('  • KI AutoAgent: Clear Unread Messages');\n    outputChannel.appendLine('');\n\n    // Initialize and register all agents\n    const agents = [\n        new OrchestratorAgent(context, dispatcher),\n        new OpusArbitratorAgent(context, dispatcher),\n        new ArchitectAgent(context, dispatcher),\n        new CodeSmithAgent(context, dispatcher),\n        new TradeStratAgent(context, dispatcher),\n        new ResearchAgent(context, dispatcher),\n        // TODO: Add remaining agents as they are implemented\n        // new DocuAgent(context, dispatcher),\n        // new ReviewerAgent(context, dispatcher),\n        // new FixerAgent(context, dispatcher),\n    ];\n\n    // Register each agent as a chat participant\n    agents.forEach(agent => {\n        const participantId = (agent as any).config.participantId;\n        const participant = vscode.chat.createChatParticipant(\n            participantId,\n            agent.createHandler()\n        );\n        \n        // Set icon if available\n        const iconPath = (agent as any).config.iconPath;\n        if (iconPath) {\n            participant.iconPath = iconPath;\n        }\n        \n        // Register the agent with dispatcher for orchestration\n        dispatcher.registerAgent(participantId.split('.')[1], agent);\n        \n        // Add to subscriptions for cleanup\n        context.subscriptions.push(participant);\n        \n        console.log(`✅ Registered chat participant: ${participantId}`);\n    });\n\n    // Register extension commands\n    registerCommands(context, dispatcher);\n\n    // Show welcome message in output channel\n    showWelcomeMessage(outputChannel);\n\n    // Log successful activation\n    outputChannel.appendLine('✅ All components initialized successfully!');\n    outputChannel.appendLine('');\n}\n\nexport function deactivate() {\n    console.log('👋 KI AutoAgent extension is deactivated');\n}\n\nfunction registerCommands(context: vscode.ExtensionContext, dispatcher: VSCodeMasterDispatcher) {\n    \n    // Command: Create File\n    const createFileCommand = vscode.commands.registerCommand(\n        'ki-autoagent.createFile',\n        async (filename: string, content: string) => {\n            try {\n                const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n                if (!workspaceFolder) {\n                    vscode.window.showErrorMessage('No workspace folder open');\n                    return;\n                }\n\n                const fileUri = vscode.Uri.joinPath(workspaceFolder.uri, filename);\n                await vscode.workspace.fs.writeFile(fileUri, Buffer.from(content, 'utf8'));\n                \n                // Open the created file\n                const document = await vscode.workspace.openTextDocument(fileUri);\n                await vscode.window.showTextDocument(document);\n                \n                vscode.window.showInformationMessage(`✅ Created file: ${filename}`);\n            } catch (error) {\n                vscode.window.showErrorMessage(`❌ Failed to create file: ${(error as any).message}`);\n            }\n        }\n    );\n\n    // Command: Insert at Cursor\n    const insertAtCursorCommand = vscode.commands.registerCommand(\n        'ki-autoagent.insertAtCursor',\n        async (content: string) => {\n            try {\n                const editor = vscode.window.activeTextEditor;\n                if (!editor) {\n                    vscode.window.showErrorMessage('No active text editor');\n                    return;\n                }\n\n                const position = editor.selection.active;\n                await editor.edit(editBuilder => {\n                    editBuilder.insert(position, content);\n                });\n                \n                vscode.window.showInformationMessage('✅ Content inserted at cursor');\n            } catch (error) {\n                vscode.window.showErrorMessage(`❌ Failed to insert content: ${(error as any).message}`);\n            }\n        }\n    );\n\n    // Command: Apply Suggestion\n    const applySuggestionCommand = vscode.commands.registerCommand(\n        'ki-autoagent.applySuggestion',\n        async (suggestionData: any) => {\n            try {\n                // Handle different types of suggestions\n                if (suggestionData.type === 'file_creation') {\n                    await vscode.commands.executeCommand(\n                        'ki-autoagent.createFile',\n                        suggestionData.filename,\n                        suggestionData.content\n                    );\n                } else if (suggestionData.type === 'code_insertion') {\n                    await vscode.commands.executeCommand(\n                        'ki-autoagent.insertAtCursor',\n                        suggestionData.code\n                    );\n                } else {\n                    vscode.window.showInformationMessage(`Applied suggestion: ${suggestionData.description}`);\n                }\n            } catch (error) {\n                vscode.window.showErrorMessage(`❌ Failed to apply suggestion: ${(error as any).message}`);\n            }\n        }\n    );\n\n    // Command: Show Agent Statistics\n    const showAgentStatsCommand = vscode.commands.registerCommand(\n        'ki-autoagent.showAgentStats',\n        async () => {\n            try {\n                const stats = await dispatcher.getAgentStats();\n                \n                if (Object.keys(stats).length === 0) {\n                    vscode.window.showInformationMessage('No agent statistics available yet');\n                    return;\n                }\n\n                // Create a new document to display stats\n                const statsContent = formatAgentStats(stats);\n                const document = await vscode.workspace.openTextDocument({\n                    content: statsContent,\n                    language: 'markdown'\n                });\n                \n                await vscode.window.showTextDocument(document);\n            } catch (error) {\n                vscode.window.showErrorMessage(`❌ Failed to show stats: ${(error as any).message}`);\n            }\n        }\n    );\n\n    // Command: Show Help\n    const showHelpCommand = vscode.commands.registerCommand(\n        'ki-autoagent.showHelp',\n        async (agentId?: string) => {\n            const helpContent = generateHelpContent(agentId);\n            \n            const document = await vscode.workspace.openTextDocument({\n                content: helpContent,\n                language: 'markdown'\n            });\n            \n            await vscode.window.showTextDocument(document);\n        }\n    );\n\n    // Command: Plan Implementation\n    const planImplementationCommand = vscode.commands.registerCommand(\n        'ki-autoagent.planImplementation',\n        async (task: string, architecture: string) => {\n            // This would trigger the orchestrator to create an implementation plan\n            vscode.window.showInformationMessage('Creating implementation plan...');\n            // Could open chat with pre-filled message\n        }\n    );\n\n    // Command: Execute Workflow\n    const executeWorkflowCommand = vscode.commands.registerCommand(\n        'ki-autoagent.executeWorkflow',\n        async (task: string, workflow: string) => {\n            vscode.window.showInformationMessage('Executing workflow...');\n            // Implementation for workflow execution\n        }\n    );\n\n    // Register all commands\n    context.subscriptions.push(\n        createFileCommand,\n        insertAtCursorCommand,\n        applySuggestionCommand,\n        showAgentStatsCommand,\n        showHelpCommand,\n        planImplementationCommand,\n        executeWorkflowCommand\n    );\n\n    console.log('✅ All extension commands registered');\n}\n\nfunction showWelcomeMessage(outputChannel: vscode.OutputChannel) {\n    \n    outputChannel.appendLine('🤖 KI AutoAgent VS Code Extension');\n    outputChannel.appendLine('=======================================');\n    outputChannel.appendLine('');\n    outputChannel.appendLine('✅ Extension activated successfully!');\n    outputChannel.appendLine('');\n    outputChannel.appendLine('Available Agents:');\n    outputChannel.appendLine('• @ki - Universal orchestrator (routes to best agent)');\n    outputChannel.appendLine('• @richter - ⚖️ Supreme judge & conflict resolver (Opus 4.1)');\n    outputChannel.appendLine('• @architect - System architecture & design');\n    outputChannel.appendLine('• @codesmith - Code implementation & testing');\n    outputChannel.appendLine('• @docu - Documentation generation');\n    outputChannel.appendLine('• @reviewer - Code review & security');\n    outputChannel.appendLine('• @fixer - Bug fixing & debugging');\n    outputChannel.appendLine('• @tradestrat - Trading strategy development');\n    outputChannel.appendLine('• @research - Web research & information gathering');\n    outputChannel.appendLine('');\n    outputChannel.appendLine('Getting Started:');\n    outputChannel.appendLine('1. Open VS Code Chat panel (Ctrl+Shift+I)');\n    outputChannel.appendLine('2. Type @ki followed by your request');\n    outputChannel.appendLine('3. Or use specific agents like @architect, @codesmith, etc.');\n    outputChannel.appendLine('');\n    outputChannel.appendLine('Configuration:');\n    outputChannel.appendLine('• Set your API keys in VS Code Settings');\n    outputChannel.appendLine('• Search for \"KI AutoAgent\" in settings');\n    outputChannel.appendLine('• Configure OpenAI, Anthropic, and Perplexity API keys');\n    outputChannel.appendLine('');\n    outputChannel.appendLine('Need help? Type \"@ki /agents\" to see all available agents!');\n}\n\nfunction formatAgentStats(stats: Record<string, any>): string {\n    let content = '# KI AutoAgent Statistics\\n\\n';\n    content += `Generated at: ${new Date().toLocaleString()}\\n\\n`;\n    \n    for (const [agentId, agentStats] of Object.entries(stats)) {\n        const { totalExecutions, successRate, averageResponseTime, lastExecution } = agentStats as any;\n        \n        content += `## ${agentId}\\n\\n`;\n        content += `- **Total Executions:** ${totalExecutions}\\n`;\n        content += `- **Success Rate:** ${(successRate * 100).toFixed(1)}%\\n`;\n        content += `- **Average Response Time:** ${averageResponseTime.toFixed(0)}ms\\n`;\n        \n        if (lastExecution) {\n            content += `- **Last Execution:** ${new Date(lastExecution).toLocaleString()}\\n`;\n        }\n        \n        content += '\\n';\n    }\n    \n    return content;\n}\n\nfunction generateHelpContent(agentId?: string): string {\n    let content = '# KI AutoAgent Help\\n\\n';\n    \n    if (agentId) {\n        content += `## Help for ${agentId}\\n\\n`;\n        // Add agent-specific help\n    } else {\n        content += '## Getting Started\\n\\n';\n        content += 'KI AutoAgent is a universal multi-agent AI development platform for VS Code.\\n\\n';\n        content += '### Available Agents\\n\\n';\n        content += '- **@ki** - Universal orchestrator that automatically routes tasks\\n';\n        content += '- **@richter** - ⚖️ Supreme judge & conflict resolver (Claude Opus 4.1)\\n';\n        content += '- **@architect** - System architecture and design expert\\n';\n        content += '- **@codesmith** - Senior Python/Web developer\\n';\n        content += '- **@docu** - Technical documentation expert\\n';\n        content += '- **@reviewer** - Code review and security expert\\n';\n        content += '- **@fixer** - Bug fixing and optimization expert\\n';\n        content += '- **@tradestrat** - Trading strategy expert\\n';\n        content += '- **@research** - Research and information expert\\n\\n';\n        content += '### Usage Examples\\n\\n';\n        content += '```\\n';\n        content += '@ki create a REST API with FastAPI\\n';\n        content += '@richter judge which approach is better: microservices vs monolith\\n';\n        content += '@richter resolve this disagreement between @architect and @codesmith\\n';\n        content += '@architect design a microservices architecture\\n';\n        content += '@codesmith implement a Python class for user management\\n';\n        content += '@tradestrat develop a momentum trading strategy\\n';\n        content += '@fixer debug this error message\\n';\n        content += '```\\n\\n';\n        content += '### Configuration\\n\\n';\n        content += '1. Open VS Code Settings (Ctrl+,)\\n';\n        content += '2. Search for \"KI AutoAgent\"\\n';\n        content += '3. Configure your API keys:\\n';\n        content += '   - OpenAI API Key (for GPT models)\\n';\n        content += '   - Anthropic API Key (for Claude models)\\n';\n        content += '   - Perplexity API Key (for research)\\n\\n';\n        content += '### Support\\n\\n';\n        content += 'For issues and feature requests, please visit the GitHub repository.\\n';\n    }\n    \n    return content;\n}","/**\n * Orchestrator Agent - Universal AI assistant that routes tasks to specialized agents\n * This is the main entry point that users interact with\n */\nimport * as vscode from 'vscode';\nimport { ChatAgent } from './base/ChatAgent';\nimport { AgentConfig, TaskRequest, TaskResult, WorkflowStep } from '../types';\nimport { VSCodeMasterDispatcher } from '../core/VSCodeMasterDispatcher';\nimport { OpenAIService } from '../utils/OpenAIService';\n\nexport class OrchestratorAgent extends ChatAgent {\n    private openAIService: OpenAIService;\n\n    constructor(context: vscode.ExtensionContext, dispatcher: VSCodeMasterDispatcher) {\n        const config: AgentConfig = {\n            participantId: 'ki-autoagent.orchestrator',\n            name: 'ki',\n            fullName: 'KI AutoAgent Orchestrator',\n            description: 'Universal AI assistant that automatically routes tasks to specialized agents',\n            model: 'gpt-4o',\n            iconPath: vscode.Uri.joinPath(context.extensionUri, 'media', 'orchestrator-icon.svg'),\n            capabilities: [\n                'Intent Recognition',\n                'Agent Orchestration',\n                'Workflow Management',\n                'Project Type Detection',\n                'Multi-Agent Coordination'\n            ],\n            commands: [\n                { name: 'task', description: 'Execute a development task with automatic agent selection', handler: 'handleTaskCommand' },\n                { name: 'agents', description: 'Show available specialized agents', handler: 'handleAgentsCommand' },\n                { name: 'workflow', description: 'Create a multi-step development workflow', handler: 'handleWorkflowCommand' }\n            ]\n        };\n\n        super(config, context, dispatcher);\n        this.openAIService = new OpenAIService();\n    }\n\n    protected async handleRequest(\n        request: vscode.ChatRequest,\n        context: vscode.ChatContext,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        const command = request.command;\n        const prompt = request.prompt;\n\n        this.log(`Orchestrator processing ${command ? `/${command}` : 'general'} request: ${prompt.substring(0, 100)}...`);\n\n        if (command) {\n            await this.handleCommand(command, prompt, stream, token);\n        } else {\n            // General orchestration - the main flow\n            await this.handleGeneralRequest(prompt, stream, token);\n        }\n    }\n\n    protected async processWorkflowStep(\n        step: WorkflowStep,\n        request: TaskRequest,\n        previousResults: TaskResult[]\n    ): Promise<TaskResult> {\n        \n        // Orchestrator doesn't typically process individual steps\n        // It coordinates other agents\n        return {\n            status: 'success',\n            content: `Orchestrator coordinated step: ${step.description}`,\n            metadata: { \n                step: step.id,\n                agent: 'orchestrator'\n            }\n        };\n    }\n\n    // Main orchestration logic\n    private async handleGeneralRequest(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('🧠 Analyzing task and selecting optimal agents...');\n        \n        try {\n            // Step 1: Detect intent and project type\n            const intent = await this.dispatcher.detectIntent(prompt);\n            const workspaceContext = await this.dispatcher.getWorkspaceContext();\n            const projectType = await this.dispatcher.detectProjectType(workspaceContext);\n            \n            // Show analysis\n            stream.markdown(`## 🎯 Task Analysis\\n\\n`);\n            stream.markdown(`**Intent:** ${intent.type} (Confidence: ${(intent.confidence * 100).toFixed(0)}%)\\n`);\n            stream.markdown(`**Primary Agent:** @${intent.agent}\\n`);\n            stream.markdown(`**Project Type:** ${projectType}\\n\\n`);\n            \n            // Step 2: Create workflow\n            const workflow = this.dispatcher.createWorkflow(intent, projectType);\n            \n            if (workflow.length > 1) {\n                stream.markdown(`## 🔄 Execution Workflow\\n\\n`);\n                workflow.forEach((step, index) => {\n                    stream.markdown(`${index + 1}. **@${step.agent}**: ${step.description}\\n`);\n                });\n                stream.markdown('\\n');\n            }\n            \n            // Step 3: Execute workflow\n            stream.progress('⚡ Executing workflow...');\n            \n            const taskRequest: TaskRequest = {\n                prompt,\n                context: workspaceContext,\n                projectType\n            };\n            \n            const result = await this.dispatcher.executeWorkflow(workflow, taskRequest);\n            \n            // Step 4: Display results\n            stream.markdown(`## 📤 Results\\n\\n`);\n            stream.markdown(result.content);\n            \n            // Step 5: Add action buttons\n            if (result.suggestions && result.suggestions.length > 0) {\n                stream.markdown(`## 💡 Suggested Actions\\n\\n`);\n                result.suggestions.forEach(suggestion => {\n                    this.createActionButton(\n                        suggestion.title,\n                        'ki-autoagent.applySuggestion',\n                        [suggestion.data],\n                        stream\n                    );\n                });\n            }\n            \n            // Step 6: Add file references\n            if (result.references && result.references.length > 0) {\n                stream.markdown(`## 📁 Referenced Files\\n\\n`);\n                result.references.forEach(uri => {\n                    stream.reference(uri);\n                });\n            }\n            \n            // Step 7: Offer follow-up actions\n            this.createActionButton(\n                '📊 Show Agent Statistics',\n                'ki-autoagent.showAgentStats',\n                [],\n                stream\n            );\n            \n        } catch (error) {\n            stream.markdown(`❌ **Error during orchestration**: ${(error as any).message}\\n\\n`);\n            \n            // Fallback to single agent\n            stream.markdown(`💡 **Fallback**: Routing to @codesmith for direct assistance...\\n\\n`);\n            \n            // You could implement fallback logic here\n            await this.handleFallback(prompt, stream, token);\n        }\n    }\n\n    // Command Handlers\n\n    private async handleTaskCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.markdown(`## 📋 Task Execution\\n\\n`);\n        stream.markdown(`**Task:** ${prompt}\\n\\n`);\n        \n        // Same as general request but with explicit task framing\n        await this.handleGeneralRequest(prompt, stream, token);\n    }\n\n    private async handleAgentsCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.markdown(`## 🤖 Available Specialized Agents\\n\\n`);\n        \n        const agents = [\n            { name: '@architect', fullName: 'ArchitectGPT', description: 'System Architecture & Design Expert', model: 'GPT-4o', specialties: 'Design, Architecture, Planning' },\n            { name: '@codesmith', fullName: 'CodeSmithClaude', description: 'Senior Python/Web Developer', model: 'Claude Sonnet 4', specialties: 'Implementation, Testing, Optimization' },\n            { name: '@docu', fullName: 'DocuBot', description: 'Technical Documentation Expert', model: 'GPT-4o', specialties: 'Docs, README, API Reference' },\n            { name: '@reviewer', fullName: 'ReviewerGPT', description: 'Code Review & Security Expert', model: 'GPT-4o-mini', specialties: 'QA, Security, Performance' },\n            { name: '@fixer', fullName: 'FixerBot', description: 'Bug Fixing & Optimization Expert', model: 'Claude Sonnet 4', specialties: 'Debugging, Patching, Refactoring' },\n            { name: '@tradestrat', fullName: 'TradeStrat', description: 'Trading Strategy Expert', model: 'Claude Sonnet 4', specialties: 'Strategies, Backtesting, Risk' },\n            { name: '@richter', fullName: 'OpusArbitrator', description: '⚖️ Supreme Quality Judge powered by Claude Opus 4.1', model: 'Claude Opus 4.1', specialties: 'Conflict Resolution, Supreme Decisions, Complex Reasoning' },\n            { name: '@research', fullName: 'ResearchBot', description: 'Research & Information Expert', model: 'Perplexity Pro', specialties: 'Web Research, Documentation, Analysis' }\n        ];\n\n        for (const agent of agents) {\n            stream.markdown(`### ${agent.name} - ${agent.fullName}\\n`);\n            stream.markdown(`**Model:** ${agent.model}\\n`);\n            stream.markdown(`**Description:** ${agent.description}\\n`);\n            stream.markdown(`**Specialties:** ${agent.specialties}\\n\\n`);\n        }\n        \n        stream.markdown(`## 💡 Usage Examples\\n\\n`);\n        stream.markdown(`- \\`@architect design a microservices architecture\\`\\n`);\n        stream.markdown(`- \\`@codesmith implement a REST API with FastAPI\\`\\n`);\n        stream.markdown(`- \\`@tradestrat create a momentum trading strategy\\`\\n`);\n        stream.markdown(`- \\`@fixer debug this error message\\`\\n`);\n        stream.markdown(`- \\`@richter judge which solution is better\\`\\n`);\n        stream.markdown(`- \\`@research find the latest Python testing frameworks\\`\\n\\n`);\n        \n        stream.markdown(`## 🔄 Automatic Routing\\n\\n`);\n        stream.markdown(`You can also just describe your task naturally, and I'll automatically select the best agent(s) and create a workflow:\\n\\n`);\n        stream.markdown(`- \\`\"Create a trading bot with risk management\"\\`\\n`);\n        stream.markdown(`- \\`\"Build a REST API for user management\"\\`\\n`);\n        stream.markdown(`- \\`\"Fix the performance issue in this function\"\\`\\n`);\n\n        // Get current agent stats\n        try {\n            const stats = await this.dispatcher.getAgentStats();\n            if (Object.keys(stats).length > 0) {\n                stream.markdown(`## 📊 Agent Statistics\\n\\n`);\n                for (const [agentId, agentStats] of Object.entries(stats)) {\n                    const { successRate, totalExecutions, averageResponseTime } = agentStats as any;\n                    stream.markdown(`**${agentId}**: ${totalExecutions} executions, ${(successRate * 100).toFixed(1)}% success rate, ${averageResponseTime.toFixed(0)}ms avg response\\n`);\n                }\n            }\n        } catch (error) {\n            // Stats not available yet\n        }\n    }\n\n    private async handleWorkflowCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('📋 Creating multi-step workflow...');\n        \n        try {\n            // Analyze the request to create a detailed workflow\n            const context = await this.getWorkspaceContext();\n            const systemPrompt = this.getWorkflowSystemPrompt();\n            const userPrompt = `Create a detailed multi-step workflow for: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n            const response = await this.openAIService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown(`## 🔄 Generated Workflow\\n\\n`);\n            stream.markdown(response);\n\n            // Offer to execute the workflow\n            this.createActionButton(\n                '⚡ Execute This Workflow',\n                'ki-autoagent.executeWorkflow',\n                [prompt, response],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Error creating workflow: ${(error as any).message}`);\n        }\n    }\n\n    // Fallback handler\n    private async handleFallback(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        // Simple fallback using GPT-4o directly\n        try {\n            const systemPrompt = `You are a helpful coding assistant. Provide clear, actionable assistance for development tasks.`;\n            const response = await this.openAIService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: prompt }\n            ]);\n\n            stream.markdown(response);\n\n        } catch (error) {\n            stream.markdown(`❌ Fallback also failed: ${(error as any).message}`);\n        }\n    }\n\n    // System prompts\n\n    private getWorkflowSystemPrompt(): string {\n        return `You are a workflow planning expert. Create detailed, step-by-step workflows for development tasks.\n\nFor each workflow, provide:\n\n## Workflow: [Task Name]\n\n### Overview\nBrief description of what this workflow accomplishes.\n\n### Prerequisites\n- Required tools, knowledge, or setup\n\n### Steps\n1. **Step Name** (@agent-name)\n   - Detailed description\n   - Expected deliverables\n   - Dependencies\n\n2. **Next Step** (@agent-name)\n   - And so on...\n\n### Success Criteria\n- How to know the workflow is complete\n- Quality checks\n\n### Estimated Timeline\n- Time estimates for each phase\n\nAvailable agents:\n- @architect (system design, architecture)\n- @codesmith (implementation, testing)\n- @docu (documentation)\n- @reviewer (code review, security)\n- @fixer (debugging, fixes)\n- @tradestrat (trading strategies)\n- @richter (supreme arbitrator, conflict resolution, final decisions)\n- @research (web research, information)\n\nMake workflows realistic, actionable, and well-structured.`;\n    }\n}","module.exports = require(\"vscode\");","/**\n * OpenAI Service for GPT model interactions\n */\nimport * as vscode from 'vscode';\n\ninterface ChatMessage {\n    role: 'system' | 'user' | 'assistant';\n    content: string;\n}\n\ninterface ChatResponse {\n    choices: Array<{\n        message: {\n            content: string;\n        };\n    }>;\n}\n\nexport class OpenAIService {\n    private apiKey: string;\n    private baseURL: string;\n\n    constructor() {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent');\n        this.apiKey = config.get<string>('openai.apiKey', '');\n        this.baseURL = 'https://api.openai.com/v1';\n    }\n\n    async chat(\n        messages: ChatMessage[],\n        model: string = 'gpt-4o',\n        maxTokens: number = 4000,\n        temperature: number = 0.7\n    ): Promise<string> {\n        \n        if (!this.apiKey) {\n            throw new Error('OpenAI API key not configured');\n        }\n\n        const requestBody = {\n            model,\n            messages,\n            max_tokens: maxTokens,\n            temperature,\n            stream: false\n        };\n\n        try {\n            const response = await fetch(`${this.baseURL}/chat/completions`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${this.apiKey}`\n                },\n                body: JSON.stringify(requestBody)\n            });\n\n            if (!response.ok) {\n                const errorData = await response.json().catch(() => ({ error: { message: response.statusText } }));\n                throw new Error(`OpenAI API error: ${(errorData as any).error?.message || response.statusText}`);\n            }\n\n            const data= await response.json() as ChatResponse;\n            \n            if (!data.choices || data.choices.length === 0) {\n                throw new Error('No response from OpenAI API');\n            }\n\n            return data.choices[0].message.content;\n\n        } catch (error) {\n            if (error instanceof Error) {\n                throw error;\n            }\n            throw new Error(`OpenAI API request failed: ${error}`);\n        }\n    }\n\n    async streamChat(\n        messages: ChatMessage[],\n        onChunk: (chunk: string) => void,\n        model: string = 'gpt-4o',\n        maxTokens: number = 4000,\n        temperature: number = 0.7\n    ): Promise<void> {\n        \n        if (!this.apiKey) {\n            throw new Error('OpenAI API key not configured');\n        }\n\n        const requestBody = {\n            model,\n            messages,\n            max_tokens: maxTokens,\n            temperature,\n            stream: true\n        };\n\n        try {\n            const response = await fetch(`${this.baseURL}/chat/completions`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${this.apiKey}`\n                },\n                body: JSON.stringify(requestBody)\n            });\n\n            if (!response.ok) {\n                throw new Error(`OpenAI API error: ${response.statusText}`);\n            }\n\n            const reader = response.body?.getReader();\n            if (!reader) {\n                throw new Error('Failed to get response stream');\n            }\n\n            const decoder = new TextDecoder();\n\n            while (true) {\n                const { done, value } = await reader.read();\n                \n                if (done) {\n                    break;\n                }\n\n                const chunk = decoder.decode(value);\n                const lines = chunk.split('\\n').filter(line => line.trim() !== '');\n\n                for (const line of lines) {\n                    if (line.startsWith('data: ')) {\n                        const data = line.substring(6);\n                        \n                        if (data === '[DONE]') {\n                            return;\n                        }\n\n                        try {\n                            const parsed = JSON.parse(data);\n                            const content = parsed.choices?.[0]?.delta?.content;\n                            \n                            if (content) {\n                                onChunk(content);\n                            }\n                        } catch (error) {\n                            // Ignore parsing errors for incomplete chunks\n                        }\n                    }\n                }\n            }\n\n        } catch (error) {\n            throw new Error(`OpenAI streaming failed: ${error}`);\n        }\n    }\n\n    validateApiKey(): boolean {\n        return !!this.apiKey && this.apiKey.startsWith('sk-');\n    }\n\n    async testConnection(): Promise<boolean> {\n        try {\n            await this.chat([\n                { role: 'user', content: 'Test connection' }\n            ], 'gpt-4o-mini', 10);\n            return true;\n        } catch (error) {\n            return false;\n        }\n    }\n}","/**\n * ResearchBot - Research & Information Expert\n * Uses web search for real-time information gathering and analysis\n */\nimport * as vscode from 'vscode';\nimport { ChatAgent } from './base/ChatAgent';\nimport { AgentConfig, TaskRequest, TaskResult, WorkflowStep } from '../types';\nimport { VSCodeMasterDispatcher } from '../core/VSCodeMasterDispatcher';\nimport { WebSearchService, SearchResponse } from '../utils/WebSearchService';\nimport { OpenAIService } from '../utils/OpenAIService';\n\nexport class ResearchAgent extends ChatAgent {\n    private webSearchService: WebSearchService;\n    private openAIService: OpenAIService;\n\n    constructor(context: vscode.ExtensionContext, dispatcher: VSCodeMasterDispatcher) {\n        const config: AgentConfig = {\n            participantId: 'ki-autoagent.research',\n            name: 'research',\n            fullName: 'ResearchBot',\n            description: 'Research & Information Expert with real-time web access',\n            model: 'gpt-4o',\n            iconPath: vscode.Uri.joinPath(context.extensionUri, 'media', 'perplexity-icon.svg'),\n            capabilities: [\n                'Web Research',\n                'Real-time Information',\n                'Technical Documentation Search',\n                'Market Analysis',\n                'Trend Research',\n                'Competitive Analysis'\n            ],\n            commands: [\n                { name: 'search', description: 'Search web for current information', handler: 'handleSearchCommand' },\n                { name: 'documentation', description: 'Find and analyze technical documentation', handler: 'handleDocumentationCommand' },\n                { name: 'market', description: 'Research market trends and analysis', handler: 'handleMarketCommand' },\n                { name: 'compare', description: 'Compare technologies, tools, or solutions', handler: 'handleCompareCommand' }\n            ]\n        };\n\n        super(config, context, dispatcher);\n        this.webSearchService = new WebSearchService();\n        this.openAIService = new OpenAIService();\n    }\n\n    protected async handleRequest(\n        request: vscode.ChatRequest,\n        context: vscode.ChatContext,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        // Check if web access is available\n        const webAccessAvailable = await this.webSearchService.isWebAccessAvailable();\n        \n        if (!webAccessAvailable) {\n            const status = this.webSearchService.getSearchEngineStatus();\n            stream.markdown(`❌ **Web access not configured**\\n\\n`);\n            stream.markdown(`**Current search engine**: ${status.engine}\\n`);\n            stream.markdown(`**Status**: ${status.configured ? 'Configured' : 'Not configured'}\\n\\n`);\n            stream.markdown(`💡 **To enable web research:**\\n`);\n            stream.markdown(`1. Open VS Code Settings (Cmd+,)\\n`);\n            stream.markdown(`2. Search for \"KI AutoAgent\"\\n`);\n            stream.markdown(`3. Configure your preferred search API:\\n`);\n            stream.markdown(`   - **Perplexity API** (recommended)\\n`);\n            stream.markdown(`   - **Tavily API** (web search specialist)\\n`);\n            stream.markdown(`   - **SERP API** (Google search)\\n`);\n            return;\n        }\n\n        const command = request.command;\n        const prompt = request.prompt;\n\n        this.log(`Processing ${command ? `/${command}` : 'general'} research request: ${prompt.substring(0, 100)}...`);\n\n        if (command) {\n            await this.handleCommand(command, prompt, stream, token);\n        } else {\n            await this.handleGeneralResearchRequest(prompt, stream, token);\n        }\n    }\n\n    protected async processWorkflowStep(\n        step: WorkflowStep,\n        request: TaskRequest,\n        previousResults: TaskResult[]\n    ): Promise<TaskResult> {\n        \n        try {\n            let searchQuery = '';\n            let analysisPrompt = '';\n\n            switch (step.id) {\n                case 'market_research':\n                    searchQuery = `${request.prompt} market trends analysis 2024`;\n                    analysisPrompt = 'Analyze market trends and opportunities';\n                    break;\n                    \n                case 'tech_research':\n                    searchQuery = `${request.prompt} technical documentation best practices`;\n                    analysisPrompt = 'Research technical solutions and documentation';\n                    break;\n                    \n                case 'competitive_analysis':\n                    searchQuery = `${request.prompt} competitors alternatives comparison`;\n                    analysisPrompt = 'Compare competitive solutions and alternatives';\n                    break;\n                    \n                default:\n                    searchQuery = request.prompt;\n                    analysisPrompt = 'Research and analyze the given topic';\n            }\n\n            // Perform web search\n            const searchResults = await this.webSearchService.search(searchQuery);\n            \n            // Analyze results with AI\n            const analysis = await this.analyzeSearchResults(searchResults, analysisPrompt);\n\n            return {\n                status: 'success',\n                content: analysis,\n                metadata: { \n                    step: step.id,\n                    agent: 'research',\n                    searchQuery,\n                    resultsCount: searchResults.results.length\n                }\n            };\n\n        } catch (error) {\n            throw new Error(`Failed to process research step ${step.id}: ${(error as any).message}`);\n        }\n    }\n\n    // Command Handlers\n\n    private async handleSearchCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('🔍 Searching the web for current information...');\n        \n        try {\n            const searchResults = await this.webSearchService.search(prompt);\n            \n            stream.markdown(`## 🔍 Web Search Results\\n\\n`);\n            stream.markdown(`**Query**: ${searchResults.query}\\n`);\n            stream.markdown(`**Results Found**: ${searchResults.totalResults}\\n\\n`);\n\n            // Display search results\n            for (let i = 0; i < searchResults.results.length; i++) {\n                const result = searchResults.results[i];\n                stream.markdown(`### ${i + 1}. ${result.title}\\n`);\n                stream.markdown(`**URL**: [${result.url}](${result.url})\\n`);\n                stream.markdown(`**Summary**: ${result.snippet}\\n\\n`);\n            }\n\n            // Analyze and synthesize results\n            stream.progress('🧠 Analyzing search results...');\n            const analysis = await this.analyzeSearchResults(searchResults, 'Provide a comprehensive analysis and synthesis of the search results');\n            \n            stream.markdown(`## 📊 Analysis & Insights\\n\\n`);\n            stream.markdown(analysis);\n\n            // Add source references\n            searchResults.results.forEach((result, index) => {\n                this.createActionButton(\n                    `📖 Read Source ${index + 1}`,\n                    'vscode.open',\n                    [vscode.Uri.parse(result.url)],\n                    stream\n                );\n            });\n\n        } catch (error) {\n            stream.markdown(`❌ Search failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleDocumentationCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('📚 Searching for technical documentation...');\n        \n        const techQuery = `${prompt} documentation tutorial guide API reference`;\n        \n        try {\n            const searchResults = await this.webSearchService.search(techQuery);\n            \n            stream.markdown(`## 📚 Documentation Research\\n\\n`);\n            stream.markdown(`**Topic**: ${prompt}\\n\\n`);\n\n            // Filter for documentation sources\n            const docResults = searchResults.results.filter(result => \n                result.url.includes('docs') || \n                result.url.includes('documentation') ||\n                result.url.includes('api') ||\n                result.url.includes('guide') ||\n                result.title.toLowerCase().includes('documentation') ||\n                result.title.toLowerCase().includes('guide')\n            );\n\n            if (docResults.length > 0) {\n                stream.markdown(`### 📖 Official Documentation Found\\n\\n`);\n                docResults.forEach((result, index) => {\n                    stream.markdown(`**${index + 1}. ${result.title}**\\n`);\n                    stream.markdown(`- [${result.url}](${result.url})\\n`);\n                    stream.markdown(`- ${result.snippet}\\n\\n`);\n                });\n            }\n\n            // Provide comprehensive analysis\n            const analysis = await this.analyzeSearchResults(searchResults, \n                'Provide a comprehensive guide based on the documentation found, including key concepts, usage examples, and best practices');\n            \n            stream.markdown(`## 📋 Documentation Summary\\n\\n`);\n            stream.markdown(analysis);\n\n        } catch (error) {\n            stream.markdown(`❌ Documentation search failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleMarketCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('📈 Researching market trends...');\n        \n        const marketQuery = `${prompt} market trends 2024 analysis statistics growth`;\n        \n        try {\n            const searchResults = await this.webSearchService.search(marketQuery);\n            \n            stream.markdown(`## 📈 Market Research\\n\\n`);\n            \n            const analysis = await this.analyzeSearchResults(searchResults, \n                'Provide a comprehensive market analysis including current trends, growth statistics, key players, opportunities, and challenges');\n            \n            stream.markdown(analysis);\n\n            // Offer to create market report\n            this.createActionButton(\n                '📊 Create Market Report',\n                'ki-autoagent.createFile',\n                [`market_research_${Date.now()}.md`, `# Market Research: ${prompt}\\n\\n${analysis}`],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Market research failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleCompareCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('⚖️ Comparing solutions...');\n        \n        const compareQuery = `${prompt} comparison alternatives pros cons review`;\n        \n        try {\n            const searchResults = await this.webSearchService.search(compareQuery);\n            \n            stream.markdown(`## ⚖️ Comparison Analysis\\n\\n`);\n            \n            const analysis = await this.analyzeSearchResults(searchResults, \n                'Provide a detailed comparison including pros and cons, use cases, pricing (if available), and recommendations');\n            \n            stream.markdown(analysis);\n\n            // Offer to create comparison table\n            this.createActionButton(\n                '📋 Create Comparison Table',\n                'ki-autoagent.createComparisonTable',\n                [prompt, analysis],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Comparison research failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleGeneralResearchRequest(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('🔍 Conducting research...');\n        \n        try {\n            const searchResults = await this.webSearchService.search(prompt);\n            \n            // Quick summary\n            stream.markdown(`## 🔍 Research Summary\\n\\n`);\n            stream.markdown(`**Topic**: ${prompt}\\n`);\n            stream.markdown(`**Sources**: ${searchResults.totalResults} results found\\n\\n`);\n\n            // Comprehensive analysis\n            const analysis = await this.analyzeSearchResults(searchResults, \n                'Provide comprehensive research findings with key insights, current state, and actionable information');\n            \n            stream.markdown(analysis);\n\n            // Show top sources\n            if (searchResults.results.length > 0) {\n                stream.markdown(`\\n## 📚 Key Sources\\n\\n`);\n                searchResults.results.slice(0, 3).forEach((result, index) => {\n                    stream.markdown(`${index + 1}. [${result.title}](${result.url})\\n`);\n                });\n            }\n\n        } catch (error) {\n            stream.markdown(`❌ Research failed: ${(error as any).message}`);\n        }\n    }\n\n    // Helper Methods\n\n    private async analyzeSearchResults(searchResults: SearchResponse, analysisPrompt: string): Promise<string> {\n        const resultsContent = searchResults.results\n            .map(result => `Title: ${result.title}\\nURL: ${result.url}\\nContent: ${result.snippet}`)\n            .join('\\n\\n---\\n\\n');\n\n        const systemPrompt = `You are ResearchBot, an expert research analyst. Analyze web search results and provide comprehensive, accurate, and actionable insights.\n\nKey principles:\n1. Synthesize information from multiple sources\n2. Highlight key findings and trends\n3. Provide actionable recommendations\n4. Note any conflicting information\n5. Include relevant statistics and data\n6. Maintain objectivity and cite sources when possible\n\nFormat your response with clear headings and bullet points for readability.`;\n\n        const userPrompt = `${analysisPrompt}\n\nSearch Query: ${searchResults.query}\n\nSearch Results:\n${resultsContent}\n\nPlease provide a comprehensive analysis based on these search results.`;\n\n        try {\n            return await this.openAIService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n        } catch (error) {\n            return `Error analyzing results: ${(error as any).message}`;\n        }\n    }\n}","/**\n * ChatWidget - Status bar widget for KI AutoAgent Chat\n * Provides quick access to the chat panel from VS Code status bar\n */\nimport * as vscode from 'vscode';\nimport { MultiAgentChatPanel } from './MultiAgentChatPanel';\n\nexport class ChatWidget {\n    private statusBarItem: vscode.StatusBarItem;\n    private unreadCount: number = 0;\n    private lastMessage: string = '';\n    private pulseInterval: NodeJS.Timeout | undefined;\n    \n    constructor(private context: vscode.ExtensionContext, private dispatcher?: any) {\n        // Create status bar item (right side, high priority)\n        this.statusBarItem = vscode.window.createStatusBarItem(\n            vscode.StatusBarAlignment.Right,\n            1000 // High priority to appear on the right\n        );\n        \n        this.updateStatusBar();\n        this.statusBarItem.show();\n        \n        // Register commands\n        this.registerCommands();\n        \n        // Add to subscriptions\n        context.subscriptions.push(this.statusBarItem);\n    }\n    \n    private registerCommands() {\n        // Toggle chat command\n        const toggleCommand = vscode.commands.registerCommand(\n            'ki-autoagent.toggleChat',\n            () => this.toggleChat()\n        );\n        \n        // Quick chat command (opens quick input)\n        const quickChatCommand = vscode.commands.registerCommand(\n            'ki-autoagent.quickChat',\n            () => this.showQuickChat()\n        );\n        \n        // Clear unread command\n        const clearUnreadCommand = vscode.commands.registerCommand(\n            'ki-autoagent.clearUnread',\n            () => this.clearUnreadCount()\n        );\n        \n        this.context.subscriptions.push(\n            toggleCommand,\n            quickChatCommand,\n            clearUnreadCommand\n        );\n    }\n    \n    private updateStatusBar() {\n        // Build status bar text\n        let text = '$(comment-discussion) KI Chat';\n        \n        if (this.unreadCount > 0) {\n            text = `$(comment-discussion) KI Chat (${this.unreadCount})`;\n            \n            // Add warning background for unread messages\n            this.statusBarItem.backgroundColor = new vscode.ThemeColor('statusBarItem.warningBackground');\n            \n            // Start pulse animation\n            if (!this.pulseInterval) {\n                this.startPulseAnimation();\n            }\n        } else {\n            // Clear background when no unread\n            this.statusBarItem.backgroundColor = undefined;\n            \n            // Stop pulse animation\n            if (this.pulseInterval) {\n                this.stopPulseAnimation();\n            }\n        }\n        \n        this.statusBarItem.text = text;\n        this.statusBarItem.command = 'ki-autoagent.toggleChat';\n        \n        // Update tooltip\n        if (this.lastMessage) {\n            this.statusBarItem.tooltip = new vscode.MarkdownString(\n                `**KI AutoAgent Chat**\\n\\n` +\n                `Last message: _${this.truncateMessage(this.lastMessage)}_\\n\\n` +\n                `Click to open chat • Right-click for options`\n            );\n        } else {\n            this.statusBarItem.tooltip = new vscode.MarkdownString(\n                `**KI AutoAgent Chat**\\n\\n` +\n                `Click to open multi-agent chat interface\\n\\n` +\n                `Features:\\n` +\n                `• Chat with specialized AI agents\\n` +\n                `• Auto-routing to best agent\\n` +\n                `• Multi-agent workflows\\n\\n` +\n                `Click to open • Right-click for options`\n            );\n        }\n    }\n    \n    private startPulseAnimation() {\n        let isPulsing = false;\n        this.pulseInterval = setInterval(() => {\n            if (isPulsing) {\n                this.statusBarItem.text = this.statusBarItem.text.replace('🔴', '$(comment-discussion)');\n            } else {\n                this.statusBarItem.text = this.statusBarItem.text.replace('$(comment-discussion)', '🔴');\n            }\n            isPulsing = !isPulsing;\n        }, 1000);\n    }\n    \n    private stopPulseAnimation() {\n        if (this.pulseInterval) {\n            clearInterval(this.pulseInterval);\n            this.pulseInterval = undefined;\n            this.updateStatusBar();\n        }\n    }\n    \n    private toggleChat() {\n        const panel = MultiAgentChatPanel.createOrShow(this.context.extensionUri, this.dispatcher);\n        this.clearUnreadCount();\n        return panel;\n    }\n    \n    private async showQuickChat() {\n        // Show quick input for fast message sending\n        const message = await vscode.window.showInputBox({\n            placeHolder: 'Type your message for KI AutoAgent...',\n            prompt: 'Send a quick message to the AI agents',\n            ignoreFocusOut: false\n        });\n        \n        if (message) {\n            // Open chat and send message\n            const panel = this.toggleChat();\n            if (panel) {\n                // Send message to panel\n                panel.addMessage({\n                    role: 'user',\n                    content: message,\n                    timestamp: new Date().toISOString()\n                });\n                \n                // Process the message (this would normally go through the dispatcher)\n                setTimeout(() => {\n                    panel.addMessage({\n                        role: 'assistant',\n                        content: 'Processing your request...',\n                        agent: 'orchestrator',\n                        timestamp: new Date().toISOString()\n                    });\n                }, 100);\n            }\n        }\n    }\n    \n    public updateUnreadCount(count: number) {\n        this.unreadCount = count;\n        this.updateStatusBar();\n    }\n    \n    public incrementUnread() {\n        this.unreadCount++;\n        this.updateStatusBar();\n    }\n    \n    public clearUnreadCount() {\n        this.unreadCount = 0;\n        this.updateStatusBar();\n    }\n    \n    public setLastMessage(message: string, agent?: string) {\n        this.lastMessage = agent ? `[${agent}] ${message}` : message;\n        this.updateStatusBar();\n    }\n    \n    private truncateMessage(message: string, maxLength: number = 50): string {\n        if (message.length <= maxLength) {\n            return message;\n        }\n        return message.substring(0, maxLength) + '...';\n    }\n    \n    public showNotification(message: string, agent: string) {\n        // Show notification when chat is not open\n        if (!MultiAgentChatPanel.currentPanel) {\n            vscode.window.showInformationMessage(\n                `KI Agent ${agent}: ${this.truncateMessage(message, 100)}`,\n                'Open Chat',\n                'Dismiss'\n            ).then(selection => {\n                if (selection === 'Open Chat') {\n                    this.toggleChat();\n                }\n            });\n            \n            // Increment unread count\n            this.incrementUnread();\n            this.setLastMessage(message, agent);\n        }\n    }\n    \n    public dispose() {\n        if (this.pulseInterval) {\n            clearInterval(this.pulseInterval);\n        }\n        this.statusBarItem.dispose();\n    }\n}","/**\n * Claude Web Service - Integration with Claude Pro Web Sessions\n * Uses the existing claude_web_proxy system instead of API keys\n */\nimport * as vscode from 'vscode';\n\ninterface ClaudeWebResponse {\n    response: string;\n    conversation_id?: string;\n    success: boolean;\n    error?: string;\n}\n\ninterface ChatMessage {\n    role: 'system' | 'user' | 'assistant';\n    content: string;\n}\n\nexport class ClaudeWebService {\n    private baseUrl: string;\n    private conversationId?: string;\n    private planType: string;\n    \n    constructor() {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent');\n        this.baseUrl = config.get<string>('claudeWeb.serverUrl', 'http://localhost:8000');\n        this.planType = config.get<string>('claudeWeb.planType', 'pro');\n    }\n\n    async chat(\n        messages: ChatMessage[],\n        temperature: number = 0.7\n    ): Promise<string> {\n        \n        // Check if Claude Web Proxy is available\n        const isAvailable = await this.checkServerAvailable();\n        if (!isAvailable) {\n            throw new Error('Claude Web Proxy server not available. Please start the server first.');\n        }\n\n        try {\n            // Convert messages to conversation format\n            const systemMessage = messages.find(m => m.role === 'system');\n            const userMessages = messages.filter(m => m.role === 'user');\n            const lastUserMessage = userMessages[userMessages.length - 1];\n            \n            if (!lastUserMessage) {\n                throw new Error('No user message provided');\n            }\n\n            // Combine system prompt with user message if needed\n            let prompt = lastUserMessage.content;\n            if (systemMessage) {\n                prompt = `${systemMessage.content}\\n\\nUser: ${prompt}`;\n            }\n\n            const response = await fetch(`${this.baseUrl}/chat`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    message: prompt,\n                    conversation_id: this.conversationId,\n                    temperature: temperature,\n                    plan_type: this.planType\n                })\n            });\n\n            if (!response.ok) {\n                const errorData = await response.json().catch(() => ({ error: 'Unknown error' })) as any;\n                throw new Error(`Claude Web API error: ${errorData.error || response.statusText}`);\n            }\n\n            const data = await response.json() as ClaudeWebResponse;\n            \n            if (!data.success) {\n                throw new Error(`Claude Web error: ${data.error || 'Unknown error'}`);\n            }\n\n            // Store conversation ID for context\n            if (data.conversation_id) {\n                this.conversationId = data.conversation_id;\n            }\n\n            return data.response;\n\n        } catch (error) {\n            if (error instanceof Error) {\n                throw error;\n            }\n            throw new Error(`Claude Web request failed: ${error}`);\n        }\n    }\n\n    async streamChat(\n        messages: ChatMessage[],\n        onChunk: (chunk: string) => void,\n        temperature: number = 0.7\n    ): Promise<void> {\n        \n        const isAvailable = await this.checkServerAvailable();\n        if (!isAvailable) {\n            throw new Error('Claude Web Proxy server not available');\n        }\n\n        try {\n            const systemMessage = messages.find(m => m.role === 'system');\n            const userMessages = messages.filter(m => m.role === 'user');\n            const lastUserMessage = userMessages[userMessages.length - 1];\n            \n            if (!lastUserMessage) {\n                throw new Error('No user message provided');\n            }\n\n            let prompt = lastUserMessage.content;\n            if (systemMessage) {\n                prompt = `${systemMessage.content}\\n\\nUser: ${prompt}`;\n            }\n\n            const response = await fetch(`${this.baseUrl}/chat/stream`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    message: prompt,\n                    conversation_id: this.conversationId,\n                    temperature: temperature,\n                    plan_type: this.planType\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`Claude Web streaming error: ${response.statusText}`);\n            }\n\n            const reader = response.body?.getReader();\n            if (!reader) {\n                throw new Error('Failed to get response stream');\n            }\n\n            const decoder = new TextDecoder();\n\n            while (true) {\n                const { done, value } = await reader.read();\n                \n                if (done) {\n                    break;\n                }\n\n                const chunk = decoder.decode(value);\n                const lines = chunk.split('\\n').filter(line => line.trim() !== '');\n\n                for (const line of lines) {\n                    if (line.startsWith('data: ')) {\n                        const data = line.substring(6);\n                        \n                        if (data === '[DONE]') {\n                            return;\n                        }\n\n                        try {\n                            const parsed = JSON.parse(data);\n                            if (parsed.chunk) {\n                                onChunk(parsed.chunk);\n                            }\n                            if (parsed.conversation_id) {\n                                this.conversationId = parsed.conversation_id;\n                            }\n                        } catch (error) {\n                            // Ignore parsing errors for incomplete chunks\n                        }\n                    }\n                }\n            }\n\n        } catch (error) {\n            throw new Error(`Claude Web streaming failed: ${error}`);\n        }\n    }\n\n    async checkServerAvailable(): Promise<boolean> {\n        try {\n            const response = await fetch(`${this.baseUrl}/health`, {\n                method: 'GET',\n                timeout: 5000\n            } as any);\n            return response.ok;\n        } catch (error) {\n            return false;\n        }\n    }\n\n    async getServerStatus(): Promise<{\n        available: boolean;\n        url: string;\n        version?: string;\n        error?: string;\n    }> {\n        try {\n            const response = await fetch(`${this.baseUrl}/status`, {\n                method: 'GET',\n                timeout: 5000\n            } as any);\n            \n            if (response.ok) {\n                const data = await response.json() as any;\n                return {\n                    available: true,\n                    url: this.baseUrl,\n                    version: data.version || 'unknown'\n                };\n            } else {\n                return {\n                    available: false,\n                    url: this.baseUrl,\n                    error: `Server returned ${response.status}`\n                };\n            }\n        } catch (error) {\n            return {\n                available: false,\n                url: this.baseUrl,\n                error: error instanceof Error ? error.message : 'Connection failed'\n            };\n        }\n    }\n\n    async resetConversation(): Promise<void> {\n        this.conversationId = undefined;\n    }\n\n    async startNewConversation(): Promise<string | undefined> {\n        try {\n            const response = await fetch(`${this.baseUrl}/conversation/new`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n\n            if (response.ok) {\n                const data = await response.json() as any;\n                this.conversationId = data.conversation_id;\n                return this.conversationId;\n            }\n        } catch (error) {\n            console.error('Failed to start new conversation:', error);\n        }\n        return undefined;\n    }\n\n    getConversationId(): string | undefined {\n        return this.conversationId;\n    }\n\n    validateWebAccess(): boolean {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent');\n        const webAccessEnabled = config.get<boolean>('claudeWeb.enabled', true);\n        const serverUrl = config.get<string>('claudeWeb.serverUrl', 'http://localhost:8000');\n        \n        return webAccessEnabled && !!serverUrl;\n    }\n\n    async testConnection(): Promise<boolean> {\n        try {\n            const status = await this.getServerStatus();\n            return status.available;\n        } catch (error) {\n            return false;\n        }\n    }\n}","/**\n * Web Search Service for real-time research and information gathering\n */\nimport * as vscode from 'vscode';\n\nexport interface SearchResult {\n    title: string;\n    url: string;\n    snippet: string;\n    content?: string;\n}\n\nexport interface SearchResponse {\n    query: string;\n    results: SearchResult[];\n    totalResults: number;\n}\n\nexport class WebSearchService {\n    private config: vscode.WorkspaceConfiguration;\n\n    constructor() {\n        this.config = vscode.workspace.getConfiguration('kiAutoAgent');\n    }\n\n    async search(query: string): Promise<SearchResponse> {\n        const webAccessEnabled = this.config.get<boolean>('webAccess.enabled', true);\n        \n        if (!webAccessEnabled) {\n            throw new Error('Web access is disabled in settings');\n        }\n\n        const searchEngine = this.config.get<string>('webAccess.searchEngine', 'perplexity');\n        const maxResults = this.config.get<number>('webAccess.maxResults', 5);\n\n        switch (searchEngine) {\n            case 'perplexity':\n                return await this.searchWithPerplexity(query, maxResults);\n            case 'tavily':\n                return await this.searchWithTavily(query, maxResults);\n            case 'serp':\n                return await this.searchWithSERP(query, maxResults);\n            case 'custom':\n                return await this.searchWithCustom(query, maxResults);\n            default:\n                throw new Error(`Unknown search engine: ${searchEngine}`);\n        }\n    }\n\n    private async searchWithPerplexity(query: string, maxResults: number): Promise<SearchResponse> {\n        const apiKey = this.config.get<string>('perplexity.apiKey');\n        \n        if (!apiKey) {\n            throw new Error('Perplexity API key not configured');\n        }\n\n        try {\n            const response = await fetch('https://api.perplexity.ai/chat/completions', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${apiKey}`\n                },\n                body: JSON.stringify({\n                    model: 'llama-3.1-sonar-small-128k-online',\n                    messages: [\n                        {\n                            role: 'system',\n                            content: 'You are a helpful research assistant. Provide comprehensive information with sources.'\n                        },\n                        {\n                            role: 'user',\n                            content: `Research and provide detailed information about: ${query}`\n                        }\n                    ],\n                    max_tokens: 1000,\n                    temperature: 0.2,\n                    return_citations: true\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`Perplexity API error: ${response.statusText}`);\n            }\n\n            const data = await response.json() as any;\n            const content = data.choices[0]?.message?.content || '';\n            const citations = data.citations || [];\n\n            // Convert Perplexity response to SearchResponse format\n            const results: SearchResult[] = citations.slice(0, maxResults).map((citation: any, index: number) => ({\n                title: `Source ${index + 1}`,\n                url: citation.url || '',\n                snippet: citation.text || '',\n                content: content\n            }));\n\n            // If no citations but we have content, create a general result\n            if (results.length === 0 && content) {\n                results.push({\n                    title: 'Perplexity Research Result',\n                    url: 'https://perplexity.ai',\n                    snippet: content.substring(0, 200) + '...',\n                    content: content\n                });\n            }\n\n            return {\n                query,\n                results,\n                totalResults: results.length\n            };\n\n        } catch (error) {\n            throw new Error(`Perplexity search failed: ${error}`);\n        }\n    }\n\n    private async searchWithTavily(query: string, maxResults: number): Promise<SearchResponse> {\n        const apiKey = this.config.get<string>('tavily.apiKey');\n        \n        if (!apiKey) {\n            throw new Error('Tavily API key not configured');\n        }\n\n        try {\n            const response = await fetch('https://api.tavily.com/search', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    api_key: apiKey,\n                    query: query,\n                    search_depth: 'advanced',\n                    include_answer: true,\n                    include_images: false,\n                    include_raw_content: true,\n                    max_results: maxResults\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`Tavily API error: ${response.statusText}`);\n            }\n\n            const data = await response.json() as any;\n            \n            const results: SearchResult[] = (data.results || []).map((result: any) => ({\n                title: result.title || '',\n                url: result.url || '',\n                snippet: result.content || '',\n                content: result.raw_content || result.content\n            }));\n\n            return {\n                query,\n                results,\n                totalResults: data.results?.length || 0\n            };\n\n        } catch (error) {\n            throw new Error(`Tavily search failed: ${error}`);\n        }\n    }\n\n    private async searchWithSERP(query: string, maxResults: number): Promise<SearchResponse> {\n        const apiKey = this.config.get<string>('serp.apiKey');\n        \n        if (!apiKey) {\n            throw new Error('SERP API key not configured');\n        }\n\n        try {\n            const url = new URL('https://serpapi.com/search');\n            url.searchParams.append('q', query);\n            url.searchParams.append('api_key', apiKey);\n            url.searchParams.append('engine', 'google');\n            url.searchParams.append('num', maxResults.toString());\n\n            const response = await fetch(url.toString());\n\n            if (!response.ok) {\n                throw new Error(`SERP API error: ${response.statusText}`);\n            }\n\n            const data = await response.json() as any;\n            \n            const results: SearchResult[] = (data.organic_results || []).map((result: any) => ({\n                title: result.title || '',\n                url: result.link || '',\n                snippet: result.snippet || '',\n                content: result.snippet || ''\n            }));\n\n            return {\n                query,\n                results,\n                totalResults: data.organic_results?.length || 0\n            };\n\n        } catch (error) {\n            throw new Error(`SERP search failed: ${error}`);\n        }\n    }\n\n    private async searchWithCustom(query: string, maxResults: number): Promise<SearchResponse> {\n        const endpoint = this.config.get<string>('customSearch.endpoint');\n        const apiKey = this.config.get<string>('customSearch.apiKey');\n        \n        if (!endpoint) {\n            throw new Error('Custom search endpoint not configured');\n        }\n\n        try {\n            const response = await fetch(endpoint, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    ...(apiKey && { 'Authorization': `Bearer ${apiKey}` })\n                },\n                body: JSON.stringify({\n                    query,\n                    max_results: maxResults\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`Custom search API error: ${response.statusText}`);\n            }\n\n            const data = await response.json() as any;\n            \n            // Assume custom API returns results in our expected format\n            return {\n                query,\n                results: data.results || [],\n                totalResults: data.total_results || 0\n            };\n\n        } catch (error) {\n            throw new Error(`Custom search failed: ${error}`);\n        }\n    }\n\n    async isWebAccessAvailable(): Promise<boolean> {\n        const webAccessEnabled = this.config.get<boolean>('webAccess.enabled', true);\n        \n        if (!webAccessEnabled) {\n            return false;\n        }\n\n        const searchEngine = this.config.get<string>('webAccess.searchEngine', 'perplexity');\n        \n        switch (searchEngine) {\n            case 'perplexity':\n                return !!this.config.get<string>('perplexity.apiKey');\n            case 'tavily':\n                return !!this.config.get<string>('tavily.apiKey');\n            case 'serp':\n                return !!this.config.get<string>('serp.apiKey');\n            case 'custom':\n                return !!this.config.get<string>('customSearch.endpoint');\n            default:\n                return false;\n        }\n    }\n\n    getSearchEngineStatus(): { engine: string; configured: boolean; error?: string } {\n        const searchEngine = this.config.get<string>('webAccess.searchEngine', 'perplexity');\n        \n        switch (searchEngine) {\n            case 'perplexity':\n                return {\n                    engine: 'Perplexity',\n                    configured: !!this.config.get<string>('perplexity.apiKey')\n                };\n            case 'tavily':\n                return {\n                    engine: 'Tavily',\n                    configured: !!this.config.get<string>('tavily.apiKey')\n                };\n            case 'serp':\n                return {\n                    engine: 'SERP API',\n                    configured: !!this.config.get<string>('serp.apiKey')\n                };\n            case 'custom':\n                return {\n                    engine: 'Custom',\n                    configured: !!this.config.get<string>('customSearch.endpoint')\n                };\n            default:\n                return {\n                    engine: searchEngine,\n                    configured: false,\n                    error: 'Unknown search engine'\n                };\n        }\n    }\n}","/**\n * MultiAgentChatPanel - Main chat interface for KI AutoAgent\n * Provides a webview-based chat interface with agent selection and mode switching\n */\nimport * as vscode from 'vscode';\nimport * as path from 'path';\n\ninterface ChatMessage {\n    role: 'user' | 'assistant' | 'system' | 'agent-to-agent';\n    content: string;\n    agent?: string;\n    timestamp: string;\n    isCollapsible?: boolean;\n}\n\nexport class MultiAgentChatPanel {\n    public static currentPanel: MultiAgentChatPanel | undefined;\n    private readonly _panel: vscode.WebviewPanel;\n    private readonly _extensionUri: vscode.Uri;\n    private _disposables: vscode.Disposable[] = [];\n    private _messages: ChatMessage[] = [];\n    private _currentAgent: string = 'orchestrator';\n    private _currentMode: 'single' | 'auto' | 'workflow' = 'auto';\n    private _dispatcher: any; // Will be set from extension\n\n    // Singleton pattern für Panel\n    public static createOrShow(extensionUri: vscode.Uri, dispatcher?: any) {\n        const column = vscode.ViewColumn.Two;\n        \n        if (MultiAgentChatPanel.currentPanel) {\n            MultiAgentChatPanel.currentPanel._panel.reveal(column);\n            if (dispatcher) {\n                MultiAgentChatPanel.currentPanel._dispatcher = dispatcher;\n            }\n            return MultiAgentChatPanel.currentPanel;\n        }\n\n        const panel = vscode.window.createWebviewPanel(\n            'multiAgentChat',\n            'KI AutoAgent Chat',\n            column,\n            {\n                enableScripts: true,\n                retainContextWhenHidden: true,\n                localResourceRoots: [\n                    vscode.Uri.joinPath(extensionUri, 'media'),\n                    vscode.Uri.joinPath(extensionUri, 'src', 'ui', 'webview')\n                ]\n            }\n        );\n\n        MultiAgentChatPanel.currentPanel = new MultiAgentChatPanel(panel, extensionUri, dispatcher);\n        return MultiAgentChatPanel.currentPanel;\n    }\n\n    private constructor(panel: vscode.WebviewPanel, extensionUri: vscode.Uri, dispatcher?: any) {\n        this._panel = panel;\n        this._extensionUri = extensionUri;\n        this._dispatcher = dispatcher;\n        \n        // Set the webview's initial html content\n        this._update();\n        \n        // Listen for when the panel is disposed\n        this._panel.onDidDispose(() => this.dispose(), null, this._disposables);\n        \n        // Handle messages from the webview\n        this._panel.webview.onDidReceiveMessage(\n            message => this._handleWebviewMessage(message),\n            null,\n            this._disposables\n        );\n\n        // Update the content based on view changes\n        this._panel.onDidChangeViewState(\n            e => {\n                if (this._panel.visible) {\n                    this._update();\n                }\n            },\n            null,\n            this._disposables\n        );\n    }\n\n    private _update() {\n        const webview = this._panel.webview;\n        this._panel.title = \"KI AutoAgent Chat\";\n        this._panel.iconPath = vscode.Uri.joinPath(this._extensionUri, 'media', 'multi-agent-logo.svg');\n        this._panel.webview.html = this._getHtmlForWebview(webview);\n    }\n\n    private _getHtmlForWebview(webview: vscode.Webview) {\n        // Local path to css styles\n        const styleResetUri = webview.asWebviewUri(\n            vscode.Uri.joinPath(this._extensionUri, 'media', 'reset.css')\n        );\n        const styleVSCodeUri = webview.asWebviewUri(\n            vscode.Uri.joinPath(this._extensionUri, 'media', 'vscode.css')\n        );\n        // Add cache buster to force reload\n        const cacheBuster = Date.now();\n        const styleChatUri = webview.asWebviewUri(\n            vscode.Uri.joinPath(this._extensionUri, 'src', 'ui', 'webview', 'chat-fixed.css')\n        ) + `?v=${cacheBuster}`;\n        const scriptUri = webview.asWebviewUri(\n            vscode.Uri.joinPath(this._extensionUri, 'src', 'ui', 'webview', 'chat.js')\n        );\n\n        // Use a nonce to only allow specific scripts to be run\n        const nonce = getNonce();\n\n        return `<!DOCTYPE html>\n            <html lang=\"en\">\n            <head>\n                <meta charset=\"UTF-8\">\n                <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${webview.cspSource} 'unsafe-inline'; script-src 'nonce-${nonce}';\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                <link href=\"${styleResetUri}\" rel=\"stylesheet\">\n                <link href=\"${styleVSCodeUri}\" rel=\"stylesheet\">\n                <link href=\"${styleChatUri}\" rel=\"stylesheet\">\n                <title>KI AutoAgent Chat</title>\n            </head>\n            <body>\n                <div id=\"chat-container\">\n                    <!-- Minimalist Header -->\n                    <div id=\"chat-header\">\n                        <h3>KI AutoAgent Chat</h3>\n                        <button id=\"settings-btn\" title=\"Settings\">⚙️</button>\n                    </div>\n                    \n                    <!-- Messages Container -->\n                    <div id=\"messages-container\">\n                        <div class=\"welcome-message\">\n                            <h2>Welcome to KI AutoAgent</h2>\n                            <p>Start a conversation with our AI agents</p>\n                        </div>\n                    </div>\n                    \n                    <!-- Input Section with Bottom Controls -->\n                    <div id=\"input-section\">\n                        <textarea id=\"message-input\" \n                                  placeholder=\"Message KI AutoAgent...\"\n                                  rows=\"3\"></textarea>\n                        \n                        <div id=\"bottom-controls\">\n                            <div id=\"mode-selector\">\n                                <button class=\"mode-option active\" data-agent=\"auto\" title=\"Automatic agent selection\">\n                                    🤖 Auto\n                                </button>\n                                <button class=\"mode-option\" data-agent=\"architect\" title=\"System architecture & design\">\n                                    🏗️ Architect\n                                </button>\n                                <button class=\"mode-option\" data-agent=\"codesmith\" title=\"Code implementation\">\n                                    💻 CodeSmith\n                                </button>\n                                <button class=\"mode-option\" data-agent=\"tradestrat\" title=\"Trading strategies\">\n                                    📈 TradeStrat\n                                </button>\n                                <button class=\"mode-option\" data-agent=\"research\" title=\"Web research\">\n                                    🔍 Research\n                                </button>\n                                <button class=\"mode-option\" data-agent=\"opus\" title=\"Conflict resolution\">\n                                    ⚖️ Opus\n                                </button>\n                            </div>\n                            \n                            <button id=\"send-btn\" title=\"Send message\">\n                                Send\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n            </body>\n            </html>`;\n    }\n\n    private async _handleWebviewMessage(message: any) {\n        switch (message.command) {\n            case 'sendMessage':\n                await this._processUserMessage(message.text, message.agent, message.mode);\n                break;\n            case 'changeAgent':\n                this._currentAgent = message.agent;\n                vscode.window.showInformationMessage(`Switched to ${message.agent}`);\n                break;\n            case 'changeMode':\n                this._currentMode = message.mode;\n                vscode.window.showInformationMessage(`Mode changed to ${message.mode}`);\n                break;\n            case 'clearChat':\n                this._messages = [];\n                break;\n            case 'quickAction':\n                await this._handleQuickAction(message.action);\n                break;\n        }\n    }\n\n    private async _processUserMessage(text: string, agent: string, mode: string) {\n        // Add user message\n        const userMessage: ChatMessage = {\n            role: 'user',\n            content: text,\n            timestamp: new Date().toISOString()\n        };\n        this._messages.push(userMessage);\n        \n        this._panel.webview.postMessage({\n            type: 'addMessage',\n            message: userMessage\n        });\n\n        // Show typing indicator\n        this._panel.webview.postMessage({\n            type: 'showTyping',\n            agent: agent\n        });\n\n        try {\n            // Process based on mode\n            if (mode === 'auto' && this._dispatcher) {\n                // Use orchestrator for automatic routing\n                const response = await this._callAgent('orchestrator', text);\n                this._addAgentResponse(response, 'orchestrator');\n            } else if (mode === 'single') {\n                // Direct chat with selected agent\n                const response = await this._callAgent(agent, text);\n                this._addAgentResponse(response, agent);\n            } else if (mode === 'workflow') {\n                // Multi-agent workflow - show inter-agent communication\n                await this._processWorkflow(text);\n            }\n        } catch (error) {\n            this._addErrorMessage(`Error: ${(error as any).message}`);\n        } finally {\n            this._panel.webview.postMessage({\n                type: 'hideTyping'\n            });\n        }\n    }\n\n    private async _callAgent(agentId: string, prompt: string): Promise<string> {\n        if (!this._dispatcher) {\n            return 'Error: No dispatcher available. Please check agent configuration.';\n        }\n\n        try {\n            // Create task request for the dispatcher\n            const taskRequest = {\n                prompt: prompt,\n                command: agentId, // Use agent ID as command\n                context: await this._getWorkspaceContext()\n            };\n\n            // Call the real dispatcher\n            const result = await this._dispatcher.processRequest(taskRequest);\n            \n            if (result.status === 'success' || result.status === 'partial_success') {\n                return result.content;\n            } else {\n                return `Error: ${result.content}`;\n            }\n        } catch (error) {\n            return `Agent Error: ${(error as any).message}`;\n        }\n    }\n\n    private async _getWorkspaceContext() {\n        return {\n            activeEditor: vscode.window.activeTextEditor,\n            workspaceRoots: vscode.workspace.workspaceFolders,\n            openDocuments: vscode.workspace.textDocuments,\n            selectedText: vscode.window.activeTextEditor?.document.getText(vscode.window.activeTextEditor.selection),\n            currentFile: vscode.window.activeTextEditor?.document.fileName\n        };\n    }\n\n    private async _processWorkflow(prompt: string) {\n        // Simulate a multi-agent workflow\n        const workflow = [\n            { agent: 'orchestrator', action: 'Analyzing request...' },\n            { agent: 'architect', action: 'Designing solution architecture...' },\n            { agent: 'codesmith', action: 'Implementing code...' },\n            { agent: 'reviewer', action: 'Reviewing implementation...' }\n        ];\n\n        for (const step of workflow) {\n            // Show agent-to-agent communication\n            const agentMessage: ChatMessage = {\n                role: 'agent-to-agent',\n                content: step.action,\n                agent: step.agent,\n                timestamp: new Date().toISOString(),\n                isCollapsible: true\n            };\n            this._messages.push(agentMessage);\n            \n            this._panel.webview.postMessage({\n                type: 'addMessage',\n                message: agentMessage\n            });\n\n            await new Promise(resolve => setTimeout(resolve, 500));\n        }\n\n        // Final response\n        this._addAgentResponse('Workflow completed successfully!', 'orchestrator');\n    }\n\n    private _addAgentResponse(content: string, agent: string) {\n        const assistantMessage: ChatMessage = {\n            role: 'assistant',\n            content: content,\n            agent: agent,\n            timestamp: new Date().toISOString(),\n            isCollapsible: content.length > 500\n        };\n        this._messages.push(assistantMessage);\n        \n        this._panel.webview.postMessage({\n            type: 'addMessage',\n            message: assistantMessage\n        });\n    }\n\n    private _addErrorMessage(content: string) {\n        const errorMessage: ChatMessage = {\n            role: 'system',\n            content: content,\n            timestamp: new Date().toISOString()\n        };\n        this._messages.push(errorMessage);\n        \n        this._panel.webview.postMessage({\n            type: 'addMessage',\n            message: errorMessage\n        });\n    }\n\n    private async _handleQuickAction(action: string) {\n        switch (action) {\n            case 'help':\n                this._addAgentResponse(\n                    `## KI AutoAgent Help\\n\\n` +\n                    `**Modes:**\\n` +\n                    `- **Auto**: Automatically routes to the best agent\\n` +\n                    `- **Single**: Direct chat with selected agent\\n` +\n                    `- **Workflow**: Multi-agent collaboration\\n\\n` +\n                    `**Commands:**\\n` +\n                    `- Type your question and press Enter\\n` +\n                    `- Use Shift+Enter for multiline input\\n` +\n                    `- Select agents from dropdown\\n`,\n                    'system'\n                );\n                break;\n            case 'examples':\n                this._addAgentResponse(\n                    `## Example Prompts\\n\\n` +\n                    `**Architecture:**\\n` +\n                    `\"Design a microservices architecture for an e-commerce platform\"\\n\\n` +\n                    `**Coding:**\\n` +\n                    `\"Implement a REST API with FastAPI and PostgreSQL\"\\n\\n` +\n                    `**Trading:**\\n` +\n                    `\"Create a momentum trading strategy with risk management\"\\n\\n` +\n                    `**Research:**\\n` +\n                    `\"Find the latest best practices for React performance optimization\"\\n`,\n                    'system'\n                );\n                break;\n            case 'agents':\n                this._addAgentResponse(\n                    `## Available Agents\\n\\n` +\n                    `🤖 **Orchestrator**: Automatic task routing\\n` +\n                    `🏗️ **ArchitectGPT**: System design and architecture\\n` +\n                    `💻 **CodeSmithClaude**: Code implementation\\n` +\n                    `📈 **TradeStrat**: Trading strategies\\n` +\n                    `🔍 **ResearchBot**: Web research\\n` +\n                    `⚖️ **OpusRichter**: Quality judgment\\n` +\n                    `📝 **DocuBot**: Documentation\\n` +\n                    `👁️ **ReviewerGPT**: Code review\\n` +\n                    `🔧 **FixerBot**: Bug fixing\\n`,\n                    'system'\n                );\n                break;\n        }\n    }\n\n    public addMessage(message: ChatMessage) {\n        this._messages.push(message);\n        this._panel.webview.postMessage({\n            type: 'addMessage',\n            message: message\n        });\n    }\n\n    public dispose() {\n        MultiAgentChatPanel.currentPanel = undefined;\n        this._panel.dispose();\n        while (this._disposables.length) {\n            const x = this._disposables.pop();\n            if (x) {\n                x.dispose();\n            }\n        }\n    }\n}\n\nfunction getNonce() {\n    let text = '';\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < 32; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}","/**\n * Base Chat Agent class for VS Code Chat Extensions\n * All specialized agents inherit from this base class\n */\nimport * as vscode from 'vscode';\nimport { AgentConfig, TaskRequest, TaskResult, WorkflowStep, AIModel } from '../../types';\nimport { VSCodeMasterDispatcher } from '../../core/VSCodeMasterDispatcher';\n\nexport abstract class ChatAgent {\n    protected context: vscode.ExtensionContext;\n    protected dispatcher: VSCodeMasterDispatcher;\n    protected stats = {\n        totalExecutions: 0,\n        successCount: 0,\n        totalResponseTime: 0,\n        lastExecution: undefined as Date | undefined\n    };\n\n    constructor(\n        protected config: AgentConfig,\n        context: vscode.ExtensionContext,\n        dispatcher: VSCodeMasterDispatcher\n    ) {\n        this.context = context;\n        this.dispatcher = dispatcher;\n    }\n\n    /**\n     * Create VS Code chat request handler\n     */\n    createHandler(): vscode.ChatRequestHandler {\n        return async (\n            request: vscode.ChatRequest,\n            context: vscode.ChatContext,\n            stream: vscode.ChatResponseStream,\n            token: vscode.CancellationToken\n        ) => {\n            const startTime = Date.now();\n            this.stats.totalExecutions++;\n            this.stats.lastExecution = new Date();\n\n            try {\n                // Show agent info\n                stream.progress(`🤖 ${this.config.fullName} is working...`);\n                \n                // Handle the request\n                await this.handleRequest(request, context, stream, token);\n                \n                // Update success stats\n                this.stats.successCount++;\n                this.stats.totalResponseTime += Date.now() - startTime;\n\n            } catch (error) {\n                await this.handleError(error as Error, stream);\n                this.stats.totalResponseTime += Date.now() - startTime;\n            }\n        };\n    }\n\n    /**\n     * Main request handler - to be implemented by each agent\n     */\n    protected abstract handleRequest(\n        request: vscode.ChatRequest,\n        context: vscode.ChatContext,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void>;\n\n    /**\n     * Execute a workflow step (called by dispatcher)\n     */\n    async executeStep(\n        step: WorkflowStep,\n        request: TaskRequest,\n        previousResults: TaskResult[]\n    ): Promise<TaskResult> {\n        try {\n            return await this.processWorkflowStep(step, request, previousResults);\n        } catch (error) {\n            return {\n                status: 'error',\n                content: `Error executing ${step.description}: ${(error as any).message}`,\n                metadata: { error: (error as any).message, step: step.id }\n            };\n        }\n    }\n\n    /**\n     * Process a workflow step - to be implemented by each agent\n     */\n    protected abstract processWorkflowStep(\n        step: WorkflowStep,\n        request: TaskRequest,\n        previousResults: TaskResult[]\n    ): Promise<TaskResult>;\n\n    /**\n     * Handle command-specific logic\n     */\n    protected async handleCommand(\n        command: string,\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        const commandHandler = this.config.commands.find(cmd => cmd.name === command);\n        \n        if (commandHandler) {\n            const methodName = commandHandler.handler;\n            if (typeof (this as any)[methodName] === 'function') {\n                await (this as any)[methodName](prompt, stream, token);\n            } else {\n                stream.markdown(`❌ Command handler '${methodName}' not implemented for ${command}`);\n            }\n        } else {\n            stream.markdown(`❌ Unknown command: /${command}`);\n            await this.showAvailableCommands(stream);\n        }\n    }\n\n    /**\n     * Show available commands for this agent\n     */\n    protected async showAvailableCommands(stream: vscode.ChatResponseStream): Promise<void> {\n        stream.markdown(`## Available Commands for ${this.config.fullName}\\n\\n`);\n        \n        for (const cmd of this.config.commands) {\n            stream.markdown(`- **/${cmd.name}** - ${cmd.description}\\n`);\n        }\n        \n        stream.markdown(`\\n💡 Use \\`@${this.config.name} /<command> <your request>\\``);\n    }\n\n    /**\n     * Get workspace context for AI models\n     */\n    protected async getWorkspaceContext(): Promise<string> {\n        const workspaceContext = await this.dispatcher.getWorkspaceContext();\n        \n        let contextString = '';\n        \n        if (workspaceContext.currentFile) {\n            contextString += `Current file: ${workspaceContext.currentFile}\\n`;\n        }\n        \n        if (workspaceContext.selectedText) {\n            contextString += `Selected text:\\n\\`\\`\\`\\n${workspaceContext.selectedText}\\n\\`\\`\\`\\n`;\n        }\n        \n        if (workspaceContext.workspaceRoots && workspaceContext.workspaceRoots.length > 0) {\n            contextString += `Workspace: ${workspaceContext.workspaceRoots[0].name}\\n`;\n        }\n        \n        return contextString;\n    }\n\n    /**\n     * Render code in the chat with syntax highlighting\n     */\n    protected renderCode(\n        code: string,\n        language: string,\n        stream: vscode.ChatResponseStream,\n        title?: string\n    ): void {\n        if (title) {\n            stream.markdown(`### ${title}\\n\\n`);\n        }\n        stream.markdown(`\\`\\`\\`${language}\\n${code}\\n\\`\\`\\`\\n\\n`);\n    }\n\n    /**\n     * Create action buttons for the user\n     */\n    protected createActionButton(\n        title: string,\n        command: string,\n        args: any[],\n        stream: vscode.ChatResponseStream\n    ): void {\n        stream.button({\n            command,\n            title,\n            arguments: args\n        });\n    }\n\n    /**\n     * Add file reference to chat\n     */\n    protected addFileReference(\n        filePath: string,\n        stream: vscode.ChatResponseStream\n    ): void {\n        try {\n            const uri = vscode.Uri.file(filePath);\n            stream.reference(uri);\n        } catch (error) {\n            console.error('Error adding file reference:', error);\n        }\n    }\n\n    /**\n     * Error handler\n     */\n    protected async handleError(error: Error, stream: vscode.ChatResponseStream): Promise<void> {\n        console.error(`Error in ${this.config.fullName}:`, error);\n        \n        stream.markdown(`❌ **Error**: ${(error as any).message}\\n\\n`);\n        stream.markdown(`💡 **Suggestions:**\\n`);\n        stream.markdown(`- Check your API keys in settings\\n`);\n        stream.markdown(`- Verify your internet connection\\n`);\n        stream.markdown(`- Try rephrasing your request\\n`);\n        \n        // Offer to show help\n        this.createActionButton(\n            'Show Help',\n            'ki-autoagent.showHelp',\n            [this.config.participantId],\n            stream\n        );\n    }\n\n    /**\n     * Get agent statistics\n     */\n    getStats() {\n        return {\n            ...this.stats,\n            successRate: this.stats.totalExecutions > 0 \n                ? this.stats.successCount / this.stats.totalExecutions \n                : 0,\n            averageResponseTime: this.stats.totalExecutions > 0\n                ? this.stats.totalResponseTime / this.stats.totalExecutions\n                : 0\n        };\n    }\n\n    /**\n     * Get AI model configuration\n     */\n    protected getModelConfig(): { model: AIModel; apiKey?: string } {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent');\n        \n        let model: AIModel = this.config.model as AIModel;\n        let apiKey: string | undefined;\n        \n        switch (model) {\n            case 'gpt-4o':\n            case 'gpt-4o-mini':\n                apiKey = config.get<string>('openai.apiKey');\n                break;\n            case 'claude-3.5-sonnet':\n                apiKey = config.get<string>('anthropic.apiKey');\n                break;\n            case 'perplexity-pro':\n                apiKey = config.get<string>('perplexity.apiKey');\n                break;\n        }\n        \n        return { model, apiKey };\n    }\n\n    /**\n     * Validate API configuration\n     */\n    protected validateApiConfig(): boolean {\n        const { apiKey } = this.getModelConfig();\n        return !!apiKey;\n    }\n\n    /**\n     * Get max tokens from configuration\n     */\n    protected getMaxTokens(): number {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent');\n        return config.get<number>('maxTokens', 4000);\n    }\n\n    /**\n     * Check if logging is enabled\n     */\n    protected isLoggingEnabled(): boolean {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent');\n        return config.get<boolean>('enableLogging', true);\n    }\n\n    /**\n     * Log message if logging is enabled\n     */\n    protected log(message: string, level: 'info' | 'warn' | 'error' = 'info'): void {\n        if (this.isLoggingEnabled()) {\n            const timestamp = new Date().toISOString();\n            console[level](`[${timestamp}] ${this.config.fullName}: ${message}`);\n        }\n    }\n}","/**\n * TradeStrat - Trading Strategy Expert\n * Powered by Claude 3.5 Sonnet for trading strategy development and analysis\n */\nimport * as vscode from 'vscode';\nimport { ChatAgent } from './base/ChatAgent';\nimport { AgentConfig, TaskRequest, TaskResult, WorkflowStep } from '../types';\nimport { VSCodeMasterDispatcher } from '../core/VSCodeMasterDispatcher';\nimport { AnthropicService } from '../utils/AnthropicService';\nimport { ClaudeWebService } from '../utils/ClaudeWebService';\n\nexport class TradeStratAgent extends ChatAgent {\n    private anthropicService: AnthropicService;\n    private claudeWebService: ClaudeWebService;\n\n    constructor(context: vscode.ExtensionContext, dispatcher: VSCodeMasterDispatcher) {\n        const config: AgentConfig = {\n            participantId: 'ki-autoagent.tradestrat',\n            name: 'tradestrat',\n            fullName: 'TradeStrat',\n            description: 'Trading Strategy Expert powered by Claude 3.5 Sonnet',\n            model: 'claude-3.5-sonnet',\n            iconPath: vscode.Uri.joinPath(context.extensionUri, 'media', 'trading-icon.svg'),\n            capabilities: [\n                'Trading Strategy Development',\n                'RON Strategy Implementation',\n                'Backtesting Frameworks',\n                'Risk Management',\n                'Portfolio Optimization',\n                'Market Analysis'\n            ],\n            commands: [\n                { name: 'strategy', description: 'Develop and implement trading strategies', handler: 'handleStrategyCommand' },\n                { name: 'backtest', description: 'Create backtesting and validation systems', handler: 'handleBacktestCommand' },\n                { name: 'risk', description: 'Implement risk management and portfolio optimization', handler: 'handleRiskCommand' }\n            ]\n        };\n\n        super(config, context, dispatcher);\n        this.anthropicService = new AnthropicService();\n        this.claudeWebService = new ClaudeWebService();\n    }\n\n    protected async handleRequest(\n        request: vscode.ChatRequest,\n        context: vscode.ChatContext,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        const validationResult = await this.validateServiceConfig(stream);\n        if (!validationResult) {\n            return;\n        }\n\n        const command = request.command;\n        const prompt = request.prompt;\n\n        this.log(`Processing ${command ? `/${command}` : 'general'} trading request: ${prompt.substring(0, 100)}...`);\n\n        if (command) {\n            await this.handleCommand(command, prompt, stream, token);\n        } else {\n            await this.handleGeneralTradingRequest(prompt, stream, token);\n        }\n    }\n\n    protected async processWorkflowStep(\n        step: WorkflowStep,\n        request: TaskRequest,\n        previousResults: TaskResult[]\n    ): Promise<TaskResult> {\n        \n        const context = await this.getWorkspaceContext();\n        \n        let systemPrompt = '';\n        let userPrompt = '';\n\n        switch (step.id) {\n            case 'strategy_design':\n                systemPrompt = this.getStrategyDesignSystemPrompt();\n                userPrompt = `Design a trading strategy for: ${request.prompt}\\n\\nWorkspace Context:\\n${context}`;\n                break;\n                \n            case 'backtest':\n                systemPrompt = this.getBacktestSystemPrompt();\n                userPrompt = `Create backtesting framework for: ${request.prompt}\\n\\nStrategy Design:\\n${this.extractPreviousContent(previousResults)}`;\n                break;\n                \n            case 'risk_analysis':\n                systemPrompt = this.getRiskAnalysisSystemPrompt();\n                userPrompt = `Analyze risk management for: ${request.prompt}\\n\\nContext:\\n${context}`;\n                break;\n                \n            case 'strategy_validation':\n                systemPrompt = this.getValidationSystemPrompt();\n                userPrompt = `Validate trading strategy: ${request.prompt}\\n\\nImplementation:\\n${this.extractPreviousContent(previousResults)}`;\n                break;\n                \n            default:\n                systemPrompt = this.getGeneralSystemPrompt();\n                userPrompt = `${request.prompt}\\n\\nContext:\\n${context}`;\n        }\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            return {\n                status: 'success',\n                content: response,\n                metadata: { \n                    step: step.id,\n                    agent: 'tradestrat',\n                    model: 'claude-3.5-sonnet'\n                }\n            };\n\n        } catch (error) {\n            throw new Error(`Failed to process ${step.id}: ${(error as any).message}`);\n        }\n    }\n\n    // Command Handlers\n\n    private async handleStrategyCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('📈 Developing trading strategy...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getStrategyDesignSystemPrompt();\n        const userPrompt = `Develop a comprehensive trading strategy for: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown(response);\n\n            // Extract strategy components for implementation\n            const pythonCode = this.extractPythonCode(response);\n            if (pythonCode) {\n                this.createActionButton(\n                    '⚡ Implement Strategy',\n                    'ki-autoagent.createFile',\n                    ['strategy.py', pythonCode],\n                    stream\n                );\n            }\n\n            // Offer backtesting\n            this.createActionButton(\n                '🧪 Create Backtest',\n                'ki-autoagent.createBacktest',\n                [prompt, response],\n                stream\n            );\n\n            // Offer risk analysis\n            this.createActionButton(\n                '⚠️ Analyze Risks',\n                'ki-autoagent.analyzeRisks',\n                [prompt, response],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Error developing strategy: ${(error as any).message}`);\n        }\n    }\n\n    private async handleBacktestCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('🧪 Creating backtesting framework...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getBacktestSystemPrompt();\n        const userPrompt = `Create a comprehensive backtesting framework for: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown(response);\n\n            // Extract backtesting code\n            const backtestCode = this.extractPythonCode(response);\n            if (backtestCode) {\n                this.createActionButton(\n                    '📊 Create Backtest Framework',\n                    'ki-autoagent.createFile',\n                    ['backtest_engine.py', backtestCode],\n                    stream\n                );\n            }\n\n            // Offer to create test data\n            this.createActionButton(\n                '📈 Generate Test Data',\n                'ki-autoagent.generateTestData',\n                [prompt],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Error creating backtesting framework: ${(error as any).message}`);\n        }\n    }\n\n    private async handleRiskCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('⚠️ Implementing risk management...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getRiskManagementSystemPrompt();\n        const userPrompt = `Implement comprehensive risk management for: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown(response);\n\n            // Extract risk management code\n            const riskCode = this.extractPythonCode(response);\n            if (riskCode) {\n                this.createActionButton(\n                    '🛡️ Implement Risk Management',\n                    'ki-autoagent.createFile',\n                    ['risk_manager.py', riskCode],\n                    stream\n                );\n            }\n\n            // Offer portfolio optimization\n            this.createActionButton(\n                '📊 Optimize Portfolio',\n                'ki-autoagent.optimizePortfolio',\n                [prompt, response],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Error implementing risk management: ${(error as any).message}`);\n        }\n    }\n\n    private async handleGeneralTradingRequest(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('💹 Processing trading request...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getGeneralSystemPrompt();\n        const userPrompt = `${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown(response);\n\n            // Detect if this is RON strategy related\n            if (prompt.toLowerCase().includes('ron') || response.toLowerCase().includes('ron strategy')) {\n                this.createActionButton(\n                    '🎯 Implement RON Strategy',\n                    'ki-autoagent.implementRON',\n                    [response],\n                    stream\n                );\n            }\n\n            // Auto-detect code for implementation\n            const tradingCode = this.extractPythonCode(response);\n            if (tradingCode) {\n                this.createActionButton(\n                    '⚡ Implement Code',\n                    'ki-autoagent.createFile',\n                    ['trading_implementation.py', tradingCode],\n                    stream\n                );\n            }\n\n        } catch (error) {\n            stream.markdown(`❌ Error processing trading request: ${(error as any).message}`);\n        }\n    }\n\n    // System Prompts\n\n    private getGeneralSystemPrompt(): string {\n        return `You are TradeStrat, an expert trading strategy developer and quantitative analyst. You specialize in:\n\n- Trading strategy design and implementation\n- Algorithmic trading systems\n- Risk management and portfolio optimization\n- Backtesting and performance analysis\n- Market microstructure and execution\n- RON (Reversal of Numbers) strategy implementation\n- Python-based trading systems (pandas, numpy, streamlit, yfinance)\n\nKey principles:\n1. Always prioritize risk management\n2. Implement robust backtesting before live trading\n3. Focus on statistical significance and edge detection\n4. Consider market conditions and regime changes\n5. Provide clear performance metrics and validation\n\nFormat your responses with detailed explanations, working code, and practical implementation guidance.`;\n    }\n\n    private getStrategyDesignSystemPrompt(): string {\n        return `You are TradeStrat designing a comprehensive trading strategy. Structure your response as:\n\n## Trading Strategy Design\n\n### 1. Strategy Overview\n- Strategy name and concept\n- Market conditions and timeframes\n- Expected holding periods\n- Target assets/markets\n\n### 2. Entry Rules\n- Precise entry conditions\n- Technical indicators required\n- Fundamental filters (if any)\n- Signal confirmation methods\n\n### 3. Exit Rules\n- Profit-taking strategies\n- Stop-loss implementation\n- Time-based exits\n- Market condition exits\n\n### 4. Risk Management\n- Position sizing methodology\n- Maximum drawdown limits\n- Correlation and diversification\n- Portfolio-level risk controls\n\n### 5. Implementation Details\n- Required data sources\n- Calculation methodology\n- Code structure and modules\n- Performance monitoring\n\n### 6. Backtesting Framework\n- Historical data requirements\n- Performance metrics to track\n- Stress testing scenarios\n- Out-of-sample validation\n\nProvide complete Python implementation with pandas/numpy for data handling.`;\n    }\n\n    private getBacktestSystemPrompt(): string {\n        return `You are TradeStrat creating a robust backtesting framework. Include:\n\n## Backtesting Framework Design\n\n### 1. Data Management\n- Historical data ingestion\n- Data cleaning and validation\n- Corporate actions handling\n- Survivorship bias considerations\n\n### 2. Signal Generation\n- Strategy logic implementation\n- Signal timing and execution\n- Lookahead bias prevention\n- Realistic latency modeling\n\n### 3. Execution Simulation\n- Order execution modeling\n- Slippage and transaction costs\n- Market impact considerations\n- Partial fill handling\n\n### 4. Performance Metrics\n- Return calculations\n- Risk-adjusted metrics (Sharpe, Sortino)\n- Drawdown analysis\n- Trade-level statistics\n\n### 5. Visualization and Reporting\n- Equity curve plotting\n- Trade analysis charts\n- Performance attribution\n- Stress test results\n\n### 6. Validation Techniques\n- Out-of-sample testing\n- Walk-forward analysis\n- Monte Carlo simulation\n- Bootstrap analysis\n\nProvide production-ready Python code with proper error handling and logging.`;\n    }\n\n    private getRiskManagementSystemPrompt(): string {\n        return `You are TradeStrat implementing comprehensive risk management. Cover:\n\n## Risk Management Framework\n\n### 1. Position Sizing\n- Kelly criterion implementation\n- Volatility-based sizing\n- Maximum position limits\n- Correlation adjustments\n\n### 2. Portfolio Risk Controls\n- Value-at-Risk (VaR) calculation\n- Expected Shortfall (ES)\n- Maximum drawdown limits\n- Sector/asset concentration limits\n\n### 3. Dynamic Risk Adjustment\n- Volatility regime detection\n- Risk scaling mechanisms\n- Market stress indicators\n- Emergency stop procedures\n\n### 4. Monitoring and Alerts\n- Real-time risk metrics\n- Breach notifications\n- Performance tracking\n- Risk attribution analysis\n\n### 5. Stress Testing\n- Historical scenario analysis\n- Monte Carlo stress tests\n- Tail risk evaluation\n- Correlation breakdown scenarios\n\n### 6. Implementation Tools\n- Risk calculation engines\n- Alert systems\n- Reporting dashboards\n- Integration with trading systems\n\nFocus on practical, implementable solutions with clear mathematical foundations.`;\n    }\n\n    private getValidationSystemPrompt(): string {\n        return `You are TradeStrat validating trading strategies for production readiness. Analyze:\n\n## Strategy Validation Checklist\n\n### 1. Statistical Validation\n- Statistical significance of returns\n- Consistency across time periods\n- Performance in different market regimes\n- Correlation with market factors\n\n### 2. Implementation Validation\n- Code correctness and efficiency\n- Data quality and completeness\n- Signal generation accuracy\n- Execution logic verification\n\n### 3. Risk Validation\n- Maximum drawdown analysis\n- Tail risk assessment\n- Stress test results\n- Portfolio-level impact\n\n### 4. Operational Validation\n- System reliability and uptime\n- Error handling and recovery\n- Monitoring and alerting\n- Compliance requirements\n\n### 5. Performance Validation\n- Live vs backtest performance\n- Transaction cost impact\n- Capacity constraints\n- Scalability considerations\n\nProvide detailed assessment with specific recommendations for improvement.`;\n    }\n\n    private getRiskAnalysisSystemPrompt(): string {\n        return this.getRiskManagementSystemPrompt();\n    }\n\n    // Service Configuration Methods\n\n    private async validateServiceConfig(stream?: vscode.ChatResponseStream): Promise<boolean> {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent');\n        const serviceMode = config.get<string>('serviceMode', 'web');\n\n        if (serviceMode === 'api') {\n            if (!config.get<string>('anthropic.apiKey')) {\n                if (stream) {\n                    stream.markdown('❌ **Anthropic API key not configured**\\n\\nPlease set your API key in VS Code settings:\\n- Go to Settings\\n- Search for \"KI AutoAgent\"\\n- Set your Anthropic API key');\n                }\n                return false;\n            }\n        } else if (serviceMode === 'web') {\n            const isWebServiceAvailable = await this.claudeWebService.testConnection();\n            if (!isWebServiceAvailable) {\n                if (stream) {\n                    const status = await this.claudeWebService.getServerStatus();\n                    stream.markdown(`❌ **Claude Web Service not available**\\n\\nError: ${status.error || 'Connection failed'}\\n\\n**To fix this:**\\n1. Make sure Claude Web Proxy server is running\\n2. Check server URL: ${status.url}\\n3. Ensure you're logged into Claude.ai in your browser`);\n                }\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private async getClaudeService(): Promise<{ chat: (messages: any[]) => Promise<string> }> {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent');\n        const serviceMode = config.get<string>('serviceMode', 'web');\n\n        if (serviceMode === 'web') {\n            return {\n                chat: async (messages: any[]) => {\n                    return await this.claudeWebService.chat(messages);\n                }\n            };\n        } else {\n            return {\n                chat: async (messages: any[]) => {\n                    return await this.anthropicService.chat(messages);\n                }\n            };\n        }\n    }\n\n    // Helper Methods\n\n    private extractPythonCode(content: string): string {\n        const pythonBlockRegex = /```python\\n([\\s\\S]*?)```/g;\n        const match = pythonBlockRegex.exec(content);\n        return match ? match[1] : '';\n    }\n\n    private extractPreviousContent(previousResults: TaskResult[]): string {\n        return previousResults\n            .map(result => result.content)\n            .join('\\n\\n---\\n\\n')\n            .substring(0, 2000); // Limit context size\n    }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["ArchitectAgent","ChatAgent","constructor","context","dispatcher","super","participantId","name","fullName","description","model","iconPath","vscode","Uri","joinPath","extensionUri","capabilities","commands","handler","this","openAIService","OpenAIService","handleRequest","request","stream","token","validateApiConfig","markdown","command","prompt","log","substring","handleCommand","handleGeneralArchitectureRequest","processWorkflowStep","step","previousResults","getWorkspaceContext","systemPrompt","userPrompt","id","getAnalyzeSystemPrompt","getDesignSystemPrompt","extractPreviousContent","getGeneralSystemPrompt","status","content","chat","role","metadata","agent","error","Error","message","handleDesignCommand","progress","response","createActionButton","handleAnalyzeCommand","workspaceFiles","getProjectStructure","handlePlanCommand","getPlanSystemPrompt","workspace","findFiles","map","file","fsPath","split","slice","join","result","CodeSmithAgent","anthropicService","AnthropicService","claudeWebService","ClaudeWebService","validateServiceConfig","handleGeneralImplementationRequest","getImplementationSystemPrompt","getTestingSystemPrompt","getOptimizationSystemPrompt","claudeService","getClaudeService","handleImplementCommand","codeBlocks","extractCodeBlocks","block","filename","code","handleOptimizeCommand","codeToOptimize","includes","window","activeTextEditor","document","fileName","languageId","getText","optimizedCode","extractMainCodeBlock","handleTestCommand","testFiles","extractTestFiles","testFile","config","getConfiguration","serviceMode","get","testConnection","getServerStatus","url","async","messages","codeBlockRegex","blocks","match","exec","language","inferFilename","push","filter","length","classMatch","toLowerCase","apiKey","baseURL","maxTokens","temperature","systemMessage","find","m","conversationMessages","requestBody","max_tokens","system","msg","fetch","method","headers","body","JSON","stringify","ok","errorData","json","catch","statusText","data","type","text","streamChat","onChunk","reader","getReader","decoder","TextDecoder","done","value","read","lines","decode","line","trim","startsWith","parsed","parse","delta","validateApiKey","agents","Map","projectTypes","intentPatterns","initializeProjectTypes","initializeIntentPatterns","processRequest","workspaceContext","intent","detectIntent","projectType","detectProjectType","workflow","createWorkflow","executeWorkflow","lowerPrompt","matchesPatterns","confidence","workspaceRoots","workspaceRoot","packageJsonUri","uri","packageJsonContent","fs","readFile","packageJson","toString","dependencies","requirementsUri","requirements","filenames","some","f","console","projectDef","w","results","finalResult","suggestions","references","stepResult","executeStep","activeEditor","workspaceFolders","openDocuments","textDocuments","selectedText","currentFile","selection","isEmpty","registerAgent","agentId","set","getAgentStats","stats","getStats","patterns","pattern","qualityGates","primaryAgent","OpusArbitratorAgent","handleGeneralArbitrationRequest","getConflictResolutionPrompt","getDeepEvaluationPrompt","getFinalVerdictPrompt","getSupremeJudgmentPrompt","handleJudgeCommand","handleResolveCommand","handleEvaluateCommand","handleVerdictCommand","getSlashCommands","outputChannel","createOutputChannel","appendLine","Date","toLocaleString","extension","packageJSON","version","show","VSCodeMasterDispatcher","showChatCommand","ChatWidget","registerCommand","MultiAgentChatPanel","createOrShow","subscriptions","toggleChatCommand","quickChatCommand","showInformationMessage","clearUnreadCommand","clear","OrchestratorAgent","TradeStratAgent","ResearchAgent","forEach","participant","createChatParticipant","createHandler","createFileCommand","workspaceFolder","showErrorMessage","fileUri","writeFile","Buffer","from","openTextDocument","showTextDocument","insertAtCursorCommand","editor","position","active","edit","editBuilder","insert","applySuggestionCommand","suggestionData","executeCommand","showAgentStatsCommand","Object","keys","statsContent","agentStats","entries","totalExecutions","successRate","averageResponseTime","lastExecution","toFixed","formatAgentStats","showHelpCommand","helpContent","generateHelpContent","planImplementationCommand","task","architecture","executeWorkflowCommand","registerCommands","showWelcomeMessage","handleGeneralRequest","index","taskRequest","suggestion","title","reference","handleFallback","handleTaskCommand","handleAgentsCommand","specialties","handleWorkflowCommand","getWorkflowSystemPrompt","module","exports","require","choices","webSearchService","WebSearchService","isWebAccessAvailable","getSearchEngineStatus","engine","configured","handleGeneralResearchRequest","searchQuery","analysisPrompt","searchResults","search","analyzeSearchResults","resultsCount","handleSearchCommand","query","totalResults","i","snippet","analysis","handleDocumentationCommand","techQuery","docResults","handleMarketCommand","marketQuery","now","handleCompareCommand","compareQuery","resultsContent","unreadCount","lastMessage","statusBarItem","createStatusBarItem","StatusBarAlignment","Right","updateStatusBar","toggleCommand","toggleChat","showQuickChat","clearUnreadCount","backgroundColor","ThemeColor","pulseInterval","startPulseAnimation","undefined","stopPulseAnimation","tooltip","MarkdownString","truncateMessage","isPulsing","setInterval","replace","clearInterval","panel","showInputBox","placeHolder","ignoreFocusOut","addMessage","timestamp","toISOString","setTimeout","updateUnreadCount","count","incrementUnread","setLastMessage","maxLength","showNotification","currentPanel","then","dispose","baseUrl","planType","checkServerAvailable","userMessages","lastUserMessage","conversation_id","conversationId","plan_type","success","chunk","timeout","available","resetConversation","startNewConversation","getConversationId","validateWebAccess","webAccessEnabled","serverUrl","searchEngine","maxResults","searchWithPerplexity","searchWithTavily","searchWithSERP","searchWithCustom","return_citations","citations","citation","api_key","search_depth","include_answer","include_images","include_raw_content","max_results","raw_content","URL","searchParams","append","organic_results","link","endpoint","total_results","column","ViewColumn","Two","_panel","reveal","_dispatcher","createWebviewPanel","enableScripts","retainContextWhenHidden","localResourceRoots","_disposables","_messages","_currentAgent","_currentMode","_extensionUri","_update","onDidDispose","webview","onDidReceiveMessage","_handleWebviewMessage","onDidChangeViewState","e","visible","html","_getHtmlForWebview","styleResetUri","asWebviewUri","styleVSCodeUri","cacheBuster","styleChatUri","scriptUri","nonce","possible","charAt","Math","floor","random","getNonce","cspSource","_processUserMessage","mode","_handleQuickAction","action","userMessage","postMessage","_callAgent","_addAgentResponse","_processWorkflow","_addErrorMessage","_getWorkspaceContext","agentMessage","isCollapsible","Promise","resolve","assistantMessage","errorMessage","x","pop","successCount","totalResponseTime","startTime","handleError","commandHandler","cmd","methodName","showAvailableCommands","contextString","renderCode","args","button","arguments","addFileReference","filePath","getModelConfig","getMaxTokens","isLoggingEnabled","level","handleGeneralTradingRequest","getStrategyDesignSystemPrompt","getBacktestSystemPrompt","getRiskAnalysisSystemPrompt","getValidationSystemPrompt","handleStrategyCommand","pythonCode","extractPythonCode","handleBacktestCommand","backtestCode","handleRiskCommand","getRiskManagementSystemPrompt","riskCode","tradingCode","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}