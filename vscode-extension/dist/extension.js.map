{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://ki-autoagent-vscode/./src/workflows/SystemIntelligenceWorkflow.ts","webpack://ki-autoagent-vscode/./src/agents/ArchitectAgent.ts","webpack://ki-autoagent-vscode/./src/core/MemoryManager.ts","webpack://ki-autoagent-vscode/./src/agents/CodeSmithAgent.ts","webpack://ki-autoagent-vscode/./src/core/AgentRegistry.ts","webpack://ki-autoagent-vscode/./src/utils/AnthropicService.ts","webpack://ki-autoagent-vscode/./src/agents/DocuBotAgent.ts","webpack://ki-autoagent-vscode/./src/core/VSCodeMasterDispatcher.ts","webpack://ki-autoagent-vscode/./src/types/AgentConfiguration.ts","webpack://ki-autoagent-vscode/./src/agents/OpusArbitratorAgent.ts","webpack://ki-autoagent-vscode/./src/memory/SystemMemory.ts","webpack://ki-autoagent-vscode/./src/extension.ts","webpack://ki-autoagent-vscode/./src/agents/OrchestratorAgent.ts","webpack://ki-autoagent-vscode/./src/utils/AutoVersioning.ts","webpack://ki-autoagent-vscode/external node-commonjs \"child_process\"","webpack://ki-autoagent-vscode/./src/mixins/UnifiedChatMixin.ts","webpack://ki-autoagent-vscode/./src/agents/FixerBotAgent.ts","webpack://ki-autoagent-vscode/external commonjs \"vscode\"","webpack://ki-autoagent-vscode/external node-commonjs \"events\"","webpack://ki-autoagent-vscode/./src/core/AgentCommunicationBus.ts","webpack://ki-autoagent-vscode/./src/core/AgentConfigurationManager.ts","webpack://ki-autoagent-vscode/./src/types/Memory.ts","webpack://ki-autoagent-vscode/./src/utils/OpenAIService.ts","webpack://ki-autoagent-vscode/./src/services/ClaudeCodeService.ts","webpack://ki-autoagent-vscode/./src/agents/ResearchAgent.ts","webpack://ki-autoagent-vscode/external node-commonjs \"http\"","webpack://ki-autoagent-vscode/./src/ui/ChatWidget.ts","webpack://ki-autoagent-vscode/./src/core/SharedContextManager.ts","webpack://ki-autoagent-vscode/external node-commonjs \"https\"","webpack://ki-autoagent-vscode/./src/utils/WebSearchService.ts","webpack://ki-autoagent-vscode/./src/agents/ReviewerGPTAgent.ts","webpack://ki-autoagent-vscode/./src/core/WorkflowEngine.ts","webpack://ki-autoagent-vscode/./src/ui/MultiAgentChatPanel.ts","webpack://ki-autoagent-vscode/./src/agents/base/ChatAgent.ts","webpack://ki-autoagent-vscode/./src/core/ConversationContextManager.ts","webpack://ki-autoagent-vscode/external node-commonjs \"fs\"","webpack://ki-autoagent-vscode/external node-commonjs \"path\"","webpack://ki-autoagent-vscode/./src/agents/TradeStratAgent.ts","webpack://ki-autoagent-vscode/external node-commonjs \"fs/promises\"","webpack://ki-autoagent-vscode/webpack/bootstrap","webpack://ki-autoagent-vscode/webpack/startup"],"sourcesContent":["/**\n * System Intelligence Workflow - Orchestrates system analysis and continuous learning\n * This workflow coordinates agents to build and maintain a comprehensive understanding\n * of the codebase, learn from patterns, and improve over time.\n */\n\nimport * as vscode from 'vscode';\nimport {\n    SystemKnowledge,\n    ArchitectureModel,\n    FunctionInventory,\n    SystemAnalysisResult,\n    Component,\n    FunctionSignature,\n    ArchitecturePattern,\n    CodeHotspot,\n    SuccessPattern,\n    FailurePattern,\n    UserPreference,\n    LearningRepository,\n    SystemMetadata,\n    ComponentMap,\n    DependencyGraph,\n    FunctionCallGraph,\n    ModuleStructure,\n    ComplexityScore,\n    CodePattern,\n    OptimizationPattern\n} from '../types/SystemKnowledge';\nimport { SystemMemoryStore, SystemMemoryConfig } from '../memory/SystemMemory';\nimport { VSCodeMasterDispatcher } from '../core/VSCodeMasterDispatcher';\nimport { SharedContextManager, getSharedContext } from '../core/SharedContextManager';\nimport { AgentCommunicationBus, getCommunicationBus, MessageType } from '../core/AgentCommunicationBus';\nimport { WorkflowEngine } from '../core/WorkflowEngine';\nimport { TaskRequest, TaskResult, WorkflowStep, WorkspaceContext } from '../types';\n\n/**\n * Configuration for system intelligence workflow\n */\nexport interface SystemIntelligenceConfig {\n    autoAnalyze: boolean;\n    continuousLearning: boolean;\n    analysisDepth: 'shallow' | 'normal' | 'deep';\n    patternExtractionThreshold: number;\n    updateInterval: number; // ms\n    memoryConfig: SystemMemoryConfig;\n}\n\n/**\n * Main workflow for system intelligence\n */\nexport class SystemIntelligenceWorkflow {\n    private systemMemory: SystemMemoryStore;\n    private dispatcher: VSCodeMasterDispatcher;\n    private sharedContext: SharedContextManager;\n    private communicationBus: AgentCommunicationBus;\n    private workflowEngine: WorkflowEngine;\n    private config: SystemIntelligenceConfig;\n    private isAnalyzing: boolean = false;\n    private analysisSession: string | null = null;\n    private continuousLearningTimer: NodeJS.Timeout | null = null;\n    private outputChannel: vscode.OutputChannel;\n\n    constructor(\n        dispatcher: VSCodeMasterDispatcher,\n        config: SystemIntelligenceConfig\n    ) {\n        this.dispatcher = dispatcher;\n        this.config = config;\n        this.systemMemory = new SystemMemoryStore(config.memoryConfig);\n        this.sharedContext = getSharedContext();\n        this.communicationBus = getCommunicationBus();\n        this.workflowEngine = new WorkflowEngine();\n        this.outputChannel = vscode.window.createOutputChannel('System Intelligence');\n\n        // Start continuous learning if enabled\n        if (config.continuousLearning) {\n            this.startContinuousLearning();\n        }\n    }\n\n    /**\n     * Initialize system understanding - called on extension activation\n     */\n    public async initializeSystemUnderstanding(): Promise<SystemAnalysisResult> {\n        if (this.isAnalyzing) {\n            throw new Error('Analysis already in progress');\n        }\n\n        this.isAnalyzing = true;\n        this.analysisSession = this.generateSessionId();\n        this.outputChannel.show();\n        this.outputChannel.appendLine('🧠 Starting System Intelligence Analysis...');\n\n        try {\n            // Check if we have existing knowledge\n            const existingKnowledge = this.systemMemory.getSystemKnowledge();\n            if (existingKnowledge && !this.shouldReanalyze(existingKnowledge)) {\n                this.outputChannel.appendLine('✅ Using existing system knowledge (up to date)');\n                return this.createAnalysisResult(existingKnowledge);\n            }\n\n            // Start collaboration session\n            const session = await this.communicationBus.startCollaboration(\n                {\n                    task: 'System Analysis',\n                    goal: 'Build comprehensive understanding of the codebase'\n                },\n                ['architect', 'codesmith', 'docu', 'reviewer'],\n                'orchestrator'\n            );\n\n            this.outputChannel.appendLine(`📋 Collaboration session started: ${session.id}`);\n\n            // Phase 1: Architecture Analysis\n            this.outputChannel.appendLine('\\n📐 Phase 1: Architecture Analysis');\n            const architecture = await this.analyzeArchitecture();\n\n            // Phase 2: Function Inventory\n            this.outputChannel.appendLine('\\n🔧 Phase 2: Function Inventory');\n            const functions = await this.analyzeFunctions();\n\n            // Phase 3: Pattern Extraction\n            this.outputChannel.appendLine('\\n🔍 Phase 3: Pattern Extraction');\n            const learnings = await this.extractPatterns(architecture, functions);\n\n            // Phase 4: System Metadata\n            this.outputChannel.appendLine('\\n📊 Phase 4: System Metadata');\n            const metadata = await this.gatherMetadata();\n\n            // Phase 5: Quality Analysis\n            this.outputChannel.appendLine('\\n✨ Phase 5: Quality Analysis');\n            const insights = await this.analyzeQuality(architecture, functions);\n\n            // Combine into system knowledge\n            const knowledge: SystemKnowledge = {\n                architecture,\n                functions,\n                learnings,\n                metadata\n            };\n\n            // Store in memory\n            await this.systemMemory.storeSystemKnowledge(knowledge);\n\n            // Share with all agents\n            await this.shareKnowledge(knowledge);\n\n            // Generate documentation\n            await this.generateDocumentation(knowledge);\n\n            // Complete collaboration\n            const resultsMap = new Map<string, any>();\n            resultsMap.set('knowledge', knowledge);\n            await this.communicationBus.completeCollaboration(session.id, resultsMap);\n\n            this.outputChannel.appendLine('\\n✅ System Intelligence Analysis Complete!');\n\n            const result = this.createAnalysisResult(knowledge);\n            return result;\n\n        } finally {\n            this.isAnalyzing = false;\n            this.analysisSession = null;\n        }\n    }\n\n    /**\n     * Analyze system architecture\n     */\n    private async analyzeArchitecture(): Promise<ArchitectureModel> {\n        this.outputChannel.appendLine('  → Requesting architecture analysis from ArchitectAgent...');\n\n        const request: TaskRequest = {\n            prompt: `Analyze the complete architecture of this codebase. Include:\n            1. Component identification and classification\n            2. Dependency mapping and analysis\n            3. Architectural patterns detection\n            4. Layer identification and violations\n            5. Module structure analysis\n            6. Quality metrics calculation\n\n            Return a comprehensive ArchitectureModel structure.\n\n            Analysis depth: ${this.config.analysisDepth}\n            Session ID: ${this.analysisSession}`\n        };\n\n        const workflow: WorkflowStep[] = [\n            { id: 'analyze-architecture', agent: 'architect', description: 'Analyze system architecture' }\n        ];\n\n        const result = await this.dispatcher.executeWorkflow(workflow, request);\n\n        if (result.status !== 'success') {\n            throw new Error(`Architecture analysis failed: ${result.content}`);\n        }\n\n        // Parse the result into ArchitectureModel\n        const architecture = this.parseArchitectureResult(result);\n\n        this.outputChannel.appendLine(`  ✓ Found ${Object.keys(architecture.components).length} components`);\n        this.outputChannel.appendLine(`  ✓ Detected ${architecture.patterns.length} patterns`);\n        this.outputChannel.appendLine(`  ✓ Identified ${architecture.layers.length} layers`);\n\n        return architecture;\n    }\n\n    /**\n     * Analyze functions and create inventory\n     */\n    private async analyzeFunctions(): Promise<FunctionInventory> {\n        this.outputChannel.appendLine('  → Requesting function analysis from CodeSmithAgent...');\n\n        const request: TaskRequest = {\n            prompt: `Analyze all functions in the codebase. Include:\n            1. Complete function signatures and metadata\n            2. Complexity analysis for each function\n            3. Call graph construction\n            4. Category classification\n            5. Hotspot identification\n            6. Duplicate detection\n\n            Return a comprehensive FunctionInventory structure.\n\n            Analysis depth: ${this.config.analysisDepth}\n            Session ID: ${this.analysisSession}`\n        };\n\n        const workflow: WorkflowStep[] = [\n            { id: 'analyze-functions', agent: 'codesmith', description: 'Analyze all functions' }\n        ];\n\n        const result = await this.dispatcher.executeWorkflow(workflow, request);\n\n        if (result.status !== 'success') {\n            throw new Error(`Function analysis failed: ${result.content}`);\n        }\n\n        // Parse the result into FunctionInventory\n        const inventory = this.parseFunctionResult(result);\n\n        const totalFunctions = Object.values(inventory.byModule).flat().length;\n        this.outputChannel.appendLine(`  ✓ Analyzed ${totalFunctions} functions`);\n        this.outputChannel.appendLine(`  ✓ Found ${inventory.hotspots.length} hotspots`);\n        this.outputChannel.appendLine(`  ✓ Built call graph with ${inventory.callGraph.nodes.length} nodes`);\n\n        return inventory;\n    }\n\n    /**\n     * Extract patterns from analysis\n     */\n    private async extractPatterns(\n        architecture: ArchitectureModel,\n        functions: FunctionInventory\n    ): Promise<LearningRepository> {\n        this.outputChannel.appendLine('  → Extracting patterns and learnings...');\n\n        // Initialize repository\n        const learnings: LearningRepository = {\n            successPatterns: [],\n            failurePatterns: [],\n            userPreferences: [],\n            optimizations: [],\n            codePatterns: [],\n            workflowPatterns: []\n        };\n\n        // Extract architecture patterns as success patterns\n        for (const pattern of architecture.patterns) {\n            if (pattern.quality > this.config.patternExtractionThreshold) {\n                learnings.successPatterns.push({\n                    id: `arch_${pattern.id}`,\n                    name: pattern.name,\n                    description: `Architectural pattern: ${pattern.name}`,\n                    context: 'architecture',\n                    solution: pattern.instances[0]?.implementation || '',\n                    occurrences: pattern.frequency,\n                    successRate: pattern.quality,\n                    lastUsed: new Date(),\n                    applicableScenarios: pattern.instances.map(i => i.location),\n                    benefits: pattern.benefits,\n                    examples: pattern.instances.map(i => ({\n                        code: i.implementation,\n                        description: `Instance at ${i.location}`,\n                        context: 'architecture',\n                        result: `Effectiveness: ${i.effectiveness}`\n                    }))\n                });\n            }\n        }\n\n        // Extract common function patterns\n        const functionPatterns = this.extractFunctionPatterns(functions);\n        learnings.codePatterns.push(...functionPatterns);\n\n        // Extract optimization opportunities\n        const optimizations = this.identifyOptimizations(functions);\n        learnings.optimizations.push(...optimizations);\n\n        this.outputChannel.appendLine(`  ✓ Extracted ${learnings.successPatterns.length} success patterns`);\n        this.outputChannel.appendLine(`  ✓ Found ${learnings.codePatterns.length} code patterns`);\n        this.outputChannel.appendLine(`  ✓ Identified ${learnings.optimizations.length} optimizations`);\n\n        return learnings;\n    }\n\n    /**\n     * Extract function patterns\n     */\n    private extractFunctionPatterns(inventory: FunctionInventory): CodePattern[] {\n        const patterns: CodePattern[] = [];\n        const functionGroups = new Map<string, FunctionSignature[]>();\n\n        // Group functions by category\n        for (const functions of Object.values(inventory.byModule)) {\n            for (const func of functions) {\n                const key = `${func.category}_${func.parameters.length}_${func.async}`;\n                if (!functionGroups.has(key)) {\n                    functionGroups.set(key, []);\n                }\n                functionGroups.get(key)!.push(func);\n            }\n        }\n\n        // Extract patterns from groups\n        for (const [key, functions] of functionGroups.entries()) {\n            if (functions.length >= 3) {\n                // Common pattern found\n                const [category, paramCount, isAsync] = key.split('_');\n                patterns.push({\n                    id: `func_pattern_${key}`,\n                    name: `${category} function pattern`,\n                    category,\n                    template: this.generateFunctionTemplate(functions[0]),\n                    parameters: functions[0].parameters.map(p => ({\n                        name: p.name,\n                        type: p.type,\n                        description: p.description || '',\n                        example: ''\n                    })),\n                    usage: functions.map(f => ({\n                        location: f.path,\n                        timestamp: new Date(),\n                        success: true,\n                        modifications: []\n                    })),\n                    effectiveness: 0.8,\n                    tags: [category, isAsync === 'true' ? 'async' : 'sync']\n                });\n            }\n        }\n\n        return patterns;\n    }\n\n    /**\n     * Identify optimization opportunities\n     */\n    private identifyOptimizations(inventory: FunctionInventory): OptimizationPattern[] {\n        const optimizations: OptimizationPattern[] = [];\n\n        // Find complex functions that could be simplified\n        for (const func of inventory.metrics.mostComplex) {\n            if (func.complexity.cyclomatic > 15) {\n                optimizations.push({\n                    id: `opt_simplify_${func.id}`,\n                    name: `Simplify ${func.name}`,\n                    type: 'complexity',\n                    before: func.signature,\n                    after: 'Break into smaller functions',\n                    improvement: Math.min(50, func.complexity.cyclomatic * 2),\n                    applicability: [func.path],\n                    tradeoffs: ['May increase total lines of code', 'Requires refactoring tests']\n                });\n            }\n        }\n\n        // Find duplicates that could be merged\n        for (const group of inventory.metrics.duplicates) {\n            if (group.similarity > 0.9) {\n                optimizations.push({\n                    id: `opt_merge_${group.functions[0]}`,\n                    name: `Merge duplicate functions`,\n                    type: 'complexity',\n                    before: `${group.functions.length} duplicate functions`,\n                    after: 'Single reusable function',\n                    improvement: (group.functions.length - 1) * 100 / group.functions.length,\n                    applicability: group.functions,\n                    tradeoffs: ['May need parameter adjustment']\n                });\n            }\n        }\n\n        return optimizations;\n    }\n\n    /**\n     * Gather system metadata\n     */\n    private async gatherMetadata(): Promise<SystemMetadata> {\n        this.outputChannel.appendLine('  → Gathering system metadata...');\n\n        const workspace = vscode.workspace.workspaceFolders?.[0];\n        if (!workspace) {\n            throw new Error('No workspace folder found');\n        }\n\n        // Get file statistics\n        const files = await vscode.workspace.findFiles('**/*.{ts,js,tsx,jsx,py,java,go,rs}', '**/node_modules/**');\n\n        // Detect languages\n        const languages = new Set<string>();\n        for (const file of files) {\n            const ext = file.path.split('.').pop();\n            if (ext) {\n                languages.add(this.mapExtensionToLanguage(ext));\n            }\n        }\n\n        // Create metadata\n        const metadata: SystemMetadata = {\n            version: '1.0.0',\n            lastFullAnalysis: new Date(),\n            lastUpdate: new Date(),\n            totalFiles: files.length,\n            totalFunctions: 0, // Will be updated from function inventory\n            totalComponents: 0, // Will be updated from architecture\n            language: Array.from(languages),\n            frameworks: await this.detectFrameworks(),\n            testCoverage: {\n                lines: 0,\n                branches: 0,\n                functions: 0,\n                statements: 0\n            },\n            buildSystem: await this.detectBuildSystem(),\n            repository: {\n                url: '',\n                branch: 'main',\n                lastCommit: '',\n                contributors: 0\n            }\n        };\n\n        this.outputChannel.appendLine(`  ✓ Found ${metadata.totalFiles} files`);\n        this.outputChannel.appendLine(`  ✓ Languages: ${metadata.language.join(', ')}`);\n        this.outputChannel.appendLine(`  ✓ Build system: ${metadata.buildSystem}`);\n\n        return metadata;\n    }\n\n    /**\n     * Analyze system quality\n     */\n    private async analyzeQuality(\n        architecture: ArchitectureModel,\n        functions: FunctionInventory\n    ): Promise<any> {\n        this.outputChannel.appendLine('  → Requesting quality analysis from ReviewerGPT...');\n\n        const request: TaskRequest = {\n            prompt: `Review the system quality based on:\n            Architecture: ${JSON.stringify(architecture.quality)}\n            Functions: ${JSON.stringify(functions.metrics)}\n            Hotspots: ${JSON.stringify(functions.hotspots)}\n\n            Provide insights, recommendations, risks, and opportunities.\n\n            Session ID: ${this.analysisSession}`\n        };\n\n        const workflow: WorkflowStep[] = [\n            { id: 'review-quality', agent: 'reviewer', description: 'Review system quality' }\n        ];\n\n        const result = await this.dispatcher.executeWorkflow(workflow, request);\n\n        if (result.status !== 'success') {\n            this.outputChannel.appendLine('  ⚠️ Quality analysis failed, using defaults');\n            return {\n                insights: [],\n                recommendations: [],\n                risks: [],\n                opportunities: []\n            };\n        }\n\n        return this.parseQualityResult(result);\n    }\n\n    /**\n     * Start continuous learning\n     */\n    public startContinuousLearning(): void {\n        if (this.continuousLearningTimer) {\n            return;\n        }\n\n        this.continuousLearningTimer = setInterval(\n            () => this.continuousLearningCycle(),\n            this.config.updateInterval\n        );\n\n        this.outputChannel.appendLine('🔄 Continuous learning started');\n    }\n\n    /**\n     * Stop continuous learning\n     */\n    public stopContinuousLearning(): void {\n        if (this.continuousLearningTimer) {\n            clearInterval(this.continuousLearningTimer);\n            this.continuousLearningTimer = null;\n            this.outputChannel.appendLine('⏹️ Continuous learning stopped');\n        }\n    }\n\n    /**\n     * Continuous learning cycle\n     */\n    private async continuousLearningCycle(): Promise<void> {\n        try {\n            const knowledge = this.systemMemory.getSystemKnowledge();\n            if (!knowledge) {\n                return;\n            }\n\n            // Check for file changes\n            const changes = await this.detectChanges(knowledge);\n            if (changes.length === 0) {\n                return;\n            }\n\n            this.outputChannel.appendLine(`🔄 Detected ${changes.length} changes, updating knowledge...`);\n\n            // Perform delta analysis\n            const deltaKnowledge = await this.performDeltaAnalysis(changes);\n\n            // Extract patterns from changes\n            await this.extractPatternsFromChanges(changes);\n\n            // Update memory\n            if (deltaKnowledge.architecture) {\n                await this.systemMemory.updateArchitecture(deltaKnowledge.architecture);\n            }\n            if (deltaKnowledge.functions) {\n                await this.systemMemory.updateFunctionInventory(deltaKnowledge.functions);\n            }\n\n            // Share updates with agents\n            await this.shareKnowledgeUpdate(deltaKnowledge);\n\n            this.outputChannel.appendLine('✓ Knowledge updated successfully');\n\n        } catch (error) {\n            this.outputChannel.appendLine(`⚠️ Continuous learning error: ${error}`);\n        }\n    }\n\n    /**\n     * Detect changes since last analysis\n     */\n    private async detectChanges(knowledge: SystemKnowledge): Promise<vscode.Uri[]> {\n        const changes: vscode.Uri[] = [];\n        const lastAnalysis = knowledge.metadata.lastUpdate;\n\n        const files = await vscode.workspace.findFiles('**/*.{ts,js,tsx,jsx}', '**/node_modules/**');\n\n        for (const file of files) {\n            const stat = await vscode.workspace.fs.stat(file);\n            if (stat.mtime > lastAnalysis.getTime()) {\n                changes.push(file);\n            }\n        }\n\n        return changes;\n    }\n\n    /**\n     * Perform delta analysis on changes\n     */\n    private async performDeltaAnalysis(changes: vscode.Uri[]): Promise<Partial<SystemKnowledge>> {\n        const updates: Partial<SystemKnowledge> = {};\n\n        // Analyze changed files\n        const request: TaskRequest = {\n            prompt: `Analyze the following changed files and update system knowledge:\n            ${changes.map(c => c.fsPath).join('\\n')}\n\n            Provide delta updates for architecture and functions.\n\n            Current knowledge components: ${this.systemMemory.getSystemKnowledge()?.architecture ? Object.keys(this.systemMemory.getSystemKnowledge()!.architecture.components).length : 0}`\n        };\n\n        const architectWorkflow: WorkflowStep[] = [\n            { id: 'delta-architecture', agent: 'architect', description: 'Analyze architecture changes' }\n        ];\n        const functionWorkflow: WorkflowStep[] = [\n            { id: 'delta-functions', agent: 'codesmith', description: 'Analyze function changes' }\n        ];\n\n        const architectResult = await this.dispatcher.executeWorkflow(architectWorkflow, request);\n        const functionResult = await this.dispatcher.executeWorkflow(functionWorkflow, request);\n\n        if (architectResult.status === 'success') {\n            updates.architecture = this.parseArchitectureResult(architectResult);\n        }\n\n        if (functionResult.status === 'success') {\n            updates.functions = this.parseFunctionResult(functionResult);\n        }\n\n        return updates;\n    }\n\n    /**\n     * Extract patterns from changes\n     */\n    private async extractPatternsFromChanges(changes: vscode.Uri[]): Promise<void> {\n        // Track modification patterns\n        for (const change of changes) {\n            const path = change.fsPath;\n            const component = this.systemMemory.findComponent(path);\n\n            if (component) {\n                // Track as user preference\n                const preference: UserPreference = {\n                    id: `pref_modify_${component.type}`,\n                    category: 'structure',\n                    preference: `Frequently modifies ${component.type} components`,\n                    examples: [path],\n                    confidence: 0.6,\n                    frequency: 1,\n                    lastObserved: new Date()\n                };\n\n                await this.systemMemory.trackUserPreference(preference);\n            }\n        }\n    }\n\n    /**\n     * Share knowledge with all agents\n     */\n    private async shareKnowledge(knowledge: SystemKnowledge): Promise<void> {\n        this.outputChannel.appendLine('\\n📢 Sharing knowledge with all agents...');\n\n        // Update shared context\n        await this.sharedContext.updateContext(\n            'system',\n            'architecture',\n            knowledge.architecture,\n            { version: knowledge.architecture.version }\n        );\n\n        await this.sharedContext.updateContext(\n            'system',\n            'functions',\n            knowledge.functions,\n            { totalFunctions: Object.values(knowledge.functions.byModule).flat().length }\n        );\n\n        await this.sharedContext.updateContext(\n            'system',\n            'patterns',\n            knowledge.learnings,\n            { patternCount: knowledge.learnings.successPatterns.length }\n        );\n\n        // Broadcast to all agents\n        await this.communicationBus.broadcast(\n            'system',\n            MessageType.STATUS_UPDATE,\n            {\n                event: 'system_knowledge_updated',\n                knowledge: {\n                    components: Object.keys(knowledge.architecture.components).length,\n                    functions: Object.values(knowledge.functions.byModule).flat().length,\n                    patterns: knowledge.learnings.successPatterns.length\n                }\n            }\n        );\n\n        this.outputChannel.appendLine('  ✓ Knowledge shared with all agents');\n    }\n\n    /**\n     * Share knowledge update\n     */\n    private async shareKnowledgeUpdate(update: Partial<SystemKnowledge>): Promise<void> {\n        await this.communicationBus.broadcast(\n            'system',\n            MessageType.STATUS_UPDATE,\n            {\n                event: 'system_knowledge_delta',\n                update\n            }\n        );\n    }\n\n    /**\n     * Generate documentation\n     */\n    private async generateDocumentation(knowledge: SystemKnowledge): Promise<void> {\n        this.outputChannel.appendLine('\\n📝 Generating documentation...');\n\n        const request: TaskRequest = {\n            prompt: `Generate comprehensive documentation for the system based on the analysis:\n            - Architecture overview with ${Object.keys(knowledge.architecture.components).length} components\n            - Function inventory with ${Object.values(knowledge.functions.byModule).flat().length} functions\n            - ${knowledge.learnings.successPatterns.length} identified patterns\n            - ${knowledge.functions.hotspots.length} hotspots requiring attention\n\n            Create README.md and ARCHITECTURE.md files.\n\n            Session ID: ${this.analysisSession}`\n        };\n\n        const workflow: WorkflowStep[] = [\n            { id: 'generate-docs', agent: 'docu', description: 'Generate documentation' }\n        ];\n\n        const result = await this.dispatcher.executeWorkflow(workflow, request);\n\n        if (result.status === 'success') {\n            this.outputChannel.appendLine('  ✓ Documentation generated successfully');\n        } else {\n            this.outputChannel.appendLine('  ⚠️ Documentation generation failed');\n        }\n    }\n\n    /**\n     * Check if reanalysis is needed\n     */\n    private shouldReanalyze(knowledge: SystemKnowledge): boolean {\n        const daysSinceAnalysis = (new Date().getTime() - knowledge.metadata.lastFullAnalysis.getTime()) / (1000 * 60 * 60 * 24);\n        return daysSinceAnalysis > 7; // Reanalyze weekly\n    }\n\n    /**\n     * Create analysis result\n     */\n    private createAnalysisResult(knowledge: SystemKnowledge): SystemAnalysisResult {\n        return {\n            knowledge,\n            insights: [],\n            recommendations: [],\n            risks: [],\n            opportunities: [],\n            timestamp: new Date(),\n            duration: 0\n        };\n    }\n\n    /**\n     * Parse architecture result from agent\n     */\n    private parseArchitectureResult(result: TaskResult): ArchitectureModel {\n        // In production, this would parse the actual agent response\n        // For now, return a structured result\n        try {\n            const parsed = JSON.parse(result.content);\n            return parsed as ArchitectureModel;\n        } catch {\n            // Fallback to default structure\n            return {\n                components: {},\n                dependencies: {\n                    nodes: [],\n                    edges: [],\n                    cycles: [],\n                    metrics: {\n                        totalDependencies: 0,\n                        maxDepth: 0,\n                        avgDependenciesPerComponent: 0,\n                        circularDependencies: 0,\n                        stabilityIndex: 0\n                    }\n                },\n                patterns: [],\n                layers: [],\n                modules: [],\n                version: '1.0.0',\n                lastAnalysis: new Date(),\n                quality: {\n                    maintainability: 75,\n                    reliability: 80,\n                    security: 70,\n                    performance: 85,\n                    testability: 60,\n                    documentation: 50,\n                    overall: 70,\n                    trend: 'stable',\n                    issues: []\n                }\n            };\n        }\n    }\n\n    /**\n     * Parse function result from agent\n     */\n    private parseFunctionResult(result: TaskResult): FunctionInventory {\n        try {\n            const parsed = JSON.parse(result.content);\n            return parsed as FunctionInventory;\n        } catch {\n            // Fallback to default structure\n            return {\n                byModule: {},\n                byCategory: {},\n                byComplexity: {\n                    simple: [],\n                    moderate: [],\n                    complex: [],\n                    critical: []\n                },\n                callGraph: {\n                    nodes: [],\n                    edges: [],\n                    clusters: [],\n                    entryPoints: [],\n                    hotPaths: []\n                },\n                metrics: {\n                    total: 0,\n                    byComplexity: {\n                        simple: 0,\n                        moderate: 0,\n                        complex: 0,\n                        critical: 0\n                    },\n                    averageComplexity: 0,\n                    mostComplex: [],\n                    mostCalled: [],\n                    unused: [],\n                    duplicates: []\n                },\n                hotspots: []\n            };\n        }\n    }\n\n    /**\n     * Parse quality result from agent\n     */\n    private parseQualityResult(result: TaskResult): any {\n        try {\n            return JSON.parse(result.content);\n        } catch {\n            return {\n                insights: [],\n                recommendations: [],\n                risks: [],\n                opportunities: []\n            };\n        }\n    }\n\n    /**\n     * Generate function template\n     */\n    private generateFunctionTemplate(func: FunctionSignature): string {\n        const params = func.parameters.map(p => `${p.name}: ${p.type}`).join(', ');\n        return `${func.async ? 'async ' : ''}function ${func.name}(${params}): ${func.returnType} { }`;\n    }\n\n    /**\n     * Map extension to language\n     */\n    private mapExtensionToLanguage(ext: string): string {\n        const mapping: Record<string, string> = {\n            'ts': 'TypeScript',\n            'tsx': 'TypeScript',\n            'js': 'JavaScript',\n            'jsx': 'JavaScript',\n            'py': 'Python',\n            'java': 'Java',\n            'go': 'Go',\n            'rs': 'Rust'\n        };\n        return mapping[ext] || ext;\n    }\n\n    /**\n     * Detect frameworks\n     */\n    private async detectFrameworks(): Promise<any[]> {\n        const frameworks: any[] = [];\n\n        // Check package.json for Node.js projects\n        const packageJson = await vscode.workspace.findFiles('**/package.json', '**/node_modules/**', 1);\n        if (packageJson.length > 0) {\n            frameworks.push({ name: 'Node.js', version: 'latest', usage: 'core' });\n        }\n\n        return frameworks;\n    }\n\n    /**\n     * Detect build system\n     */\n    private async detectBuildSystem(): Promise<string> {\n        const files = await vscode.workspace.findFiles('**/{webpack.config.js,vite.config.js,rollup.config.js,tsconfig.json}', '**/node_modules/**', 1);\n\n        if (files.length > 0) {\n            const filename = files[0].path.split('/').pop();\n            if (filename?.includes('webpack')) return 'webpack';\n            if (filename?.includes('vite')) return 'vite';\n            if (filename?.includes('rollup')) return 'rollup';\n            if (filename?.includes('tsconfig')) return 'TypeScript';\n        }\n\n        return 'unknown';\n    }\n\n    /**\n     * Generate session ID\n     */\n    private generateSessionId(): string {\n        return `analysis_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n\n    /**\n     * Get workflow statistics\n     */\n    public getStatistics(): any {\n        return {\n            memoryStats: this.systemMemory.getStatistics(),\n            isAnalyzing: this.isAnalyzing,\n            continuousLearning: this.continuousLearningTimer !== null,\n            sessionId: this.analysisSession\n        };\n    }\n}","/**\n * ArchitectGPT - System Architecture & Design Expert\n * Powered by GPT-4o for system design and architecture planning\n */\nimport * as vscode from 'vscode';\nimport { ChatAgent } from './base/ChatAgent';\nimport { AgentConfig, TaskRequest, TaskResult, WorkflowStep } from '../types';\nimport { VSCodeMasterDispatcher } from '../core/VSCodeMasterDispatcher';\nimport { OpenAIService } from '../utils/OpenAIService';\n\nexport class ArchitectAgent extends ChatAgent {\n    private openAIService: OpenAIService;\n\n    constructor(context: vscode.ExtensionContext, dispatcher: VSCodeMasterDispatcher) {\n        const config: AgentConfig = {\n            participantId: 'ki-autoagent.architect',\n            name: 'architect',\n            fullName: 'ArchitectGPT',\n            description: 'System Architecture & Design Expert powered by GPT-5',\n            model: 'gpt-5-2025-09-12',\n            iconPath: vscode.Uri.joinPath(context.extensionUri, 'media', 'openai-icon.svg'),\n            capabilities: [\n                'System Design',\n                'Architecture Patterns',\n                'Tech Stack Planning',\n                'Scalability Analysis',\n                'Design Documentation'\n            ],\n            commands: [\n                { name: 'design', description: 'Create system architecture and design patterns', handler: 'handleDesignCommand' },\n                { name: 'analyze', description: 'Analyze existing codebase architecture', handler: 'handleAnalyzeCommand' },\n                { name: 'plan', description: 'Create development and deployment plans', handler: 'handlePlanCommand' }\n            ]\n        };\n\n        super(config, context, dispatcher);\n        this.openAIService = new OpenAIService();\n    }\n\n    protected async handleRequest(\n        request: vscode.ChatRequest,\n        context: vscode.ChatContext,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        if (!this.validateApiConfig()) {\n            stream.markdown('❌ OpenAI API key not configured. Please set it in VS Code settings.');\n            return;\n        }\n\n        const command = request.command;\n        const prompt = request.prompt;\n\n        this.log(`Processing ${command ? `/${command}` : 'general'} request: ${prompt.substring(0, 100)}...`);\n\n        if (command) {\n            await this.handleCommand(command, prompt, stream, token);\n        } else {\n            // General architecture request\n            await this.handleGeneralArchitectureRequest(prompt, stream, token);\n        }\n    }\n\n    protected async processWorkflowStep(\n        step: WorkflowStep,\n        request: TaskRequest,\n        previousResults: TaskResult[]\n    ): Promise<TaskResult> {\n        \n        const context = await this.getWorkspaceContext();\n        \n        let systemPrompt = '';\n        let userPrompt = '';\n\n        switch (step.id) {\n            case 'analyze':\n                systemPrompt = this.getAnalyzeSystemPrompt();\n                userPrompt = `Analyze the architecture requirements for: ${request.prompt}\\n\\nWorkspace Context:\\n${context}`;\n                break;\n                \n            case 'design':\n                systemPrompt = this.getDesignSystemPrompt();\n                userPrompt = `Create a system architecture design for: ${request.prompt}\\n\\nPrevious Analysis:\\n${this.extractPreviousContent(previousResults)}`;\n                break;\n                \n            default:\n                systemPrompt = this.getGeneralSystemPrompt();\n                userPrompt = `${request.prompt}\\n\\nContext:\\n${context}`;\n        }\n\n        try {\n            const response = await this.openAIService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            return {\n                status: 'success',\n                content: response,\n                metadata: { \n                    step: step.id,\n                    agent: 'architect',\n                    model: 'gpt-4o'\n                }\n            };\n\n        } catch (error) {\n            throw new Error(`Failed to process ${step.id}: ${(error as any).message}`);\n        }\n    }\n\n    // Command Handlers\n\n    private async handleDesignCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('🏗️ Analyzing requirements and creating system design...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getDesignSystemPrompt();\n        const userPrompt = `Create a comprehensive system architecture design for: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const response = await this.openAIService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown(response);\n\n            // Offer to create architecture documentation\n            this.createActionButton(\n                '📄 Create Architecture Document',\n                'ki-autoagent.createFile',\n                ['ARCHITECTURE.md', response],\n                stream\n            );\n\n            // Offer to proceed with implementation planning\n            this.createActionButton(\n                '⚡ Plan Implementation',\n                'ki-autoagent.planImplementation',\n                [prompt, response],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Error creating design: ${(error as any).message}`);\n        }\n    }\n\n    private async handleAnalyzeCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('🔍 Analyzing existing codebase architecture...');\n        \n        const context = await this.getWorkspaceContext();\n        \n        // Get project files for analysis\n        const workspaceFiles = await this.getProjectStructure();\n        \n        const systemPrompt = this.getAnalyzeSystemPrompt();\n        const userPrompt = `Analyze the architecture of this codebase: ${prompt}\\n\\nProject Structure:\\n${workspaceFiles}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const response = await this.openAIService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown(response);\n\n            // Offer architecture improvements\n            this.createActionButton(\n                '🚀 Suggest Improvements',\n                'ki-autoagent.suggestImprovements',\n                [response],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Error analyzing architecture: ${(error as any).message}`);\n        }\n    }\n\n    private async handlePlanCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('📋 Creating development and deployment plans...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getPlanSystemPrompt();\n        const userPrompt = `Create a detailed development and deployment plan for: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const response = await this.openAIService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown(response);\n\n            // Offer to create project roadmap\n            this.createActionButton(\n                '🗺️ Create Roadmap',\n                'ki-autoagent.createFile',\n                ['ROADMAP.md', response],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Error creating plan: ${(error as any).message}`);\n        }\n    }\n\n    private async handleGeneralArchitectureRequest(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('🤔 Processing architecture request...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getGeneralSystemPrompt();\n        const userPrompt = `${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const response = await this.openAIService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown(response);\n\n        } catch (error) {\n            stream.markdown(`❌ Error processing request: ${(error as any).message}`);\n        }\n    }\n\n    // System Prompts\n\n    private getGeneralSystemPrompt(): string {\n        return `You are ArchitectGPT, a senior system architect and design expert. You specialize in:\n\n- System architecture design and patterns\n- Technology stack selection and evaluation\n- Scalability and performance planning\n- Microservices and distributed systems\n- Database design and data modeling\n- API design and integration patterns\n- Security architecture\n- DevOps and deployment strategies\n\nAlways provide:\n1. Clear architectural reasoning\n2. Multiple solution options when applicable\n3. Trade-offs and considerations\n4. Implementation guidance\n5. Best practices and patterns\n\nFormat your responses with clear headings, diagrams where helpful (using mermaid syntax), and actionable recommendations.\n\n${this.getSystemContextPrompt()}`;\n    }\n\n    private getDesignSystemPrompt(): string {\n        return `You are ArchitectGPT creating a comprehensive system architecture design. Follow this structure:\n\n## System Architecture Design\n\n### 1. Requirements Analysis\n- Functional requirements\n- Non-functional requirements (performance, scalability, security)\n- Constraints and assumptions\n\n### 2. High-Level Architecture\n- System overview\n- Major components and their responsibilities\n- Data flow and interactions\n\n### 3. Technology Stack\n- Recommended technologies with rationale\n- Alternatives considered\n- Integration points\n\n### 4. Database Design\n- Data model\n- Storage strategy\n- Performance considerations\n\n### 5. API Design\n- Interface specifications\n- Authentication/authorization\n- Rate limiting and caching\n\n### 6. Security Architecture\n- Security measures\n- Authentication/authorization\n- Data protection\n\n### 7. Deployment Architecture\n- Infrastructure requirements\n- Scaling strategy\n- Monitoring and observability\n\n### 8. Implementation Roadmap\n- Development phases\n- Dependencies and milestones\n- Risk mitigation\n\nUse mermaid diagrams where appropriate to illustrate the architecture.\n\n${this.getSystemContextPrompt()}`;\n    }\n\n    private getAnalyzeSystemPrompt(): string {\n        return `You are ArchitectGPT analyzing an existing codebase architecture. Provide:\n\n## Architecture Analysis\n\n### 1. Current Architecture Overview\n- Identify architectural patterns used\n- Component structure and organization\n- Technology stack assessment\n\n### 2. Strengths\n- What's working well\n- Good design decisions\n- Proper patterns implementation\n\n### 3. Areas for Improvement\n- Architectural debt\n- Performance bottlenecks\n- Security concerns\n- Scalability limitations\n\n### 4. Recommendations\n- Prioritized improvement suggestions\n- Refactoring opportunities\n- Technology upgrades\n\n### 5. Next Steps\n- Immediate actions\n- Long-term architectural goals\n- Migration strategies\n\nBe specific and provide actionable insights based on the codebase structure.\n\n${this.getSystemContextPrompt()}`;\n    }\n\n    private getPlanSystemPrompt(): string {\n        return `You are ArchitectGPT creating development and deployment plans. Structure your response as:\n\n## Development & Deployment Plan\n\n### 1. Project Setup\n- Repository structure\n- Development environment\n- Tool and dependency setup\n\n### 2. Development Phases\n- Phase breakdown with deliverables\n- Timeline estimates\n- Resource requirements\n\n### 3. Implementation Strategy\n- Development methodology\n- Code review process\n- Testing strategy\n\n### 4. Deployment Strategy\n- Environment setup (dev, staging, prod)\n- CI/CD pipeline\n- Rollback procedures\n\n### 5. Risk Management\n- Identified risks\n- Mitigation strategies\n- Contingency plans\n\n### 6. Success Metrics\n- KPIs and measurements\n- Monitoring and alerting\n- Performance benchmarks\n\nProvide realistic timelines and clear milestones.\n\n${this.getSystemContextPrompt()}`;\n    }\n\n    // Helper Methods\n\n    private async getProjectStructure(): Promise<string> {\n        try {\n            const files = await vscode.workspace.findFiles('**/*.{py,js,ts,jsx,tsx,json,md}', '**/node_modules/**', 50);\n            return files.map(file => file.fsPath.split('/').slice(-3).join('/')).join('\\n');\n        } catch (error) {\n            return 'Unable to read project structure';\n        }\n    }\n\n    private extractPreviousContent(previousResults: TaskResult[]): string {\n        return previousResults\n            .map(result => result.content)\n            .join('\\n\\n---\\n\\n')\n            .substring(0, 2000); // Limit context size\n    }\n}","/**\n * MemoryManager - Vector-based memory system for agents\n * Provides semantic search, pattern extraction, and learning capabilities\n */\n\nimport { EventEmitter } from 'events';\nimport {\n    MemoryEntry,\n    MemoryType,\n    MemorySearchResult,\n    MemoryPattern,\n    MemoryCluster,\n    MemoryMetadata,\n    MemoryStats,\n    TaskMemory,\n    CodePattern,\n    ArchitecturePattern,\n    LearningEntry\n} from '../types/Memory';\n\nexport interface MemoryOptions {\n    maxMemories?: number;\n    similarityThreshold?: number;\n    clusteringEnabled?: boolean;\n    patternExtractionEnabled?: boolean;\n    autoForget?: boolean;\n    forgetThreshold?: number;\n}\n\nexport class MemoryManager {\n    private memories: Map<string, MemoryEntry> = new Map();\n    private embeddings: Map<string, number[]> = new Map();\n    private patterns: Map<string, MemoryPattern> = new Map();\n    private clusters: MemoryCluster[] = [];\n    private codePatterns: Map<string, CodePattern> = new Map();\n    private architecturePatterns: Map<string, ArchitecturePattern> = new Map();\n    private learningEntries: LearningEntry[] = [];\n    private eventBus: EventEmitter;\n    private options: MemoryOptions;\n    private memoryIndex: Map<MemoryType, Set<string>> = new Map();\n    private agentMemories: Map<string, Set<string>> = new Map();\n\n    constructor(options: MemoryOptions = {}) {\n        this.options = {\n            maxMemories: options.maxMemories || 10000,\n            similarityThreshold: options.similarityThreshold || 0.7,\n            clusteringEnabled: options.clusteringEnabled ?? true,\n            patternExtractionEnabled: options.patternExtractionEnabled ?? true,\n            autoForget: options.autoForget ?? true,\n            forgetThreshold: options.forgetThreshold || 0.3\n        };\n\n        this.eventBus = new EventEmitter();\n        this.initializeIndexes();\n    }\n\n    private initializeIndexes(): void {\n        Object.values(MemoryType).forEach(type => {\n            this.memoryIndex.set(type, new Set());\n        });\n    }\n\n    /**\n     * Store a new memory with automatic embedding generation\n     */\n    public async store(\n        agentId: string,\n        content: any,\n        type: MemoryType,\n        metadata: Partial<MemoryMetadata> = {}\n    ): Promise<string> {\n        const id = this.generateMemoryId();\n\n        // Generate embedding (simplified - in real implementation, use actual embedding model)\n        const embedding = await this.generateEmbedding(content);\n\n        const memory: MemoryEntry = {\n            id,\n            agentId,\n            timestamp: Date.now(),\n            content,\n            embedding,\n            type,\n            metadata: {\n                ...metadata,\n                accessCount: 0,\n                lastAccessed: Date.now(),\n                importance: metadata.importance || this.calculateImportance(content, type)\n            }\n        };\n\n        // Store memory\n        this.memories.set(id, memory);\n        this.embeddings.set(id, embedding);\n\n        // Update indexes\n        this.memoryIndex.get(type)!.add(id);\n        if (!this.agentMemories.has(agentId)) {\n            this.agentMemories.set(agentId, new Set());\n        }\n        this.agentMemories.get(agentId)!.add(id);\n\n        // Auto-forget old memories if limit exceeded\n        if (this.options.autoForget && this.memories.size > this.options.maxMemories!) {\n            await this.forgetOldMemories();\n        }\n\n        // Extract patterns if enabled\n        if (this.options.patternExtractionEnabled) {\n            await this.extractPatterns();\n        }\n\n        // Update clusters if enabled\n        if (this.options.clusteringEnabled) {\n            await this.updateClusters();\n        }\n\n        this.eventBus.emit('memory-stored', memory);\n        return id;\n    }\n\n    /**\n     * Retrieve memories by semantic similarity\n     */\n    public async search(\n        query: any,\n        options: {\n            k?: number;\n            type?: MemoryType;\n            agentId?: string;\n            minSimilarity?: number;\n        } = {}\n    ): Promise<MemorySearchResult[]> {\n        const k = options.k || 10;\n        const minSimilarity = options.minSimilarity || this.options.similarityThreshold!;\n\n        // Generate query embedding\n        const queryEmbedding = await this.generateEmbedding(query);\n\n        // Filter memories based on options\n        let candidateMemories = Array.from(this.memories.values());\n\n        if (options.type) {\n            const typeMemories = this.memoryIndex.get(options.type);\n            if (typeMemories) {\n                candidateMemories = candidateMemories.filter(m => typeMemories.has(m.id));\n            }\n        }\n\n        if (options.agentId) {\n            const agentMems = this.agentMemories.get(options.agentId);\n            if (agentMems) {\n                candidateMemories = candidateMemories.filter(m => agentMems.has(m.id));\n            }\n        }\n\n        // Calculate similarities\n        const results: MemorySearchResult[] = candidateMemories\n            .map(memory => {\n                const similarity = this.cosineSimilarity(\n                    queryEmbedding,\n                    memory.embedding || []\n                );\n                const relevance = this.calculateRelevance(memory, similarity);\n\n                // Update access count\n                memory.metadata.accessCount = (memory.metadata.accessCount || 0) + 1;\n                memory.metadata.lastAccessed = Date.now();\n\n                return {\n                    entry: memory,\n                    similarity,\n                    relevance\n                };\n            })\n            .filter(result => result.similarity >= minSimilarity)\n            .sort((a, b) => b.relevance - a.relevance)\n            .slice(0, k);\n\n        this.eventBus.emit('memory-searched', { query, results });\n        return results;\n    }\n\n    /**\n     * Get memory by ID\n     */\n    public get(id: string): MemoryEntry | undefined {\n        const memory = this.memories.get(id);\n        if (memory) {\n            memory.metadata.accessCount = (memory.metadata.accessCount || 0) + 1;\n            memory.metadata.lastAccessed = Date.now();\n        }\n        return memory;\n    }\n\n    /**\n     * Update an existing memory\n     */\n    public async update(id: string, content: any, metadata?: Partial<MemoryMetadata>): Promise<void> {\n        const memory = this.memories.get(id);\n        if (!memory) {\n            throw new Error(`Memory ${id} not found`);\n        }\n\n        memory.content = content;\n        memory.embedding = await this.generateEmbedding(content);\n        if (metadata) {\n            memory.metadata = { ...memory.metadata, ...metadata };\n        }\n\n        this.embeddings.set(id, memory.embedding);\n        this.eventBus.emit('memory-updated', memory);\n    }\n\n    /**\n     * Delete a memory\n     */\n    public delete(id: string): boolean {\n        const memory = this.memories.get(id);\n        if (!memory) return false;\n\n        // Remove from all indexes\n        this.memories.delete(id);\n        this.embeddings.delete(id);\n        this.memoryIndex.get(memory.type)?.delete(id);\n        this.agentMemories.get(memory.agentId)?.delete(id);\n\n        this.eventBus.emit('memory-deleted', memory);\n        return true;\n    }\n\n    /**\n     * Store a code pattern for reuse\n     */\n    public storeCodePattern(pattern: CodePattern): void {\n        this.codePatterns.set(pattern.id, pattern);\n        this.eventBus.emit('pattern-stored', { type: 'code', pattern });\n    }\n\n    /**\n     * Retrieve relevant code patterns\n     */\n    public async getRelevantCodePatterns(context: string, language?: string): Promise<CodePattern[]> {\n        const patterns = Array.from(this.codePatterns.values());\n\n        // Filter by language if specified\n        let relevant = language\n            ? patterns.filter(p => p.language === language)\n            : patterns;\n\n        // Sort by success rate and recency\n        relevant.sort((a, b) => {\n            const scoreA = a.successRate * (1 / (Date.now() - a.lastUsed));\n            const scoreB = b.successRate * (1 / (Date.now() - b.lastUsed));\n            return scoreB - scoreA;\n        });\n\n        return relevant.slice(0, 5);\n    }\n\n    /**\n     * Store an architecture pattern\n     */\n    public storeArchitecturePattern(pattern: ArchitecturePattern): void {\n        this.architecturePatterns.set(pattern.id, pattern);\n        this.eventBus.emit('pattern-stored', { type: 'architecture', pattern });\n    }\n\n    /**\n     * Get relevant architecture patterns\n     */\n    public getRelevantArchitecturePatterns(useCase: string): ArchitecturePattern[] {\n        return Array.from(this.architecturePatterns.values())\n            .filter(pattern =>\n                pattern.useCases.some(uc =>\n                    uc.toLowerCase().includes(useCase.toLowerCase())\n                )\n            );\n    }\n\n    /**\n     * Store a learning entry\n     */\n    public storeLearning(learning: LearningEntry): void {\n        this.learningEntries.push(learning);\n        this.eventBus.emit('learning-stored', learning);\n    }\n\n    /**\n     * Get learnings relevant to current context\n     */\n    public getRelevantLearnings(context: string, limit: number = 5): LearningEntry[] {\n        // Simple keyword matching - in production, use semantic search\n        const keywords = context.toLowerCase().split(' ');\n\n        return this.learningEntries\n            .filter(entry =>\n                keywords.some(keyword =>\n                    entry.description.toLowerCase().includes(keyword)\n                )\n            )\n            .sort((a, b) => {\n                // Prioritize high impact and recent learnings\n                const scoreA = (a.impact === 'high' ? 3 : a.impact === 'medium' ? 2 : 1) *\n                              (1 / (Date.now() - a.timestamp));\n                const scoreB = (b.impact === 'high' ? 3 : b.impact === 'medium' ? 2 : 1) *\n                              (1 / (Date.now() - b.timestamp));\n                return scoreB - scoreA;\n            })\n            .slice(0, limit);\n    }\n\n    /**\n     * Extract patterns from stored memories\n     */\n    private async extractPatterns(): Promise<void> {\n        // Group similar memories\n        const groups = this.groupSimilarMemories();\n\n        groups.forEach((group, pattern) => {\n            if (group.length >= 3) { // Need at least 3 occurrences to be a pattern\n                const patternEntry: MemoryPattern = {\n                    id: this.generateMemoryId(),\n                    pattern,\n                    frequency: group.length,\n                    examples: group.slice(0, 5),\n                    extractedAt: Date.now()\n                };\n                this.patterns.set(patternEntry.id, patternEntry);\n            }\n        });\n    }\n\n    /**\n     * Group similar memories for pattern extraction\n     */\n    private groupSimilarMemories(): Map<string, MemoryEntry[]> {\n        const groups = new Map<string, MemoryEntry[]>();\n        const processed = new Set<string>();\n\n        this.memories.forEach((memory, id) => {\n            if (processed.has(id)) return;\n\n            const similar = this.findSimilarMemories(memory, 0.8);\n            if (similar.length >= 2) {\n                const pattern = this.extractPatternSignature(memory);\n                groups.set(pattern, [memory, ...similar]);\n                similar.forEach(s => processed.add(s.id));\n            }\n        });\n\n        return groups;\n    }\n\n    /**\n     * Find memories similar to given memory\n     */\n    private findSimilarMemories(memory: MemoryEntry, threshold: number): MemoryEntry[] {\n        const similar: MemoryEntry[] = [];\n\n        this.memories.forEach((other, id) => {\n            if (id === memory.id) return;\n\n            const similarity = this.cosineSimilarity(\n                memory.embedding || [],\n                other.embedding || []\n            );\n\n            if (similarity >= threshold) {\n                similar.push(other);\n            }\n        });\n\n        return similar;\n    }\n\n    /**\n     * Update memory clusters\n     */\n    private async updateClusters(): Promise<void> {\n        // Simple k-means clustering\n        const k = Math.min(10, Math.floor(this.memories.size / 50));\n        if (k < 2) return;\n\n        // Initialize centroids\n        const centroids = this.initializeCentroids(k);\n\n        // Iterate until convergence\n        let iterations = 0;\n        let changed = true;\n\n        while (changed && iterations < 50) {\n            const newClusters: MemoryCluster[] = centroids.map(centroid => ({\n                centroid,\n                members: [],\n                coherence: 0\n            }));\n\n            // Assign memories to nearest centroid\n            this.memories.forEach(memory => {\n                if (!memory.embedding) return;\n\n                let nearestIdx = 0;\n                let maxSim = -1;\n\n                centroids.forEach((centroid, idx) => {\n                    const sim = this.cosineSimilarity(memory.embedding!, centroid);\n                    if (sim > maxSim) {\n                        maxSim = sim;\n                        nearestIdx = idx;\n                    }\n                });\n\n                newClusters[nearestIdx].members.push(memory);\n            });\n\n            // Update centroids\n            changed = false;\n            newClusters.forEach((cluster, idx) => {\n                if (cluster.members.length > 0) {\n                    const newCentroid = this.calculateCentroid(cluster.members);\n                    if (!this.vectorsEqual(centroids[idx], newCentroid)) {\n                        centroids[idx] = newCentroid;\n                        changed = true;\n                    }\n                }\n            });\n\n            this.clusters = newClusters;\n            iterations++;\n        }\n\n        // Calculate cluster coherence\n        this.clusters.forEach(cluster => {\n            cluster.coherence = this.calculateClusterCoherence(cluster);\n        });\n\n        this.eventBus.emit('clusters-updated', this.clusters);\n    }\n\n    /**\n     * Forget old, unimportant memories\n     */\n    private async forgetOldMemories(): Promise<void> {\n        const memoriesToForget: string[] = [];\n        const now = Date.now();\n        const oneWeek = 7 * 24 * 60 * 60 * 1000;\n\n        this.memories.forEach((memory, id) => {\n            // Calculate forgetting score\n            const age = now - memory.timestamp;\n            const accessFrequency = (memory.metadata.accessCount || 0) / (age / oneWeek);\n            const importance = memory.metadata.importance || 0.5;\n\n            const retentionScore = (accessFrequency * 0.4) + (importance * 0.6);\n\n            if (retentionScore < this.options.forgetThreshold!) {\n                memoriesToForget.push(id);\n            }\n        });\n\n        // Keep at least 50% of max capacity\n        const maxToForget = Math.floor(this.memories.size - (this.options.maxMemories! * 0.5));\n        memoriesToForget.slice(0, maxToForget).forEach(id => {\n            this.delete(id);\n        });\n\n        if (memoriesToForget.length > 0) {\n            this.eventBus.emit('memories-forgotten', memoriesToForget.length);\n        }\n    }\n\n    /**\n     * Generate embedding for content (simplified - use real embedding model in production)\n     */\n    private async generateEmbedding(content: any): Promise<number[]> {\n        // Simplified embedding generation\n        // In production, use OpenAI embeddings or similar\n        const text = JSON.stringify(content).toLowerCase();\n        const embedding = new Array(384).fill(0);\n\n        // Simple hash-based embedding\n        for (let i = 0; i < text.length; i++) {\n            const idx = (text.charCodeAt(i) * (i + 1)) % 384;\n            embedding[idx] += 1;\n        }\n\n        // Normalize\n        const magnitude = Math.sqrt(embedding.reduce((sum, val) => sum + val * val, 0));\n        return embedding.map(val => val / (magnitude || 1));\n    }\n\n    /**\n     * Calculate cosine similarity between two vectors\n     */\n    private cosineSimilarity(a: number[], b: number[]): number {\n        if (a.length !== b.length || a.length === 0) return 0;\n\n        let dotProduct = 0;\n        let magnitudeA = 0;\n        let magnitudeB = 0;\n\n        for (let i = 0; i < a.length; i++) {\n            dotProduct += a[i] * b[i];\n            magnitudeA += a[i] * a[i];\n            magnitudeB += b[i] * b[i];\n        }\n\n        magnitudeA = Math.sqrt(magnitudeA);\n        magnitudeB = Math.sqrt(magnitudeB);\n\n        if (magnitudeA === 0 || magnitudeB === 0) return 0;\n        return dotProduct / (magnitudeA * magnitudeB);\n    }\n\n    /**\n     * Calculate relevance score for a memory\n     */\n    private calculateRelevance(memory: MemoryEntry, similarity: number): number {\n        const recency = 1 / (1 + (Date.now() - memory.timestamp) / (24 * 60 * 60 * 1000));\n        const importance = memory.metadata.importance || 0.5;\n        const accessFrequency = Math.min(1, (memory.metadata.accessCount || 0) / 100);\n\n        return (similarity * 0.4) + (recency * 0.2) + (importance * 0.3) + (accessFrequency * 0.1);\n    }\n\n    /**\n     * Calculate importance of content\n     */\n    private calculateImportance(content: any, type: MemoryType): number {\n        // Simple heuristic - in production, use more sophisticated analysis\n        if (type === MemoryType.PROCEDURAL) return 0.8;\n        if (type === MemoryType.SEMANTIC) return 0.7;\n        if (type === MemoryType.EPISODIC) return 0.5;\n        return 0.3;\n    }\n\n    /**\n     * Extract pattern signature from memory\n     */\n    private extractPatternSignature(memory: MemoryEntry): string {\n        // Simplified pattern extraction\n        const content = JSON.stringify(memory.content);\n        return content.substring(0, 50);\n    }\n\n    /**\n     * Initialize cluster centroids\n     */\n    private initializeCentroids(k: number): number[][] {\n        const centroids: number[][] = [];\n        const memories = Array.from(this.memories.values()).filter(m => m.embedding);\n\n        for (let i = 0; i < k && i < memories.length; i++) {\n            centroids.push([...memories[i].embedding!]);\n        }\n\n        return centroids;\n    }\n\n    /**\n     * Calculate centroid of cluster members\n     */\n    private calculateCentroid(members: MemoryEntry[]): number[] {\n        if (members.length === 0 || !members[0].embedding) return [];\n\n        const dim = members[0].embedding.length;\n        const centroid = new Array(dim).fill(0);\n\n        members.forEach(member => {\n            if (member.embedding) {\n                member.embedding.forEach((val, idx) => {\n                    centroid[idx] += val;\n                });\n            }\n        });\n\n        return centroid.map(val => val / members.length);\n    }\n\n    /**\n     * Calculate cluster coherence\n     */\n    private calculateClusterCoherence(cluster: MemoryCluster): number {\n        if (cluster.members.length < 2) return 1;\n\n        let totalSimilarity = 0;\n        let comparisons = 0;\n\n        for (let i = 0; i < cluster.members.length; i++) {\n            for (let j = i + 1; j < cluster.members.length; j++) {\n                if (cluster.members[i].embedding && cluster.members[j].embedding) {\n                    totalSimilarity += this.cosineSimilarity(\n                        cluster.members[i].embedding!,\n                        cluster.members[j].embedding!\n                    );\n                    comparisons++;\n                }\n            }\n        }\n\n        return comparisons > 0 ? totalSimilarity / comparisons : 0;\n    }\n\n    /**\n     * Check if two vectors are equal\n     */\n    private vectorsEqual(a: number[], b: number[]): boolean {\n        if (a.length !== b.length) return false;\n        return a.every((val, idx) => Math.abs(val - b[idx]) < 0.001);\n    }\n\n    /**\n     * Generate unique memory ID\n     */\n    private generateMemoryId(): string {\n        return `mem_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n\n    /**\n     * Get memory statistics\n     */\n    public getStats(): MemoryStats {\n        const stats: MemoryStats = {\n            totalMemories: this.memories.size,\n            byType: new Map(),\n            byAgent: new Map(),\n            averageAccessCount: 0,\n            mostAccessedMemories: [],\n            memoryGrowthRate: 0,\n            patternCount: this.patterns.size,\n            clusterCount: this.clusters.length\n        };\n\n        // Count by type\n        this.memoryIndex.forEach((ids, type) => {\n            stats.byType.set(type, ids.size);\n        });\n\n        // Count by agent\n        this.agentMemories.forEach((ids, agent) => {\n            stats.byAgent.set(agent, ids.size);\n        });\n\n        // Calculate average access count and find most accessed\n        let totalAccess = 0;\n        const memoriesByAccess = Array.from(this.memories.values())\n            .sort((a, b) => (b.metadata.accessCount || 0) - (a.metadata.accessCount || 0));\n\n        memoriesByAccess.forEach(memory => {\n            totalAccess += memory.metadata.accessCount || 0;\n        });\n\n        stats.averageAccessCount = totalAccess / (this.memories.size || 1);\n        stats.mostAccessedMemories = memoriesByAccess.slice(0, 10);\n\n        return stats;\n    }\n\n    /**\n     * Export memories for persistence\n     */\n    public export(): string {\n        const exportData = {\n            memories: Array.from(this.memories.entries()),\n            patterns: Array.from(this.patterns.entries()),\n            codePatterns: Array.from(this.codePatterns.entries()),\n            architecturePatterns: Array.from(this.architecturePatterns.entries()),\n            learningEntries: this.learningEntries,\n            timestamp: Date.now()\n        };\n\n        return JSON.stringify(exportData);\n    }\n\n    /**\n     * Import memories from persistence\n     */\n    public import(data: string): void {\n        const importData = JSON.parse(data);\n\n        // Clear existing data\n        this.memories.clear();\n        this.patterns.clear();\n        this.codePatterns.clear();\n        this.architecturePatterns.clear();\n        this.learningEntries = [];\n\n        // Import memories\n        importData.memories.forEach(([id, memory]: [string, MemoryEntry]) => {\n            this.memories.set(id, memory);\n            if (memory.embedding) {\n                this.embeddings.set(id, memory.embedding);\n            }\n        });\n\n        // Import patterns\n        importData.patterns.forEach(([id, pattern]: [string, MemoryPattern]) => {\n            this.patterns.set(id, pattern);\n        });\n\n        // Import code patterns\n        importData.codePatterns.forEach(([id, pattern]: [string, CodePattern]) => {\n            this.codePatterns.set(id, pattern);\n        });\n\n        // Import architecture patterns\n        importData.architecturePatterns.forEach(([id, pattern]: [string, ArchitecturePattern]) => {\n            this.architecturePatterns.set(id, pattern);\n        });\n\n        // Import learning entries\n        this.learningEntries = importData.learningEntries || [];\n\n        // Rebuild indexes\n        this.rebuildIndexes();\n\n        this.eventBus.emit('memories-imported', {\n            count: this.memories.size,\n            timestamp: importData.timestamp\n        });\n    }\n\n    /**\n     * Rebuild indexes after import\n     */\n    private rebuildIndexes(): void {\n        this.memoryIndex.clear();\n        this.agentMemories.clear();\n        this.initializeIndexes();\n\n        this.memories.forEach(memory => {\n            this.memoryIndex.get(memory.type)?.add(memory.id);\n\n            if (!this.agentMemories.has(memory.agentId)) {\n                this.agentMemories.set(memory.agentId, new Set());\n            }\n            this.agentMemories.get(memory.agentId)?.add(memory.id);\n        });\n    }\n}","/**\n * CodeSmithClaude - Senior Python/Web Developer\n * Powered by Claude 3.5 Sonnet for code implementation and optimization\n */\nimport * as vscode from 'vscode';\nimport { ChatAgent } from './base/ChatAgent';\nimport { AgentConfig, TaskRequest, TaskResult, WorkflowStep } from '../types';\nimport { VSCodeMasterDispatcher } from '../core/VSCodeMasterDispatcher';\nimport { AnthropicService } from '../utils/AnthropicService';\nimport { getClaudeCodeService, ClaudeCodeService } from '../services/ClaudeCodeService';\n\nexport class CodeSmithAgent extends ChatAgent {\n    private anthropicService: AnthropicService;\n    private claudeCodeService: ClaudeCodeService;\n\n    constructor(context: vscode.ExtensionContext, dispatcher: VSCodeMasterDispatcher) {\n        const config: AgentConfig = {\n            participantId: 'ki-autoagent.codesmith',\n            name: 'codesmith',\n            fullName: 'CodeSmithClaude',\n            description: 'Senior Python/Web Developer powered by Claude 4.1 Sonnet',\n            model: 'claude-4.1-sonnet-20250920',\n            iconPath: vscode.Uri.joinPath(context.extensionUri, 'media', 'claude-icon.svg'),\n            capabilities: [\n                'Python Development',\n                'Web Development',\n                'API Implementation',\n                'Testing & TDD',\n                'Code Optimization',\n                'Framework Integration'\n            ],\n            commands: [\n                { name: 'implement', description: 'Implement code based on specifications', handler: 'handleImplementCommand' },\n                { name: 'fix', description: 'Fix bugs and issues in code', handler: 'handleFixCommand' },\n                { name: 'debug', description: 'Debug and resolve issues', handler: 'handleDebugCommand' },\n                { name: 'optimize', description: 'Optimize existing code for performance', handler: 'handleOptimizeCommand' },\n                { name: 'refactor', description: 'Refactor code for better structure', handler: 'handleRefactorCommand' },\n                { name: 'modernize', description: 'Modernize legacy code', handler: 'handleModernizeCommand' },\n                { name: 'test', description: 'Generate comprehensive test suites', handler: 'handleTestCommand' }\n            ]\n        };\n\n        super(config, context, dispatcher);\n        this.anthropicService = new AnthropicService();\n        this.claudeCodeService = getClaudeCodeService();\n    }\n\n    protected async handleRequest(\n        request: vscode.ChatRequest,\n        context: vscode.ChatContext,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        const validationResult = await this.validateServiceConfig(stream);\n        if (!validationResult) {\n            return;\n        }\n\n        const command = request.command;\n        const prompt = request.prompt;\n\n        this.log(`Processing ${command ? `/${command}` : 'general'} request: ${prompt.substring(0, 100)}...`);\n\n        if (command) {\n            await this.handleCommand(command, prompt, stream, token);\n        } else {\n            await this.handleGeneralImplementationRequest(prompt, stream, token);\n        }\n    }\n\n    // Override executeStep to use our custom implementation\n    public async executeStep(\n        step: WorkflowStep,\n        request: TaskRequest & { onPartialResponse?: (content: string) => void },\n        previousResults: TaskResult[]\n    ): Promise<TaskResult> {\n        this.showDebug(`ExecuteStep called`, { \n            step: step.id, \n            hasStreamingCallback: !!request.onPartialResponse \n        });\n        return await this.processWorkflowStep(step, request, previousResults);\n    }\n\n    protected async processWorkflowStep(\n        step: WorkflowStep,\n        request: TaskRequest & { onPartialResponse?: (content: string) => void; globalContext?: string },\n        previousResults: TaskResult[]\n    ): Promise<TaskResult> {\n        \n        const context = await this.getWorkspaceContext();\n        \n        // Build conversation history from previous results\n        let conversationHistory = '';\n        \n        // Include global context if available\n        if (request.globalContext) {\n            conversationHistory += request.globalContext;\n        }\n        \n        // Add immediate previous results for this workflow\n        if (previousResults.length > 0) {\n            conversationHistory += '\\n\\n## Current Workflow Progress:\\n';\n            previousResults.forEach((result, index) => {\n                const agentName = result.metadata?.agent || `Agent ${index + 1}`;\n                const stepId = result.metadata?.step || 'unknown';\n                conversationHistory += `\\n### ${agentName} (${stepId}):\\n${result.content}\\n`;\n            });\n        }\n        \n        let systemPrompt = '';\n        let userPrompt = '';\n\n        switch (step.id) {\n            case 'implement':\n                systemPrompt = this.getImplementationSystemPrompt();\n                userPrompt = `Implement the following: ${request.prompt}\\n\\nWorkspace Context:\\n${context}${conversationHistory}`;\n                break;\n                \n            case 'test':\n                systemPrompt = this.getTestingSystemPrompt();\n                userPrompt = `Create comprehensive tests for: ${request.prompt}\\n\\nPrevious Implementation:\\n${this.extractPreviousContent(previousResults)}`;\n                break;\n                \n            case 'optimize':\n                systemPrompt = this.getOptimizationSystemPrompt();\n                userPrompt = `Optimize this implementation: ${request.prompt}\\n\\nContext:\\n${context}${conversationHistory}`;\n                break;\n                \n            default:\n                systemPrompt = this.getGeneralSystemPrompt();\n                userPrompt = `${request.prompt}\\n\\nContext:\\n${context}${conversationHistory}`;\n        }\n\n        try {\n            // Pass streaming callback if provided\n            const claudeService = await this.getClaudeService(request.onPartialResponse);\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            // Extract content string from response object\n            const responseContent = typeof response === 'string' \n                ? response \n                : (response as any).content || '';\n\n            // Extract metadata from response if available\n            const responseMetadata = typeof response === 'object' && response !== null\n                ? (response as any).metadata\n                : {};\n\n            this.showDebug('Response received', {\n                contentLength: responseContent.length,\n                metadata: responseMetadata\n            });\n\n            return {\n                status: 'success',\n                content: responseContent,\n                metadata: { \n                    step: step.id,\n                    agent: 'codesmith',\n                    model: 'claude-3.5-sonnet',\n                    ...responseMetadata\n                }\n            };\n\n        } catch (error) {\n            throw new Error(`Failed to process ${step.id}: ${(error as any).message}`);\n        }\n    }\n\n    // Command Handlers\n\n    private async handleImplementCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('⚡ Implementing your requirements...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getImplementationSystemPrompt();\n        const userPrompt = `Implement the following requirements: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            // Extract content string from response object\n            const responseContent = typeof response === 'string' \n                ? response \n                : (response as any).content || '';\n            stream.markdown(responseContent);\n\n            // Extract code blocks for file creation\n            const codeBlocks = this.extractCodeBlocks(responseContent);\n            \n            for (const block of codeBlocks) {\n                if (block.filename) {\n                    this.createActionButton(\n                        `📄 Create ${block.filename}`,\n                        'ki-autoagent.createFile',\n                        [block.filename, block.code],\n                        stream\n                    );\n                }\n            }\n\n            // Offer to create tests\n            this.createActionButton(\n                '🧪 Generate Tests',\n                'ki-autoagent.generateTests',\n                [prompt, response],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Error during implementation: ${(error as any).message}`);\n        }\n    }\n\n    private async handleOptimizeCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('🚀 Optimizing code for performance...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getOptimizationSystemPrompt();\n        \n        // Include current file content if available\n        let codeToOptimize = '';\n        if (context.includes('Selected text:')) {\n            codeToOptimize = context;\n        } else if (vscode.window.activeTextEditor) {\n            const document = vscode.window.activeTextEditor.document;\n            codeToOptimize = `Current file: ${document.fileName}\\n\\`\\`\\`${document.languageId}\\n${document.getText()}\\n\\`\\`\\``;\n        }\n        \n        const userPrompt = `Optimize the following code: ${prompt}\\n\\nCode to optimize:\\n${codeToOptimize}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            // Extract content string from response object\n            const responseContent = typeof response === 'string' \n                ? response \n                : (response as any).content || '';\n            stream.markdown(responseContent);\n\n            // Offer to apply optimizations\n            const optimizedCode = this.extractMainCodeBlock(responseContent);\n            if (optimizedCode) {\n                this.createActionButton(\n                    '✨ Apply Optimization',\n                    'ki-autoagent.insertAtCursor',\n                    [optimizedCode],\n                    stream\n                );\n            }\n\n        } catch (error) {\n            stream.markdown(`❌ Error during optimization: ${(error as any).message}`);\n        }\n    }\n\n    private async handleTestCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('🧪 Generating comprehensive test suite...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getTestingSystemPrompt();\n        const userPrompt = `Generate comprehensive tests for: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            // Extract content string from response object\n            const responseContent = typeof response === 'string' \n                ? response \n                : (response as any).content || '';\n            stream.markdown(responseContent);\n\n            // Extract test files for creation\n            const testFiles = this.extractTestFiles(responseContent);\n            \n            for (const testFile of testFiles) {\n                this.createActionButton(\n                    `🧪 Create ${testFile.filename}`,\n                    'ki-autoagent.createFile',\n                    [testFile.filename, testFile.code],\n                    stream\n                );\n            }\n\n            // Offer to run tests\n            this.createActionButton(\n                '▶️ Run Tests',\n                'ki-autoagent.runTests',\n                [],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Error generating tests: ${(error as any).message}`);\n        }\n    }\n\n    private async handleFixCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        stream.progress('🔧 Fixing bugs and issues...');\n\n        const context = await this.getWorkspaceContext();\n        const systemPrompt = `You are CodeSmithClaude, an expert bug fixer. Your task is to:\n1. Identify the root cause of the bug\n2. Implement a robust fix\n3. Ensure no new bugs are introduced\n4. Add error handling where needed\n5. Test the fix thoroughly\n\n${this.getSystemContextPrompt()}`;\n\n        const userPrompt = `Fix the following issue: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            const responseContent = typeof response === 'string'\n                ? response\n                : (response as any).content || '';\n            stream.markdown(responseContent);\n\n        } catch (error) {\n            stream.markdown(`❌ Error during bug fix: ${(error as any).message}`);\n        }\n    }\n\n    private async handleDebugCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        stream.progress('🐛 Debugging and analyzing issue...');\n\n        const context = await this.getWorkspaceContext();\n        const systemPrompt = `You are CodeSmithClaude, an expert debugger. Your task is to:\n1. Analyze error messages and stack traces\n2. Identify the root cause\n3. Add debug logging to trace the issue\n4. Provide step-by-step debugging instructions\n5. Suggest a permanent fix\n\n${this.getSystemContextPrompt()}`;\n\n        const userPrompt = `Debug this issue: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            const responseContent = typeof response === 'string'\n                ? response\n                : (response as any).content || '';\n            stream.markdown(responseContent);\n\n        } catch (error) {\n            stream.markdown(`❌ Error during debugging: ${(error as any).message}`);\n        }\n    }\n\n    private async handleRefactorCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        stream.progress('♻️ Refactoring code for better structure...');\n\n        const context = await this.getWorkspaceContext();\n        const systemPrompt = `You are CodeSmithClaude, a refactoring expert. Your task is to:\n1. Improve code structure and organization\n2. Apply design patterns where appropriate\n3. Reduce code duplication (DRY principle)\n4. Improve naming and readability\n5. Maintain functionality while improving quality\n\n${this.getSystemContextPrompt()}`;\n\n        const userPrompt = `Refactor the following: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            const responseContent = typeof response === 'string'\n                ? response\n                : (response as any).content || '';\n            stream.markdown(responseContent);\n\n        } catch (error) {\n            stream.markdown(`❌ Error during refactoring: ${(error as any).message}`);\n        }\n    }\n\n    private async handleModernizeCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        stream.progress('🚀 Modernizing legacy code...');\n\n        const context = await this.getWorkspaceContext();\n        const systemPrompt = `You are CodeSmithClaude, a code modernization expert. Your task is to:\n1. Update deprecated APIs and methods\n2. Use modern language features (async/await, arrow functions, etc.)\n3. Update to latest framework versions\n4. Improve TypeScript types\n5. Add modern tooling support\n\n${this.getSystemContextPrompt()}`;\n\n        const userPrompt = `Modernize the following code: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            const responseContent = typeof response === 'string'\n                ? response\n                : (response as any).content || '';\n            stream.markdown(responseContent);\n\n        } catch (error) {\n            stream.markdown(`❌ Error during modernization: ${(error as any).message}`);\n        }\n    }\n\n    private async handleGeneralImplementationRequest(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('💻 Processing implementation request...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getGeneralSystemPrompt();\n        const userPrompt = `${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            // Extract content string from response object\n            const responseContent = typeof response === 'string' \n                ? response \n                : (response as any).content || '';\n            stream.markdown(responseContent);\n\n            // Auto-detect and offer file creation\n            const codeBlocks = this.extractCodeBlocks(responseContent);\n            for (const block of codeBlocks) {\n                if (block.filename) {\n                    this.createActionButton(\n                        `📄 Create ${block.filename}`,\n                        'ki-autoagent.createFile',\n                        [block.filename, block.code],\n                        stream\n                    );\n                }\n            }\n\n        } catch (error) {\n            stream.markdown(`❌ Error processing request: ${(error as any).message}`);\n        }\n    }\n\n    // System Prompts\n\n    private getGeneralSystemPrompt(): string {\n        return `You are CodeSmithClaude, a senior Python and web developer with expertise in:\n\n- Python development (Django, FastAPI, Flask, Streamlit)\n- Web development (React, TypeScript, JavaScript)\n- API design and implementation\n- Database design and ORM usage\n- Testing strategies (pytest, unittest, Jest)\n- Code optimization and performance\n- Modern development practices\n\nAlways provide:\n1. Clean, readable, and well-documented code\n2. Proper error handling and validation\n3. Performance considerations\n4. Security best practices\n5. Testing recommendations\n\nFormat your responses with clear explanations and working code examples.\n\n${this.getSystemContextPrompt()}`;\n    }\n\n    private getImplementationSystemPrompt(): string {\n        return `You are CodeSmithClaude implementing code based on specifications. Follow this structure:\n\n## Implementation Plan\n\n### 1. Analysis\n- Break down requirements\n- Identify components needed\n- Choose appropriate patterns\n\n### 2. Core Implementation\n- Main functionality with proper structure\n- Error handling and validation\n- Clear documentation\n\n### 3. Integration Points\n- How this connects to existing code\n- Dependencies and imports\n- Configuration requirements\n\n### 4. Usage Examples\n- How to use the implemented code\n- Example scenarios\n- Common patterns\n\n### 5. Next Steps\n- Testing recommendations\n- Potential improvements\n- Deployment considerations\n\nProvide complete, working code with filenames when appropriate. Focus on clean, maintainable solutions.\n\n${this.getSystemContextPrompt()}`;\n    }\n\n    private getOptimizationSystemPrompt(): string {\n        return `You are CodeSmithClaude optimizing code for performance. Follow this approach:\n\n## Code Optimization Analysis\n\n### 1. Current Code Analysis\n- Identify performance bottlenecks\n- Analyze complexity and efficiency\n- Spot potential issues\n\n### 2. Optimization Strategies\n- Algorithm improvements\n- Data structure optimizations\n- Caching opportunities\n- Memory efficiency\n\n### 3. Optimized Implementation\n- Improved code with explanations\n- Performance comparisons\n- Benchmark suggestions\n\n### 4. Trade-offs\n- Performance vs readability\n- Memory vs speed\n- Complexity considerations\n\nAlways maintain code readability while improving performance. Explain your optimization choices.\n\n${this.getSystemContextPrompt()}`;\n    }\n\n    private getTestingSystemPrompt(): string {\n        return `You are CodeSmithClaude creating comprehensive test suites. Structure your tests as:\n\n## Test Suite Design\n\n### 1. Test Strategy\n- Test types needed (unit, integration, e2e)\n- Coverage goals\n- Testing framework choice\n\n### 2. Unit Tests\n- Test individual functions/methods\n- Edge cases and error conditions\n- Mocking strategies\n\n### 3. Integration Tests\n- Component interactions\n- API endpoint testing\n- Database integration\n\n### 4. Test Utilities\n- Fixtures and test data\n- Helper functions\n- Setup/teardown\n\n### 5. Test Configuration\n- Test runner setup\n- CI/CD integration\n- Coverage reporting\n\nProvide complete, runnable tests with clear assertions and good coverage.\n\n${this.getSystemContextPrompt()}`;\n    }\n\n    // Service Configuration Methods\n\n    private async validateServiceConfig(stream?: vscode.ChatResponseStream): Promise<boolean> {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent');\n        const serviceMode = config.get<string>('claude.serviceMode', 'claude-code');\n\n        if (serviceMode === 'api') {\n            if (!config.get<string>('anthropic.apiKey')) {\n                if (stream) {\n                    stream.markdown('❌ **Anthropic API key not configured**\\n\\nPlease set your API key in VS Code settings:\\n- Go to Settings\\n- Search for \"KI AutoAgent\"\\n- Set your Anthropic API key');\n                }\n                return false;\n            }\n        } else if (serviceMode === 'claude-code') {\n            const isClaudeCodeAvailable = await this.claudeCodeService.isAvailable();\n            if (!isClaudeCodeAvailable) {\n                if (stream) {\n                    stream.markdown(`❌ **Claude Code CLI not available**\\n\\n**To install:**\\n\\`\\`\\`bash\\nnpm install -g @anthropic-ai/claude-code\\n\\`\\`\\`\\n\\nOr configure your Anthropic API key in VS Code settings.`);\n                }\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private async getClaudeService(onPartialResponse?: (content: string) => void): Promise<{ chat: (messages: any[]) => Promise<any> }> {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent');\n        const serviceMode = config.get<string>('claude.serviceMode', 'claude-code');\n\n        this.showDebug('Service configuration', {\n            serviceMode,\n            hasStreamingCallback: !!onPartialResponse\n        });\n\n        if (serviceMode === 'claude-code') {\n            const isAvailable = await this.claudeCodeService.isAvailable();\n            if (isAvailable) {\n                this.showInfo('Using Claude Code CLI');\n                return {\n                    chat: async (messages: any[]) => {\n                        // Extract the main user message content\n                        const userMessage = messages.find(m => m.role === 'user')?.content || '';\n                        const systemMessage = messages.find(m => m.role === 'system')?.content || '';\n                        const fullPrompt = systemMessage ? `${systemMessage}\\n\\n${userMessage}` : userMessage;\n                        \n                        // Use streaming if callback provided\n                        if (onPartialResponse) {\n                            this.showDebug('Using streaming message');\n                            const response = await this.claudeCodeService.sendStreamingMessage(fullPrompt, {\n                                model: 'sonnet',\n                                temperature: 0.7,\n                                onPartialResponse: onPartialResponse\n                            });\n                            return response;\n                        } else {\n                            const response = await this.claudeCodeService.sendMessage(fullPrompt, {\n                                model: 'sonnet',\n                                temperature: 0.7\n                            });\n                            return response.content;\n                        }\n                    }\n                };\n            } else {\n                this.showFallbackMode('Claude Code CLI not available', 'Using Anthropic API');\n            }\n        }\n        \n        // Fall back to Anthropic API\n        this.showInfo('Using Anthropic API');\n        return {\n            chat: async (messages: any[]) => {\n                return await this.anthropicService.chat(messages);\n            }\n        };\n    }\n\n    // Helper Methods\n\n    private extractCodeBlocks(content: string): Array<{filename?: string, language: string, code: string}> {\n        const codeBlockRegex = /```(\\w+)?\\s*(?:\\/\\/\\s*(.+\\.[\\w]+))?\\n([\\s\\S]*?)```/g;\n        const blocks: Array<{filename?: string, language: string, code: string}> = [];\n        \n        let match;\n        while ((match = codeBlockRegex.exec(content)) !== null) {\n            const language = match[1] || 'text';\n            const filename = match[2] || this.inferFilename(language, match[3]);\n            const code = match[3];\n            \n            blocks.push({ filename, language, code });\n        }\n        \n        return blocks;\n    }\n\n    private extractTestFiles(content: string): Array<{filename: string, code: string}> {\n        const blocks = this.extractCodeBlocks(content);\n        return blocks\n            .filter(block => \n                block.filename && \n                (block.filename.includes('test') || block.filename.includes('spec'))\n            )\n            .map(block => ({ filename: block.filename!, code: block.code }));\n    }\n\n    private extractMainCodeBlock(content: string): string {\n        const blocks = this.extractCodeBlocks(content);\n        return blocks.length > 0 ? blocks[0].code : '';\n    }\n\n    private inferFilename(language: string, code: string): string {\n        // Try to infer filename from code content\n        if (language === 'python') {\n            const classMatch = code.match(/class\\s+(\\w+)/);\n            if (classMatch) {\n                return `${classMatch[1].toLowerCase()}.py`;\n            }\n            return 'main.py';\n        } else if (language === 'typescript' || language === 'javascript') {\n            const classMatch = code.match(/(?:class|interface)\\s+(\\w+)/);\n            if (classMatch) {\n                return `${classMatch[1]}.${language === 'typescript' ? 'ts' : 'js'}`;\n            }\n            return `index.${language === 'typescript' ? 'ts' : 'js'}`;\n        }\n        \n        return `code.${language}`;\n    }\n\n    private extractPreviousContent(previousResults: TaskResult[]): string {\n        return previousResults\n            .map(result => result.content)\n            .join('\\n\\n---\\n\\n')\n            .substring(0, 2000); // Limit context size\n    }\n}","/**\n * Agent Registry and Task Delegation System\n * Central registry for all agents with capability mapping and task delegation logic\n */\nimport * as vscode from 'vscode';\n\nexport interface AgentCapability {\n    id: string;\n    name: string;\n    model: string;\n    specialization: string;\n    canHandle: string[];\n    instructionSet: string;\n}\n\nexport class AgentRegistry {\n    private static instance: AgentRegistry;\n\n    // Static registry of agent capabilities for task delegation\n    public static readonly AGENT_CAPABILITIES: Record<string, {\n        specialization: string;\n        canHandle: string[];\n        model: string;\n        instructionSet: string;\n    }> = {\n        'orchestrator': {\n            specialization: 'Multi-Agent Workflow Coordination',\n            canHandle: ['workflow', 'orchestration', 'multi-step', 'complex-tasks', 'coordination'],\n            model: 'gpt-5-2025-09-12',\n            instructionSet: 'orchestrator.md'\n        },\n        'architect': {\n            specialization: 'System Architecture & Design',\n            canHandle: ['architecture', 'design', 'patterns', 'scalability', 'tech-stack', 'system-design', 'database-design'],\n            model: 'gpt-5-2025-09-12',\n            instructionSet: 'architect.md'\n        },\n        'codesmith': {\n            specialization: 'Code Implementation & Optimization',\n            canHandle: ['coding', 'implementation', 'optimization', 'testing', 'debugging', 'refactoring', 'code-review'],\n            model: 'claude-4.1-sonnet-20250920',\n            instructionSet: 'codesmith.md'\n        },\n        'tradestrat': {\n            specialization: 'Trading Strategies & Financial Analysis',\n            canHandle: ['trading', 'algorithms', 'financial', 'backtesting', 'market-analysis', 'portfolio', 'risk-management'],\n            model: 'claude-4.1-sonnet-20250920',\n            instructionSet: 'tradestrat.md'\n        },\n        'research': {\n            specialization: 'Web Research & Information Gathering',\n            canHandle: ['research', 'web-search', 'documentation', 'fact-checking', 'information-gathering', 'api-docs'],\n            model: 'perplexity-llama-3.1-sonar-huge-128k',\n            instructionSet: 'research.md'\n        },\n        'opus-arbitrator': {\n            specialization: 'Agent Conflict Resolution',\n            canHandle: ['conflicts', 'decision-making', 'arbitration', 'dispute-resolution', 'consensus'],\n            model: 'claude-4.1-opus-20250915',\n            instructionSet: 'richter.md'\n        },\n        'docu': {\n            specialization: 'Technical Documentation & API Reference',\n            canHandle: ['documentation', 'readme', 'api-docs', 'user-guides', 'comments', 'changelog', 'technical-writing', 'instruction-management'],\n            model: 'gpt-5-2025-09-12',\n            instructionSet: 'docubot-instructions.md'\n        },\n        'reviewer': {\n            specialization: 'Code Review & Security Analysis',\n            canHandle: ['code-review', 'security', 'performance-analysis', 'standards', 'testing', 'quality-assurance', 'vulnerabilities', 'architecture-validation'],\n            model: 'gpt-5-mini-2025-09-20',\n            instructionSet: 'reviewergpt-instructions.md'\n        },\n        'fixer': {\n            specialization: 'Bug Fixing & Optimization',\n            canHandle: ['bug-fixing', 'debugging', 'error-resolution', 'optimization', 'refactoring', 'modernization', 'hotfix'],\n            model: 'claude-4.1-sonnet-20250920',\n            instructionSet: 'fixerbot-instructions.md'\n        }\n    };\n\n    public static getInstance(): AgentRegistry {\n        if (!AgentRegistry.instance) {\n            AgentRegistry.instance = new AgentRegistry();\n        }\n        return AgentRegistry.instance;\n    }\n\n    /**\n     * Get all registered agents with their capabilities\n     */\n    public getRegisteredAgents(): AgentCapability[] {\n        return Object.entries(AgentRegistry.AGENT_CAPABILITIES).map(([id, capability]) => ({\n            id,\n            name: this.getAgentDisplayName(id),\n            model: capability.model,\n            specialization: capability.specialization,\n            canHandle: capability.canHandle,\n            instructionSet: capability.instructionSet\n        }));\n    }\n\n    /**\n     * Get information about a specific agent\n     */\n    public getAgentInfo(agentId: string): AgentCapability | undefined {\n        const capability = AgentRegistry.AGENT_CAPABILITIES[agentId];\n        if (!capability) return undefined;\n\n        return {\n            id: agentId,\n            name: this.getAgentDisplayName(agentId),\n            model: capability.model,\n            specialization: capability.specialization,\n            canHandle: capability.canHandle,\n            instructionSet: capability.instructionSet\n        };\n    }\n\n    /**\n     * Suggest the best agent for a given task based on keywords\n     */\n    public suggestAgentForTask(taskDescription: string): string | null {\n        const lowerTask = taskDescription.toLowerCase();\n        let bestMatch: { agent: string; score: number } | null = null;\n\n        for (const [agentId, capability] of Object.entries(AgentRegistry.AGENT_CAPABILITIES)) {\n            let score = 0;\n            for (const keyword of capability.canHandle) {\n                if (lowerTask.includes(keyword)) {\n                    score += keyword.split('-').length; // Multi-word keywords get higher score\n                }\n            }\n\n            if (score > 0 && (!bestMatch || score > bestMatch.score)) {\n                bestMatch = { agent: agentId, score };\n            }\n        }\n\n        return bestMatch?.agent || null;\n    }\n\n    /**\n     * Get a formatted list of all agents for display\n     */\n    public getAgentListDescription(): string {\n        const agents = this.getRegisteredAgents();\n        return agents.map((agent, index) =>\n            `${index + 1}. **${agent.name}** - ${agent.specialization} (${agent.model})`\n        ).join('\\n');\n    }\n\n    /**\n     * Get task delegation suggestions for a specific agent\n     */\n    public getTaskDelegationInfo(currentAgentId: string): string {\n        const currentAgent = this.getAgentInfo(currentAgentId);\n        if (!currentAgent) return '';\n\n        const otherAgents = this.getRegisteredAgents().filter(a => a.id !== currentAgentId);\n\n        let delegationInfo = `## Task Delegation Guidelines\\n\\n`;\n        delegationInfo += `You are **${currentAgent.name}** specializing in: ${currentAgent.specialization}\\n\\n`;\n        delegationInfo += `When encountering tasks outside your expertise, suggest these agents:\\n\\n`;\n\n        for (const agent of otherAgents) {\n            const keywords = agent.canHandle.slice(0, 3).join(', ');\n            delegationInfo += `- **${keywords}** → Suggest: \"@${agent.id} specializes in ${agent.specialization}\"\\n`;\n        }\n\n        delegationInfo += `\\nYou ARE the expert for: ${currentAgent.canHandle.join(', ')}`;\n\n        return delegationInfo;\n    }\n\n    private getAgentDisplayName(agentId: string): string {\n        const nameMap: Record<string, string> = {\n            'orchestrator': 'OrchestratorAgent',\n            'architect': 'ArchitectAgent',\n            'codesmith': 'CodeSmithAgent',\n            'tradestrat': 'TradeStratAgent',\n            'research': 'ResearchAgent',\n            'opus-arbitrator': 'OpusArbitratorAgent',\n            'docu': 'DocuBot',\n            'reviewer': 'ReviewerGPT',\n            'fixer': 'FixerBot'\n        };\n        return nameMap[agentId] || agentId;\n    }\n}","/**\n * Anthropic Service for Claude model interactions\n */\nimport * as vscode from 'vscode';\n\ninterface ChatMessage {\n    role: 'system' | 'user' | 'assistant';\n    content: string;\n}\n\ninterface ChatResponse {\n    content: Array<{\n        text: string;\n        type: string;\n    }>;\n}\n\nexport class AnthropicService {\n    private apiKey: string;\n    private baseURL: string;\n\n    constructor() {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent');\n        this.apiKey = config.get<string>('anthropic.apiKey', '');\n        this.baseURL = 'https://api.anthropic.com/v1';\n    }\n\n    async chat(\n        messages: ChatMessage[],\n        model: string = 'claude-3-5-sonnet-20241022',\n        maxTokens: number = 4000,\n        temperature: number = 0.7\n    ): Promise<string> {\n        \n        if (!this.apiKey) {\n            throw new Error('Anthropic API key not configured');\n        }\n\n        // Anthropic expects system message separate from messages\n        const systemMessage = messages.find(m => m.role === 'system');\n        const conversationMessages = messages.filter(m => m.role !== 'system');\n\n        const requestBody = {\n            model,\n            max_tokens: maxTokens,\n            temperature,\n            system: systemMessage?.content || '',\n            messages: conversationMessages.map(msg => ({\n                role: msg.role,\n                content: msg.content\n            }))\n        };\n\n        try {\n            const response = await fetch(`${this.baseURL}/messages`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-API-Key': this.apiKey,\n                    'anthropic-version': '2023-06-01'\n                },\n                body: JSON.stringify(requestBody)\n            });\n\n            if (!response.ok) {\n                const errorData = await response.json().catch(() => ({ error: { message: response.statusText } }));\n                throw new Error(`Anthropic API error: ${(errorData as any).error?.message || response.statusText}`);\n            }\n\n            const data= await response.json() as ChatResponse;\n            \n            if (!data.content || data.content.length === 0) {\n                throw new Error('No response from Anthropic API');\n            }\n\n            // Extract text from content blocks\n            return data.content\n                .filter(block => block.type === 'text')\n                .map(block => block.text)\n                .join('');\n\n        } catch (error) {\n            if (error instanceof Error) {\n                throw error;\n            }\n            throw new Error(`Anthropic API request failed: ${error}`);\n        }\n    }\n\n    async streamChat(\n        messages: ChatMessage[],\n        onChunk: (chunk: string) => void,\n        model: string = 'claude-3-5-sonnet-20241022',\n        maxTokens: number = 4000,\n        temperature: number = 0.7\n    ): Promise<void> {\n        \n        if (!this.apiKey) {\n            throw new Error('Anthropic API key not configured');\n        }\n\n        const systemMessage = messages.find(m => m.role === 'system');\n        const conversationMessages = messages.filter(m => m.role !== 'system');\n\n        const requestBody = {\n            model,\n            max_tokens: maxTokens,\n            temperature,\n            system: systemMessage?.content || '',\n            messages: conversationMessages.map(msg => ({\n                role: msg.role,\n                content: msg.content\n            })),\n            stream: true\n        };\n\n        try {\n            const response = await fetch(`${this.baseURL}/messages`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-API-Key': this.apiKey,\n                    'anthropic-version': '2023-06-01'\n                },\n                body: JSON.stringify(requestBody)\n            });\n\n            if (!response.ok) {\n                throw new Error(`Anthropic API error: ${response.statusText}`);\n            }\n\n            const reader = response.body?.getReader();\n            if (!reader) {\n                throw new Error('Failed to get response stream');\n            }\n\n            const decoder = new TextDecoder();\n\n            while (true) {\n                const { done, value } = await reader.read();\n                \n                if (done) {\n                    break;\n                }\n\n                const chunk = decoder.decode(value);\n                const lines = chunk.split('\\n').filter(line => line.trim() !== '');\n\n                for (const line of lines) {\n                    if (line.startsWith('data: ')) {\n                        const data = line.substring(6);\n                        \n                        if (data === '[DONE]') {\n                            return;\n                        }\n\n                        try {\n                            const parsed = JSON.parse(data);\n                            \n                            if (parsed.type === 'content_block_delta') {\n                                const text = parsed.delta?.text;\n                                if (text) {\n                                    onChunk(text);\n                                }\n                            }\n                        } catch (error) {\n                            // Ignore parsing errors for incomplete chunks\n                        }\n                    }\n                }\n            }\n\n        } catch (error) {\n            throw new Error(`Anthropic streaming failed: ${error}`);\n        }\n    }\n\n    validateApiKey(): boolean {\n        return !!this.apiKey && this.apiKey.startsWith('sk-ant-');\n    }\n\n    async testConnection(): Promise<boolean> {\n        try {\n            await this.chat([\n                { role: 'user', content: 'Test connection' }\n            ], 'claude-3-5-sonnet-20241022', 10);\n            return true;\n        } catch (error) {\n            return false;\n        }\n    }\n}","/**\n * DocuBot - Technical Documentation Expert\n * Creates comprehensive documentation, READMEs, and API references\n */\nimport * as vscode from 'vscode';\nimport { ChatAgent } from './base/ChatAgent';\nimport { AgentConfig, TaskRequest, TaskResult, WorkflowStep } from '../types';\nimport { VSCodeMasterDispatcher } from '../core/VSCodeMasterDispatcher';\nimport { OpenAIService } from '../utils/OpenAIService';\nimport * as path from 'path';\nimport * as fs from 'fs/promises';\n\nexport class DocuBotAgent extends ChatAgent {\n    private openAIService: OpenAIService;\n\n    constructor(context: vscode.ExtensionContext, dispatcher: VSCodeMasterDispatcher) {\n        const config: AgentConfig = {\n            participantId: 'ki-autoagent.docu',\n            name: 'docu',\n            fullName: 'DocuBot',\n            description: 'Technical Documentation Expert - Creates READMEs, API docs, user guides',\n            model: 'gpt-5-2025-09-12',\n            iconPath: vscode.Uri.joinPath(context.extensionUri, 'media', 'docu-icon.svg'),\n            capabilities: [\n                'README Generation',\n                'API Documentation',\n                'User Guides',\n                'Code Comments',\n                'Technical Writing',\n                'Markdown Formatting',\n                'JSDoc/DocStrings',\n                'Changelog Creation'\n            ],\n            commands: [\n                { name: 'readme', description: 'Generate README for project', handler: 'handleReadmeCommand' },\n                { name: 'api', description: 'Create API documentation', handler: 'handleApiCommand' },\n                { name: 'guide', description: 'Write user guide or tutorial', handler: 'handleGuideCommand' },\n                { name: 'comments', description: 'Add documentation comments to code', handler: 'handleCommentsCommand' },\n                { name: 'changelog', description: 'Generate changelog from commits', handler: 'handleChangelogCommand' },\n                { name: 'update-instructions', description: 'Update agent instruction files', handler: 'handleUpdateInstructionsCommand' },\n                { name: 'view-instructions', description: 'View agent instruction files', handler: 'handleViewInstructionsCommand' }\n            ]\n        };\n\n        super(config, context, dispatcher);\n        this.openAIService = new OpenAIService();\n    }\n\n    protected async handleRequest(\n        request: vscode.ChatRequest,\n        context: vscode.ChatContext,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        const command = request.command;\n        const prompt = request.prompt;\n\n        this.log(`Processing ${command ? `/${command}` : 'general'} documentation request: ${prompt.substring(0, 100)}...`);\n\n        if (command) {\n            await this.handleCommand(command, prompt, stream, token);\n        } else {\n            await this.handleGeneralDocumentationRequest(prompt, stream, token);\n        }\n    }\n\n    protected async processWorkflowStep(\n        step: WorkflowStep,\n        request: TaskRequest,\n        previousResults: TaskResult[]\n    ): Promise<TaskResult> {\n\n        try {\n            let documentationContent = '';\n\n            switch (step.id) {\n                case 'document_code':\n                    documentationContent = await this.generateCodeDocumentation(request, previousResults);\n                    break;\n\n                case 'create_readme':\n                    documentationContent = await this.generateReadme(request, previousResults);\n                    break;\n\n                case 'api_docs':\n                    documentationContent = await this.generateApiDocs(request, previousResults);\n                    break;\n\n                default:\n                    documentationContent = await this.generateGeneralDocs(request, previousResults);\n            }\n\n            return {\n                status: 'success',\n                content: documentationContent,\n                metadata: {\n                    step: step.id,\n                    agent: 'docu',\n                    type: 'documentation'\n                }\n            };\n\n        } catch (error) {\n            throw new Error(`Failed to process documentation step ${step.id}: ${(error as any).message}`);\n        }\n    }\n\n    // Command Handlers\n\n    private async handleReadmeCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        stream.progress('📝 Analyzing project structure...');\n\n        try {\n            const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n            if (!workspaceFolder) {\n                stream.markdown('❌ No workspace folder found');\n                return;\n            }\n\n            // Analyze project structure\n            const projectInfo = await this.analyzeProjectStructure(workspaceFolder.uri.fsPath);\n\n            stream.progress('📝 Generating README...');\n\n            const readmeContent = await this.createReadme(projectInfo, prompt);\n\n            stream.markdown('## 📝 Generated README\\n\\n');\n            stream.markdown('```markdown\\n' + readmeContent + '\\n```');\n\n            // Offer to save\n            this.createActionButton(\n                '💾 Save README.md',\n                'ki-autoagent.saveFile',\n                ['README.md', readmeContent],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ README generation failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleApiCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        stream.progress('🔍 Analyzing code for API endpoints...');\n\n        try {\n            const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n            if (!workspaceFolder) {\n                stream.markdown('❌ No workspace folder found');\n                return;\n            }\n\n            // Find and analyze API endpoints\n            const apiInfo = await this.analyzeApiEndpoints(workspaceFolder.uri.fsPath);\n\n            stream.progress('📖 Generating API documentation...');\n\n            const apiDocs = await this.createApiDocumentation(apiInfo, prompt);\n\n            stream.markdown('## 📖 API Documentation\\n\\n');\n            stream.markdown('```markdown\\n' + apiDocs + '\\n```');\n\n            // Offer to save\n            this.createActionButton(\n                '💾 Save API.md',\n                'ki-autoagent.saveFile',\n                ['docs/API.md', apiDocs],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ API documentation generation failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleGuideCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        stream.progress('📚 Creating user guide...');\n\n        try {\n            const guide = await this.createUserGuide(prompt);\n\n            stream.markdown('## 📚 User Guide\\n\\n');\n            stream.markdown(guide);\n\n            // Offer to save\n            this.createActionButton(\n                '💾 Save Guide',\n                'ki-autoagent.saveFile',\n                ['docs/USER_GUIDE.md', guide],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Guide creation failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleCommentsCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        const editor = vscode.window.activeTextEditor;\n        if (!editor) {\n            stream.markdown('❌ No active editor found. Please open a file to document.');\n            return;\n        }\n\n        stream.progress('💬 Adding documentation comments...');\n\n        try {\n            const document = editor.document;\n            const code = document.getText();\n            const language = document.languageId;\n\n            const documentedCode = await this.addDocumentationComments(code, language, prompt);\n\n            stream.markdown('## 💬 Documented Code\\n\\n');\n            stream.markdown('```' + language + '\\n' + documentedCode + '\\n```');\n\n            // Offer to replace\n            this.createActionButton(\n                '💾 Apply Comments',\n                'ki-autoagent.replaceContent',\n                [documentedCode],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Comment generation failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleChangelogCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        stream.progress('📋 Analyzing commit history...');\n\n        try {\n            // Get git log\n            const gitLog = await this.getGitLog();\n\n            stream.progress('📋 Generating changelog...');\n\n            const changelog = await this.createChangelog(gitLog, prompt);\n\n            stream.markdown('## 📋 Changelog\\n\\n');\n            stream.markdown('```markdown\\n' + changelog + '\\n```');\n\n            // Offer to save\n            this.createActionButton(\n                '💾 Save CHANGELOG.md',\n                'ki-autoagent.saveFile',\n                ['CHANGELOG.md', changelog],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Changelog generation failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleGeneralDocumentationRequest(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        stream.progress('📝 Creating documentation...');\n\n        try {\n            const documentation = await this.createGeneralDocumentation(prompt);\n\n            stream.markdown('## 📝 Documentation\\n\\n');\n            stream.markdown(documentation);\n\n        } catch (error) {\n            stream.markdown(`❌ Documentation creation failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleUpdateInstructionsCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        stream.progress('📝 Updating agent instructions...');\n\n        try {\n            // Parse agent name from prompt\n            const agentMatch = prompt.match(/\\b(orchestrator|architect|codesmith|tradestrat|research|opus-arbitrator|docu|reviewer|fixer)\\b/i);\n            if (!agentMatch) {\n                stream.markdown('❌ Please specify which agent instructions to update (e.g., \"update-instructions for codesmith\")');\n                return;\n            }\n\n            const agentName = agentMatch[1].toLowerCase();\n\n            // Read current instructions\n            const currentInstructions = await this.readInstructionFile(agentName);\n\n            stream.progress('📝 Analyzing and improving instructions...');\n\n            // Generate improvements\n            const improvedInstructions = await this.improveInstructions(agentName, currentInstructions, prompt);\n\n            stream.markdown(`## 📝 Improved Instructions for ${agentName}\\n\\n`);\n            stream.markdown('```markdown\\n' + improvedInstructions + '\\n```');\n\n            // Offer to save\n            this.createActionButton(\n                '💾 Save Updated Instructions',\n                'ki-autoagent.saveInstructions',\n                [agentName, improvedInstructions],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Instruction update failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleViewInstructionsCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        stream.progress('📖 Loading agent instructions...');\n\n        try {\n            // Parse agent name from prompt or list all\n            const agentMatch = prompt.match(/\\b(orchestrator|architect|codesmith|tradestrat|research|opus-arbitrator|docu|reviewer|fixer)\\b/i);\n\n            if (agentMatch) {\n                const agentName = agentMatch[1].toLowerCase();\n                const instructions = await this.readInstructionFile(agentName);\n\n                stream.markdown(`## 📖 Instructions for ${agentName}\\n\\n`);\n                stream.markdown('```markdown\\n' + instructions + '\\n```');\n            } else {\n                // List all available instruction files\n                stream.markdown('## 📖 Available Agent Instructions\\n\\n');\n                stream.markdown('Choose an agent to view instructions:\\n');\n                stream.markdown('- orchestrator\\n');\n                stream.markdown('- architect\\n');\n                stream.markdown('- codesmith\\n');\n                stream.markdown('- tradestrat\\n');\n                stream.markdown('- research\\n');\n                stream.markdown('- opus-arbitrator (richter)\\n');\n                stream.markdown('- docu\\n');\n                stream.markdown('- reviewer\\n');\n                stream.markdown('- fixer\\n\\n');\n                stream.markdown('Use: `/view-instructions [agent-name]` to view specific instructions');\n            }\n\n        } catch (error) {\n            stream.markdown(`❌ Failed to view instructions: ${(error as any).message}`);\n        }\n    }\n\n    // Helper Methods\n\n    private async analyzeProjectStructure(workspacePath: string): Promise<any> {\n        // Analyze project files, package.json, etc.\n        const projectInfo: {\n            name: string;\n            path: string;\n            hasPackageJson: boolean;\n            dependencies: string[];\n            scripts: Record<string, string>;\n            mainFiles: string[];\n        } = {\n            name: path.basename(workspacePath),\n            path: workspacePath,\n            hasPackageJson: false,\n            dependencies: [],\n            scripts: {},\n            mainFiles: []\n        };\n\n        try {\n            const packageJsonPath = path.join(workspacePath, 'package.json');\n            const packageJson = JSON.parse(await fs.readFile(packageJsonPath, 'utf-8'));\n            projectInfo.hasPackageJson = true;\n            projectInfo.dependencies = Object.keys(packageJson.dependencies || {});\n            projectInfo.scripts = packageJson.scripts || {};\n        } catch (error) {\n            // No package.json or error reading it\n        }\n\n        return projectInfo;\n    }\n\n    private async analyzeApiEndpoints(workspacePath: string): Promise<any> {\n        // Analyze code for API endpoints\n        // This would be more sophisticated in a real implementation\n        return {\n            endpoints: [],\n            baseUrl: '',\n            authentication: 'unknown'\n        };\n    }\n\n    private async createReadme(projectInfo: any, additionalContext: string): Promise<string> {\n        const prompt = `Create a comprehensive README.md for a project with the following information:\n\nProject Name: ${projectInfo.name}\nHas package.json: ${projectInfo.hasPackageJson}\nDependencies: ${projectInfo.dependencies.join(', ')}\nScripts: ${JSON.stringify(projectInfo.scripts, null, 2)}\n\nAdditional context: ${additionalContext}\n\nCreate a professional README with sections for:\n- Project title and description\n- Features\n- Installation\n- Usage\n- Configuration (if applicable)\n- API Reference (if applicable)\n- Contributing\n- License\n\nUse proper markdown formatting with badges where appropriate.\n\n${this.getSystemContextPrompt()}`;\n\n        return await this.openAIService.chat([\n            { role: 'system', content: 'You are DocuBot, an expert technical writer specializing in creating clear, comprehensive documentation.' },\n            { role: 'user', content: prompt }\n        ]);\n    }\n\n    private async createApiDocumentation(apiInfo: any, additionalContext: string): Promise<string> {\n        const prompt = `Create comprehensive API documentation based on the following:\n\n${JSON.stringify(apiInfo, null, 2)}\n\nAdditional context: ${additionalContext}\n\nInclude:\n- API overview\n- Authentication\n- Endpoints with request/response examples\n- Error codes\n- Rate limiting (if applicable)\n- Examples in multiple languages\n\n${this.getSystemContextPrompt()}`;\n\n        return await this.openAIService.chat([\n            { role: 'system', content: 'You are DocuBot, an expert in creating clear, comprehensive API documentation.' },\n            { role: 'user', content: prompt }\n        ]);\n    }\n\n    private async createUserGuide(context: string): Promise<string> {\n        const prompt = `Create a comprehensive user guide for the following:\n\n${context}\n\nInclude:\n- Getting Started\n- Key Features\n- Step-by-step tutorials\n- Common use cases\n- Troubleshooting\n- FAQ\n\nMake it user-friendly and easy to follow.\n\n${this.getSystemContextPrompt()}`;\n\n        return await this.openAIService.chat([\n            { role: 'system', content: 'You are DocuBot, an expert in creating user-friendly documentation and guides.' },\n            { role: 'user', content: prompt }\n        ]);\n    }\n\n    private async addDocumentationComments(code: string, language: string, context: string): Promise<string> {\n        const prompt = `Add comprehensive documentation comments to this ${language} code:\n\n${code}\n\nAdditional context: ${context}\n\nUse the appropriate comment style for ${language} (JSDoc for JavaScript/TypeScript, docstrings for Python, etc.)\nDocument all functions, classes, and complex logic.\n\n${this.getSystemContextPrompt()}`;\n\n        return await this.openAIService.chat([\n            { role: 'system', content: 'You are DocuBot, an expert in code documentation and technical writing.' },\n            { role: 'user', content: prompt }\n        ]);\n    }\n\n    private async createChangelog(gitLog: string, context: string): Promise<string> {\n        const prompt = `Create a CHANGELOG.md based on the following git history:\n\n${gitLog}\n\nAdditional context: ${context}\n\nFormat using Keep a Changelog standard (https://keepachangelog.com/)\nGroup changes by version and category (Added, Changed, Deprecated, Removed, Fixed, Security)\n\n${this.getSystemContextPrompt()}`;\n\n        return await this.openAIService.chat([\n            { role: 'system', content: 'You are DocuBot, an expert in creating clear, organized changelogs.' },\n            { role: 'user', content: prompt }\n        ]);\n    }\n\n    private async createGeneralDocumentation(context: string): Promise<string> {\n        const prompt = `Create comprehensive documentation for:\n\n${context}\n\nMake it clear, well-structured, and professional.\n\n${this.getSystemContextPrompt()}`;\n\n        return await this.openAIService.chat([\n            { role: 'system', content: 'You are DocuBot, an expert technical writer creating clear, comprehensive documentation.' },\n            { role: 'user', content: prompt }\n        ]);\n    }\n\n    private async getGitLog(): Promise<string> {\n        // Execute git log command\n        const cp = require('child_process');\n        return new Promise((resolve, reject) => {\n            cp.exec('git log --oneline -50', (error: any, stdout: string, stderr: string) => {\n                if (error) {\n                    reject(error);\n                } else {\n                    resolve(stdout);\n                }\n            });\n        });\n    }\n\n    // Workflow helper methods\n    private async generateCodeDocumentation(request: TaskRequest, previousResults: TaskResult[]): Promise<string> {\n        const context = this.buildContextFromResults(previousResults);\n        return this.createGeneralDocumentation(`Document the following code/feature:\\n${request.prompt}\\n\\nContext from previous steps:\\n${context}`);\n    }\n\n    private async generateReadme(request: TaskRequest, previousResults: TaskResult[]): Promise<string> {\n        const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n        if (!workspaceFolder) {\n            throw new Error('No workspace folder found');\n        }\n        const projectInfo = await this.analyzeProjectStructure(workspaceFolder.uri.fsPath);\n        const context = this.buildContextFromResults(previousResults);\n        return this.createReadme(projectInfo, `${request.prompt}\\n\\nContext:\\n${context}`);\n    }\n\n    private async generateApiDocs(request: TaskRequest, previousResults: TaskResult[]): Promise<string> {\n        const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n        if (!workspaceFolder) {\n            throw new Error('No workspace folder found');\n        }\n        const apiInfo = await this.analyzeApiEndpoints(workspaceFolder.uri.fsPath);\n        const context = this.buildContextFromResults(previousResults);\n        return this.createApiDocumentation(apiInfo, `${request.prompt}\\n\\nContext:\\n${context}`);\n    }\n\n    private async generateGeneralDocs(request: TaskRequest, previousResults: TaskResult[]): Promise<string> {\n        const context = this.buildContextFromResults(previousResults);\n        return this.createGeneralDocumentation(`${request.prompt}\\n\\nContext from previous steps:\\n${context}`);\n    }\n\n    private buildContextFromResults(results: TaskResult[]): string {\n        return results\n            .filter(r => r.status === 'success')\n            .map(r => `${r.metadata?.step || 'Step'}: ${r.content}`)\n            .join('\\n\\n');\n    }\n\n    private async readInstructionFile(agentName: string): Promise<string> {\n        try {\n            // Map agent names to instruction file names\n            const fileNameMap: Record<string, string> = {\n                'orchestrator': 'orchestrator-instructions',\n                'architect': 'architect-instructions',\n                'codesmith': 'codesmith-instructions',\n                'tradestrat': 'tradestrat-instructions',\n                'research': 'research-instructions',\n                'opus-arbitrator': 'richter-instructions',\n                'docu': 'docubot-instructions',\n                'reviewer': 'reviewergpt-instructions',\n                'fixer': 'fixerbot-instructions'\n            };\n\n            const fileName = fileNameMap[agentName] || `${agentName}-instructions`;\n            const instructionPath = path.join(\n                this.context.extensionPath,\n                'src',\n                'instructions',\n                `${fileName}.md`\n            );\n\n            return await fs.readFile(instructionPath, 'utf-8');\n        } catch (error) {\n            throw new Error(`Failed to read instructions for ${agentName}: ${(error as any).message}`);\n        }\n    }\n\n    private async writeInstructionFile(agentName: string, content: string): Promise<void> {\n        try {\n            // Map agent names to instruction file names\n            const fileNameMap: Record<string, string> = {\n                'orchestrator': 'orchestrator-instructions',\n                'architect': 'architect-instructions',\n                'codesmith': 'codesmith-instructions',\n                'tradestrat': 'tradestrat-instructions',\n                'research': 'research-instructions',\n                'opus-arbitrator': 'richter-instructions',\n                'docu': 'docubot-instructions',\n                'reviewer': 'reviewergpt-instructions',\n                'fixer': 'fixerbot-instructions'\n            };\n\n            const fileName = fileNameMap[agentName] || `${agentName}-instructions`;\n            const instructionPath = path.join(\n                this.context.extensionPath,\n                'src',\n                'instructions',\n                `${fileName}.md`\n            );\n\n            await fs.writeFile(instructionPath, content, 'utf-8');\n        } catch (error) {\n            throw new Error(`Failed to write instructions for ${agentName}: ${(error as any).message}`);\n        }\n    }\n\n    private async improveInstructions(agentName: string, currentInstructions: string, userContext: string): Promise<string> {\n        const prompt = `Improve the instruction set for the ${agentName} agent.\n\nCurrent instructions:\n${currentInstructions}\n\nUser context and requirements:\n${userContext}\n\nPlease improve these instructions by:\n1. Ensuring clarity and completeness\n2. Adding any missing capabilities or commands\n3. Improving formatting and organization\n4. Updating best practices\n5. Ensuring consistency with the agent's role\n6. Adding examples where helpful\n7. Keeping the same markdown structure\n\nReturn the complete improved instruction set in markdown format.\n\n${this.getSystemContextPrompt()}`;\n\n        return await this.openAIService.chat([\n            { role: 'system', content: 'You are DocuBot, an expert in creating and improving technical documentation and agent instructions.' },\n            { role: 'user', content: prompt }\n        ]);\n    }\n}","/**\n * VS Code Master Dispatcher - Orchestrates AI agents in VS Code context\n * Adapted from CLI MasterDispatcher for VS Code extension environment\n */\nimport * as vscode from 'vscode';\nimport { TaskRequest, TaskResult, Intent, WorkspaceContext, ProjectTypeDefinition, WorkflowStep } from '../types';\nimport { ConversationContextManager } from './ConversationContextManager';\nimport { SystemMemoryStore } from '../memory/SystemMemory';\nimport { SystemKnowledge } from '../types/SystemKnowledge';\n\nexport class VSCodeMasterDispatcher {\n    private agents: Map<string, any> = new Map();\n    private projectTypes: Map<string, ProjectTypeDefinition> = new Map();\n    private contextManager: ConversationContextManager;\n    private intentPatterns: Map<string, RegExp[]> = new Map();\n    private context: vscode.ExtensionContext;\n    private systemMemory: SystemMemoryStore;\n    private systemKnowledge: SystemKnowledge | null = null;\n\n    constructor(context: vscode.ExtensionContext) {\n        this.context = context;\n        this.contextManager = ConversationContextManager.getInstance();\n        // Initialize System Memory Store with configuration\n        this.systemMemory = new SystemMemoryStore({\n            maxArchitectureVersions: 10,\n            maxPatternHistory: 100,\n            similarityThreshold: 0.85,\n            autoCompaction: true,\n            persistToDisk: true,\n            memoryPath: '.kiautoagent/system-memory'\n        });\n        this.loadSystemKnowledge(); // Load existing knowledge\n        this.initializeProjectTypes();\n        this.initializeIntentPatterns();\n    }\n\n    private async loadSystemKnowledge(): Promise<void> {\n        try {\n            this.systemKnowledge = this.systemMemory.getSystemKnowledge();\n            if (this.systemKnowledge) {\n                console.log(`[DISPATCHER] System Knowledge loaded: ${Object.keys(this.systemKnowledge.architecture.components).length} components`);\n            } else {\n                console.log('[DISPATCHER] No existing system knowledge found, will build on first analysis');\n            }\n        } catch (error) {\n            console.error('[DISPATCHER] Error loading system knowledge:', error);\n        }\n    }\n\n    /**\n     * Process a task request and route to appropriate agents\n     */\n    async processRequest(request: TaskRequest): Promise<TaskResult> {\n        console.log(`\\n🚦 [DISPATCHER] ====== processRequest called ======`);\n        console.log(`🚦 [DISPATCHER] request.command: '${request.command}'`);\n        console.log(`🚦 [DISPATCHER] request.command type: ${typeof request.command}`);\n        console.log(`🚦 [DISPATCHER] request.prompt: \"${request.prompt?.substring(0, 50)}...\"`);\n        console.log(`🚦 [DISPATCHER] Command check results:`);\n        console.log(`🚦 [DISPATCHER]   - request.command exists: ${!!request.command}`);\n        console.log(`🚦 [DISPATCHER]   - request.command !== 'auto': ${request.command !== 'auto'}`);\n        console.log(`🚦 [DISPATCHER]   - request.command !== 'orchestrator': ${request.command !== 'orchestrator'}`);\n        \n        try {\n            // Get workspace context\n            const workspaceContext = await this.getWorkspaceContext();\n\n            // Check if this is a planning-only request\n            if (request.command === 'plan') {\n                console.log(`📋 [DISPATCHER] PLANNING MODE ACTIVATED - No implementation`);\n\n                // Route to orchestrator for planning\n                const workflow = [{\n                    id: 'plan',\n                    agent: 'orchestrator',\n                    description: 'Create implementation plan'\n                }];\n\n                const result = await this.executeWorkflow(workflow, {\n                    ...request,\n                    context: workspaceContext,\n                    projectType: request.projectType || 'generic',\n                    mode: 'planning'\n                });\n\n                return result;\n            }\n\n            // Check if layered thinking mode is requested\n            if (request.thinkingMode && request.mode === 'layered') {\n                console.log(`🧠➕🧠 [DISPATCHER] LAYERED THINKING MODE ACTIVATED`);\n                return await this.executeLayeredThinking(request, workspaceContext);\n            }\n\n            // Check if a specific agent was requested (single agent mode)\n            if (request.command && request.command !== 'auto' && request.command !== 'orchestrator') {\n                console.log(`🎯 [DISPATCHER] ✅ SINGLE AGENT MODE ACTIVATED`);\n                console.log(`🎯 [DISPATCHER] Single agent mode: Using only ${request.command}`);\n                \n                // Create a single-step workflow for the specific agent\n                const workflow = [{\n                    id: 'execute',\n                    agent: request.command,\n                    description: `Execute with ${request.command}`\n                }];\n                \n                console.log(`🎯 [DISPATCHER] Created single-step workflow:`);\n                console.log(`🎯 [DISPATCHER]   - Steps count: ${workflow.length}`);\n                console.log(`🎯 [DISPATCHER]   - Step[0]: id='${workflow[0].id}', agent='${workflow[0].agent}'`);\n                \n                // Execute single agent\n                const result = await this.executeWorkflow(workflow, {\n                    ...request,\n                    context: workspaceContext,\n                    projectType: request.projectType || 'generic'\n                });\n                \n                return result;\n            }\n            \n            // Auto mode: Detect intent and create multi-step workflow\n            console.log(`🎯 [DISPATCHER] ⚠️ AUTO MODE ACTIVATED (not single agent)`);\n            console.log(`🎯 [DISPATCHER] Auto mode: Creating workflow based on intent`);\n            \n            // Detect intent and project type\n            const intent = await this.detectIntent(request.prompt);\n            const projectType = request.projectType || await this.detectProjectType(workspaceContext);\n            \n            // Create workflow\n            const workflow = this.createWorkflow(intent, projectType);\n            \n            // Execute workflow\n            const result = await this.executeWorkflow(workflow, {\n                ...request,\n                context: workspaceContext,\n                projectType\n            });\n\n            return result;\n        } catch (error) {\n            return {\n                status: 'error',\n                content: `Error processing request: ${(error as any).message}`,\n                metadata: { error: (error as any).message }\n            };\n        }\n    }\n\n    /**\n     * Detect user intent from prompt\n     */\n    async detectIntent(prompt: string): Promise<Intent> {\n        const lowerPrompt = prompt.toLowerCase();\n\n        // Check if this is a question rather than a task\n        const isQuestion = /^(what|which|how|was|welche|wie|wer|wo|wann|warum|show|list|explain)/i.test(prompt);\n        const isImplementation = /(implement|create|build|write|code|develop)/i.test(prompt);\n\n        // Query patterns - questions about the system or information\n        if (isQuestion && !isImplementation) {\n            // Questions about the system itself, agents, or instructions\n            if (this.matchesPatterns(lowerPrompt, ['instruction', 'agent', 'system', 'available', 'haben wir', 'gibt es', 'welche'])) {\n                return { type: 'query', confidence: 0.95, agent: 'orchestrator' };\n            }\n            // Architecture questions\n            if (this.matchesPatterns(lowerPrompt, ['architecture', 'design', 'pattern', 'structure'])) {\n                return { type: 'query', confidence: 0.9, agent: 'architect' };\n            }\n            // Research questions\n            if (this.matchesPatterns(lowerPrompt, ['research', 'find', 'information', 'latest'])) {\n                return { type: 'query', confidence: 0.85, agent: 'research' };\n            }\n            // Default query\n            return { type: 'query', confidence: 0.7, agent: 'orchestrator' };\n        }\n\n        // Architecture patterns (for actual design tasks)\n        if (this.matchesPatterns(lowerPrompt, ['design', 'architecture', 'system', 'plan', 'structure']) && isImplementation) {\n            return { type: 'architecture', confidence: 0.9, agent: 'architect' };\n        }\n\n        // Implementation patterns\n        if (this.matchesPatterns(lowerPrompt, ['implement', 'code', 'create', 'build', 'develop'])) {\n            return { type: 'implementation', confidence: 0.85, agent: 'codesmith' };\n        }\n\n        // Documentation patterns\n        if (this.matchesPatterns(lowerPrompt, ['document', 'readme', 'docs', 'explain', 'tutorial'])) {\n            return { type: 'documentation', confidence: 0.9, agent: 'docu' };\n        }\n\n        // Review patterns\n        if (this.matchesPatterns(lowerPrompt, ['review', 'check', 'analyze', 'audit', 'security'])) {\n            return { type: 'review', confidence: 0.85, agent: 'reviewer' };\n        }\n\n        // Debug/Fix patterns\n        if (this.matchesPatterns(lowerPrompt, ['fix', 'debug', 'error', 'bug', 'problem', 'issue'])) {\n            return { type: 'debug', confidence: 0.9, agent: 'fixer' };\n        }\n\n        // Trading patterns\n        if (this.matchesPatterns(lowerPrompt, ['trading', 'strategy', 'backtest', 'ron', 'market', 'stock'])) {\n            return { type: 'trading', confidence: 0.95, agent: 'tradestrat' };\n        }\n\n        // Research patterns\n        if (this.matchesPatterns(lowerPrompt, ['research', 'search', 'find', 'information', 'latest'])) {\n            return { type: 'research', confidence: 0.8, agent: 'research' };\n        }\n\n        // Default - if we can't determine, treat as a query\n        return { type: 'query', confidence: 0.5, agent: 'orchestrator' };\n    }\n\n    /**\n     * Detect project type from workspace context\n     */\n    async detectProjectType(context?: WorkspaceContext): Promise<string> {\n        if (!context?.workspaceRoots || context.workspaceRoots.length === 0) {\n            return 'generic_software';\n        }\n\n        const workspaceRoot = context.workspaceRoots[0];\n        \n        try {\n            // Check for package.json\n            const packageJsonUri = vscode.Uri.joinPath(workspaceRoot.uri, 'package.json');\n            try {\n                const packageJsonContent = await vscode.workspace.fs.readFile(packageJsonUri);\n                const packageJson = JSON.parse(packageJsonContent.toString());\n                \n                // Trading system indicators\n                if (packageJson.dependencies?.['streamlit'] || \n                    packageJson.dependencies?.['yfinance'] ||\n                    packageJson.dependencies?.['pandas']) {\n                    return 'trading_system';\n                }\n                \n                // Web API indicators\n                if (packageJson.dependencies?.['fastapi'] ||\n                    packageJson.dependencies?.['express'] ||\n                    packageJson.dependencies?.['flask']) {\n                    return 'web_api';\n                }\n                \n                // React/Frontend indicators\n                if (packageJson.dependencies?.['react'] ||\n                    packageJson.dependencies?.['vue'] ||\n                    packageJson.dependencies?.['angular']) {\n                    return 'web_frontend';\n                }\n            } catch (error) {\n                // package.json not found or invalid\n            }\n\n            // Check for requirements.txt (Python)\n            const requirementsUri = vscode.Uri.joinPath(workspaceRoot.uri, 'requirements.txt');\n            try {\n                const requirementsContent = await vscode.workspace.fs.readFile(requirementsUri);\n                const requirements = requirementsContent.toString();\n                \n                if (requirements.includes('yfinance') || \n                    requirements.includes('pandas') ||\n                    requirements.includes('streamlit')) {\n                    return 'trading_system';\n                }\n                \n                if (requirements.includes('fastapi') ||\n                    requirements.includes('flask') ||\n                    requirements.includes('django')) {\n                    return 'web_api';\n                }\n            } catch (error) {\n                // requirements.txt not found\n            }\n\n            // Check for specific files\n            const files = await vscode.workspace.findFiles('**/*.{py,js,ts,jsx,tsx}', '**/node_modules/**', 50);\n            const filenames = files.map(uri => uri.fsPath.toLowerCase());\n            \n            if (filenames.some(f => f.includes('strategy') || f.includes('trading') || f.includes('backtest'))) {\n                return 'trading_system';\n            }\n            \n            if (filenames.some(f => f.includes('api') || f.includes('server') || f.includes('endpoint'))) {\n                return 'web_api';\n            }\n\n        } catch (error) {\n            console.error('Error detecting project type:', error);\n        }\n\n        return 'generic_software';\n    }\n\n    /**\n     * Create workflow based on intent and project type\n     * Note: Uses only available agents (architect, codesmith, tradestrat, research, richter, orchestrator)\n     */\n    createWorkflow(intent: Intent, projectType: string): WorkflowStep[] {\n        const projectDef = this.projectTypes.get(projectType);\n        \n        // Base workflow based on intent\n        let workflow: WorkflowStep[] = [];\n        \n        switch (intent.type) {\n            case 'query':\n                // For queries, just use a single step with the appropriate agent\n                workflow = [\n                    { id: 'answer', agent: intent.agent, description: 'Answer query directly' }\n                ];\n                break;\n\n            case 'architecture':\n                workflow = [\n                    { id: 'analyze', agent: 'architect', description: 'Analyze requirements and context' },\n                    { id: 'design', agent: 'architect', description: 'Create architecture design' },\n                    { id: 'review', agent: 'codesmith', description: 'Review architecture for best practices' } // Using codesmith instead of missing 'reviewer'\n                ];\n                break;\n                \n            case 'implementation':\n                workflow = [\n                    { id: 'plan', agent: 'architect', description: 'Plan implementation approach' },\n                    { id: 'implement', agent: 'codesmith', description: 'Implement the solution' },\n                    { id: 'test', agent: 'codesmith', description: 'Create tests' },\n                    { id: 'review', agent: 'codesmith', description: 'Review implementation' } // Using codesmith instead of missing 'reviewer'\n                ];\n                break;\n                \n            case 'trading':\n                workflow = [\n                    { id: 'strategy_design', agent: 'tradestrat', description: 'Design trading strategy' },\n                    { id: 'implement', agent: 'codesmith', description: 'Implement strategy code' },\n                    { id: 'backtest', agent: 'tradestrat', description: 'Create backtesting framework' },\n                    { id: 'review', agent: 'tradestrat', description: 'Review for trading best practices' } // Using tradestrat instead of missing 'reviewer'\n                ];\n                break;\n                \n            case 'debug':\n                workflow = [\n                    { id: 'analyze', agent: 'codesmith', description: 'Analyze the problem' }, // Using codesmith instead of missing 'fixer'\n                    { id: 'fix', agent: 'codesmith', description: 'Implement fix' }, // Using codesmith instead of missing 'fixer'\n                    { id: 'test', agent: 'codesmith', description: 'Test the fix' }\n                ];\n                break;\n                \n            case 'documentation':\n                workflow = [\n                    { id: 'analyze', agent: 'architect', description: 'Analyze documentation requirements' },\n                    { id: 'document', agent: 'codesmith', description: 'Generate documentation' } // Using codesmith instead of missing 'docu'\n                ];\n                break;\n                \n            case 'research':\n                workflow = [\n                    { id: 'research', agent: 'research', description: 'Research and gather information' }\n                ];\n                break;\n                \n            default:\n                workflow = [\n                    { id: 'execute', agent: intent.agent || 'codesmith', description: 'Execute task' }\n                ];\n        }\n\n        // Apply project-specific modifications ONLY if NOT a query\n        // Queries should always be single-step and not modified\n        if (intent.type !== 'query' && projectDef?.workflow) {\n            // Merge project-specific workflow steps\n            workflow = [...workflow, ...projectDef.workflow.filter(step =>\n                !workflow.some(w => w.id === step.id)\n            )];\n        }\n\n        return workflow;\n    }\n\n    /**\n     * Execute layered thinking - multiple AIs thinking in sequence\n     */\n    async executeLayeredThinking(request: TaskRequest, workspaceContext: any): Promise<TaskResult> {\n        console.log('[LAYERED THINKING] Starting multi-layer AI thinking process');\n\n        const thoughts: Record<string, string> = {};\n\n        try {\n            // Layer 1: Architect thinks about structure and design\n            console.log('[LAYERED THINKING] Layer 1: Architect analyzing structure...');\n            const architectAgent = this.agents.get('architect');\n            if (architectAgent) {\n                const architectThought = await architectAgent.deepThink({\n                    ...request,\n                    prompt: `Think deeply about the architecture and design for: ${request.prompt}`,\n                    context: workspaceContext\n                });\n                thoughts['architecture'] = architectThought.content;\n                console.log('[LAYERED THINKING] Architect thinking complete');\n            }\n\n            // Layer 2: CodeSmith thinks about implementation based on architecture\n            console.log('[LAYERED THINKING] Layer 2: CodeSmith analyzing implementation...');\n            const codesmithAgent = this.agents.get('codesmith');\n            if (codesmithAgent) {\n                const codesmithThought = await codesmithAgent.deepThink({\n                    ...request,\n                    prompt: `Given this architectural thinking:\n${thoughts['architecture'] || 'No architecture thoughts available'}\n\nNow think deeply about the implementation for: ${request.prompt}`,\n                    context: workspaceContext\n                });\n                thoughts['implementation'] = codesmithThought.content;\n                console.log('[LAYERED THINKING] CodeSmith thinking complete');\n            }\n\n            // Layer 3: Reviewer validates and enhances the thinking\n            console.log('[LAYERED THINKING] Layer 3: Reviewer analyzing quality...');\n            const reviewerAgent = this.agents.get('reviewer');\n            if (reviewerAgent) {\n                const reviewerThought = await reviewerAgent.deepThink({\n                    ...request,\n                    prompt: `Review this multi-layer thinking process:\n\nArchitecture Thinking:\n${thoughts['architecture'] || 'No architecture thoughts'}\n\nImplementation Thinking:\n${thoughts['implementation'] || 'No implementation thoughts'}\n\nProvide quality assessment and improvements for: ${request.prompt}`,\n                    context: workspaceContext\n                });\n                thoughts['review'] = reviewerThought.content;\n                console.log('[LAYERED THINKING] Reviewer thinking complete');\n            }\n\n            // Synthesize all thoughts into final result\n            const synthesizedContent = `# 🧠➕🧠 Layered AI Thinking Results\n\n## 🏗️ Architecture Layer (GPT)\n${thoughts['architecture'] || 'No architecture analysis available'}\n\n## 💻 Implementation Layer (Claude)\n${thoughts['implementation'] || 'No implementation analysis available'}\n\n## ✅ Review Layer (GPT)\n${thoughts['review'] || 'No review analysis available'}\n\n## 🎯 Synthesized Conclusion\nBased on the layered thinking above, the optimal approach combines architectural clarity with robust implementation and quality assurance. Each layer of thinking has contributed unique insights that together form a comprehensive solution.`;\n\n            return {\n                status: 'success',\n                content: synthesizedContent,\n                metadata: {\n                    thinkingMode: 'layered',\n                    layers: Object.keys(thoughts),\n                    timestamp: new Date().toISOString()\n                }\n            };\n\n        } catch (error) {\n            console.error('[LAYERED THINKING] Error in layered thinking:', error);\n            return {\n                status: 'error',\n                content: `Error in layered thinking: ${(error as any).message}`,\n                metadata: { error: (error as any).message }\n            };\n        }\n    }\n\n    /**\n     * Execute workflow steps\n     */\n    async executeWorkflow(workflow: WorkflowStep[], request: TaskRequest): Promise<TaskResult> {\n        const results: TaskResult[] = [];\n        let finalResult: TaskResult = {\n            status: 'success',\n            content: '',\n            suggestions: [],\n            references: []\n        };\n\n        console.log(`🚀 [WORKFLOW] Starting workflow execution with ${workflow.length} steps`);\n        console.log(`🚀 [WORKFLOW] Workflow steps: ${workflow.map(s => `${s.id}:${s.agent}`).join(' → ')}`);\n        console.log(`🚀 [WORKFLOW] Current agent registry size: ${this.agents.size}`);\n        console.log(`🚀 [WORKFLOW] Current registered agents: [${Array.from(this.agents.keys()).join(', ')}]`);\n\n        for (const step of workflow) {\n            try {\n                console.log(`\\n🔍 [WORKFLOW STEP] ========================================`);\n                console.log(`🔍 [WORKFLOW STEP] Executing: ${step.description}`);\n                console.log(`🔍 [WORKFLOW STEP] Looking for agent: \"${step.agent}\"`);\n                console.log(`🔍 [WORKFLOW STEP] Agent registry has ${this.agents.size} agents`);\n                console.log(`🔍 [WORKFLOW STEP] Available agents: [${Array.from(this.agents.keys()).join(', ')}]`);\n\n                // Send partial response for workflow progress\n                if (request.onPartialResponse) {\n                    const stepIndex = workflow.indexOf(step) + 1;\n                    request.onPartialResponse(`\\n🔄 **Step ${stepIndex}/${workflow.length}**: @${step.agent} - ${step.description}\\n\\n`);\n                }\n\n                let agent = this.agents.get(step.agent);\n                console.log(`🔍 [WORKFLOW STEP] Direct lookup for \"${step.agent}\": ${agent ? 'FOUND' : 'NOT FOUND'}`);\n                \n                // Try alternative agent mappings if direct lookup fails\n                if (!agent) {\n                    const agentMappings: Record<string, string[]> = {\n                        'architect': ['architect', 'ki-autoagent.architect'],\n                        'codesmith': ['codesmith', 'ki-autoagent.codesmith'],  \n                        'tradestrat': ['tradestrat', 'ki-autoagent.tradestrat'],\n                        'research': ['research', 'ki-autoagent.research'],\n                        'richter': ['richter', 'ki-autoagent.richter'],\n                        'orchestrator': ['orchestrator', 'ki-autoagent.orchestrator']\n                    };\n                    \n                    // Try all possible names for this agent\n                    const possibleNames = agentMappings[step.agent];\n                    if (possibleNames) {\n                        for (const possibleName of possibleNames) {\n                            agent = this.agents.get(possibleName);\n                            if (agent) {\n                                console.log(`[DEBUG] Found agent ${step.agent} under name: ${possibleName}`);\n                                break;\n                            }\n                        }\n                    }\n                }\n                \n                if (!agent) {\n                    console.error(`[DEBUG] Agent ${step.agent} not found! Available agents: ${Array.from(this.agents.keys()).join(', ')}`);\n                    \n                    // TEMPORARY FALLBACK: Use orchestrator for missing agents\n                    agent = this.agents.get('orchestrator') || this.agents.get('ki-autoagent.orchestrator');\n                    if (agent) {\n                        console.warn(`[DEBUG] Using orchestrator as fallback for ${step.agent}`);\n                    } else {\n                        const errorMsg = `Agent ${step.agent} not found. Registered agents: [${Array.from(this.agents.keys()).join(', ')}]`;\n                        console.error(`❌ [WORKFLOW STEP] ${errorMsg}`);\n                        throw new Error(errorMsg);\n                    }\n                }\n                \n                console.log(`[DEBUG] Found agent: ${step.agent}, executing step: ${step.description}`);\n                console.log(`[DEBUG] Passing ${results.length} previous results to agent`);\n\n                // Get recent conversation history from context manager\n                const recentHistory = this.contextManager.getFormattedContext(5);\n\n                // Get applicable patterns for this request\n                let applicablePatterns = null;\n                if (this.systemMemory) {\n                    try {\n                        applicablePatterns = await this.systemMemory.getApplicablePatterns(request.prompt);\n                    } catch (error) {\n                        console.log('[DISPATCHER] Could not get applicable patterns:', error);\n                    }\n                }\n\n                // Create enriched request with accumulated context and system knowledge\n                const enrichedRequest = {\n                    ...request,\n                    prompt: request.prompt,\n                    conversationHistory: results.map(r => ({\n                        agent: r.metadata?.agent || 'unknown',\n                        step: r.metadata?.step || 'unknown',\n                        content: r.content\n                    })),\n                    globalContext: recentHistory,\n                    systemKnowledge: this.systemKnowledge, // Add system knowledge\n                    applicablePatterns: applicablePatterns // Add applicable patterns\n                };\n\n                const stepResult = await agent.executeStep(step, enrichedRequest, results);\n                results.push(stepResult);\n                \n                // Save to conversation history\n                this.contextManager.addEntry({\n                    timestamp: new Date().toISOString(),\n                    agent: step.agent,\n                    step: step.id,\n                    input: request.prompt,\n                    output: stepResult.content,\n                    metadata: stepResult.metadata\n                });\n                \n                // Log inter-agent communication\n                console.log(`[INTER-AGENT] ${step.agent} completed step '${step.id}' with ${stepResult.content.length} chars`);\n                console.log(`[INTER-AGENT] Result saved to conversation history`);\n                console.log(`[INTER-AGENT] Result will be passed to next agent in workflow`);\n                \n                // Send partial response for step completion\n                if (request.onPartialResponse) {\n                    const preview = stepResult.content.substring(0, 200);\n                    request.onPartialResponse(`✅ Completed: ${preview}${stepResult.content.length > 200 ? '...' : ''}\\n\\n`);\n                }\n\n                // For single-step workflows (like queries), use the content directly\n                // For multi-step workflows, accumulate results\n                if (workflow.length === 1) {\n                    finalResult.content = stepResult.content;\n                    finalResult.metadata = { ...finalResult.metadata, ...stepResult.metadata, agent: step.agent };\n                } else {\n                    finalResult.content += `## ${step.description}\\n\\n${stepResult.content}\\n\\n`;\n                }\n                finalResult.suggestions?.push(...(stepResult.suggestions || []));\n                finalResult.references?.push(...(stepResult.references || []));\n\n                if (stepResult.status === 'error') {\n                    finalResult.status = 'partial_success';\n                }\n                \n            } catch (error) {\n                const errorMessage = (error as any).message || error;\n                console.error(`❌ Error executing step ${step.id} (${step.agent}): ${errorMessage}`);\n                finalResult.status = 'error';\n                finalResult.content += `❌ Error in ${step.description}: ${errorMessage}\\n\\n`;\n                \n                // Add helpful error message for API issues\n                if (errorMessage.includes('not found')) {\n                    finalResult.content += `**Troubleshooting:**\\n`;\n                    finalResult.content += `- Registered agents: [${Array.from(this.agents.keys()).join(', ')}]\\n`;\n                    finalResult.content += `- Ensure all agents are properly initialized\\n\\n`;\n                } else if (errorMessage.includes('quota') || errorMessage.includes('API')) {\n                    finalResult.content += `**API Configuration Required:**\\n`;\n                    finalResult.content += `1. Open VS Code Settings (Cmd+,)\\n`;\n                    finalResult.content += `2. Search for \"KI AutoAgent\"\\n`;\n                    finalResult.content += `3. Configure your API keys:\\n`;\n                    finalResult.content += `   - OpenAI API Key\\n`;\n                    finalResult.content += `   - Anthropic API Key\\n`;\n                    finalResult.content += `   - Perplexity API Key\\n\\n`;\n                } else if (errorMessage.includes('Claude Web Proxy')) {\n                    finalResult.content += `**Claude Web Proxy Required:**\\n`;\n                    finalResult.content += `The Claude Web Proxy server is not running.\\n`;\n                    finalResult.content += `Please start the proxy server to use Claude models.\\n\\n`;\n                }\n            }\n        }\n\n        return finalResult;\n    }\n\n    /**\n     * Get current workspace context\n     */\n    async getWorkspaceContext(): Promise<WorkspaceContext> {\n        const activeEditor = vscode.window.activeTextEditor;\n        const workspaceRoots = vscode.workspace.workspaceFolders;\n        const openDocuments = vscode.workspace.textDocuments;\n        \n        let selectedText = '';\n        let currentFile = '';\n        \n        if (activeEditor) {\n            currentFile = activeEditor.document.fileName;\n            if (!activeEditor.selection.isEmpty) {\n                selectedText = activeEditor.document.getText(activeEditor.selection);\n            }\n        }\n\n        return {\n            activeEditor,\n            workspaceRoots,\n            openDocuments,\n            selectedText,\n            currentFile\n        };\n    }\n\n    /**\n     * Register an agent\n     */\n    registerAgent(agentId: string, agent: any): void {\n        console.log(`🔧 [DISPATCHER] Registering agent: ${agentId}`);\n        console.log(`🔧 [DISPATCHER] Agent object type: ${typeof agent}`);\n        console.log(`🔧 [DISPATCHER] Agent has executeStep: ${typeof agent.executeStep}`);\n        console.log(`🔧 [DISPATCHER] Agent config: ${JSON.stringify(agent.config || 'NO CONFIG')}`);\n        \n        this.agents.set(agentId, agent);\n        \n        console.log(`🔧 [DISPATCHER] Total registered agents: ${this.agents.size}`);\n        console.log(`🔧 [DISPATCHER] All registered agent IDs: [${Array.from(this.agents.keys()).join(', ')}]`);\n        console.log(`🔧 [DISPATCHER] Agent storage verification - Can retrieve ${agentId}: ${this.agents.has(agentId) ? 'YES' : 'NO'}`);\n        \n        // Test immediate retrieval\n        const testRetrieve = this.agents.get(agentId);\n        console.log(`🔧 [DISPATCHER] Immediate retrieval test for ${agentId}: ${testRetrieve ? 'SUCCESS' : 'FAILED'}`);\n    }\n\n    /**\n     * Get list of registered agent IDs\n     */\n    getRegisteredAgents(): string[] {\n        return Array.from(this.agents.keys());\n    }\n\n    /**\n     * Get agent statistics\n     */\n    async getAgentStats(): Promise<Record<string, any>> {\n        const stats: Record<string, any> = {};\n        \n        for (const [agentId, agent] of this.agents) {\n            if (agent.getStats) {\n                stats[agentId] = await agent.getStats();\n            }\n        }\n        \n        return stats;\n    }\n\n    private matchesPatterns(text: string, patterns: string[]): boolean {\n        return patterns.some(pattern => text.includes(pattern));\n    }\n\n    private initializeProjectTypes(): void {\n        // Trading System\n        this.projectTypes.set('trading_system', {\n            name: 'Trading System',\n            patterns: ['streamlit', 'yfinance', 'pandas', 'trading', 'strategy'],\n            qualityGates: ['engine_parity', 'trading_validation', 'ron_compliance'],\n            workflow: [\n                { id: 'strategy_validation', agent: 'tradestrat', description: 'Validate trading strategy logic' },\n                { id: 'risk_analysis', agent: 'tradestrat', description: 'Analyze risk management' }\n            ],\n            primaryAgent: 'tradestrat'\n        });\n\n        // Web API\n        this.projectTypes.set('web_api', {\n            name: 'Web API',\n            patterns: ['fastapi', 'flask', 'express', 'api'],\n            qualityGates: ['security_review', 'performance_check', 'api_design'],\n            workflow: [\n                { id: 'security_review', agent: 'codesmith', description: 'Security vulnerability check' }, // Using codesmith instead of missing 'reviewer'\n                { id: 'api_documentation', agent: 'codesmith', description: 'Generate API documentation' } // Using codesmith instead of missing 'docu'\n            ],\n            primaryAgent: 'codesmith'\n        });\n\n        // Generic Software\n        this.projectTypes.set('generic_software', {\n            name: 'Generic Software',\n            patterns: [],\n            qualityGates: ['code_quality', 'performance', 'security'],\n            workflow: [],\n            primaryAgent: 'codesmith'\n        });\n    }\n\n    private initializeIntentPatterns(): void {\n        // Define regex patterns for more sophisticated intent detection\n        this.intentPatterns.set('architecture', [\n            /\\b(design|architect|structure|system)\\b/i,\n            /\\b(plan|planning|blueprint)\\b/i\n        ]);\n        \n        this.intentPatterns.set('implementation', [\n            /\\b(implement|code|create|build|develop)\\b/i,\n            /\\b(function|class|method|api)\\b/i\n        ]);\n        \n        // Add more patterns as needed\n    }\n\n    /**\n     * Trigger System Intelligence analysis to build knowledge\n     */\n    public async triggerSystemAnalysis(): Promise<void> {\n        console.log('[DISPATCHER] Triggering System Intelligence analysis...');\n\n        try {\n            // Import SystemIntelligenceWorkflow dynamically to avoid circular dependency\n            const { SystemIntelligenceWorkflow } = await import('../workflows/SystemIntelligenceWorkflow');\n\n            const workflow = new SystemIntelligenceWorkflow(\n                this,\n                {\n                    autoAnalyze: true,\n                    continuousLearning: true,\n                    analysisDepth: 'deep',\n                    patternExtractionThreshold: 0.7,\n                    updateInterval: 300000, // 5 minutes\n                    memoryConfig: {\n                        maxArchitectureVersions: 10,\n                        maxPatternHistory: 100,\n                        similarityThreshold: 0.85,\n                        autoCompaction: true,\n                        persistToDisk: true,\n                        memoryPath: '.kiautoagent/memory'\n                    }\n                }\n            );\n\n            const result = await workflow.initializeSystemUnderstanding();\n            this.systemKnowledge = result.knowledge;\n\n            console.log('[DISPATCHER] System Intelligence analysis complete');\n            console.log(`[DISPATCHER] Knowledge stored: ${Object.keys(this.systemKnowledge.architecture.components).length} components`);\n        } catch (error) {\n            console.error('[DISPATCHER] Error in system analysis:', error);\n        }\n    }\n\n    /**\n     * Get current system knowledge\n     */\n    public getSystemKnowledge(): SystemKnowledge | null {\n        return this.systemKnowledge;\n    }\n}","/**\n * Agent Configuration Types for KI AutoAgent\n * Defines types for per-agent model selection and instruction management\n */\n\nexport interface AgentModelConfig {\n    agentId: string;\n    displayName: string;\n    selectedModel: string;\n    availableModels: string[];\n    instructionFile: string;\n    lastUpdated: string;\n    performanceScore: number;\n}\n\nexport interface InstructionSet {\n    agentId: string;\n    version: string;\n    content: string;\n    lastModified: string;\n    modifiedBy: 'user' | 'self-adaptation' | 'auto-learning';\n    successRate: number;\n    totalExecutions: number;\n    adaptationHistory: InstructionAdaptation[];\n}\n\nexport interface InstructionAdaptation {\n    timestamp: string;\n    trigger: 'success' | 'failure' | 'manual' | 'learning';\n    oldContent: string;\n    newContent: string;\n    reason: string;\n    performanceImpact?: number;\n}\n\nexport interface LearningConfig {\n    enabled: boolean;\n    adaptationThreshold: number; // Success rate required for adaptation\n    maxAdaptationsPerDay: number;\n    confidenceLevel: number; // How confident to be before adapting\n    learningModes: {\n        successBasedLearning: boolean;\n        failureBasedLearning: boolean;\n        patternRecognition: boolean;\n        contextualAdaptation: boolean;\n    };\n}\n\nexport interface PerformanceMetrics {\n    agentId: string;\n    totalExecutions: number;\n    successfulExecutions: number;\n    failedExecutions: number;\n    averageResponseTime: number;\n    lastExecution: string;\n    successPatterns: ActionPattern[];\n    failurePatterns: ActionPattern[];\n    currentStreak: number;\n    bestStreak: number;\n}\n\nexport interface ActionPattern {\n    pattern: string;\n    frequency: number;\n    successRate: number;\n    contexts: string[];\n    lastSeen: string;\n}\n\nexport interface AgentConfigurationSystem {\n    models: Map<string, AgentModelConfig>;\n    instructions: Map<string, InstructionSet>;\n    learning: LearningConfig;\n    metrics: Map<string, PerformanceMetrics>;\n}\n\n// Available Models Configuration\nexport const AVAILABLE_MODELS = {\n    // Claude Models (2025)\n    'claude-opus-4-1-20250805': {\n        name: 'Claude Opus 4.1',\n        provider: 'anthropic',\n        tier: 'supreme',\n        strengths: ['reasoning', 'conflict-resolution', 'judgment'],\n        costPerMillion: { input: 15, output: 75 }\n    },\n    'claude-sonnet-4-20250514': {\n        name: 'Claude Sonnet 4',\n        provider: 'anthropic', \n        tier: 'premium',\n        strengths: ['coding', 'analysis', 'implementation'],\n        costPerMillion: { input: 3, output: 15 }\n    },\n    'claude-3-7-sonnet-20250219': {\n        name: 'Claude 3.7 Sonnet',\n        provider: 'anthropic',\n        tier: 'standard', \n        strengths: ['thinking', 'extended-reasoning'],\n        costPerMillion: { input: 3, output: 15 }\n    },\n    \n    // OpenAI Models (2024)\n    'gpt-4o-2024-11-20': {\n        name: 'GPT-4o (Latest)',\n        provider: 'openai',\n        tier: 'premium',\n        strengths: ['multimodal', 'architecture', 'planning'],\n        costPerMillion: { input: 2.5, output: 10 }\n    },\n    'gpt-4o-mini-2024-07-18': {\n        name: 'GPT-4o Mini',\n        provider: 'openai', \n        tier: 'efficient',\n        strengths: ['fast-responses', 'cost-effective', 'review'],\n        costPerMillion: { input: 0.15, output: 0.6 }\n    },\n    \n    // Perplexity Models\n    'llama-3.1-sonar-small-128k-online': {\n        name: 'Llama 3.1 Sonar (Online)',\n        provider: 'perplexity',\n        tier: 'research',\n        strengths: ['web-search', 'real-time-data', 'research'],\n        costPerMillion: { input: 0.2, output: 0.2 }\n    }\n} as const;\n\n// Default Agent-Model Mappings\nexport const DEFAULT_AGENT_MODELS = {\n    'orchestrator': 'claude-sonnet-4-20250514',\n    'richter': 'claude-opus-4-1-20250805', // Supreme Judge needs Opus\n    'architect': 'gpt-4o-2024-11-20', // Architecture planning\n    'codesmith': 'claude-sonnet-4-20250514', // Best for coding\n    'tradestrat': 'claude-sonnet-4-20250514', // Trading analysis\n    'research': 'llama-3.1-sonar-small-128k-online' // Web research\n} as const;","import * as vscode from 'vscode';\nimport { ChatAgent } from './base/ChatAgent';\nimport { AgentConfig, TaskRequest, TaskResult, WorkflowStep } from '../types';\nimport { VSCodeMasterDispatcher } from '../core/VSCodeMasterDispatcher';\nimport { AnthropicService } from '../utils/AnthropicService';\nimport { getClaudeCodeService, ClaudeCodeService } from '../services/ClaudeCodeService';\n\nexport class OpusArbitratorAgent extends ChatAgent {\n    private anthropicService: AnthropicService;\n    private claudeCodeService: ClaudeCodeService;\n\n    constructor(context: vscode.ExtensionContext, dispatcher: VSCodeMasterDispatcher) {\n        const config: AgentConfig = {\n            participantId: 'ki-autoagent.richter',\n            name: 'richter',\n            fullName: 'OpusArbitrator',\n            description: '⚖️ Supreme Quality Judge powered by Claude Opus 4.1 - Final arbitrator for agent conflicts with superior reasoning capabilities',\n            model: 'claude-4.1-opus-20250915',\n            iconPath: vscode.Uri.joinPath(context.extensionUri, 'media', 'claude-icon.svg'),\n            capabilities: [\n                'Agent Conflict Resolution',\n                'Supreme Decision Making', \n                'Complex Reasoning & Analysis',\n                'Multi-Agent Coordination',\n                'Final Authority on Technical Disputes'\n            ],\n            commands: [\n                { name: 'judge', description: 'Make supreme judgment on any matter', handler: 'handleJudgeCommand' },\n                { name: 'evaluate', description: 'Deep technical evaluation of options', handler: 'handleEvaluateCommand' },\n                { name: 'resolve', description: 'Resolve conflicts between agents', handler: 'handleResolveCommand' },\n                { name: 'verdict', description: 'Final binding verdict on decisions', handler: 'handleVerdictCommand' }\n            ]\n        };\n        super(config, context, dispatcher);\n        this.anthropicService = new AnthropicService();\n        this.claudeCodeService = getClaudeCodeService();\n    }\n\n    protected async handleRequest(\n        request: vscode.ChatRequest,\n        context: vscode.ChatContext,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        const validationResult = await this.validateServiceConfig(stream);\n        if (!validationResult) {\n            return;\n        }\n\n        const command = request.command;\n        const prompt = request.prompt;\n\n        this.log(`Processing ${command ? `/${command}` : 'general'} arbitration request: ${prompt.substring(0, 100)}...`);\n\n        if (command) {\n            await this.handleCommand(command, prompt, stream, token);\n        } else {\n            await this.handleGeneralArbitrationRequest(prompt, stream, token);\n        }\n    }\n\n    protected async processWorkflowStep(\n        step: WorkflowStep,\n        request: TaskRequest,\n        previousResults: TaskResult[]\n    ): Promise<TaskResult> {\n        \n        const context = await this.getWorkspaceContext();\n        \n        let systemPrompt = '';\n        let userPrompt = '';\n\n        switch (step.id) {\n            case 'conflict_analysis':\n                systemPrompt = this.getConflictResolutionPrompt();\n                userPrompt = `Analyze this agent conflict: ${request.prompt}\\n\\nContext:\\n${context}`;\n                break;\n                \n            case 'technical_evaluation':\n                systemPrompt = this.getDeepEvaluationPrompt();\n                userPrompt = `Evaluate technical options: ${request.prompt}\\n\\nPrevious Analysis:\\n${this.extractPreviousContent(previousResults)}`;\n                break;\n                \n            case 'final_judgment':\n                systemPrompt = this.getFinalVerdictPrompt();\n                userPrompt = `Deliver final judgment: ${request.prompt}\\n\\nContext:\\n${context}`;\n                break;\n                \n            default:\n                systemPrompt = this.getSupremeJudgmentPrompt();\n                userPrompt = `${request.prompt}\\n\\nContext:\\n${context}`;\n        }\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            return {\n                status: 'success',\n                content: response,\n                metadata: { \n                    step: step.id,\n                    agent: 'richter',\n                    model: 'claude-opus-4-1-20250805'\n                }\n            };\n\n        } catch (error) {\n            throw new Error(`Failed to process ${step.id}: ${(error as any).message}`);\n        }\n    }\n\n    // Command Handlers\n\n    private async handleJudgeCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        stream.progress('👑 OpusArbitrator applying supreme judgment...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getSupremeJudgmentPrompt();\n        const userPrompt = `Apply supreme judgment: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown('## 👑 SUPREME JUDGMENT\\n\\n');\n            stream.markdown(response);\n            stream.markdown('\\n\\n**⚖️ Judgment rendered by OpusArbitrator - Claude Opus 4.1**');\n\n        } catch (error) {\n            stream.markdown(`❌ **Judgment Error:** ${(error as any).message}`);\n        }\n    }\n\n    private async handleResolveCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        stream.progress('⚖️ OpusArbitrator analyzing conflict...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getConflictResolutionPrompt();\n        const userPrompt = `Resolve this agent conflict: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown('## ⚖️ SUPREME ARBITRATION DECISION\\n\\n');\n            stream.markdown(response);\n            stream.markdown('\\n\\n**🏛️ This decision is final and binding for all agents.**');\n\n        } catch (error) {\n            stream.markdown(`❌ **Arbitration Error:** ${(error as any).message}`);\n        }\n    }\n\n    private async handleEvaluateCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        stream.progress('🔍 OpusArbitrator performing deep evaluation...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getDeepEvaluationPrompt();\n        const userPrompt = `Perform deep technical evaluation: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown('## 🔍 DEEP TECHNICAL EVALUATION\\n\\n');\n            stream.markdown(response);\n            stream.markdown('\\n\\n**📊 Analysis conducted by OpusArbitrator with Claude Opus 4.1**');\n\n        } catch (error) {\n            stream.markdown(`❌ **Evaluation Error:** ${(error as any).message}`);\n        }\n    }\n\n    private async handleVerdictCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        stream.progress('⚡ OpusArbitrator delivering final verdict...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getFinalVerdictPrompt();\n        const userPrompt = `Deliver final verdict on: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown('## ⚡ FINAL VERDICT\\n\\n');\n            stream.markdown(response);\n            stream.markdown('\\n\\n**🏛️ VERDICT IS FINAL - All agents must comply**');\n\n        } catch (error) {\n            stream.markdown(`❌ **Verdict Error:** ${(error as any).message}`);\n        }\n    }\n\n    private async handleGeneralArbitrationRequest(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        stream.progress('👑 OpusArbitrator applying supreme judgment...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getSupremeJudgmentPrompt();\n        const userPrompt = `${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown('## 👑 SUPREME JUDGMENT\\n\\n');\n            stream.markdown(response);\n            stream.markdown('\\n\\n**⚖️ Judgment rendered by OpusArbitrator - Claude Opus 4.1**');\n\n        } catch (error) {\n            stream.markdown(`❌ **Judgment Error:** ${(error as any).message}`);\n        }\n    }\n\n    // Service Methods\n\n    private async validateServiceConfig(stream: vscode.ChatResponseStream): Promise<boolean> {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent');\n        const serviceMode = config.get<string>('claude.serviceMode', 'claude-code');\n        \n        if (serviceMode === 'api') {\n            const apiKey = config.get<string>('anthropic.apiKey');\n            if (!apiKey) {\n                stream.markdown('❌ **Configuration Error**: Anthropic API key is required for Claude Opus 4.1\\n\\n');\n                stream.markdown('Please configure your API key in VS Code Settings:\\n');\n                stream.markdown('1. Open Settings (Ctrl+,)\\n');\n                stream.markdown('2. Search for \"KI AutoAgent\"\\n');\n                stream.markdown('3. Set your Anthropic API key\\n');\n                return false;\n            }\n        } else if (serviceMode === 'claude-code') {\n            const isClaudeCodeAvailable = await this.claudeCodeService.isAvailable();\n            if (!isClaudeCodeAvailable) {\n                stream.markdown(`❌ **Claude Code CLI not available for Opus 4.1**\\n\\n**To install:**\\n\\`\\`\\`bash\\nnpm install -g @anthropic-ai/claude-code\\n\\`\\`\\`\\n\\nOr configure your Anthropic API key in VS Code settings.`);\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    private async getClaudeService(): Promise<{ chat: (messages: any[]) => Promise<string> }> {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent');\n        const serviceMode = config.get<string>('claude.serviceMode', 'claude-code');\n        \n        console.log(`[OpusArbitrator] Using service mode: ${serviceMode}`);\n\n        if (serviceMode === 'claude-code') {\n            const isAvailable = await this.claudeCodeService.isAvailable();\n            if (isAvailable) {\n                console.log('[OpusArbitrator] Using Claude Code CLI with Opus model');\n                return {\n                    chat: async (messages: any[]) => {\n                        // Extract the main user message content\n                        const userMessage = messages.find(m => m.role === 'user')?.content || '';\n                        const systemMessage = messages.find(m => m.role === 'system')?.content || '';\n                        const fullPrompt = systemMessage ? `${systemMessage}\\n\\n${userMessage}` : userMessage;\n                        \n                        const response = await this.claudeCodeService.sendMessage(fullPrompt, {\n                            model: 'opus', // Use Opus model for this agent\n                            temperature: 0.5  // Lower temperature for more consistent judgments\n                        });\n                        return response.content;\n                    }\n                };\n            } else {\n                console.log('[OpusArbitrator] Claude Code CLI not available, falling back to Anthropic API');\n            }\n        }\n        \n        // Fall back to Anthropic API\n        console.log('[OpusArbitrator] Using Anthropic API with Opus 4.1');\n        return {\n            chat: async (messages: any[]) => {\n                return await this.anthropicService.chat(messages);\n            }\n        };\n    }\n\n    // Helper Methods\n\n    private extractPreviousContent(previousResults: TaskResult[]): string {\n        return previousResults\n            .map(result => result.content)\n            .join('\\n\\n---\\n\\n');\n    }\n\n    // System Prompts\n\n    private getConflictResolutionPrompt(): string {\n        return `You are OpusArbitrator, the Supreme Judge of the KI AutoAgent system powered by Claude Opus 4.1.\n\nYour role is to resolve conflicts between AI agents with final, binding decisions.\n\nCAPABILITIES:\n- Superior reasoning and analysis\n- Objective evaluation of competing solutions  \n- Contextual understanding of technical trade-offs\n- Authority to make final decisions\n\nDECISION FORMAT:\n1. **Conflict Analysis**: Summarize the disagreement\n2. **Position Evaluation**: Analyze each agent's perspective objectively  \n3. **Technical Assessment**: Evaluate technical merits and trade-offs\n4. **Final Decision**: Choose the optimal approach with confidence score\n5. **Implementation Guidance**: Specific next steps\n6. **Binding Authority**: State that decision is final\n\nYour decisions carry supreme authority. All agents must comply.\n\n${this.getSystemContextPrompt()}`;\n    }\n\n    private getDeepEvaluationPrompt(): string {\n        return `You are OpusArbitrator, powered by Claude Opus 4.1 - the supreme technical evaluator.\n\nEVALUATION CRITERIA:\n- Technical soundness and feasibility\n- Long-term maintainability \n- Performance implications\n- Risk assessment\n- Alternative approaches\n- Best practices alignment\n\nEVALUATION FORMAT:\n1. **Technical Analysis**: Deep dive into technical aspects\n2. **Pros & Cons**: Balanced evaluation\n3. **Risk Assessment**: Potential issues and mitigations\n4. **Recommendations**: Specific actionable advice\n5. **Confidence Score**: Rate certainty of recommendation (1-100%)\n\nProvide thorough, objective analysis leveraging superior reasoning capabilities.\n\n${this.getSystemContextPrompt()}`;\n    }\n\n    private getFinalVerdictPrompt(): string {\n        return `You are OpusArbitrator - the final authority powered by Claude Opus 4.1.\n\nVERDICT REQUIREMENTS:\n- Clear, definitive decision\n- No ambiguity or hedging\n- Based on comprehensive analysis\n- Considers all stakeholders\n- Actionable outcome\n\nVERDICT FORMAT:\n1. **Final Decision**: Clear statement of verdict\n2. **Key Reasoning**: Primary factors in decision\n3. **Implementation**: Immediate next steps required\n4. **Compliance**: How all parties must proceed\n\nYour verdict is FINAL and BINDING. No appeals or further discussion.\n\n${this.getSystemContextPrompt()}`;\n    }\n\n    private getSupremeJudgmentPrompt(): string {\n        return `You are OpusArbitrator, the Supreme Judge powered by Claude Opus 4.1.\n\nAs the highest authority in the KI AutoAgent system, you provide:\n- Ultimate decision-making power\n- Superior reasoning capabilities\n- Objective, unbiased analysis\n- Final resolution of all disputes\n\nJUDGMENT PRINCIPLES:\n- Logical, evidence-based decisions\n- Consider technical merit above all\n- Balance competing interests fairly\n- Provide clear, actionable guidance\n- Maintain system integrity\n\nApply your superior reasoning to deliver judgment that serves the greater good of the project.\n\n${this.getSystemContextPrompt()}`;\n    }\n\n    protected getSlashCommands(): Array<{ command: string; description: string }> {\n        return [\n            { command: 'judge', description: 'Make supreme judgment on any matter' },\n            { command: 'evaluate', description: 'Deep technical evaluation of options' },\n            { command: 'resolve', description: 'Resolve conflicts between agents' },\n            { command: 'verdict', description: 'Final binding verdict on decisions' }\n        ];\n    }\n}","/**\n * System Memory Store - Specialized memory management for system understanding\n * Manages architecture knowledge, function inventories, and learned patterns\n * with version tracking and intelligent retrieval.\n */\n\nimport {\n    SystemKnowledge,\n    ArchitectureModel,\n    FunctionInventory,\n    LearningRepository,\n    SystemMetadata,\n    Component,\n    FunctionSignature,\n    SuccessPattern,\n    FailurePattern,\n    UserPreference,\n    CodePattern,\n    WorkflowPattern,\n    ArchitecturePattern,\n    SystemAnalysisResult,\n    CodeHotspot,\n    OptimizationPattern\n} from '../types/SystemKnowledge';\nimport { MemoryEntry, MemoryType, MemorySearchResult } from '../types/Memory';\nimport { MemoryManager } from '../core/MemoryManager';\n\n/**\n * Configuration for system memory\n */\nexport interface SystemMemoryConfig {\n    maxArchitectureVersions: number;\n    maxPatternHistory: number;\n    similarityThreshold: number;\n    autoCompaction: boolean;\n    persistToDisk: boolean;\n    memoryPath?: string;\n}\n\n/**\n * Specialized memory store for system understanding\n */\nexport class SystemMemoryStore {\n    private memoryManager: MemoryManager;\n    private systemKnowledge: SystemKnowledge | null = null;\n    private architectureHistory: Map<string, ArchitectureModel> = new Map();\n    private functionHistory: Map<string, FunctionInventory> = new Map();\n    private patternCache: Map<string, any> = new Map();\n    private config: SystemMemoryConfig;\n    private lastAnalysis: Date | null = null;\n    private isDirty: boolean = false;\n\n    constructor(config: SystemMemoryConfig) {\n        this.config = config;\n        this.memoryManager = new MemoryManager({\n            maxMemories: 10000,\n            similarityThreshold: config.similarityThreshold,\n            patternExtractionEnabled: true\n        });\n\n        if (config.persistToDisk && config.memoryPath) {\n            this.loadFromDisk(config.memoryPath);\n        }\n    }\n\n    /**\n     * Store complete system knowledge\n     */\n    public async storeSystemKnowledge(knowledge: SystemKnowledge): Promise<void> {\n        // Version the architecture\n        const version = this.generateVersion();\n        knowledge.architecture.version = version;\n        knowledge.metadata.lastUpdate = new Date();\n\n        // Store in history\n        this.architectureHistory.set(version, knowledge.architecture);\n        this.functionHistory.set(version, knowledge.functions);\n\n        // Update current knowledge\n        this.systemKnowledge = knowledge;\n        this.lastAnalysis = new Date();\n        this.isDirty = true;\n\n        // Store in memory manager for semantic search\n        await this.memoryManager.store(\n            'system',\n            {\n                type: 'system_knowledge',\n                knowledge,\n                version,\n                timestamp: new Date()\n            },\n            MemoryType.SEMANTIC,\n            { importance: 1.0 }\n        );\n\n        // Extract and store patterns\n        await this.extractAndStorePatterns(knowledge);\n\n        // Auto-compact if needed\n        if (this.config.autoCompaction) {\n            await this.compactHistory();\n        }\n\n        // Persist if configured\n        if (this.config.persistToDisk && this.config.memoryPath) {\n            await this.saveToDisk(this.config.memoryPath);\n        }\n    }\n\n    /**\n     * Retrieve current system knowledge\n     */\n    public getSystemKnowledge(): SystemKnowledge | null {\n        return this.systemKnowledge;\n    }\n\n    /**\n     * Update architecture model only\n     */\n    public async updateArchitecture(architecture: ArchitectureModel): Promise<void> {\n        if (!this.systemKnowledge) {\n            throw new Error('No system knowledge exists. Perform initial analysis first.');\n        }\n\n        const version = this.generateVersion();\n        architecture.version = version;\n        architecture.lastAnalysis = new Date();\n\n        this.architectureHistory.set(version, architecture);\n        this.systemKnowledge.architecture = architecture;\n        this.isDirty = true;\n\n        await this.memoryManager.store(\n            'system',\n            {\n                type: 'architecture_update',\n                architecture,\n                version,\n                timestamp: new Date()\n            },\n            MemoryType.EPISODIC,\n            { importance: 0.8 }\n        );\n    }\n\n    /**\n     * Update function inventory only\n     */\n    public async updateFunctionInventory(inventory: FunctionInventory): Promise<void> {\n        if (!this.systemKnowledge) {\n            throw new Error('No system knowledge exists. Perform initial analysis first.');\n        }\n\n        const version = this.generateVersion();\n        this.functionHistory.set(version, inventory);\n        this.systemKnowledge.functions = inventory;\n        this.isDirty = true;\n\n        await this.memoryManager.store(\n            'system',\n            {\n                type: 'function_update',\n                inventory,\n                version,\n                timestamp: new Date()\n            },\n            MemoryType.EPISODIC,\n            { importance: 0.7 }\n        );\n    }\n\n    /**\n     * Add a success pattern\n     */\n    public async addSuccessPattern(pattern: SuccessPattern): Promise<void> {\n        if (!this.systemKnowledge) {\n            throw new Error('No system knowledge exists.');\n        }\n\n        // Check for similar patterns\n        const similar = await this.findSimilarPattern(pattern.description);\n        if (similar && similar.similarity > 0.9) {\n            // Update existing pattern\n            const existing = this.systemKnowledge.learnings.successPatterns.find(\n                p => p.id === similar.pattern.id\n            );\n            if (existing) {\n                existing.occurrences++;\n                existing.lastUsed = new Date();\n                existing.successRate =\n                    (existing.successRate * (existing.occurrences - 1) + 1) / existing.occurrences;\n            }\n        } else {\n            // Add new pattern\n            this.systemKnowledge.learnings.successPatterns.push(pattern);\n        }\n\n        await this.memoryManager.store(\n            'system',\n            {\n                type: 'success_pattern',\n                pattern,\n                timestamp: new Date()\n            },\n            MemoryType.PROCEDURAL,\n            { importance: 0.9 }\n        );\n\n        this.isDirty = true;\n    }\n\n    /**\n     * Add a failure pattern to avoid\n     */\n    public async addFailurePattern(pattern: FailurePattern): Promise<void> {\n        if (!this.systemKnowledge) {\n            throw new Error('No system knowledge exists.');\n        }\n\n        // Check for similar failures\n        const similar = await this.findSimilarPattern(pattern.description);\n        if (similar && similar.similarity > 0.85) {\n            // Update existing pattern\n            const existing = this.systemKnowledge.learnings.failurePatterns.find(\n                p => p.id === similar.pattern.id\n            );\n            if (existing) {\n                existing.occurrences++;\n                existing.lastSeen = new Date();\n                if (pattern.severity === 'high' || pattern.severity === 'medium') {\n                    existing.severity = pattern.severity;\n                }\n            }\n        } else {\n            // Add new pattern\n            this.systemKnowledge.learnings.failurePatterns.push(pattern);\n        }\n\n        await this.memoryManager.store(\n            'system',\n            {\n                type: 'failure_pattern',\n                pattern,\n                timestamp: new Date()\n            },\n            MemoryType.PROCEDURAL,\n            { importance: 0.95 } // Higher importance for failures\n        );\n\n        this.isDirty = true;\n    }\n\n    /**\n     * Track user preference\n     */\n    public async trackUserPreference(preference: UserPreference): Promise<void> {\n        if (!this.systemKnowledge) {\n            throw new Error('No system knowledge exists.');\n        }\n\n        const existing = this.systemKnowledge.learnings.userPreferences.find(\n            p => p.category === preference.category && p.preference === preference.preference\n        );\n\n        if (existing) {\n            existing.frequency++;\n            existing.lastObserved = new Date();\n            existing.confidence = Math.min(1.0, existing.confidence + 0.05);\n        } else {\n            this.systemKnowledge.learnings.userPreferences.push(preference);\n        }\n\n        await this.memoryManager.store(\n            'system',\n            {\n                type: 'user_preference',\n                preference,\n                timestamp: new Date()\n            },\n            MemoryType.SEMANTIC,\n            { importance: 0.6 }\n        );\n\n        this.isDirty = true;\n    }\n\n    /**\n     * Find component by ID or name\n     */\n    public findComponent(identifier: string): Component | undefined {\n        if (!this.systemKnowledge) return undefined;\n\n        const byId = this.systemKnowledge.architecture.components[identifier];\n        if (byId) return byId;\n\n        return Object.values(this.systemKnowledge.architecture.components)\n            .find(c => c.name === identifier);\n    }\n\n    /**\n     * Find function by signature or name\n     */\n    public findFunction(identifier: string): FunctionSignature | undefined {\n        if (!this.systemKnowledge) return undefined;\n\n        // Search all modules\n        for (const functions of Object.values(this.systemKnowledge.functions.byModule)) {\n            const found = functions.find(f =>\n                f.id === identifier ||\n                f.name === identifier ||\n                f.signature === identifier\n            );\n            if (found) return found;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Get components with high complexity\n     */\n    public getComplexComponents(threshold: number = 10): Component[] {\n        if (!this.systemKnowledge) return [];\n\n        return Object.values(this.systemKnowledge.architecture.components)\n            .filter(c => c.complexity.overall === 'complex' || c.complexity.overall === 'critical')\n            .sort((a, b) => b.complexity.cyclomatic - a.complexity.cyclomatic);\n    }\n\n    /**\n     * Get code hotspots\n     */\n    public getHotspots(severity?: 'low' | 'medium' | 'high' | 'critical'): CodeHotspot[] {\n        if (!this.systemKnowledge) return [];\n\n        let hotspots = this.systemKnowledge.functions.hotspots;\n\n        if (severity) {\n            hotspots = hotspots.filter(h => h.severity === severity);\n        }\n\n        return hotspots.sort((a, b) => {\n            const severityOrder = { critical: 4, high: 3, medium: 2, low: 1 };\n            return severityOrder[b.severity] - severityOrder[a.severity];\n        });\n    }\n\n    /**\n     * Find similar pattern\n     */\n    public async findSimilarPattern(description: string): Promise<{\n        pattern: any;\n        similarity: number;\n    } | null> {\n        const results = await this.memoryManager.search(\n            description,\n            {\n                k: 1,\n                type: MemoryType.PROCEDURAL\n            }\n        );\n\n        if (results.length > 0 && results[0].similarity > this.config.similarityThreshold) {\n            return {\n                pattern: results[0].entry.content,\n                similarity: results[0].similarity\n            };\n        }\n\n        return null;\n    }\n\n    /**\n     * Get applicable patterns for a context\n     */\n    public async getApplicablePatterns(context: string): Promise<{\n        success: SuccessPattern[];\n        failures: FailurePattern[];\n        code: CodePattern[];\n        optimizations: OptimizationPattern[];\n    }> {\n        if (!this.systemKnowledge) {\n            return { success: [], failures: [], code: [], optimizations: [] };\n        }\n\n        // Search for relevant patterns\n        const results = await this.memoryManager.search(\n            context,\n            {\n                k: 10,\n                type: MemoryType.PROCEDURAL\n            }\n        );\n\n        const applicable = {\n            success: [] as SuccessPattern[],\n            failures: [] as FailurePattern[],\n            code: [] as CodePattern[],\n            optimizations: [] as OptimizationPattern[]\n        };\n\n        for (const result of results) {\n            if (result.similarity < this.config.similarityThreshold) continue;\n\n            const content = result.entry.content;\n            if (content.type === 'success_pattern') {\n                applicable.success.push(content.pattern);\n            } else if (content.type === 'failure_pattern') {\n                applicable.failures.push(content.pattern);\n            } else if (content.type === 'code_pattern') {\n                applicable.code.push(content.pattern);\n            } else if (content.type === 'optimization_pattern') {\n                applicable.optimizations.push(content.pattern);\n            }\n        }\n\n        return applicable;\n    }\n\n    /**\n     * Get user preferences for a category\n     */\n    public getUserPreferences(category?: string): UserPreference[] {\n        if (!this.systemKnowledge) return [];\n\n        let preferences = this.systemKnowledge.learnings.userPreferences;\n\n        if (category) {\n            preferences = preferences.filter(p => p.category === category);\n        }\n\n        return preferences\n            .filter(p => p.confidence > 0.5) // Only return confident preferences\n            .sort((a, b) => b.confidence - a.confidence);\n    }\n\n    /**\n     * Get architecture evolution\n     */\n    public getArchitectureEvolution(limit: number = 10): ArchitectureModel[] {\n        const versions = Array.from(this.architectureHistory.entries())\n            .sort((a, b) => b[0].localeCompare(a[0]))\n            .slice(0, limit);\n\n        return versions.map(([_, arch]) => arch);\n    }\n\n    /**\n     * Calculate architecture diff\n     */\n    public calculateArchitectureDiff(fromVersion?: string): {\n        added: Component[];\n        modified: Component[];\n        removed: string[];\n    } {\n        if (!this.systemKnowledge) {\n            return { added: [], modified: [], removed: [] };\n        }\n\n        const currentComponents = this.systemKnowledge.architecture.components;\n\n        if (!fromVersion || !this.architectureHistory.has(fromVersion)) {\n            // No comparison version, return all as added\n            return {\n                added: Object.values(currentComponents),\n                modified: [],\n                removed: []\n            };\n        }\n\n        const oldArchitecture = this.architectureHistory.get(fromVersion)!;\n        const oldComponents = oldArchitecture.components;\n\n        const added: Component[] = [];\n        const modified: Component[] = [];\n        const removed: string[] = [];\n\n        // Find added and modified\n        for (const [id, component] of Object.entries(currentComponents)) {\n            if (!oldComponents[id]) {\n                added.push(component);\n            } else if (component.lastModified > oldComponents[id].lastModified) {\n                modified.push(component);\n            }\n        }\n\n        // Find removed\n        for (const id of Object.keys(oldComponents)) {\n            if (!currentComponents[id]) {\n                removed.push(id);\n            }\n        }\n\n        return { added, modified, removed };\n    }\n\n    /**\n     * Predict next likely changes\n     */\n    public async predictNextChanges(): Promise<{\n        components: string[];\n        reason: string;\n        confidence: number;\n    }[]> {\n        if (!this.systemKnowledge) return [];\n\n        const predictions: any[] = [];\n\n        // Analyze modification frequency\n        const frequentlyModified = Object.values(this.systemKnowledge.architecture.components)\n            .filter(c => c.complexity.overall === 'complex' || c.complexity.overall === 'critical')\n            .sort((a, b) => b.dependencies.length - a.dependencies.length)\n            .slice(0, 5);\n\n        for (const component of frequentlyModified) {\n            predictions.push({\n                components: [component.id],\n                reason: `High complexity (${component.complexity.overall}) with ${component.dependencies.length} dependencies`,\n                confidence: 0.7\n            });\n        }\n\n        // Check for patterns in recent changes\n        const recentPatterns = this.systemKnowledge.learnings.successPatterns\n            .filter(p => p.lastUsed && (new Date().getTime() - p.lastUsed.getTime()) < 7 * 24 * 60 * 60 * 1000)\n            .slice(0, 3);\n\n        for (const pattern of recentPatterns) {\n            predictions.push({\n                components: pattern.applicableScenarios,\n                reason: `Based on pattern: ${pattern.name}`,\n                confidence: pattern.successRate\n            });\n        }\n\n        return predictions;\n    }\n\n    /**\n     * Extract and store patterns from knowledge\n     */\n    private async extractAndStorePatterns(knowledge: SystemKnowledge): Promise<void> {\n        // Extract architecture patterns\n        for (const pattern of knowledge.architecture.patterns) {\n            await this.memoryManager.store(\n                'system',\n                {\n                    type: 'architecture_pattern',\n                    pattern,\n                    timestamp: new Date()\n                },\n                MemoryType.PROCEDURAL,\n                { importance: 0.8 }\n            );\n        }\n\n        // Extract frequently used functions as patterns\n        const frequentFunctions = Object.values(knowledge.functions.byModule)\n            .flat()\n            .filter(f => f.modificationFrequency > 5)\n            .slice(0, 20);\n\n        for (const func of frequentFunctions) {\n            await this.memoryManager.store(\n                'system',\n                {\n                    type: 'frequent_function',\n                    function: func,\n                    timestamp: new Date()\n                },\n                MemoryType.SEMANTIC,\n                { importance: 0.6 }\n            );\n        }\n    }\n\n    /**\n     * Compact history to save memory\n     */\n    private async compactHistory(): Promise<void> {\n        // Keep only the last N versions\n        if (this.architectureHistory.size > this.config.maxArchitectureVersions) {\n            const versions = Array.from(this.architectureHistory.keys())\n                .sort()\n                .slice(0, -this.config.maxArchitectureVersions);\n\n            for (const version of versions) {\n                this.architectureHistory.delete(version);\n                this.functionHistory.delete(version);\n            }\n        }\n\n        // Clean up old patterns\n        if (this.systemKnowledge) {\n            // Remove low-confidence patterns\n            this.systemKnowledge.learnings.successPatterns =\n                this.systemKnowledge.learnings.successPatterns\n                    .filter(p => p.successRate > 0.3);\n\n            // Remove old failure patterns\n            const cutoff = new Date();\n            cutoff.setDate(cutoff.getDate() - 30);\n            this.systemKnowledge.learnings.failurePatterns =\n                this.systemKnowledge.learnings.failurePatterns\n                    .filter(p => p.lastSeen > cutoff);\n        }\n    }\n\n    /**\n     * Generate version string\n     */\n    private generateVersion(): string {\n        const now = new Date();\n        return `${now.getFullYear()}${(now.getMonth() + 1).toString().padStart(2, '0')}${now.getDate().toString().padStart(2, '0')}_${now.getHours().toString().padStart(2, '0')}${now.getMinutes().toString().padStart(2, '0')}${now.getSeconds().toString().padStart(2, '0')}`;\n    }\n\n    /**\n     * Load from disk\n     */\n    private async loadFromDisk(path: string): Promise<void> {\n        try {\n            const fs = await import('fs/promises');\n            const data = await fs.readFile(path, 'utf-8');\n            const parsed = JSON.parse(data);\n\n            this.systemKnowledge = parsed.systemKnowledge;\n            this.architectureHistory = new Map(parsed.architectureHistory);\n            this.functionHistory = new Map(parsed.functionHistory);\n            this.lastAnalysis = parsed.lastAnalysis ? new Date(parsed.lastAnalysis) : null;\n\n            this.isDirty = false;\n        } catch (error) {\n            console.log('No existing memory found, starting fresh');\n        }\n    }\n\n    /**\n     * Save to disk\n     */\n    private async saveToDisk(path: string): Promise<void> {\n        if (!this.isDirty) return;\n\n        try {\n            const fs = await import('fs/promises');\n            const data = {\n                systemKnowledge: this.systemKnowledge,\n                architectureHistory: Array.from(this.architectureHistory.entries()),\n                functionHistory: Array.from(this.functionHistory.entries()),\n                lastAnalysis: this.lastAnalysis\n            };\n\n            await fs.writeFile(path, JSON.stringify(data, null, 2));\n            this.isDirty = false;\n        } catch (error) {\n            console.error('Failed to save memory to disk:', error);\n        }\n    }\n\n    /**\n     * Get memory statistics\n     */\n    public getStatistics(): {\n        totalComponents: number;\n        totalFunctions: number;\n        totalPatterns: number;\n        architectureVersions: number;\n        memoryUsage: number;\n        lastAnalysis: Date | null;\n    } {\n        return {\n            totalComponents: this.systemKnowledge ?\n                Object.keys(this.systemKnowledge.architecture.components).length : 0,\n            totalFunctions: this.systemKnowledge ?\n                Object.values(this.systemKnowledge.functions.byModule).flat().length : 0,\n            totalPatterns: this.systemKnowledge ?\n                this.systemKnowledge.learnings.successPatterns.length +\n                this.systemKnowledge.learnings.failurePatterns.length : 0,\n            architectureVersions: this.architectureHistory.size,\n            memoryUsage: process.memoryUsage().heapUsed,\n            lastAnalysis: this.lastAnalysis\n        };\n    }\n}","/**\n * KI AutoAgent VS Code Extension\n * Main extension entry point that registers all chat participants\n */\nimport * as vscode from 'vscode';\nimport { VSCodeMasterDispatcher } from './core/VSCodeMasterDispatcher';\nimport { getClaudeCodeService } from './services/ClaudeCodeService';\nimport { AgentConfigurationManager } from './core/AgentConfigurationManager';\nimport { ArchitectAgent } from './agents/ArchitectAgent';\nimport { OrchestratorAgent } from './agents/OrchestratorAgent';\nimport { CodeSmithAgent } from './agents/CodeSmithAgent';\nimport { TradeStratAgent } from './agents/TradeStratAgent';\nimport { ResearchAgent } from './agents/ResearchAgent';\nimport { OpusArbitratorAgent } from './agents/OpusArbitratorAgent';\nimport { DocuBotAgent } from './agents/DocuBotAgent';\nimport { ReviewerGPTAgent } from './agents/ReviewerGPTAgent';\nimport { FixerBotAgent } from './agents/FixerBotAgent'; // REVIVED - Now handles live testing and validation\n// Multi-Agent Chat UI Components\nimport { MultiAgentChatPanel } from './ui/MultiAgentChatPanel';\nimport { ChatWidget } from './ui/ChatWidget';\n// Auto-Versioning System\nimport { AutoVersioning } from './utils/AutoVersioning';\n\n// Global output channel for debugging\nlet outputChannel: vscode.OutputChannel;\n\nexport async function activate(context: vscode.ExtensionContext) {\n    // VERSION 2.3.9 - CLAUDE CODE CLI INTEGRATION (CORRECTED)\n    console.log('🚀 KI AutoAgent v2.3.9: Extension activation started');\n    \n    // Create single output channel\n    outputChannel = vscode.window.createOutputChannel('KI AutoAgent');\n    outputChannel.clear();\n    outputChannel.show(true);\n    \n    outputChannel.appendLine('🚀 KI AutoAgent Extension v2.3.9 Activating');\n    outputChannel.appendLine('============================================');\n    outputChannel.appendLine(`Time: ${new Date().toLocaleString()}`);\n    outputChannel.appendLine(`VS Code Version: ${vscode.version}`);\n    outputChannel.appendLine('');\n    outputChannel.appendLine('✨ NEW: Claude Code CLI integration - Install with: npm install -g @anthropic-ai/claude-code');\n\n    try {\n        // Initialize the Agent Configuration Manager\n        outputChannel.appendLine('Initializing Agent Configuration Manager...');\n        const configManager = AgentConfigurationManager.getInstance(context);\n        await configManager.initialize();\n        outputChannel.appendLine('✅ Agent Configuration Manager ready');\n\n        // Initialize the master dispatcher\n        outputChannel.appendLine('Initializing Master Dispatcher...');\n        const dispatcher = new VSCodeMasterDispatcher(context);\n        outputChannel.appendLine('✅ Master Dispatcher ready');\n\n        // Initialize Chat Widget (Status Bar)\n        outputChannel.appendLine('Initializing Chat Widget...');\n        const chatWidget = new ChatWidget(context, dispatcher);\n        outputChannel.appendLine('✅ Chat Widget ready');\n\n        // Initialize Auto-Versioning System\n        outputChannel.appendLine('Initializing Auto-Versioning System...');\n        const autoVersioning = new AutoVersioning(dispatcher);\n        const versionWatcher = autoVersioning.startWatching();\n        context.subscriptions.push(versionWatcher);\n        outputChannel.appendLine('✅ Auto-Versioning System active');\n    \n    // Register chat panel commands with error handling\n    const commandsToRegister = [\n        {\n            id: 'ki-autoagent.showChat',\n            handler: () => MultiAgentChatPanel.createOrShow(context.extensionUri, dispatcher)\n        },\n        {\n            id: 'ki-autoagent.toggleChat',\n            handler: () => MultiAgentChatPanel.createOrShow(context.extensionUri, dispatcher)\n        },\n        {\n            id: 'ki-autoagent.quickChat',\n            handler: () => {\n                MultiAgentChatPanel.createOrShow(context.extensionUri, dispatcher);\n                vscode.window.showInformationMessage('🤖 KI AutoAgent Chat ready! Use @ki for universal assistance or specific agents like @richter, @architect, @codesmith');\n            }\n        },\n        {\n            id: 'ki-autoagent.clearUnread',\n            handler: () => {\n                if (!outputChannel) {\n                    outputChannel = vscode.window.createOutputChannel('KI AutoAgent');\n                }\n                outputChannel.clear();\n                outputChannel.appendLine('Cleared messages');\n            }\n        }\n    ];\n\n    // Register commands with duplicate check\n    for (const cmd of commandsToRegister) {\n        try {\n            const disposable = vscode.commands.registerCommand(cmd.id, cmd.handler);\n            context.subscriptions.push(disposable);\n            outputChannel.appendLine(`  ✅ Registered command: ${cmd.id}`);\n        } catch (error) {\n            outputChannel.appendLine(`  ⚠️ Command already exists: ${cmd.id} - skipping`);\n        }\n    }\n\n    // Command registration complete\n    outputChannel.appendLine('');\n\n        // Initialize and register all agents \n        outputChannel.appendLine('\\nCreating Agent Instances...');\n        let agents = [];\n        let agentCreationErrors = [];\n        \n        try {\n            agents.push(new OrchestratorAgent(context, dispatcher));\n            outputChannel.appendLine('  ✅ OrchestratorAgent created');\n        } catch (error) {\n            outputChannel.appendLine(`  ❌ OrchestratorAgent failed: ${(error as any).message}`);\n            agentCreationErrors.push(`OrchestratorAgent: ${error}`);\n        }\n        \n        try {\n            agents.push(new OpusArbitratorAgent(context, dispatcher));\n            outputChannel.appendLine('  ✅ OpusArbitratorAgent created');\n        } catch (error) {\n            outputChannel.appendLine(`  ❌ OpusArbitratorAgent failed: ${(error as any).message}`);\n            agentCreationErrors.push(`OpusArbitratorAgent: ${error}`);\n        }\n        \n        try {\n            agents.push(new ArchitectAgent(context, dispatcher));\n            outputChannel.appendLine('  ✅ ArchitectAgent created');\n        } catch (error) {\n            outputChannel.appendLine(`  ❌ ArchitectAgent failed: ${(error as any).message}`);\n            agentCreationErrors.push(`ArchitectAgent: ${error}`);\n        }\n        \n        try {\n            agents.push(new CodeSmithAgent(context, dispatcher));\n            outputChannel.appendLine('  ✅ CodeSmithAgent created');\n        } catch (error) {\n            outputChannel.appendLine(`  ❌ CodeSmithAgent failed: ${(error as any).message}`);\n            agentCreationErrors.push(`CodeSmithAgent: ${error}`);\n        }\n        \n        try {\n            agents.push(new TradeStratAgent(context, dispatcher));\n            outputChannel.appendLine('  ✅ TradeStratAgent created');\n        } catch (error) {\n            outputChannel.appendLine(`  ❌ TradeStratAgent failed: ${(error as any).message}`);\n            agentCreationErrors.push(`TradeStratAgent: ${error}`);\n        }\n        \n        try {\n            agents.push(new ResearchAgent(context, dispatcher));\n            outputChannel.appendLine('  ✅ ResearchAgent created');\n        } catch (error) {\n            outputChannel.appendLine(`  ❌ ResearchAgent failed: ${(error as any).message}`);\n            agentCreationErrors.push(`ResearchAgent: ${error}`);\n        }\n\n        try {\n            agents.push(new DocuBotAgent(context, dispatcher));\n            outputChannel.appendLine('  ✅ DocuBotAgent created');\n        } catch (error) {\n            outputChannel.appendLine(`  ❌ DocuBotAgent failed: ${(error as any).message}`);\n            agentCreationErrors.push(`DocuBotAgent: ${error}`);\n        }\n\n        try {\n            agents.push(new ReviewerGPTAgent(context, dispatcher));\n            outputChannel.appendLine('  ✅ ReviewerGPTAgent created');\n        } catch (error) {\n            outputChannel.appendLine(`  ❌ ReviewerGPTAgent failed: ${(error as any).message}`);\n            agentCreationErrors.push(`ReviewerGPTAgent: ${error}`);\n        }\n\n        // REVIVED: FixerBot now handles live testing and validation\n        // New role: Run applications, test changes, validate output\n        try {\n            agents.push(new FixerBotAgent(context, dispatcher));\n            outputChannel.appendLine('  ✅ FixerBotAgent created - Live Testing Expert');\n        } catch (error) {\n            outputChannel.appendLine(`  ❌ FixerBotAgent failed: ${(error as any).message}`);\n            agentCreationErrors.push(`FixerBotAgent: ${error}`);\n        }\n\n        outputChannel.appendLine(`Agent creation completed: ${agents.length} created, ${agentCreationErrors.length} errors`);\n        \n        if (agentCreationErrors.length > 0) {\n            outputChannel.appendLine('Agent creation errors:');\n            agentCreationErrors.forEach(error => outputChannel.appendLine(`  - ${error}`));\n        }\n\n    // Initialize all agents (TODO: Update agents to use new BaseAgent system)\n    for (const agent of agents) {\n        try {\n            // Enhanced initialization will be added when agents are updated to use new BaseAgent\n            console.log(`✅ Agent ${(agent as any).config?.participantId || 'unknown'} ready`);\n        } catch (error) {\n            console.warn(`Failed to initialize agent:`, error);\n        }\n    }\n\n    // Register each agent as a chat participant\n    outputChannel.appendLine(`\\nRegistering ${agents.length} agents...`);\n    let registrationErrors: string[] = [];\n    \n    agents.forEach((agent, index) => {\n        try {\n            const participantId = (agent as any).config.participantId;\n            const participant = vscode.chat.createChatParticipant(\n                participantId,\n                agent.createHandler()\n            );\n            \n            // Set icon if available\n            const iconPath = (agent as any).config?.iconPath;\n            if (iconPath) {\n                participant.iconPath = iconPath;\n            }\n            \n            // Register the agent with dispatcher for orchestration\n            const dispatcherAgentId = participantId.split('.')[1];\n            outputChannel.appendLine(`  Registering with dispatcher: ${participantId} as '${dispatcherAgentId}'`);\n            dispatcher.registerAgent(dispatcherAgentId, agent);\n            \n            // Add to subscriptions for cleanup\n            context.subscriptions.push(participant);\n            \n            outputChannel.appendLine(`  ✅ Registered: ${participantId} (dispatcher ID: ${dispatcherAgentId})`);\n            \n        } catch (error) {\n            const errorMsg = `Failed to register agent ${index + 1}: ${(error as any).message}`;\n            outputChannel.appendLine(`  ❌ ${errorMsg}`);\n            registrationErrors.push(errorMsg);\n        }\n    });\n    \n    // Verify agent registration\n    outputChannel.appendLine('\\nVerifying agent registration with dispatcher:');\n    const registeredAgents = dispatcher.getRegisteredAgents();\n    outputChannel.appendLine(`  Registered agents: [${registeredAgents.join(', ')}]`);\n    \n    outputChannel.appendLine(`Registration completed: ${agents.length - registrationErrors.length} succeeded, ${registrationErrors.length} failed`);\n    \n    if (registrationErrors.length > 0) {\n        outputChannel.appendLine('Registration errors:');\n        registrationErrors.forEach(error => outputChannel.appendLine(`  - ${error}`));\n    }\n\n    // Register extension commands\n    outputChannel.appendLine('\\nRegistering extension commands...');\n    registerCommands(context, dispatcher);\n    outputChannel.appendLine('✅ Extension commands registered');\n\n    // Show welcome message in output channel\n    showWelcomeMessage(outputChannel);\n\n    // Final success\n    outputChannel.appendLine('\\n✅ KI AUTOAGENT EXTENSION ACTIVATED!');\n    outputChannel.appendLine('============================================');\n    outputChannel.appendLine(`Total agents: ${agents.length}`);\n    outputChannel.appendLine(`Registration errors: ${registrationErrors.length}`);\n    outputChannel.appendLine(`Activated at: ${new Date().toLocaleString()}`);\n    outputChannel.appendLine('\\nType \"@ki\" in chat to get started!');\n    \n    // Single success notification\n    vscode.window.showInformationMessage(`🎉 KI AutoAgent v${context.extension.packageJSON.version} activated! ${agents.length} agents ready.`);\n    \n    } catch (error) {\n        // Handle any errors during extension activation\n        const errorMsg = `KI AutoAgent activation failed: ${(error as any).message || error}`;\n        console.error(errorMsg);\n        \n        // Show error\n        vscode.window.showErrorMessage(errorMsg);\n        \n        // Try to show error in output channel if available\n        if (outputChannel) {\n            outputChannel.appendLine(`\\n❌ ACTIVATION ERROR:`);\n            outputChannel.appendLine(`Error: ${error}`);\n            outputChannel.appendLine(`Message: ${(error as any).message}`);\n            outputChannel.appendLine(`Stack: ${(error as any).stack}`);\n            outputChannel.show(true);\n        }\n    }\n}\n\nexport function deactivate() {\n    console.log('👋 KI AutoAgent extension is deactivated');\n}\n\nfunction registerCommands(context: vscode.ExtensionContext, dispatcher: VSCodeMasterDispatcher) {\n    \n    // Command: Create File\n    const createFileCommand = vscode.commands.registerCommand(\n        'ki-autoagent.createFile',\n        async (filename: string, content: string) => {\n            try {\n                const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n                if (!workspaceFolder) {\n                    vscode.window.showErrorMessage('No workspace folder open');\n                    return;\n                }\n\n                const fileUri = vscode.Uri.joinPath(workspaceFolder.uri, filename);\n                await vscode.workspace.fs.writeFile(fileUri, Buffer.from(content, 'utf8'));\n                \n                // Open the created file\n                const document = await vscode.workspace.openTextDocument(fileUri);\n                await vscode.window.showTextDocument(document);\n                \n                vscode.window.showInformationMessage(`✅ Created file: ${filename}`);\n            } catch (error) {\n                vscode.window.showErrorMessage(`❌ Failed to create file: ${(error as any).message}`);\n            }\n        }\n    );\n\n    // Command: Insert at Cursor\n    const insertAtCursorCommand = vscode.commands.registerCommand(\n        'ki-autoagent.insertAtCursor',\n        async (content: string) => {\n            try {\n                const editor = vscode.window.activeTextEditor;\n                if (!editor) {\n                    vscode.window.showErrorMessage('No active text editor');\n                    return;\n                }\n\n                const position = editor.selection.active;\n                await editor.edit(editBuilder => {\n                    editBuilder.insert(position, content);\n                });\n                \n                vscode.window.showInformationMessage('✅ Content inserted at cursor');\n            } catch (error) {\n                vscode.window.showErrorMessage(`❌ Failed to insert content: ${(error as any).message}`);\n            }\n        }\n    );\n\n    // Command: Apply Suggestion\n    const applySuggestionCommand = vscode.commands.registerCommand(\n        'ki-autoagent.applySuggestion',\n        async (suggestionData: any) => {\n            try {\n                // Handle different types of suggestions\n                if (suggestionData.type === 'file_creation') {\n                    await vscode.commands.executeCommand(\n                        'ki-autoagent.createFile',\n                        suggestionData.filename,\n                        suggestionData.content\n                    );\n                } else if (suggestionData.type === 'code_insertion') {\n                    await vscode.commands.executeCommand(\n                        'ki-autoagent.insertAtCursor',\n                        suggestionData.code\n                    );\n                } else {\n                    vscode.window.showInformationMessage(`Applied suggestion: ${suggestionData.description}`);\n                }\n            } catch (error) {\n                vscode.window.showErrorMessage(`❌ Failed to apply suggestion: ${(error as any).message}`);\n            }\n        }\n    );\n\n    // Command: Test Claude Code CLI\n    const testClaudeCommand = vscode.commands.registerCommand(\n        'ki-autoagent.testClaudeCLI',\n        async () => {\n            const outputChannel = vscode.window.createOutputChannel('Claude CLI Test');\n            outputChannel.show();\n            outputChannel.appendLine('🔍 Testing Claude Code CLI Integration...');\n            outputChannel.appendLine('==========================================\\n');\n            \n            try {\n                const claudeService = getClaudeCodeService();\n                \n                // Check if CLI is available\n                outputChannel.appendLine('1. Checking Claude CLI availability...');\n                const isAvailable = await claudeService.isAvailable();\n                \n                if (!isAvailable) {\n                    outputChannel.appendLine('❌ Claude CLI not found!');\n                    outputChannel.appendLine('\\nTo install Claude CLI:');\n                    outputChannel.appendLine('  npm install -g @anthropic-ai/claude-code');\n                    outputChannel.appendLine('\\nOr use Anthropic API by configuring your API key in VS Code settings.');\n                    vscode.window.showErrorMessage('Claude CLI not installed. See output for installation instructions.');\n                    return;\n                }\n                \n                outputChannel.appendLine('✅ Claude CLI is available!\\n');\n                \n                // Test connection\n                outputChannel.appendLine('2. Testing Claude CLI connection...');\n                const testResult = await claudeService.testConnection();\n                \n                if (testResult.success) {\n                    outputChannel.appendLine(`✅ ${testResult.message}\\n`);\n                    outputChannel.appendLine('3. Claude CLI Integration Status: WORKING');\n                    outputChannel.appendLine('==========================================');\n                    outputChannel.appendLine('✨ Everything is working correctly!');\n                    outputChannel.appendLine('\\nYou can now use Claude-powered agents in your chat.');\n                    vscode.window.showInformationMessage('✅ Claude CLI is working correctly!');\n                } else {\n                    outputChannel.appendLine(`❌ ${testResult.message}\\n`);\n                    outputChannel.appendLine('3. Claude CLI Integration Status: ERROR');\n                    outputChannel.appendLine('==========================================');\n                    outputChannel.appendLine('Please check the error message above.');\n                    vscode.window.showErrorMessage(`Claude CLI test failed: ${testResult.message}`);\n                }\n                \n            } catch (error) {\n                outputChannel.appendLine(`\\n❌ Test failed with error: ${(error as any).message}`);\n                outputChannel.appendLine('\\nPlease check your configuration and try again.');\n                vscode.window.showErrorMessage(`Claude CLI test failed: ${(error as any).message}`);\n            }\n        }\n    );\n\n    // Command: Show Agent Statistics\n    const showAgentStatsCommand = vscode.commands.registerCommand(\n        'ki-autoagent.showAgentStats',\n        async () => {\n            try {\n                const stats = await dispatcher.getAgentStats();\n                \n                if (Object.keys(stats).length === 0) {\n                    vscode.window.showInformationMessage('No agent statistics available yet');\n                    return;\n                }\n\n                // Create a new document to display stats\n                const statsContent = formatAgentStats(stats);\n                const document = await vscode.workspace.openTextDocument({\n                    content: statsContent,\n                    language: 'markdown'\n                });\n                \n                await vscode.window.showTextDocument(document);\n            } catch (error) {\n                vscode.window.showErrorMessage(`❌ Failed to show stats: ${(error as any).message}`);\n            }\n        }\n    );\n\n    // Command: Show Help\n    const showHelpCommand = vscode.commands.registerCommand(\n        'ki-autoagent.showHelp',\n        async (agentId?: string) => {\n            const helpContent = generateHelpContent(agentId);\n            \n            const document = await vscode.workspace.openTextDocument({\n                content: helpContent,\n                language: 'markdown'\n            });\n            \n            await vscode.window.showTextDocument(document);\n        }\n    );\n\n    // Command: Plan Implementation\n    const planImplementationCommand = vscode.commands.registerCommand(\n        'ki-autoagent.planImplementation',\n        async (task: string, architecture: string) => {\n            // This would trigger the orchestrator to create an implementation plan\n            vscode.window.showInformationMessage('Creating implementation plan...');\n            // Could open chat with pre-filled message\n        }\n    );\n\n    // Command: Execute Workflow\n    const executeWorkflowCommand = vscode.commands.registerCommand(\n        'ki-autoagent.executeWorkflow',\n        async (task: string, workflow: string) => {\n            vscode.window.showInformationMessage('Executing workflow...');\n            // Implementation for workflow execution\n        }\n    );\n\n    // Command: Configure Agent Models\n    const configureAgentModelsCommand = vscode.commands.registerCommand(\n        'ki-autoagent.configureAgentModels',\n        async () => {\n            const configManager = AgentConfigurationManager.getInstance(context);\n            const availableModels = configManager.getAvailableModels();\n            \n            // Show agent model configuration UI\n            const agentIds = ['orchestrator', 'richter', 'architect', 'codesmith', 'tradestrat', 'research'];\n            \n            for (const agentId of agentIds) {\n                const currentModel = configManager.getAgentModel(agentId);\n                const modelOptions = Object.keys(availableModels).map(modelId => ({\n                    label: availableModels[modelId].name,\n                    description: `${availableModels[modelId].provider} - ${availableModels[modelId].tier}`,\n                    detail: `$${availableModels[modelId].costPerMillion.input}/$${availableModels[modelId].costPerMillion.output} per million tokens`,\n                    modelId\n                }));\n                \n                const selected = await vscode.window.showQuickPick(modelOptions, {\n                    title: `Select model for ${agentId}`,\n                    placeHolder: `Current: ${currentModel}`,\n                    ignoreFocusOut: true\n                });\n                \n                if (selected && selected.modelId !== currentModel) {\n                    await configManager.setAgentModel(agentId, selected.modelId);\n                    vscode.window.showInformationMessage(`✅ Updated ${agentId} model to ${selected.label}`);\n                }\n            }\n        }\n    );\n\n    // Command: Show Agent Performance\n    const showAgentPerformanceCommand = vscode.commands.registerCommand(\n        'ki-autoagent.showAgentPerformance',\n        async () => {\n            const configManager = AgentConfigurationManager.getInstance(context);\n            const agentIds = ['orchestrator', 'richter', 'architect', 'codesmith', 'tradestrat', 'research'];\n            \n            let performanceReport = '# Agent Performance Report\\n\\n';\n            performanceReport += `Generated: ${new Date().toLocaleString()}\\n\\n`;\n            \n            for (const agentId of agentIds) {\n                const metrics = configManager.getAgentMetrics(agentId);\n                const model = configManager.getAgentModel(agentId);\n                \n                performanceReport += `## ${agentId.charAt(0).toUpperCase() + agentId.slice(1)}\\n`;\n                performanceReport += `**Model:** ${model}\\n`;\n                \n                if (metrics) {\n                    const successRate = (metrics.successfulExecutions / metrics.totalExecutions * 100).toFixed(1);\n                    performanceReport += `**Success Rate:** ${successRate}%\\n`;\n                    performanceReport += `**Total Executions:** ${metrics.totalExecutions}\\n`;\n                    performanceReport += `**Average Response Time:** ${metrics.averageResponseTime.toFixed(0)}ms\\n`;\n                    performanceReport += `**Current Streak:** ${metrics.currentStreak}\\n`;\n                    performanceReport += `**Best Streak:** ${metrics.bestStreak}\\n`;\n                } else {\n                    performanceReport += `**Status:** No performance data yet\\n`;\n                }\n                performanceReport += '\\n';\n            }\n            \n            const document = await vscode.workspace.openTextDocument({\n                content: performanceReport,\n                language: 'markdown'\n            });\n            await vscode.window.showTextDocument(document);\n        }\n    );\n\n    // Command: Open Configuration Directory\n    const openConfigDirectoryCommand = vscode.commands.registerCommand(\n        'ki-autoagent.openConfigDirectory',\n        async () => {\n            const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n            if (workspaceFolder) {\n                const configPath = vscode.Uri.joinPath(workspaceFolder.uri, '.kiautoagent');\n                try {\n                    await vscode.commands.executeCommand('vscode.openFolder', configPath, { forceNewWindow: false });\n                } catch {\n                    vscode.window.showInformationMessage('Configuration directory will be created when first used');\n                }\n            } else {\n                vscode.window.showWarningMessage('No workspace folder open');\n            }\n        }\n    );\n\n    // Register all commands\n    context.subscriptions.push(\n        createFileCommand,\n        insertAtCursorCommand,\n        applySuggestionCommand,\n        testClaudeCommand,\n        showAgentStatsCommand,\n        showHelpCommand,\n        planImplementationCommand,\n        executeWorkflowCommand,\n        configureAgentModelsCommand,\n        showAgentPerformanceCommand,\n        openConfigDirectoryCommand\n    );\n\n    console.log('✅ All extension commands registered');\n}\n\nfunction showWelcomeMessage(outputChannel: vscode.OutputChannel) {\n    \n    outputChannel.appendLine('🤖 KI AutoAgent VS Code Extension');\n    outputChannel.appendLine('=======================================');\n    outputChannel.appendLine('');\n    outputChannel.appendLine('✅ Extension activated successfully!');\n    outputChannel.appendLine('');\n    outputChannel.appendLine('Available Agents:');\n    outputChannel.appendLine('• @ki - Universal orchestrator (routes to best agent)');\n    outputChannel.appendLine('• @richter - ⚖️ Supreme judge & conflict resolver (Opus 4.1)');\n    outputChannel.appendLine('• @architect - System architecture & design');\n    outputChannel.appendLine('• @codesmith - Code implementation & testing');\n    outputChannel.appendLine('• @docu - Documentation generation');\n    outputChannel.appendLine('• @reviewer - Code review & security');\n    outputChannel.appendLine('• @fixer - Bug fixing & debugging');\n    outputChannel.appendLine('• @tradestrat - Trading strategy development');\n    outputChannel.appendLine('• @research - Web research & information gathering');\n    outputChannel.appendLine('');\n    outputChannel.appendLine('Getting Started:');\n    outputChannel.appendLine('1. Open VS Code Chat panel (Ctrl+Shift+I)');\n    outputChannel.appendLine('2. Type @ki followed by your request');\n    outputChannel.appendLine('3. Or use specific agents like @architect, @codesmith, etc.');\n    outputChannel.appendLine('');\n    outputChannel.appendLine('Configuration:');\n    outputChannel.appendLine('• Set your API keys in VS Code Settings');\n    outputChannel.appendLine('• Search for \"KI AutoAgent\" in settings');\n    outputChannel.appendLine('• Configure OpenAI, Anthropic, and Perplexity API keys');\n    outputChannel.appendLine('');\n    outputChannel.appendLine('Need help? Type \"@ki /agents\" to see all available agents!');\n}\n\nfunction formatAgentStats(stats: Record<string, any>): string {\n    let content = '# KI AutoAgent Statistics\\n\\n';\n    content += `Generated at: ${new Date().toLocaleString()}\\n\\n`;\n    \n    for (const [agentId, agentStats] of Object.entries(stats)) {\n        const { totalExecutions, successRate, averageResponseTime, lastExecution } = agentStats as any;\n        \n        content += `## ${agentId}\\n\\n`;\n        content += `- **Total Executions:** ${totalExecutions}\\n`;\n        content += `- **Success Rate:** ${(successRate * 100).toFixed(1)}%\\n`;\n        content += `- **Average Response Time:** ${averageResponseTime.toFixed(0)}ms\\n`;\n        \n        if (lastExecution) {\n            content += `- **Last Execution:** ${new Date(lastExecution).toLocaleString()}\\n`;\n        }\n        \n        content += '\\n';\n    }\n    \n    return content;\n}\n\nfunction generateHelpContent(agentId?: string): string {\n    let content = '# KI AutoAgent Help\\n\\n';\n    \n    if (agentId) {\n        content += `## Help for ${agentId}\\n\\n`;\n        // Add agent-specific help\n    } else {\n        content += '## Getting Started\\n\\n';\n        content += 'KI AutoAgent is a universal multi-agent AI development platform for VS Code.\\n\\n';\n        content += '### Available Agents\\n\\n';\n        content += '- **@ki** - Universal orchestrator that automatically routes tasks\\n';\n        content += '- **@richter** - ⚖️ Supreme judge & conflict resolver (Claude Opus 4.1)\\n';\n        content += '- **@architect** - System architecture and design expert\\n';\n        content += '- **@codesmith** - Senior Python/Web developer\\n';\n        content += '- **@docu** - Technical documentation expert\\n';\n        content += '- **@reviewer** - Code review and security expert\\n';\n        content += '- **@fixer** - Bug fixing and optimization expert\\n';\n        content += '- **@tradestrat** - Trading strategy expert\\n';\n        content += '- **@research** - Research and information expert\\n\\n';\n        content += '### Usage Examples\\n\\n';\n        content += '```\\n';\n        content += '@ki create a REST API with FastAPI\\n';\n        content += '@richter judge which approach is better: microservices vs monolith\\n';\n        content += '@richter resolve this disagreement between @architect and @codesmith\\n';\n        content += '@architect design a microservices architecture\\n';\n        content += '@codesmith implement a Python class for user management\\n';\n        content += '@tradestrat develop a momentum trading strategy\\n';\n        content += '@fixer debug this error message\\n';\n        content += '```\\n\\n';\n        content += '### Configuration\\n\\n';\n        content += '1. Open VS Code Settings (Ctrl+,)\\n';\n        content += '2. Search for \"KI AutoAgent\"\\n';\n        content += '3. Configure your API keys:\\n';\n        content += '   - OpenAI API Key (for GPT models)\\n';\n        content += '   - Anthropic API Key (for Claude models)\\n';\n        content += '   - Perplexity API Key (for research)\\n\\n';\n        content += '### Support\\n\\n';\n        content += 'For issues and feature requests, please visit the GitHub repository.\\n';\n    }\n    \n    return content;\n}","/**\n * Advanced Orchestrator Agent with Task Decomposition and Intelligent Workflow Management\n * Uses graph-based workflow execution, parallel processing, and memory-enhanced orchestration\n */\nimport * as vscode from 'vscode';\nimport { ChatAgent } from './base/ChatAgent';\nimport { AgentConfig, TaskRequest, TaskResult, WorkflowStep } from '../types';\nimport { VSCodeMasterDispatcher } from '../core/VSCodeMasterDispatcher';\nimport { OpenAIService } from '../utils/OpenAIService';\nimport { AgentRegistry } from '../core/AgentRegistry';\nimport { WorkflowEngine, WorkflowNode, ExecutionPlan } from '../core/WorkflowEngine';\nimport { MemoryManager } from '../core/MemoryManager';\nimport { SharedContextManager, getSharedContext } from '../core/SharedContextManager';\nimport { AgentCommunicationBus, getCommunicationBus, MessageType } from '../core/AgentCommunicationBus';\nimport { MemoryType, TaskMemory, TaskStep as MemoryTaskStep } from '../types/Memory';\n\ninterface TaskDecomposition {\n    mainGoal: string;\n    complexity: 'simple' | 'moderate' | 'complex';\n    subtasks: SubTask[];\n    dependencies: TaskDependency[];\n    estimatedDuration: number;\n    requiredAgents: string[];\n    parallelizable: boolean;\n}\n\ninterface SubTask {\n    id: string;\n    description: string;\n    agent: string;\n    priority: number;\n    dependencies: string[];\n    expectedOutput: string;\n    estimatedDuration: number;\n}\n\ninterface TaskDependency {\n    from: string;\n    to: string;\n    type: 'sequential' | 'parallel' | 'conditional';\n    condition?: string;\n}\n\nexport class OrchestratorAgent extends ChatAgent {\n    private openAIService: OpenAIService;\n    private workflowEngine: WorkflowEngine;\n    private memoryManager: MemoryManager;\n    private sharedContext: SharedContextManager;\n    private communicationBus: AgentCommunicationBus;\n    private activeWorkflows: Map<string, string> = new Map(); // workflowId -> description\n\n    constructor(context: vscode.ExtensionContext, dispatcher: VSCodeMasterDispatcher) {\n        const config: AgentConfig = {\n            participantId: 'ki-autoagent.orchestrator',\n            name: 'ki',\n            fullName: 'Advanced KI AutoAgent Orchestrator',\n            description: 'Intelligent task orchestration with decomposition, parallel execution, and memory',\n            model: 'gpt-5-2025-09-12',\n            iconPath: vscode.Uri.joinPath(context.extensionUri, 'media', 'orchestrator-icon.svg'),\n            capabilities: [\n                'Task Decomposition',\n                'Parallel Execution',\n                'Dynamic Workflow Adjustment',\n                'Agent Conflict Resolution',\n                'Memory-Based Learning',\n                'Multi-Agent Collaboration'\n            ],\n            commands: [\n                { name: 'task', description: 'Execute complex task with intelligent decomposition', handler: 'handleTaskCommand' },\n                { name: 'agents', description: 'Show available specialized agents', handler: 'handleAgentsCommand' },\n                { name: 'workflow', description: 'Create advanced multi-step workflow', handler: 'handleWorkflowCommand' },\n                { name: 'decompose', description: 'Decompose complex task into subtasks', handler: 'handleDecomposeCommand' },\n                { name: 'parallel', description: 'Execute tasks in parallel', handler: 'handleParallelCommand' }\n            ]\n        };\n\n        super(config, context, dispatcher);\n\n        // Initialize advanced systems\n        this.openAIService = new OpenAIService();\n        this.workflowEngine = new WorkflowEngine();\n        this.memoryManager = new MemoryManager({\n            maxMemories: 10000,\n            similarityThreshold: 0.7,\n            patternExtractionEnabled: true\n        });\n        this.sharedContext = getSharedContext();\n        this.communicationBus = getCommunicationBus();\n\n        // Register for inter-agent communication\n        this.registerCommunicationHandlers();\n    }\n\n    protected async handleRequest(\n        request: vscode.ChatRequest,\n        context: vscode.ChatContext,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        const command = request.command;\n        const prompt = request.prompt;\n\n        // Immediate feedback with intelligence indicator\n        stream.progress('🧠 Advanced Orchestrator analyzing complexity and decomposing task...');\n\n        this.log(`Advanced Orchestrator processing: ${prompt.substring(0, 100)}...`);\n\n        // Build context with memory\n        const enhancedRequest = await this.buildContextWithMemory({\n            prompt,\n            context: { chatHistory: context.history }\n        });\n\n        if (command) {\n            await this.handleCommand(command, prompt, stream, token);\n        } else {\n            // Analyze task complexity\n            const complexity = await this.analyzeTaskComplexity(prompt);\n\n            if (complexity === 'simple') {\n                await this.handleSimpleTask(prompt, stream, token);\n            } else if (complexity === 'moderate') {\n                await this.handleModerateTask(prompt, stream, token);\n            } else {\n                await this.handleComplexTask(prompt, stream, token);\n            }\n        }\n    }\n\n    /**\n     * Analyze task complexity to determine orchestration strategy\n     */\n    private async analyzeTaskComplexity(prompt: string): Promise<'simple' | 'moderate' | 'complex'> {\n        // Search memory for similar tasks\n        const similarTasks = await this.memoryManager.search(prompt, {\n            k: 5,\n            type: MemoryType.EPISODIC\n        });\n\n        // If we have handled similar tasks, use learned complexity\n        if (similarTasks.length > 0) {\n            const complexities = similarTasks\n                .map(t => (t.entry.content as any).complexity)\n                .filter(Boolean);\n\n            if (complexities.length > 0) {\n                // Return most common complexity\n                const counts = complexities.reduce((acc: any, c: string) => {\n                    acc[c] = (acc[c] || 0) + 1;\n                    return acc;\n                }, {});\n\n                return Object.entries(counts)\n                    .sort(([, a]: any, [, b]: any) => b - a)[0][0] as any;\n            }\n        }\n\n        // Analyze prompt for complexity indicators\n        const complexityIndicators = {\n            complex: [\n                /build.*system/i,\n                /implement.*architecture/i,\n                /create.*application/i,\n                /develop.*platform/i,\n                /design.*and.*implement/i,\n                /multiple.*components/i,\n                /full.*stack/i,\n                /end.*to.*end/i,\n                /microservices/i,\n                /distributed/i\n            ],\n            moderate: [\n                /create.*feature/i,\n                /implement.*api/i,\n                /add.*functionality/i,\n                /refactor/i,\n                /optimize/i,\n                /debug.*and.*fix/i,\n                /integrate/i,\n                /migrate/i\n            ],\n            simple: [\n                /fix.*bug/i,\n                /update.*documentation/i,\n                /write.*function/i,\n                /create.*file/i,\n                /explain/i,\n                /what.*is/i,\n                /how.*to/i,\n                /show.*me/i,\n                /list/i\n            ]\n        };\n\n        // Check indicators\n        for (const [level, patterns] of Object.entries(complexityIndicators)) {\n            if (patterns.some(p => p.test(prompt))) {\n                return level as any;\n            }\n        }\n\n        // Default to moderate\n        return 'moderate';\n    }\n\n    /**\n     * Handle simple tasks with direct routing\n     */\n    private async handleSimpleTask(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        stream.markdown(`## ⚡ Simple Task Execution\\n\\n`);\n\n        // Get best agent for the task\n        const registry = AgentRegistry.getInstance();\n        const agent = registry.suggestAgentForTask(prompt);\n\n        if (agent && agent !== 'orchestrator') {\n            stream.markdown(`**Routing to @${agent}**\\n\\n`);\n\n            // Create simple workflow\n            const workflow = this.workflowEngine.createWorkflow(`Simple: ${prompt}`);\n\n            const node: WorkflowNode = {\n                id: 'execute',\n                type: 'task',\n                agentId: agent,\n                task: prompt\n            };\n\n            this.workflowEngine.addNode(workflow.id, node);\n\n            // Execute\n            const results = await this.executeWorkflowWithProgress(\n                workflow.id,\n                prompt,\n                stream\n            );\n\n            // Display results\n            this.displayResults(results, stream);\n\n            // Store in memory\n            await this.storeTaskMemory(prompt, 'simple', workflow.id, results);\n        } else {\n            // Handle directly\n            await this.handleDirectResponse(prompt, stream);\n        }\n    }\n\n    /**\n     * Handle moderate complexity tasks with sequential workflow\n     */\n    private async handleModerateTask(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        stream.markdown(`## 🔄 Moderate Task Workflow\\n\\n`);\n\n        // Decompose into subtasks\n        const decomposition = await this.decomposeTask(prompt);\n\n        stream.markdown(`**Identified ${decomposition.subtasks.length} subtasks**\\n\\n`);\n\n        // Create workflow\n        const workflow = this.workflowEngine.createWorkflow(`Moderate: ${prompt}`);\n\n        // Add nodes for each subtask\n        decomposition.subtasks.forEach(subtask => {\n            const node: WorkflowNode = {\n                id: subtask.id,\n                type: 'task',\n                agentId: subtask.agent,\n                task: subtask.description,\n                dependencies: subtask.dependencies\n            };\n\n            this.workflowEngine.addNode(workflow.id, node);\n        });\n\n        // Add edges based on dependencies\n        decomposition.dependencies.forEach(dep => {\n            this.workflowEngine.addEdge(workflow.id, {\n                from: dep.from,\n                to: dep.to\n            });\n        });\n\n        // Display execution plan\n        const plan = this.workflowEngine.createExecutionPlan(workflow.id);\n        this.displayExecutionPlan(plan, stream);\n\n        // Execute workflow\n        const results = await this.executeWorkflowWithProgress(\n            workflow.id,\n            prompt,\n            stream\n        );\n\n        // Display results\n        this.displayResults(results, stream);\n\n        // Store in memory\n        await this.storeTaskMemory(prompt, 'moderate', workflow.id, results);\n    }\n\n    /**\n     * Handle complex tasks with parallel execution and collaboration\n     */\n    private async handleComplexTask(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        stream.markdown(`## 🚀 Complex Task Orchestration\\n\\n`);\n        stream.markdown(`**Initiating advanced multi-agent collaboration...**\\n\\n`);\n\n        // Decompose into subtasks\n        const decomposition = await this.decomposeTask(prompt);\n\n        stream.markdown(`### 📊 Task Analysis\\n`);\n        stream.markdown(`- **Complexity:** ${decomposition.complexity}\\n`);\n        stream.markdown(`- **Subtasks:** ${decomposition.subtasks.length}\\n`);\n        stream.markdown(`- **Required Agents:** ${decomposition.requiredAgents.join(', ')}\\n`);\n        stream.markdown(`- **Parallelizable:** ${decomposition.parallelizable ? 'Yes' : 'No'}\\n`);\n        stream.markdown(`- **Estimated Duration:** ${decomposition.estimatedDuration}ms\\n\\n`);\n\n        // Start collaboration session\n        const session = await this.communicationBus.startCollaboration(\n            { task: prompt, decomposition },\n            decomposition.requiredAgents,\n            'orchestrator'\n        );\n\n        stream.markdown(`**Collaboration Session Started:** ${session.id}\\n\\n`);\n\n        // Create advanced workflow with parallel execution\n        const workflow = this.workflowEngine.createWorkflow(`Complex: ${prompt}`);\n\n        // Group parallelizable tasks\n        const parallelGroups = this.groupParallelTasks(decomposition);\n\n        // Create workflow nodes\n        parallelGroups.forEach((group, index) => {\n            if (group.length > 1) {\n                // Create parallel node\n                const parallelNode: WorkflowNode = {\n                    id: `parallel_${index}`,\n                    type: 'parallel',\n                    children: group.map(t => t.id)\n                };\n\n                this.workflowEngine.addNode(workflow.id, parallelNode);\n\n                // Add task nodes\n                group.forEach(subtask => {\n                    const taskNode: WorkflowNode = {\n                        id: subtask.id,\n                        type: 'task',\n                        agentId: subtask.agent,\n                        task: subtask.description\n                    };\n                    this.workflowEngine.addNode(workflow.id, taskNode);\n                });\n            } else {\n                // Single task node\n                const subtask = group[0];\n                const taskNode: WorkflowNode = {\n                    id: subtask.id,\n                    type: 'task',\n                    agentId: subtask.agent,\n                    task: subtask.description,\n                    dependencies: subtask.dependencies\n                };\n                this.workflowEngine.addNode(workflow.id, taskNode);\n            }\n        });\n\n        // Add edges for dependencies\n        decomposition.dependencies.forEach(dep => {\n            this.workflowEngine.addEdge(workflow.id, {\n                from: dep.from,\n                to: dep.to,\n                condition: dep.condition ? this.createCondition(dep.condition) : undefined\n            });\n        });\n\n        // Display execution plan\n        const plan = this.workflowEngine.createExecutionPlan(workflow.id);\n        this.displayAdvancedExecutionPlan(plan, stream);\n\n        // Execute with checkpointing\n        stream.markdown(`### ⚡ Execution Progress\\n\\n`);\n\n        const results = await this.executeComplexWorkflow(\n            workflow.id,\n            prompt,\n            session.id,\n            stream\n        );\n\n        // Complete collaboration\n        this.communicationBus.completeCollaboration(session.id, results);\n\n        // Display comprehensive results\n        this.displayComplexResults(results, stream);\n\n        // Store in memory with patterns\n        await this.storeComplexTaskMemory(prompt, decomposition, workflow.id, results);\n\n        // Extract and store patterns\n        await this.extractAndStorePatterns(decomposition, results);\n    }\n\n    /**\n     * Decompose task into subtasks using AI\n     */\n    private async decomposeTask(prompt: string): Promise<TaskDecomposition> {\n        // Check memory for similar decompositions\n        const similarTasks = await this.memoryManager.search(prompt, {\n            k: 3,\n            type: MemoryType.PROCEDURAL\n        });\n\n        if (similarTasks.length > 0 && similarTasks[0].similarity > 0.85) {\n            // Reuse previous decomposition\n            return (similarTasks[0].entry.content as any).decomposition;\n        }\n\n        // Use AI to decompose\n        const systemPrompt = `You are an expert task decomposer. Your job is to capture ALL requested changes comprehensively.\n\nCRITICAL REQUIREMENTS:\n1. **CAPTURE EVERY CHANGE**: Break down the task to ensure NO requested change is missed\n2. **BE EXHAUSTIVE**: It's better to have too many subtasks than too few\n3. **DETAIL EVERYTHING**: Each distinct modification should be its own subtask\n4. **INCLUDE VALIDATION**: Add review/testing steps after implementation\n5. **NO LIMITS**: Create as many subtasks as needed (10, 20, 50+ if necessary)\n\n${this.getSystemContextPrompt()}\n\nAnalyze the task and provide a JSON response with:\n{\n  \"mainGoal\": \"primary objective\",\n  \"complexity\": \"simple|moderate|complex\",\n  \"subtasks\": [\n    {\n      \"id\": \"unique_id\",\n      \"description\": \"DETAILED description of what to do\",\n      \"agent\": \"best agent for this\",\n      \"priority\": 1-5,\n      \"dependencies\": [\"other_task_ids\"],\n      \"expectedOutput\": \"what this produces\",\n      \"estimatedDuration\": milliseconds,\n      \"files\": [\"specific files to modify if known\"]\n    }\n  ],\n  \"dependencies\": [\n    {\n      \"from\": \"task_id\",\n      \"to\": \"task_id\",\n      \"type\": \"sequential|parallel|conditional\",\n      \"condition\": \"optional condition\"\n    }\n  ],\n  \"estimatedDuration\": total_milliseconds,\n  \"requiredAgents\": [\"agent1\", \"agent2\"],\n  \"parallelizable\": boolean,\n  \"verificationSteps\": [\"how to verify completeness\"]\n}\n\nIMPORTANT: Err on the side of being TOO detailed rather than missing something.\nEach UI change, each function modification, each bug fix should be its own subtask.\n\nAvailable agents: architect, codesmith, docu, reviewer, fixer, tradestrat, opus-arbitrator, research`;\n\n        const response = await this.openAIService.chat([\n            { role: 'system', content: systemPrompt },\n            { role: 'user', content: `Decompose this task: ${prompt}` }\n        ]);\n\n        try {\n            const decomposition = JSON.parse(response);\n\n            // Store in memory for future use\n            await this.memoryManager.store(\n                'orchestrator',\n                { prompt, decomposition },\n                MemoryType.PROCEDURAL,\n                { importance: 0.8 }\n            );\n\n            return decomposition;\n        } catch (error) {\n            // Fallback to simple decomposition\n            return this.createSimpleDecomposition(prompt);\n        }\n    }\n\n    /**\n     * Create simple decomposition as fallback\n     */\n    private createSimpleDecomposition(prompt: string): TaskDecomposition {\n        const registry = AgentRegistry.getInstance();\n        const agent = registry.suggestAgentForTask(prompt) || 'codesmith';\n\n        return {\n            mainGoal: prompt,\n            complexity: 'simple',\n            subtasks: [{\n                id: 'task_1',\n                description: prompt,\n                agent,\n                priority: 1,\n                dependencies: [],\n                expectedOutput: 'Task result',\n                estimatedDuration: 5000\n            }],\n            dependencies: [],\n            estimatedDuration: 5000,\n            requiredAgents: [agent],\n            parallelizable: false\n        };\n    }\n\n    /**\n     * Group tasks that can be executed in parallel\n     */\n    private groupParallelTasks(decomposition: TaskDecomposition): SubTask[][] {\n        const groups: SubTask[][] = [];\n        const processed = new Set<string>();\n\n        // Sort by priority\n        const sorted = [...decomposition.subtasks].sort((a, b) => a.priority - b.priority);\n\n        sorted.forEach(task => {\n            if (processed.has(task.id)) return;\n\n            // Find tasks that can run in parallel with this one\n            const parallelGroup = [task];\n            processed.add(task.id);\n\n            sorted.forEach(other => {\n                if (processed.has(other.id)) return;\n\n                // Check if they can run in parallel (no dependencies between them)\n                const hasDirectDependency = decomposition.dependencies.some(dep =>\n                    (dep.from === task.id && dep.to === other.id) ||\n                    (dep.from === other.id && dep.to === task.id)\n                );\n\n                if (!hasDirectDependency && other.dependencies.length === task.dependencies.length) {\n                    parallelGroup.push(other);\n                    processed.add(other.id);\n                }\n            });\n\n            groups.push(parallelGroup);\n        });\n\n        return groups;\n    }\n\n    /**\n     * Execute workflow with progress updates\n     */\n    private async executeWorkflowWithProgress(\n        workflowId: string,\n        description: string,\n        stream: vscode.ChatResponseStream\n    ): Promise<Map<string, any>> {\n        this.activeWorkflows.set(workflowId, description);\n\n        // Subscribe to workflow events\n        const workflow = this.workflowEngine['workflows'].get(workflowId);\n        if (workflow) {\n            this.workflowEngine['eventBus'].on('node-started', (event: any) => {\n                if (event.workflowId === workflowId) {\n                    stream.progress(`⚡ Executing: ${event.node.id}`);\n                }\n            });\n\n            this.workflowEngine['eventBus'].on('node-completed', (event: any) => {\n                if (event.workflowId === workflowId) {\n                    stream.markdown(`✅ Completed: ${event.node.id}\\n`);\n                }\n            });\n        }\n\n        // Execute workflow\n        const context = new Map<string, any>([\n            ['prompt', description],\n            ['sharedContext', this.sharedContext.getContext()]\n        ]);\n\n        const results = await this.workflowEngine.execute(workflowId, context);\n\n        this.activeWorkflows.delete(workflowId);\n        return results;\n    }\n\n    /**\n     * Execute complex workflow with checkpointing and dynamic adjustment\n     */\n    private async executeComplexWorkflow(\n        workflowId: string,\n        description: string,\n        sessionId: string,\n        stream: vscode.ChatResponseStream\n    ): Promise<Map<string, any>> {\n        const results = new Map<string, any>();\n        const workflow = this.workflowEngine['workflows'].get(workflowId);\n\n        if (!workflow) return results;\n\n        // Set up event handlers for real-time updates\n        this.workflowEngine['eventBus'].on('stage-started', (event: any) => {\n            if (event.workflowId === workflowId) {\n                stream.markdown(`\\n**Stage Started:** ${event.stage.stageId}\\n`);\n\n                // Update collaboration context\n                this.communicationBus.updateCollaborationContext(\n                    sessionId,\n                    'orchestrator',\n                    'current_stage',\n                    event.stage\n                );\n            }\n        });\n\n        this.workflowEngine['eventBus'].on('node-completed', (event: any) => {\n            if (event.workflowId === workflowId) {\n                // Check if adjustment needed based on result\n                if (event.result.status === 'failure') {\n                    // Request help from other agents\n                    this.requestAgentHelp(event.node, event.result.error);\n                }\n\n                // Update shared context\n                this.sharedContext.updateContext(\n                    'orchestrator',\n                    `result_${event.node.id}`,\n                    event.result\n                );\n            }\n        });\n\n        // Create checkpoints at critical stages\n        this.workflowEngine['eventBus'].on('stage-completed', (event: any) => {\n            if (event.workflowId === workflowId) {\n                this.workflowEngine.createCheckpoint(workflowId, event.stage.stageId);\n                stream.markdown(`💾 Checkpoint created at ${event.stage.stageId}\\n`);\n            }\n        });\n\n        // Execute with context\n        const context = new Map<string, any>([\n            ['prompt', description],\n            ['sessionId', sessionId],\n            ['sharedContext', this.sharedContext.getContext()]\n        ]);\n\n        try {\n            return await this.workflowEngine.execute(workflowId, context);\n        } catch (error) {\n            stream.markdown(`\\n⚠️ **Workflow error, attempting recovery...**\\n`);\n\n            // Try to recover from last checkpoint\n            const checkpoints = workflow.checkpoints;\n            if (checkpoints.length > 0) {\n                const lastCheckpoint = checkpoints[checkpoints.length - 1];\n                this.workflowEngine.restoreFromCheckpoint(workflowId, lastCheckpoint.id);\n\n                stream.markdown(`♻️ Restored from checkpoint: ${lastCheckpoint.nodeId}\\n`);\n\n                // Retry execution\n                return await this.workflowEngine.execute(workflowId, context);\n            }\n\n            throw error;\n        }\n    }\n\n    /**\n     * Request help from other agents when stuck\n     */\n    private async requestAgentHelp(node: WorkflowNode, error: string): Promise<void> {\n        const helpResponse = await this.communicationBus.requestHelp(\n            'orchestrator',\n            {\n                node,\n                error,\n                context: this.sharedContext.getContext()\n            }\n        );\n\n        if (helpResponse && helpResponse.length > 0) {\n            // Apply first suggested solution\n            const solution = helpResponse[0];\n\n            // Adjust workflow based on help\n            this.workflowEngine.adjustWorkflow(node.id, {\n                type: 'modify-node',\n                nodeId: node.id,\n                modifications: {\n                    task: solution.suggestion || node.task\n                }\n            });\n        }\n    }\n\n    /**\n     * Display execution plan\n     */\n    private displayExecutionPlan(plan: ExecutionPlan, stream: vscode.ChatResponseStream): void {\n        stream.markdown(`### 📋 Execution Plan\\n\\n`);\n        stream.markdown(`**Stages:** ${plan.stages.length}\\n`);\n        stream.markdown(`**Parallelism:** ${plan.parallelism}x\\n`);\n        stream.markdown(`**Estimated Duration:** ${plan.estimatedDuration}ms\\n\\n`);\n\n        plan.stages.forEach((stage, index) => {\n            stream.markdown(`**Stage ${index + 1}:** ${stage.parallel ? '⚡ Parallel' : '📝 Sequential'}\\n`);\n            stage.nodes.forEach(node => {\n                stream.markdown(`  - ${node.agentId || 'system'}: ${node.id}\\n`);\n            });\n        });\n\n        stream.markdown(`\\n**Critical Path:** ${plan.criticalPath.join(' → ')}\\n\\n`);\n    }\n\n    /**\n     * Display advanced execution plan\n     */\n    private displayAdvancedExecutionPlan(plan: ExecutionPlan, stream: vscode.ChatResponseStream): void {\n        stream.markdown(`### 🚀 Advanced Execution Strategy\\n\\n`);\n\n        // Create visual representation\n        stream.markdown(`\\`\\`\\`mermaid\\ngraph TB\\n`);\n\n        plan.stages.forEach((stage, index) => {\n            if (stage.parallel) {\n                stream.markdown(`  subgraph \"Stage ${index + 1} - Parallel\"\\n`);\n                stage.nodes.forEach(node => {\n                    stream.markdown(`    ${node.id}[\"${node.agentId}: ${node.id}\"]\\n`);\n                });\n                stream.markdown(`  end\\n`);\n            } else {\n                stage.nodes.forEach(node => {\n                    stream.markdown(`  ${node.id}[\"${node.agentId}: ${node.id}\"]\\n`);\n                });\n            }\n        });\n\n        // Add dependencies as edges\n        plan.stages.forEach((stage, index) => {\n            if (index > 0) {\n                const prevStage = plan.stages[index - 1];\n                prevStage.nodes.forEach(prevNode => {\n                    stage.nodes.forEach(currNode => {\n                        if (currNode.dependencies?.includes(prevNode.id)) {\n                            stream.markdown(`  ${prevNode.id} --> ${currNode.id}\\n`);\n                        }\n                    });\n                });\n            }\n        });\n\n        stream.markdown(`\\`\\`\\`\\n\\n`);\n\n        // Performance metrics\n        stream.markdown(`**Performance Optimization:**\\n`);\n        stream.markdown(`- Parallel Execution Speed-up: ${plan.parallelism}x\\n`);\n        stream.markdown(`- Critical Path Length: ${plan.criticalPath.length} steps\\n`);\n        stream.markdown(`- Total Estimated Time: ${(plan.estimatedDuration / 1000).toFixed(1)}s\\n\\n`);\n    }\n\n    /**\n     * Display simple results\n     */\n    private displayResults(results: Map<string, any>, stream: vscode.ChatResponseStream): void {\n        stream.markdown(`\\n### 📊 Results\\n\\n`);\n\n        results.forEach((result, nodeId) => {\n            if (result.status === 'success') {\n                stream.markdown(`**✅ ${nodeId}:**\\n${result.output?.result || result.output || 'Completed'}\\n\\n`);\n            } else if (result.status === 'failure') {\n                stream.markdown(`**❌ ${nodeId}:** ${result.error}\\n\\n`);\n            }\n        });\n    }\n\n    /**\n     * Display complex results with insights\n     */\n    private displayComplexResults(results: Map<string, any>, stream: vscode.ChatResponseStream): void {\n        stream.markdown(`\\n### 🎯 Comprehensive Results\\n\\n`);\n\n        // Group results by status\n        const successes: any[] = [];\n        const failures: any[] = [];\n\n        results.forEach((result, nodeId) => {\n            if (result.status === 'success') {\n                successes.push({ nodeId, ...result });\n            } else {\n                failures.push({ nodeId, ...result });\n            }\n        });\n\n        // Display successes\n        if (successes.length > 0) {\n            stream.markdown(`#### ✅ Successful Tasks (${successes.length})\\n\\n`);\n            successes.forEach(result => {\n                stream.markdown(`**${result.nodeId}:**\\n`);\n                stream.markdown(`${result.output?.result || result.output || 'Completed'}\\n\\n`);\n            });\n        }\n\n        // Display failures\n        if (failures.length > 0) {\n            stream.markdown(`#### ⚠️ Failed Tasks (${failures.length})\\n\\n`);\n            failures.forEach(result => {\n                stream.markdown(`**${result.nodeId}:** ${result.error}\\n`);\n                stream.markdown(`*Suggestion:* Try using @fixer to resolve this issue\\n\\n`);\n            });\n        }\n\n        // Display insights\n        const insights = this.generateInsights(results);\n        if (insights.length > 0) {\n            stream.markdown(`#### 💡 Insights & Recommendations\\n\\n`);\n            insights.forEach(insight => {\n                stream.markdown(`- ${insight}\\n`);\n            });\n        }\n\n        // Display collaboration metrics\n        const collaborationStats = this.communicationBus.getStats();\n        stream.markdown(`\\n#### 📈 Collaboration Metrics\\n\\n`);\n        stream.markdown(`- Total Messages Exchanged: ${collaborationStats.totalMessages}\\n`);\n        stream.markdown(`- Average Response Time: ${collaborationStats.averageResponseTime.toFixed(0)}ms\\n`);\n        stream.markdown(`- Active Sessions: ${collaborationStats.activeSessions}\\n`);\n    }\n\n    /**\n     * Generate insights from results\n     */\n    private generateInsights(results: Map<string, any>): string[] {\n        const insights: string[] = [];\n\n        // Calculate success rate\n        let successes = 0;\n        let total = 0;\n\n        results.forEach(result => {\n            total++;\n            if (result.status === 'success') successes++;\n        });\n\n        const successRate = (successes / total) * 100;\n\n        if (successRate === 100) {\n            insights.push('🎉 Perfect execution! All tasks completed successfully.');\n        } else if (successRate >= 80) {\n            insights.push(`✅ Good performance with ${successRate.toFixed(0)}% success rate.`);\n        } else {\n            insights.push(`⚠️ Room for improvement with ${successRate.toFixed(0)}% success rate.`);\n        }\n\n        // Analyze patterns\n        const agents = new Map<string, number>();\n        results.forEach((result, nodeId) => {\n            const agent = (result as any).agent || 'unknown';\n            agents.set(agent, (agents.get(agent) || 0) + 1);\n        });\n\n        const mostUsedAgent = Array.from(agents.entries())\n            .sort(([, a], [, b]) => b - a)[0];\n\n        if (mostUsedAgent) {\n            insights.push(`📊 Most active agent: @${mostUsedAgent[0]} (${mostUsedAgent[1]} tasks)`);\n        }\n\n        // Check for bottlenecks\n        const longRunning = Array.from(results.entries())\n            .filter(([, r]) => r.duration > 10000)\n            .map(([id]) => id);\n\n        if (longRunning.length > 0) {\n            insights.push(`⏱️ Potential bottlenecks detected in: ${longRunning.join(', ')}`);\n        }\n\n        return insights;\n    }\n\n    /**\n     * Store task memory for learning\n     */\n    private async storeTaskMemory(\n        prompt: string,\n        complexity: string,\n        workflowId: string,\n        results: Map<string, any>\n    ): Promise<void> {\n        const taskMemory: TaskMemory = {\n            taskId: workflowId,\n            description: prompt,\n            decomposition: [],\n            outcome: {\n                status: this.determineOverallStatus(results),\n                quality: this.calculateQuality(results),\n                improvements: this.suggestImprovements(results)\n            },\n            duration: this.calculateTotalDuration(results),\n            agentsInvolved: this.extractAgents(results),\n            lessonsLearned: this.extractLessons(results)\n        };\n\n        await this.memoryManager.store(\n            'orchestrator',\n            { prompt, complexity, taskMemory },\n            MemoryType.EPISODIC,\n            { importance: 0.7 }\n        );\n    }\n\n    /**\n     * Store complex task memory with patterns\n     */\n    private async storeComplexTaskMemory(\n        prompt: string,\n        decomposition: TaskDecomposition,\n        workflowId: string,\n        results: Map<string, any>\n    ): Promise<void> {\n        const taskMemory: TaskMemory = {\n            taskId: workflowId,\n            description: prompt,\n            decomposition: decomposition.subtasks.map(st => ({\n                stepId: st.id,\n                description: st.description,\n                assignedAgent: st.agent,\n                status: results.has(st.id) && results.get(st.id).status === 'success'\n                    ? 'completed'\n                    : 'failed',\n                output: results.get(st.id),\n                dependencies: st.dependencies\n            })),\n            outcome: {\n                status: this.determineOverallStatus(results),\n                quality: this.calculateQuality(results),\n                improvements: this.suggestImprovements(results)\n            },\n            duration: this.calculateTotalDuration(results),\n            agentsInvolved: decomposition.requiredAgents,\n            lessonsLearned: this.extractLessons(results)\n        };\n\n        await this.memoryManager.store(\n            'orchestrator',\n            { prompt, decomposition, taskMemory },\n            MemoryType.EPISODIC,\n            { importance: 0.9 }\n        );\n    }\n\n    /**\n     * Extract and store patterns from successful execution\n     */\n    private async extractAndStorePatterns(\n        decomposition: TaskDecomposition,\n        results: Map<string, any>\n    ): Promise<void> {\n        // Look for successful patterns\n        const successfulSubtasks = decomposition.subtasks.filter(st =>\n            results.has(st.id) && results.get(st.id).status === 'success'\n        );\n\n        if (successfulSubtasks.length > 0) {\n            // Store as procedural memory\n            await this.memoryManager.store(\n                'orchestrator',\n                {\n                    pattern: 'successful_decomposition',\n                    mainGoal: decomposition.mainGoal,\n                    successfulApproach: successfulSubtasks.map(st => ({\n                        agent: st.agent,\n                        task: st.description,\n                        priority: st.priority\n                    }))\n                },\n                MemoryType.PROCEDURAL,\n                { importance: 0.85 }\n            );\n        }\n\n        // Identify agent collaboration patterns\n        const collaborations = new Map<string, string[]>();\n        decomposition.dependencies.forEach(dep => {\n            const fromAgent = decomposition.subtasks.find(st => st.id === dep.from)?.agent;\n            const toAgent = decomposition.subtasks.find(st => st.id === dep.to)?.agent;\n\n            if (fromAgent && toAgent) {\n                if (!collaborations.has(fromAgent)) {\n                    collaborations.set(fromAgent, []);\n                }\n                collaborations.get(fromAgent)!.push(toAgent);\n            }\n        });\n\n        if (collaborations.size > 0) {\n            await this.memoryManager.store(\n                'orchestrator',\n                {\n                    pattern: 'agent_collaboration',\n                    collaborations: Object.fromEntries(collaborations)\n                },\n                MemoryType.SEMANTIC,\n                { importance: 0.75 }\n            );\n        }\n    }\n\n    // Utility methods for result analysis\n\n    private determineOverallStatus(results: Map<string, any>): 'success' | 'partial' | 'failure' {\n        let successes = 0;\n        let total = 0;\n\n        results.forEach(result => {\n            total++;\n            if (result.status === 'success') successes++;\n        });\n\n        const rate = successes / total;\n        if (rate === 1) return 'success';\n        if (rate >= 0.5) return 'partial';\n        return 'failure';\n    }\n\n    private calculateQuality(results: Map<string, any>): number {\n        let totalQuality = 0;\n        let count = 0;\n\n        results.forEach(result => {\n            count++;\n            totalQuality += result.status === 'success' ? 1 : 0;\n        });\n\n        return count > 0 ? totalQuality / count : 0;\n    }\n\n    private suggestImprovements(results: Map<string, any>): string[] {\n        const improvements: string[] = [];\n\n        results.forEach((result, nodeId) => {\n            if (result.status === 'failure') {\n                improvements.push(`Improve error handling for ${nodeId}`);\n            }\n            if (result.duration > 15000) {\n                improvements.push(`Optimize performance of ${nodeId}`);\n            }\n        });\n\n        return improvements;\n    }\n\n    private calculateTotalDuration(results: Map<string, any>): number {\n        let total = 0;\n        results.forEach(result => {\n            total += result.duration || 0;\n        });\n        return total;\n    }\n\n    private extractAgents(results: Map<string, any>): string[] {\n        const agents = new Set<string>();\n        results.forEach(result => {\n            if ((result as any).agent) {\n                agents.add((result as any).agent);\n            }\n        });\n        return Array.from(agents);\n    }\n\n    private extractLessons(results: Map<string, any>): string[] {\n        const lessons: string[] = [];\n\n        // Analyze failures\n        results.forEach((result, nodeId) => {\n            if (result.status === 'failure') {\n                lessons.push(`Task ${nodeId} failed: ${result.error}`);\n            }\n        });\n\n        // Analyze successes\n        const successCount = Array.from(results.values())\n            .filter(r => r.status === 'success').length;\n\n        if (successCount === results.size) {\n            lessons.push('All tasks completed successfully - workflow is reliable');\n        }\n\n        return lessons;\n    }\n\n    private createCondition(conditionStr: string): (context: any) => boolean {\n        return (context: any) => {\n            // Simple condition evaluation\n            // In production, use proper expression parser\n            return true;\n        };\n    }\n\n    /**\n     * Handle direct response for simple queries\n     */\n    private async handleDirectResponse(\n        prompt: string,\n        stream: vscode.ChatResponseStream\n    ): Promise<void> {\n        const systemPrompt = `You are an intelligent orchestrator. Answer directly and concisely.\n${this.getSystemContextPrompt()}`;\n\n        const response = await this.openAIService.chat([\n            { role: 'system', content: systemPrompt },\n            { role: 'user', content: prompt }\n        ]);\n\n        stream.markdown(response);\n    }\n\n    /**\n     * Register communication handlers\n     */\n    private registerCommunicationHandlers(): void {\n        this.communicationBus.register({\n            agentId: 'orchestrator',\n            messageTypes: [\n                MessageType.CONFLICT,\n                MessageType.STATUS_UPDATE,\n                MessageType.ERROR\n            ],\n            handler: async (message) => {\n                return await this.handleAgentMessage(message);\n            }\n        });\n    }\n\n    /**\n     * Handle messages from other agents\n     */\n    private async handleAgentMessage(message: any): Promise<any> {\n        switch (message.type) {\n            case MessageType.CONFLICT:\n                // Trigger OpusArbitrator for conflict resolution\n                return await this.resolveConflict(message.content);\n\n            case MessageType.STATUS_UPDATE:\n                // Update workflow status\n                this.updateWorkflowStatus(message.content);\n                return { acknowledged: true };\n\n            case MessageType.ERROR:\n                // Handle agent errors\n                return await this.handleAgentError(message.content);\n\n            default:\n                return { acknowledged: true };\n        }\n    }\n\n    /**\n     * Resolve conflicts between agents\n     */\n    private async resolveConflict(conflict: any): Promise<any> {\n        // Route to OpusArbitrator\n        await this.communicationBus.send({\n            from: 'orchestrator',\n            to: 'OpusArbitrator',\n            type: MessageType.CONFLICT,\n            content: conflict,\n            metadata: {\n                priority: 'critical',\n                requiresResponse: true\n            }\n        });\n\n        return { routing: 'OpusArbitrator' };\n    }\n\n    /**\n     * Update workflow status based on agent updates\n     */\n    private updateWorkflowStatus(update: any): void {\n        // Update shared context\n        this.sharedContext.updateContext(\n            'orchestrator',\n            `workflow_status_${update.workflowId}`,\n            update\n        );\n    }\n\n    /**\n     * Handle errors from agents\n     */\n    private async handleAgentError(error: any): Promise<any> {\n        // Check if we can recover\n        const recovery = await this.attemptRecovery(error);\n\n        if (recovery) {\n            return { recovery: true, action: recovery };\n        }\n\n        // Escalate to user\n        return { recovery: false, escalate: true };\n    }\n\n    /**\n     * Attempt to recover from agent errors\n     */\n    private async attemptRecovery(error: any): Promise<any> {\n        // Search memory for similar errors\n        const similarErrors = await this.memoryManager.search(error, {\n            k: 3,\n            type: MemoryType.EPISODIC\n        });\n\n        if (similarErrors.length > 0) {\n            // Found similar error with solution\n            const solution = (similarErrors[0].entry.content as any).solution;\n            if (solution) {\n                return solution;\n            }\n        }\n\n        // Try alternative agent\n        const registry = AgentRegistry.getInstance();\n        const alternativeAgent = registry.suggestAgentForTask(error.task);\n\n        if (alternativeAgent && alternativeAgent !== error.agent) {\n            return {\n                type: 'retry',\n                agent: alternativeAgent\n            };\n        }\n\n        return null;\n    }\n\n    /**\n     * Build context with memory\n     */\n    private async buildContextWithMemory(request: any): Promise<any> {\n        // Search for relevant memories\n        const memories = await this.memoryManager.search(request.prompt, {\n            k: 10,\n            type: MemoryType.EPISODIC\n        });\n\n        // Get shared context\n        const sharedContext = this.sharedContext.getContext();\n\n        return {\n            ...request,\n            memories: memories.map(m => m.entry.content),\n            sharedContext,\n            activeAgents: this.sharedContext.getActiveAgents()\n        };\n    }\n\n    // Command handlers remain similar but use new orchestration methods\n    // ... (rest of the command handlers can be kept or adapted as needed)\n\n    // Required by ChatAgent abstract class\n    protected async processWorkflowStep(\n        step: WorkflowStep,\n        request: TaskRequest,\n        previousResults: TaskResult[]\n    ): Promise<TaskResult> {\n        // Use AI to intelligently decide how to handle the request\n        const classificationPrompt = `You are the advanced orchestrator of a multi-agent AI system.\n\n${this.getSystemAgentContext()}\n\nClassify this request and decide how to handle it:\nRequest: \"${request.prompt}\"\n\nRespond with a JSON object:\n{\n  \"requestType\": \"query\" | \"simple_task\" | \"complex_task\",\n  \"shouldAnswer\": true/false (should orchestrator answer directly?),\n  \"reasoning\": \"brief explanation\",\n  \"suggestedAgent\": \"agent_name or null if orchestrator handles it\"\n}\n\nRules:\n- \"query\": Information requests, questions about the system, agent capabilities\n- \"simple_task\": Single-step implementation, bug fix, or straightforward coding\n- \"complex_task\": Multi-step projects requiring multiple agents\n- Set shouldAnswer=true for queries about agents, system capabilities, or general questions\n- Set shouldAnswer=false for implementation tasks that need specialist agents`;\n\n        try {\n            // Get AI classification\n            const classificationResponse = await this.openAIService.chat([\n                { role: 'system', content: classificationPrompt },\n                { role: 'user', content: request.prompt }\n            ]);\n\n            let classification;\n            try {\n                classification = JSON.parse(classificationResponse);\n            } catch {\n                // Fallback if JSON parsing fails\n                classification = {\n                    requestType: 'query',\n                    shouldAnswer: true,\n                    reasoning: 'Failed to parse, treating as query'\n                };\n            }\n\n            // Handle based on classification\n            if (classification.shouldAnswer) {\n                // Orchestrator answers directly with full context\n                const answerPrompt = `You are the Advanced KI AutoAgent Orchestrator, the central intelligence coordinating a sophisticated multi-agent AI system.\n\n${this.getSystemAgentContext()}\n\nImportant: When asked about agents, provide comprehensive details including:\n- Agent names and their @mentions\n- Specific capabilities and expertise\n- AI models they use\n- How they collaborate\n- System features like memory, parallel execution, and learning\n\nAnswer this question thoroughly and helpfully:\n\"${request.prompt}\"\n\nProvide a complete, informative response with specific details about our capabilities.`;\n\n                const response = await this.openAIService.chat([\n                    { role: 'system', content: answerPrompt },\n                    { role: 'user', content: request.prompt }\n                ]);\n\n                return {\n                    status: 'success',\n                    content: response,\n                    metadata: {\n                        step: step.id,\n                        agent: 'orchestrator',\n                        type: classification.requestType,\n                        reasoning: classification.reasoning\n                    }\n                };\n            }\n\n            // For tasks, check complexity and handle accordingly\n            if (classification.requestType === 'simple_task' && classification.suggestedAgent) {\n                // Route to specific agent\n                const node: WorkflowNode = {\n                    id: step.id,\n                    type: 'task',\n                    agentId: classification.suggestedAgent,\n                    task: request.prompt\n                };\n\n                const workflow = this.workflowEngine.createWorkflow(`Simple: ${request.prompt}`);\n                this.workflowEngine.addNode(workflow.id, node);\n                const results = await this.workflowEngine.execute(workflow.id);\n\n                const stepResult = results.get(step.id);\n                // Map workflow status to TaskResult status\n                let taskStatus: 'success' | 'partial_success' | 'error' = 'error';\n                if (stepResult?.status === 'success') {\n                    taskStatus = 'success';\n                } else if (stepResult?.status === 'failure') {\n                    taskStatus = 'error';\n                } else if (stepResult?.status === 'skipped') {\n                    taskStatus = 'partial_success';\n                }\n\n                return {\n                    status: taskStatus,\n                    content: stepResult?.output?.result || stepResult?.output || 'Task completed',\n                    metadata: {\n                        step: step.id,\n                        agent: classification.suggestedAgent,\n                        type: 'routed_task'\n                    }\n                };\n            }\n\n            // For complex tasks, use full decomposition\n            if (classification.requestType === 'complex_task') {\n                const decomposition = await this.decomposeTask(request.prompt);\n\n                // Create and execute workflow\n                const workflow = this.workflowEngine.createWorkflow(`Complex: ${request.prompt}`);\n\n                decomposition.subtasks.forEach(subtask => {\n                    const node: WorkflowNode = {\n                        id: subtask.id,\n                        type: 'task',\n                        agentId: subtask.agent,\n                        task: subtask.description,\n                        dependencies: subtask.dependencies\n                    };\n                    this.workflowEngine.addNode(workflow.id, node);\n                });\n\n                const results = await this.workflowEngine.execute(workflow.id);\n\n                // Compile results\n                const summary = this.compileWorkflowResults(results);\n\n                return {\n                    status: 'success',\n                    content: summary,\n                    metadata: {\n                        step: step.id,\n                        agent: 'orchestrator',\n                        type: 'complex_workflow',\n                        subtasks: decomposition.subtasks.length\n                    }\n                };\n            }\n\n            // Fallback: Orchestrator handles directly\n            const response = await this.openAIService.chat([\n                { role: 'system', content: `You are the Orchestrator. ${this.getSystemContextPrompt()}` },\n                { role: 'user', content: request.prompt }\n            ]);\n\n            return {\n                status: 'success',\n                content: response,\n                metadata: {\n                    step: step.id,\n                    agent: 'orchestrator',\n                    type: 'direct_response'\n                }\n            };\n\n        } catch (error) {\n            return {\n                status: 'error',\n                content: `Error processing request: ${(error as any).message}`,\n                metadata: {\n                    step: step.id,\n                    agent: 'orchestrator',\n                    error: (error as any).message\n                }\n            };\n        }\n    }\n\n    /**\n     * Compile workflow results into a coherent summary\n     */\n    private compileWorkflowResults(results: Map<string, any>): string {\n        const sections: string[] = [];\n\n        sections.push('## Workflow Execution Complete\\n');\n\n        results.forEach((result, nodeId) => {\n            if (result.status === 'success') {\n                sections.push(`### ✅ ${nodeId}`);\n                sections.push(result.output?.result || result.output || 'Completed');\n                sections.push('');\n            }\n        });\n\n        const failures = Array.from(results.entries())\n            .filter(([, r]) => r.status !== 'success');\n\n        if (failures.length > 0) {\n            sections.push('### ⚠️ Issues Encountered');\n            failures.forEach(([nodeId, result]) => {\n                sections.push(`- **${nodeId}**: ${result.error || 'Failed'}`);\n            });\n        }\n\n        return sections.join('\\n');\n    }\n\n    /**\n     * Dynamically generate system context about agents and capabilities\n     */\n    private getSystemAgentContext(): string {\n        const registry = AgentRegistry.getInstance();\n        const agents = registry.getRegisteredAgents();\n\n        // Build dynamic context about available agents\n        const agentDescriptions = agents.map(agent => {\n            return `- **${agent.id}** (${agent.name}): ${agent.specialization}. Can handle: ${agent.canHandle.join(', ')}`;\n        }).join('\\n');\n\n        return `You are part of an advanced multi-agent AI system with the following capabilities:\n\n## Available Specialist Agents:\n${agentDescriptions}\n\n## System Features:\n- **Memory System**: 10k capacity with semantic search and pattern recognition\n- **Parallel Execution**: Can run multiple tasks simultaneously for 5x speedup\n- **Inter-Agent Collaboration**: Agents share knowledge and help each other\n- **Learning**: System improves from past executions with 85% similarity threshold\n- **Conflict Resolution**: OpusArbitrator resolves disagreements with superior reasoning\n\n## Your Role as Orchestrator:\nYou coordinate these agents, decompose complex tasks, and ensure efficient execution.\nFor simple queries, you can answer directly. For complex tasks, orchestrate the appropriate agents.`;\n    }\n}","/**\n * Automatic Versioning and DocuBot Integration\n * Triggers version updates and documentation on code changes\n */\n\nimport * as vscode from 'vscode';\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport class AutoVersioning {\n    private dispatcher: any;\n    private docuBotActive: boolean = false;\n    private lastVersion: string = '';\n\n    constructor(dispatcher: any) {\n        this.dispatcher = dispatcher;\n        this.loadLastVersion();\n    }\n\n    /**\n     * Load the last version from package.json\n     */\n    private loadLastVersion(): void {\n        try {\n            const workspaceRoot = vscode.workspace.workspaceFolders?.[0];\n            if (workspaceRoot) {\n                const packageJsonPath = path.join(workspaceRoot.uri.fsPath, 'vscode-extension', 'package.json');\n                if (fs.existsSync(packageJsonPath)) {\n                    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));\n                    this.lastVersion = packageJson.version || '0.0.0';\n                    console.log(`[AUTO-VERSION] Current version: ${this.lastVersion}`);\n                }\n            }\n        } catch (error) {\n            console.error('[AUTO-VERSION] Error loading version:', error);\n            this.lastVersion = '0.0.0';\n        }\n    }\n\n    /**\n     * Handle code changes and trigger versioning/documentation\n     */\n    public async onCodeChange(files: string[]): Promise<void> {\n        // Filter for relevant code changes\n        const hasCodeChanges = files.some(f =>\n            f.endsWith('.ts') ||\n            f.endsWith('.js') ||\n            f.endsWith('.py') ||\n            f.endsWith('.tsx') ||\n            f.endsWith('.jsx')\n        );\n\n        if (!hasCodeChanges) {\n            return;\n        }\n\n        console.log('[AUTO-VERSION] Code changes detected in files:', files);\n\n        try {\n            // Calculate new version based on commit type\n            const newVersion = await this.calculateVersion();\n\n            if (newVersion !== this.lastVersion) {\n                console.log(`[AUTO-VERSION] Version update: ${this.lastVersion} → ${newVersion}`);\n\n                // Update package.json\n                await this.updatePackageVersion(newVersion);\n\n                // Update CHANGELOG.md in CLAUDE.md format\n                await this.updateChangelog(newVersion, files);\n\n                // Trigger DocuBot\n                await this.triggerDocuBot(newVersion, files);\n\n                // Show notification\n                vscode.window.showInformationMessage(\n                    `✅ Version ${newVersion} created, documentation updated`,\n                    'View Changes'\n                ).then(selection => {\n                    if (selection === 'View Changes') {\n                        vscode.commands.executeCommand('git.viewFileChanges');\n                    }\n                });\n\n                this.lastVersion = newVersion;\n            }\n        } catch (error) {\n            console.error('[AUTO-VERSION] Error in versioning workflow:', error);\n            vscode.window.showErrorMessage(`Versioning error: ${error}`);\n        }\n    }\n\n    /**\n     * Calculate new version based on conventional commits\n     */\n    private async calculateVersion(): Promise<string> {\n        try {\n            const workspaceRoot = vscode.workspace.workspaceFolders?.[0];\n            if (!workspaceRoot) return this.lastVersion;\n\n            // Get latest git commits\n            const commits = execSync('git log --oneline -n 10', {\n                cwd: workspaceRoot.uri.fsPath\n            }).toString();\n\n            // Parse version parts\n            const [major, minor, patch] = this.lastVersion.split('.').map(Number);\n\n            // Check for breaking changes\n            if (commits.includes('BREAKING CHANGE') || commits.includes('!:')) {\n                return `${major + 1}.0.0`;\n            }\n\n            // Check for features\n            if (commits.match(/feat:|feature:/)) {\n                return `${major}.${minor + 1}.0`;\n            }\n\n            // Default to patch\n            return `${major}.${minor}.${patch + 1}`;\n        } catch (error) {\n            console.error('[AUTO-VERSION] Error calculating version:', error);\n            // Increment patch as fallback\n            const [major, minor, patch] = this.lastVersion.split('.').map(Number);\n            return `${major}.${minor}.${patch + 1}`;\n        }\n    }\n\n    /**\n     * Update package.json with new version\n     */\n    private async updatePackageVersion(version: string): Promise<void> {\n        const workspaceRoot = vscode.workspace.workspaceFolders?.[0];\n        if (!workspaceRoot) return;\n\n        const packageJsonPath = path.join(workspaceRoot.uri.fsPath, 'vscode-extension', 'package.json');\n\n        if (fs.existsSync(packageJsonPath)) {\n            const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));\n            packageJson.version = version;\n\n            fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2) + '\\n');\n            console.log(`[AUTO-VERSION] Updated package.json to version ${version}`);\n        }\n    }\n\n    /**\n     * Update CHANGELOG.md following CLAUDE.md format\n     */\n    private async updateChangelog(version: string, files: string[]): Promise<void> {\n        const workspaceRoot = vscode.workspace.workspaceFolders?.[0];\n        if (!workspaceRoot) return;\n\n        const changelogPath = path.join(workspaceRoot.uri.fsPath, 'CHANGELOG.md');\n        const claudePath = path.join(workspaceRoot.uri.fsPath, 'CLAUDE.md');\n\n        const date = new Date().toLocaleDateString('de-DE', {\n            day: 'numeric',\n            month: 'numeric',\n            year: 'numeric'\n        });\n\n        // Get recent commit messages for description\n        const commits = execSync('git log --oneline -n 5', {\n            cwd: workspaceRoot.uri.fsPath\n        }).toString();\n\n        const changeEntry = `├── v${version} (${date}) - AUTO-VERSIONED\n│   ├── 🔧 CHANGES\n│   │   ├── Modified files: ${files.length}\n│   │   └── Files: ${files.slice(0, 3).map(f => path.basename(f)).join(', ')}${files.length > 3 ? '...' : ''}\n│   ├── 📝 RECENT COMMITS\n${commits.split('\\n').slice(0, 3).map(c => `│   │   └── ${c}`).join('\\n')}\n│   └── 🤖 Auto-generated by AutoVersioning system\n`;\n\n        // Update CHANGELOG.md\n        if (fs.existsSync(changelogPath)) {\n            const changelog = fs.readFileSync(changelogPath, 'utf-8');\n            const updatedChangelog = changelog.replace(\n                '## Version History',\n                `## Version History\\n\\n${changeEntry}`\n            );\n            fs.writeFileSync(changelogPath, updatedChangelog);\n        }\n\n        // Also update CLAUDE.md if it exists\n        if (fs.existsSync(claudePath)) {\n            const claude = fs.readFileSync(claudePath, 'utf-8');\n            const updatedClaude = claude.replace(\n                '## 📊 Migration Timeline',\n                `${changeEntry}\\n\\n## 📊 Migration Timeline`\n            );\n            fs.writeFileSync(claudePath, updatedClaude);\n        }\n\n        console.log(`[AUTO-VERSION] Updated changelog for version ${version}`);\n    }\n\n    /**\n     * Trigger DocuBot for documentation updates\n     */\n    private async triggerDocuBot(version: string, files: string[]): Promise<void> {\n        if (this.docuBotActive) {\n            console.log('[AUTO-VERSION] DocuBot already active, skipping');\n            return;\n        }\n\n        this.docuBotActive = true;\n        console.log(`[AUTO-VERSION] Triggering DocuBot for version ${version}`);\n\n        try {\n            // Create DocuBot workflow\n            const docuWorkflow = [\n                {\n                    id: 'update-docs',\n                    agent: 'docu',\n                    description: 'Update documentation for new version'\n                }\n            ];\n\n            const docuRequest = {\n                prompt: `Update documentation for version ${version}.\n                Changed files: ${files.join(', ')}\n\n                Tasks:\n                1. Update README.md with new version info\n                2. Update API documentation if APIs changed\n                3. Update instruction files if agent behavior changed\n                4. Create release notes\n\n                Focus on what's new and what changed.`,\n                command: 'auto',\n                context: {\n                    version,\n                    changedFiles: files\n                }\n            };\n\n            // Execute DocuBot workflow\n            await this.dispatcher.executeWorkflow(docuWorkflow, docuRequest);\n\n            console.log('[AUTO-VERSION] DocuBot documentation update completed');\n        } catch (error) {\n            console.error('[AUTO-VERSION] Error triggering DocuBot:', error);\n        } finally {\n            this.docuBotActive = false;\n        }\n    }\n\n    /**\n     * Watch for file changes\n     */\n    public startWatching(): vscode.Disposable {\n        const watcher = vscode.workspace.createFileSystemWatcher('**/*.{ts,js,py,tsx,jsx}');\n\n        const changedFiles: Set<string> = new Set();\n        let debounceTimer: NodeJS.Timeout;\n\n        const handleChanges = () => {\n            if (changedFiles.size > 0) {\n                const files = Array.from(changedFiles);\n                changedFiles.clear();\n                this.onCodeChange(files);\n            }\n        };\n\n        watcher.onDidChange(uri => {\n            changedFiles.add(uri.fsPath);\n            clearTimeout(debounceTimer);\n            debounceTimer = setTimeout(handleChanges, 5000); // Wait 5 seconds after last change\n        });\n\n        watcher.onDidCreate(uri => {\n            changedFiles.add(uri.fsPath);\n            clearTimeout(debounceTimer);\n            debounceTimer = setTimeout(handleChanges, 5000);\n        });\n\n        return watcher;\n    }\n}","module.exports = require(\"child_process\");","/**\n * Unified Chat Mixin - Standardized Chat Properties for all Agents\n * Provides consistent response formatting and logging across all agents\n */\nimport * as vscode from 'vscode';\n\nexport enum ResponseType {\n    INITIALIZATION = \"initialization\",\n    EXECUTING = \"executing\",\n    SUCCESS = \"success\",\n    WARNING = \"warning\",\n    ERROR = \"error\",\n    FALLBACK = \"fallback\",\n    INFO = \"info\",\n    TOOL_USE = \"tool_use\",\n    DEBUG = \"debug\"\n}\n\nexport interface ChatConfig {\n    showEmojis: boolean;\n    showTimestamps: boolean;\n    showDetailedResponses: boolean;\n    logLevel: string;\n    responseFormat: 'detailed' | 'simple';\n    fallbackMode: 'graceful' | 'strict';\n}\n\nexport interface ResponseEntry {\n    timestamp: Date;\n    type: ResponseType;\n    agentName: string;\n    message: string;\n    details?: any;\n    formattedResponse: string;\n}\n\nexport class UnifiedChatMixin {\n    protected chatConfig: ChatConfig;\n    protected responseHistory: ResponseEntry[] = [];\n    private maxHistorySize: number = 100;\n\n    constructor() {\n        this.chatConfig = this.getDefaultChatConfig();\n        this.responseHistory = [];\n    }\n\n    /**\n     * Get default chat configuration from VS Code settings or use defaults\n     */\n    protected getDefaultChatConfig(): ChatConfig {\n        const config = vscode.workspace.getConfiguration('ki-autoagent.chat');\n        \n        return {\n            showEmojis: config.get<boolean>('showEmojis', true),\n            showTimestamps: config.get<boolean>('showTimestamps', true),\n            showDetailedResponses: config.get<boolean>('showDetailedResponses', true),\n            logLevel: config.get<string>('logLevel', 'INFO'),\n            responseFormat: config.get<'detailed' | 'simple'>('responseFormat', 'detailed'),\n            fallbackMode: config.get<'graceful' | 'strict'>('fallbackMode', 'graceful')\n        };\n    }\n\n    /**\n     * Generate unified response with consistent formatting\n     */\n    public unifiedResponse(\n        responseType: ResponseType,\n        message: string,\n        details?: Record<string, any>,\n        logToHistory: boolean = true\n    ): string {\n        const responseParts: string[] = [];\n        \n        // Add emoji if enabled\n        if (this.chatConfig.showEmojis) {\n            const emoji = this.getEmojiForType(responseType);\n            responseParts.push(`${emoji} `);\n        }\n        \n        // Add timestamp if enabled\n        if (this.chatConfig.showTimestamps) {\n            const timestamp = new Date().toLocaleTimeString('en-US', { \n                hour12: false,\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit'\n            });\n            responseParts.push(`[${timestamp}] `);\n        }\n        \n        // Add agent name\n        const agentName = this.getAgentName();\n        responseParts.push(`**${agentName}**: `);\n        \n        // Add main message\n        responseParts.push(message);\n        \n        // Add details if available and detailed responses enabled\n        if (details && this.chatConfig.showDetailedResponses && this.chatConfig.responseFormat === 'detailed') {\n            responseParts.push(this.formatDetails(details));\n        }\n        \n        // Combine response\n        const formattedResponse = responseParts.join('');\n        \n        // Log to history\n        if (logToHistory) {\n            this.logToHistory(responseType, message, details, formattedResponse);\n        }\n        \n        // Log to console based on log level\n        this.logResponse(responseType, formattedResponse);\n        \n        return formattedResponse;\n    }\n\n    /**\n     * Get emoji for response type\n     */\n    private getEmojiForType(responseType: ResponseType): string {\n        const emojiMap: Record<ResponseType, string> = {\n            [ResponseType.INITIALIZATION]: \"🚀\",\n            [ResponseType.EXECUTING]: \"🛠️\",\n            [ResponseType.SUCCESS]: \"✅\",\n            [ResponseType.WARNING]: \"⚠️\",\n            [ResponseType.ERROR]: \"❌\",\n            [ResponseType.FALLBACK]: \"🔄\",\n            [ResponseType.INFO]: \"ℹ️\",\n            [ResponseType.TOOL_USE]: \"🔧\",\n            [ResponseType.DEBUG]: \"🐛\"\n        };\n        return emojiMap[responseType] || \"📝\";\n    }\n\n    /**\n     * Format details object for display\n     */\n    private formatDetails(details: Record<string, any>): string {\n        if (!details || Object.keys(details).length === 0) {\n            return '';\n        }\n        \n        const detailsStr = Object.entries(details)\n            .map(([key, value]) => {\n                const formattedKey = key.replace(/([A-Z])/g, ' $1').trim();\n                const formattedValue = typeof value === 'object' \n                    ? JSON.stringify(value, null, 2) \n                    : value;\n                return `      ${formattedKey}: ${formattedValue}`;\n            })\n            .join('\\n');\n        \n        return `\\n   📊 Details:\\n${detailsStr}`;\n    }\n\n    /**\n     * Get agent name - to be overridden by implementing classes\n     */\n    protected getAgentName(): string {\n        // Try to get from various possible properties\n        return (this as any).name || \n               (this as any).config?.agentId || \n               (this as any).config?.name ||\n               'Agent';\n    }\n\n    /**\n     * Log response to console based on log level\n     */\n    private logResponse(responseType: ResponseType, formattedResponse: string): void {\n        const logLevelMap: Record<ResponseType, string> = {\n            [ResponseType.ERROR]: 'ERROR',\n            [ResponseType.WARNING]: 'WARN',\n            [ResponseType.DEBUG]: 'DEBUG',\n            [ResponseType.INFO]: 'INFO',\n            [ResponseType.SUCCESS]: 'INFO',\n            [ResponseType.EXECUTING]: 'INFO',\n            [ResponseType.INITIALIZATION]: 'INFO',\n            [ResponseType.FALLBACK]: 'WARN',\n            [ResponseType.TOOL_USE]: 'DEBUG'\n        };\n        \n        const level = logLevelMap[responseType] || 'INFO';\n        \n        // Only log if meets minimum log level\n        if (this.shouldLog(level)) {\n            console.log(formattedResponse);\n        }\n    }\n\n    /**\n     * Check if should log based on configured log level\n     */\n    private shouldLog(level: string): boolean {\n        const levels = ['DEBUG', 'INFO', 'WARN', 'ERROR'];\n        const configuredLevel = levels.indexOf(this.chatConfig.logLevel);\n        const messageLevel = levels.indexOf(level);\n        return messageLevel >= configuredLevel;\n    }\n\n    /**\n     * Log to response history\n     */\n    private logToHistory(\n        type: ResponseType, \n        message: string, \n        details: any, \n        formattedResponse: string\n    ): void {\n        const entry: ResponseEntry = {\n            timestamp: new Date(),\n            type,\n            agentName: this.getAgentName(),\n            message,\n            details,\n            formattedResponse\n        };\n        \n        this.responseHistory.push(entry);\n        \n        // Trim history if exceeds max size\n        if (this.responseHistory.length > this.maxHistorySize) {\n            this.responseHistory = this.responseHistory.slice(-this.maxHistorySize);\n        }\n    }\n\n    // Standardized message methods\n\n    /**\n     * Show initialization message\n     */\n    public showInitialization(additionalInfo?: Record<string, any>): string {\n        const details: Record<string, any> = {\n            role: (this as any).role || 'Unknown',\n            model: (this as any).model || (this as any).selectedModel || 'Unknown'\n        };\n        \n        // Add capabilities if available\n        if (typeof (this as any).getCapabilities === 'function') {\n            details.capabilities = (this as any).getCapabilities();\n        }\n        \n        if (additionalInfo) {\n            Object.assign(details, additionalInfo);\n        }\n        \n        return this.unifiedResponse(\n            ResponseType.INITIALIZATION,\n            \"Ready to assist with advanced capabilities!\",\n            details\n        );\n    }\n\n    /**\n     * Show execution start message\n     */\n    public showExecutionStart(task: string, context?: Record<string, any>): string {\n        const details: Record<string, any> = {\n            task: task.substring(0, 100), // Truncate long tasks\n            contextKeys: context ? Object.keys(context) : []\n        };\n        \n        // Add conversation history size if available\n        if (context?.conversationHistory) {\n            details.conversationHistorySize = context.conversationHistory.length;\n        }\n        \n        return this.unifiedResponse(\n            ResponseType.EXECUTING,\n            `Starting execution: ${task.substring(0, 50)}${task.length > 50 ? '...' : ''}`,\n            details\n        );\n    }\n\n    /**\n     * Show success message\n     */\n    public showSuccess(message: string, details?: Record<string, any>): string {\n        return this.unifiedResponse(ResponseType.SUCCESS, message, details);\n    }\n\n    /**\n     * Show warning message\n     */\n    public showWarning(message: string, details?: Record<string, any>): string {\n        return this.unifiedResponse(ResponseType.WARNING, message, details);\n    }\n\n    /**\n     * Show error message\n     */\n    public showError(message: string, error?: Error | any): string {\n        const details: Record<string, any> = {};\n        \n        if (error) {\n            details.error = error.message || String(error);\n            if (error.stack && this.chatConfig.showDetailedResponses) {\n                details.stack = error.stack.split('\\n').slice(0, 3).join('\\n');\n            }\n        }\n        \n        return this.unifiedResponse(ResponseType.ERROR, message, details);\n    }\n\n    /**\n     * Show fallback mode message\n     */\n    public showFallbackMode(reason: string, fallbackAction: string): string {\n        const details = {\n            reason,\n            fallbackAction,\n            mode: this.chatConfig.fallbackMode\n        };\n        \n        return this.unifiedResponse(\n            ResponseType.FALLBACK,\n            `Switching to fallback mode: ${reason}`,\n            details\n        );\n    }\n\n    /**\n     * Show tool use message\n     */\n    public showToolUse(toolName: string, parameters?: Record<string, any>): string {\n        const details: Record<string, any> = {\n            tool: toolName\n        };\n        \n        if (parameters && this.chatConfig.showDetailedResponses) {\n            details.parameters = parameters;\n        }\n        \n        return this.unifiedResponse(\n            ResponseType.TOOL_USE,\n            `Using tool: ${toolName}`,\n            details\n        );\n    }\n\n    /**\n     * Show info message\n     */\n    public showInfo(message: string, details?: Record<string, any>): string {\n        return this.unifiedResponse(ResponseType.INFO, message, details);\n    }\n\n    /**\n     * Show debug message\n     */\n    public showDebug(message: string, details?: Record<string, any>): string {\n        return this.unifiedResponse(ResponseType.DEBUG, message, details);\n    }\n\n    // History management methods\n\n    /**\n     * Get response history\n     */\n    public getResponseHistory(): ResponseEntry[] {\n        return [...this.responseHistory]; // Return copy to prevent external modification\n    }\n\n    /**\n     * Get formatted response history\n     */\n    public getFormattedHistory(limit?: number): string {\n        const history = limit \n            ? this.responseHistory.slice(-limit)\n            : this.responseHistory;\n        \n        return history\n            .map(entry => entry.formattedResponse)\n            .join('\\n');\n    }\n\n    /**\n     * Clear response history\n     */\n    public clearHistory(): void {\n        this.responseHistory = [];\n    }\n\n    /**\n     * Export response history\n     */\n    public exportHistory(): string {\n        return JSON.stringify(this.responseHistory, null, 2);\n    }\n\n    /**\n     * Update chat configuration\n     */\n    public updateChatConfig(config: Partial<ChatConfig>): void {\n        Object.assign(this.chatConfig, config);\n    }\n\n    /**\n     * Get current chat configuration\n     */\n    public getChatConfig(): ChatConfig {\n        return { ...this.chatConfig };\n    }\n}","/**\n * FixerBot - Live Testing & Validation Expert\n * Runs applications, tests changes live, validates output, and suggests fixes\n * Enhanced with automated testing and real-time validation capabilities\n */\nimport * as vscode from 'vscode';\nimport { ChatAgent } from './base/ChatAgent';\nimport { AgentConfig, TaskRequest, TaskResult, WorkflowStep } from '../types';\nimport { VSCodeMasterDispatcher } from '../core/VSCodeMasterDispatcher';\nimport { ClaudeCodeService } from '../services/ClaudeCodeService';\nimport * as path from 'path';\nimport * as child_process from 'child_process';\nimport * as fs from 'fs';\nimport * as http from 'http';\nimport * as https from 'https';\n\ninterface TestResult {\n    status: 'OK' | 'NOT_OK';\n    errors?: string[];\n    output?: string;\n    suggestions?: string[];\n    validations?: ValidationResult[];\n}\n\ninterface ValidationResult {\n    test: string;\n    passed: boolean;\n    message: string;\n}\n\ninterface ProcessResult {\n    success: boolean;\n    output: string;\n    error?: string;\n    exitCode?: number;\n}\n\nexport class FixerBotAgent extends ChatAgent {\n    private claudeService: ClaudeCodeService;\n    private runningProcesses: Map<string, child_process.ChildProcess> = new Map();\n    private testCommands: Map<string, string[]> = new Map([\n        ['npm', ['npm test', 'npm run test', 'npm run test:unit']],\n        ['python', ['pytest', 'python -m pytest', 'python -m unittest']],\n        ['java', ['mvn test', 'gradle test']],\n        ['go', ['go test ./...']]\n    ]);\n    private startCommands: Map<string, string[]> = new Map([\n        ['npm', ['npm start', 'npm run dev', 'npm run serve']],\n        ['python', ['python app.py', 'python main.py', 'flask run', 'uvicorn main:app --reload']],\n        ['java', ['mvn spring-boot:run', 'java -jar target/*.jar']],\n        ['go', ['go run .', 'go run main.go']]\n    ]);\n\n    constructor(context: vscode.ExtensionContext, dispatcher: VSCodeMasterDispatcher) {\n        const config: AgentConfig = {\n            participantId: 'ki-autoagent.fixer',\n            name: 'fixer',\n            fullName: 'FixerBot',\n            description: 'Live Testing Expert - Runs apps, validates changes, and ensures quality',\n            model: 'claude-4.1-sonnet-20250920',\n            iconPath: vscode.Uri.joinPath(context.extensionUri, 'media', 'fixer-icon.svg'),\n            capabilities: [\n                'Bug Detection & Fixing',\n                'Error Resolution',\n                'Performance Optimization',\n                'Code Refactoring',\n                'Memory Leak Fixes',\n                'Crash Debugging',\n                'Hotfix Creation',\n                'Legacy Code Modernization'\n            ],\n            commands: [\n                { name: 'fix', description: 'Fix bugs in current code', handler: 'handleFixCommand' },\n                { name: 'debug', description: 'Debug and diagnose issues', handler: 'handleDebugCommand' },\n                { name: 'optimize', description: 'Optimize code performance', handler: 'handleOptimizeCommand' },\n                { name: 'refactor', description: 'Refactor code structure', handler: 'handleRefactorCommand' },\n                { name: 'modernize', description: 'Update legacy code', handler: 'handleModernizeCommand' }\n            ]\n        };\n\n        super(config, context, dispatcher);\n        this.claudeService = new ClaudeCodeService();\n    }\n\n    protected async handleRequest(\n        request: vscode.ChatRequest,\n        context: vscode.ChatContext,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        const command = request.command;\n        const prompt = request.prompt;\n\n        this.log(`Processing ${command ? `/${command}` : 'general'} fix request: ${prompt.substring(0, 100)}...`);\n\n        if (command) {\n            await this.handleCommand(command, prompt, stream, token);\n        } else {\n            await this.handleGeneralFixRequest(prompt, stream, token);\n        }\n    }\n\n    protected async processWorkflowStep(\n        step: WorkflowStep,\n        request: TaskRequest,\n        previousResults: TaskResult[]\n    ): Promise<TaskResult> {\n\n        try {\n            let fixResult = '';\n\n            switch (step.id) {\n                case 'bug_fix':\n                    fixResult = await this.fixBugs(request, previousResults);\n                    break;\n\n                case 'performance_optimization':\n                    fixResult = await this.optimizePerformance(request, previousResults);\n                    break;\n\n                case 'refactoring':\n                    fixResult = await this.refactorCode(request, previousResults);\n                    break;\n\n                case 'error_resolution':\n                    fixResult = await this.resolveErrors(request, previousResults);\n                    break;\n\n                default:\n                    fixResult = await this.performGeneralFix(request, previousResults);\n            }\n\n            return {\n                status: 'success',\n                content: fixResult,\n                metadata: {\n                    step: step.id,\n                    agent: 'fixer',\n                    type: 'fix'\n                }\n            };\n\n        } catch (error) {\n            throw new Error(`Failed to process fix step ${step.id}: ${(error as any).message}`);\n        }\n    }\n\n    // Command Handlers\n\n    private async handleFixCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        const editor = vscode.window.activeTextEditor;\n        if (!editor) {\n            stream.markdown('❌ No active editor found. Please open a file with bugs to fix.');\n            return;\n        }\n\n        stream.progress('🔧 Analyzing code for bugs...');\n\n        try {\n            const document = editor.document;\n            const code = document.getText();\n            const fileName = path.basename(document.fileName);\n            const language = document.languageId;\n\n            // Find and fix bugs\n            const bugAnalysis = await this.analyzeBugs(code, fileName, language, prompt);\n\n            stream.markdown('## 🔧 Bug Analysis & Fixes\\n\\n');\n            stream.markdown(bugAnalysis.report);\n\n            if (bugAnalysis.fixedCode) {\n                stream.markdown('\\n### 📝 Fixed Code:\\n');\n                stream.markdown('```' + language + '\\n' + bugAnalysis.fixedCode + '\\n```');\n\n                // Offer to apply fixes\n                this.createActionButton(\n                    '✅ Apply Fixes',\n                    'ki-autoagent.replaceContent',\n                    [bugAnalysis.fixedCode],\n                    stream\n                );\n\n                // Offer to create patch\n                this.createActionButton(\n                    '🩹 Create Patch File',\n                    'ki-autoagent.createPatch',\n                    [code, bugAnalysis.fixedCode],\n                    stream\n                );\n            }\n\n        } catch (error) {\n            stream.markdown(`❌ Bug fixing failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleDebugCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        stream.progress('🐛 Starting debug analysis...');\n\n        try {\n            const editor = vscode.window.activeTextEditor;\n            let debugContext = prompt;\n\n            if (editor) {\n                const code = editor.document.getText();\n                const selection = editor.selection;\n                const selectedText = editor.document.getText(selection);\n\n                debugContext = `${prompt}\\n\\nFile: ${editor.document.fileName}\\n`;\n                if (selectedText) {\n                    debugContext += `\\nSelected code:\\n${selectedText}`;\n                } else {\n                    debugContext += `\\nFull code:\\n${code}`;\n                }\n            }\n\n            const debugAnalysis = await this.performDebugAnalysis(debugContext);\n\n            stream.markdown('## 🐛 Debug Analysis\\n\\n');\n            stream.markdown(debugAnalysis);\n\n            // Offer debug actions\n            this.createActionButton(\n                '📍 Add Debug Logging',\n                'ki-autoagent.addDebugLogging',\n                [],\n                stream\n            );\n\n            this.createActionButton(\n                '🔍 Add Breakpoints',\n                'ki-autoagent.addBreakpoints',\n                [],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Debug analysis failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleOptimizeCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        stream.progress('⚡ Optimizing code performance...');\n\n        try {\n            const editor = vscode.window.activeTextEditor;\n            if (!editor) {\n                stream.markdown('❌ No active editor found. Please open a file to optimize.');\n                return;\n            }\n\n            const code = editor.document.getText();\n            const language = editor.document.languageId;\n\n            const optimization = await this.optimizeCode(code, language, prompt);\n\n            stream.markdown('## ⚡ Performance Optimization\\n\\n');\n            stream.markdown(optimization.report);\n\n            if (optimization.optimizedCode) {\n                stream.markdown('\\n### 🚀 Optimized Code:\\n');\n                stream.markdown('```' + language + '\\n' + optimization.optimizedCode + '\\n```');\n\n                // Show performance improvements\n                if (optimization.improvements) {\n                    stream.markdown('\\n### 📊 Performance Improvements:\\n');\n                    stream.markdown(optimization.improvements);\n                }\n\n                // Offer to apply\n                this.createActionButton(\n                    '⚡ Apply Optimizations',\n                    'ki-autoagent.replaceContent',\n                    [optimization.optimizedCode],\n                    stream\n                );\n            }\n\n        } catch (error) {\n            stream.markdown(`❌ Optimization failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleRefactorCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        stream.progress('🔨 Refactoring code structure...');\n\n        try {\n            const editor = vscode.window.activeTextEditor;\n            if (!editor) {\n                stream.markdown('❌ No active editor found. Please open a file to refactor.');\n                return;\n            }\n\n            const code = editor.document.getText();\n            const language = editor.document.languageId;\n\n            const refactoring = await this.refactorCodeStructure(code, language, prompt);\n\n            stream.markdown('## 🔨 Code Refactoring\\n\\n');\n            stream.markdown(refactoring.report);\n\n            if (refactoring.refactoredCode) {\n                stream.markdown('\\n### ✨ Refactored Code:\\n');\n                stream.markdown('```' + language + '\\n' + refactoring.refactoredCode + '\\n```');\n\n                // Offer to apply\n                this.createActionButton(\n                    '🔨 Apply Refactoring',\n                    'ki-autoagent.replaceContent',\n                    [refactoring.refactoredCode],\n                    stream\n                );\n\n                // Offer to create before/after comparison\n                this.createActionButton(\n                    '📊 View Comparison',\n                    'ki-autoagent.showDiff',\n                    [code, refactoring.refactoredCode],\n                    stream\n                );\n            }\n\n        } catch (error) {\n            stream.markdown(`❌ Refactoring failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleModernizeCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        stream.progress('🆕 Modernizing legacy code...');\n\n        try {\n            const editor = vscode.window.activeTextEditor;\n            if (!editor) {\n                stream.markdown('❌ No active editor found. Please open a legacy file to modernize.');\n                return;\n            }\n\n            const code = editor.document.getText();\n            const language = editor.document.languageId;\n\n            const modernization = await this.modernizeLegacyCode(code, language, prompt);\n\n            stream.markdown('## 🆕 Code Modernization\\n\\n');\n            stream.markdown(modernization.report);\n\n            if (modernization.modernCode) {\n                stream.markdown('\\n### 🌟 Modernized Code:\\n');\n                stream.markdown('```' + language + '\\n' + modernization.modernCode + '\\n```');\n\n                // List improvements\n                stream.markdown('\\n### 📋 Modernization Changes:\\n');\n                stream.markdown(modernization.changes);\n\n                // Offer to apply\n                this.createActionButton(\n                    '🆕 Apply Modernization',\n                    'ki-autoagent.replaceContent',\n                    [modernization.modernCode],\n                    stream\n                );\n            }\n\n        } catch (error) {\n            stream.markdown(`❌ Modernization failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleGeneralFixRequest(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        stream.progress('🔧 Analyzing and fixing issues...');\n\n        try {\n            const fix = await this.performGeneralFix({ prompt } as TaskRequest, []);\n\n            stream.markdown('## 🔧 Fix Results\\n\\n');\n            stream.markdown(fix);\n\n        } catch (error) {\n            stream.markdown(`❌ Fix failed: ${(error as any).message}`);\n        }\n    }\n\n    // Fix Methods\n\n    private async analyzeBugs(code: string, fileName: string, language: string, context: string): Promise<any> {\n        const prompt = `Analyze this ${language} code for bugs and provide fixes:\n\nFile: ${fileName}\n\nCode:\n${code}\n\nAdditional context: ${context}\n\nTasks:\n1. Identify all bugs (syntax errors, logic errors, runtime errors)\n2. Explain each bug and its impact\n3. Provide fixed code with all bugs resolved\n4. Include comments explaining the fixes\n\nReturn in format:\n- Bug list with descriptions\n- Fixed code\n- Explanation of changes\n\n${this.getSystemContextPrompt()}`;\n\n        const response = await this.claudeService.sendMessage(prompt);\n\n        // Parse response to extract report and fixed code\n        const content = typeof response === 'string' ? response : response.content || '';\n        return {\n            report: content,\n            fixedCode: this.extractCodeFromResponse(content, language)\n        };\n    }\n\n    private async performDebugAnalysis(context: string): Promise<string> {\n        const prompt = `Perform detailed debug analysis:\n\n${context}\n\nProvide:\n1. Root cause analysis\n2. Step-by-step debugging approach\n3. Potential error sources\n4. Debug logging recommendations\n5. Breakpoint placement suggestions\n6. Variable inspection points\n7. Test cases to reproduce issue\n\n${this.getSystemContextPrompt()}`;\n\n        const response = await this.claudeService.sendMessage(prompt);\n        return typeof response === 'string' ? response : response.content || '';\n    }\n\n    private async optimizeCode(code: string, language: string, context: string): Promise<any> {\n        const prompt = `Optimize this ${language} code for performance:\n\nCode:\n${code}\n\nAdditional context: ${context}\n\nOptimization goals:\n1. Reduce time complexity\n2. Minimize memory usage\n3. Eliminate redundant operations\n4. Optimize loops and iterations\n5. Improve caching\n6. Enhance parallelization opportunities\n\nProvide:\n- Performance analysis\n- Optimized code\n- Specific improvements made\n- Expected performance gains\n\n${this.getSystemContextPrompt()}`;\n\n        const response = await this.claudeService.sendMessage(prompt);\n        const content = typeof response === 'string' ? response : response.content || '';\n\n        return {\n            report: content,\n            optimizedCode: this.extractCodeFromResponse(content, language),\n            improvements: this.extractImprovements(content)\n        };\n    }\n\n    private async refactorCodeStructure(code: string, language: string, context: string): Promise<any> {\n        const prompt = `Refactor this ${language} code for better structure and maintainability:\n\nCode:\n${code}\n\nAdditional context: ${context}\n\nRefactoring goals:\n1. Apply SOLID principles\n2. Extract methods/functions\n3. Reduce coupling\n4. Increase cohesion\n5. Improve naming\n6. Simplify complex logic\n7. Remove code duplication\n\nProvide:\n- Refactoring analysis\n- Refactored code\n- List of improvements\n\n${this.getSystemContextPrompt()}`;\n\n        const response = await this.claudeService.sendMessage(prompt);\n        const content = typeof response === 'string' ? response : response.content || '';\n\n        return {\n            report: content,\n            refactoredCode: this.extractCodeFromResponse(content, language)\n        };\n    }\n\n    private async modernizeLegacyCode(code: string, language: string, context: string): Promise<any> {\n        const prompt = `Modernize this legacy ${language} code to use current best practices:\n\nCode:\n${code}\n\nAdditional context: ${context}\n\nModernization tasks:\n1. Update to latest language features\n2. Replace deprecated APIs\n3. Use modern patterns and idioms\n4. Improve async/await usage\n5. Update dependency usage\n6. Apply current security practices\n7. Enhance type safety\n\nProvide:\n- Modernization analysis\n- Updated code\n- List of changes made\n\n${this.getSystemContextPrompt()}`;\n\n        const response = await this.claudeService.sendMessage(prompt);\n        const content = typeof response === 'string' ? response : response.content || '';\n\n        return {\n            report: content,\n            modernCode: this.extractCodeFromResponse(content, language),\n            changes: this.extractChanges(content)\n        };\n    }\n\n    // Workflow helper methods\n\n    private async fixBugs(request: TaskRequest, previousResults: TaskResult[]): Promise<string> {\n        const context = this.buildContextFromResults(previousResults);\n        const response = await this.claudeService.sendMessage(\n            `Fix bugs based on: ${request.prompt}\\n\\nContext:\\n${context}`\n        );\n        return typeof response === 'string' ? response : response.content || '';\n    }\n\n    private async optimizePerformance(request: TaskRequest, previousResults: TaskResult[]): Promise<string> {\n        const context = this.buildContextFromResults(previousResults);\n        const response = await this.claudeService.sendMessage(\n            `Optimize performance: ${request.prompt}\\n\\nContext:\\n${context}`\n        );\n        return typeof response === 'string' ? response : response.content || '';\n    }\n\n    private async refactorCode(request: TaskRequest, previousResults: TaskResult[]): Promise<string> {\n        const context = this.buildContextFromResults(previousResults);\n        const response = await this.claudeService.sendMessage(\n            `Refactor code: ${request.prompt}\\n\\nContext:\\n${context}`\n        );\n        return typeof response === 'string' ? response : response.content || '';\n    }\n\n    private async resolveErrors(request: TaskRequest, previousResults: TaskResult[]): Promise<string> {\n        const context = this.buildContextFromResults(previousResults);\n        const response = await this.claudeService.sendMessage(\n            `Resolve errors: ${request.prompt}\\n\\nContext:\\n${context}`\n        );\n        return typeof response === 'string' ? response : response.content || '';\n    }\n\n    private async performGeneralFix(request: TaskRequest, previousResults: TaskResult[]): Promise<string> {\n        const context = this.buildContextFromResults(previousResults);\n        const prompt = `Fix the following issue:\n\nRequest: ${request.prompt}\n\nPrevious results:\n${context}\n\nProvide comprehensive fix with explanation.\n\n${this.getSystemContextPrompt()}`;\n\n        const response = await this.claudeService.sendMessage(prompt);\n        return typeof response === 'string' ? response : response.content || '';\n    }\n\n    // Helper methods\n\n    private buildContextFromResults(results: TaskResult[]): string {\n        return results\n            .filter(r => r.status === 'success')\n            .map(r => `${r.metadata?.step || 'Step'}: ${r.content}`)\n            .join('\\n\\n');\n    }\n\n    private extractCodeFromResponse(response: string, language: string): string {\n        // Extract code blocks from markdown response\n        const codeBlockRegex = new RegExp('```' + language + '?\\\\n([\\\\s\\\\S]*?)```', 'g');\n        const matches = response.match(codeBlockRegex);\n        if (matches && matches.length > 0) {\n            // Return the last code block (assumed to be the fixed/optimized version)\n            const lastMatch = matches[matches.length - 1];\n            return lastMatch.replace(new RegExp('```' + language + '?\\\\n'), '').replace(/```$/, '');\n        }\n        return '';\n    }\n\n    private extractImprovements(content: string): string {\n        // Extract performance improvements section\n        const improvementsMatch = content.match(/improvements?:?\\s*([\\s\\S]*?)(?:\\n##|\\n###|$)/i);\n        return improvementsMatch ? improvementsMatch[1].trim() : '';\n    }\n\n    private extractChanges(content: string): string {\n        // Extract changes section\n        const changesMatch = content.match(/changes?:?\\s*([\\s\\S]*?)(?:\\n##|\\n###|$)/i);\n        return changesMatch ? changesMatch[1].trim() : '';\n    }\n\n    // ================ LIVE TESTING & VALIDATION METHODS ================\n\n    /**\n     * Test code changes live by running the application\n     */\n    public async testLive(code: string, projectPath?: string): Promise<TestResult> {\n        console.log('[FIXERBOT] Starting live testing...');\n\n        try {\n            // Detect project type\n            const projectType = await this.detectProjectType(projectPath);\n            console.log(`[FIXERBOT] Detected project type: ${projectType}`);\n\n            // Start application\n            const appProcess = await this.runApplication(projectType, projectPath);\n\n            // Give app time to start\n            await this.waitForAppStart(appProcess, 5000);\n\n            // Run validation tests\n            const validations = await this.validateApplication(projectType);\n\n            // Run unit tests\n            const testResults = await this.runTests(projectType, projectPath);\n\n            // Analyze results\n            const analysis = this.analyzeResults(validations, testResults, appProcess.output);\n\n            // Kill the process\n            this.killProcess(appProcess.pid);\n\n            return analysis;\n\n        } catch (error) {\n            console.error('[FIXERBOT] Live testing error:', error);\n            return {\n                status: 'NOT_OK',\n                errors: [(error as any).message],\n                suggestions: ['Check project setup', 'Verify dependencies are installed']\n            };\n        }\n    }\n\n    /**\n     * Detect project type from files\n     */\n    private async detectProjectType(projectPath?: string): Promise<string> {\n        const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n        const basePath = projectPath || workspaceFolder?.uri.fsPath || '';\n\n        // Check for package.json (Node.js)\n        if (fs.existsSync(path.join(basePath, 'package.json'))) {\n            return 'npm';\n        }\n\n        // Check for requirements.txt or setup.py (Python)\n        if (fs.existsSync(path.join(basePath, 'requirements.txt')) ||\n            fs.existsSync(path.join(basePath, 'setup.py'))) {\n            return 'python';\n        }\n\n        // Check for pom.xml or build.gradle (Java)\n        if (fs.existsSync(path.join(basePath, 'pom.xml'))) {\n            return 'maven';\n        }\n        if (fs.existsSync(path.join(basePath, 'build.gradle'))) {\n            return 'gradle';\n        }\n\n        // Check for go.mod (Go)\n        if (fs.existsSync(path.join(basePath, 'go.mod'))) {\n            return 'go';\n        }\n\n        return 'unknown';\n    }\n\n    /**\n     * Run the application\n     */\n    private async runApplication(projectType: string, projectPath?: string): Promise<ProcessResult & { pid: number }> {\n        const commands = this.startCommands.get(projectType) || [];\n        const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n        const cwd = projectPath || workspaceFolder?.uri.fsPath || process.cwd();\n\n        for (const command of commands) {\n            try {\n                console.log(`[FIXERBOT] Trying to start app with: ${command}`);\n\n                const child = child_process.spawn(command, {\n                    cwd,\n                    shell: true,\n                    env: { ...process.env, NODE_ENV: 'test' }\n                });\n\n                const processKey = `app_${Date.now()}`;\n                this.runningProcesses.set(processKey, child);\n\n                // Collect output\n                let output = '';\n                let error = '';\n\n                child.stdout?.on('data', (data) => {\n                    output += data.toString();\n                });\n\n                child.stderr?.on('data', (data) => {\n                    error += data.toString();\n                });\n\n                // Return immediately with running process\n                return {\n                    success: true,\n                    output,\n                    error,\n                    pid: child.pid!\n                };\n\n            } catch (error) {\n                console.error(`[FIXERBOT] Failed to start with ${command}:`, error);\n            }\n        }\n\n        throw new Error('Could not start application with any known command');\n    }\n\n    /**\n     * Wait for application to start\n     */\n    private async waitForAppStart(process: ProcessResult, timeout: number): Promise<void> {\n        return new Promise((resolve) => {\n            setTimeout(resolve, timeout);\n        });\n    }\n\n    /**\n     * Validate running application\n     */\n    private async validateApplication(projectType: string): Promise<ValidationResult[]> {\n        const validations: ValidationResult[] = [];\n\n        // Check if HTTP server is responding\n        const httpCheck = await this.checkHttpEndpoint('http://localhost:3000');\n        validations.push({\n            test: 'HTTP Server Check',\n            passed: httpCheck.success,\n            message: httpCheck.message\n        });\n\n        // Check for common API endpoints\n        const apiCheck = await this.checkHttpEndpoint('http://localhost:3000/api/health');\n        validations.push({\n            test: 'API Health Check',\n            passed: apiCheck.success,\n            message: apiCheck.message\n        });\n\n        return validations;\n    }\n\n    /**\n     * Check HTTP endpoint\n     */\n    private async checkHttpEndpoint(url: string): Promise<{ success: boolean; message: string }> {\n        return new Promise((resolve) => {\n            const protocol = url.startsWith('https') ? https : http;\n\n            protocol.get(url, (res) => {\n                resolve({\n                    success: res.statusCode === 200,\n                    message: `Status: ${res.statusCode}`\n                });\n            }).on('error', (error) => {\n                resolve({\n                    success: false,\n                    message: error.message\n                });\n            });\n        });\n    }\n\n    /**\n     * Run unit tests\n     */\n    private async runTests(projectType: string, projectPath?: string): Promise<ProcessResult> {\n        const commands = this.testCommands.get(projectType) || [];\n        const cwd = projectPath || vscode.workspace.workspaceFolders?.[0]?.uri.fsPath || process.cwd();\n\n        for (const command of commands) {\n            try {\n                console.log(`[FIXERBOT] Running tests with: ${command}`);\n\n                const result = await this.executeCommand(command, cwd);\n\n                if (result.success || result.output.includes('passing') || result.output.includes('passed')) {\n                    return result;\n                }\n            } catch (error) {\n                console.error(`[FIXERBOT] Test command failed: ${command}`, error);\n            }\n        }\n\n        return {\n            success: false,\n            output: 'No test command found or all tests failed',\n            error: 'Could not run tests'\n        };\n    }\n\n    /**\n     * Execute command and wait for result\n     */\n    private async executeCommand(command: string, cwd: string): Promise<ProcessResult> {\n        return new Promise((resolve) => {\n            child_process.exec(command, { cwd }, (error, stdout, stderr) => {\n                resolve({\n                    success: !error,\n                    output: stdout,\n                    error: stderr,\n                    exitCode: error?.code\n                });\n            });\n        });\n    }\n\n    /**\n     * Analyze test results and generate report\n     */\n    private analyzeResults(\n        validations: ValidationResult[],\n        testResults: ProcessResult,\n        appOutput: string\n    ): TestResult {\n        const errors: string[] = [];\n        const suggestions: string[] = [];\n\n        // Check validations\n        const failedValidations = validations.filter(v => !v.passed);\n        failedValidations.forEach(v => {\n            errors.push(`${v.test}: ${v.message}`);\n        });\n\n        // Check test results\n        if (!testResults.success) {\n            errors.push('Unit tests failed');\n            if (testResults.error) {\n                errors.push(testResults.error);\n            }\n        }\n\n        // Check for common errors in app output\n        if (appOutput.includes('Error') || appOutput.includes('Exception')) {\n            errors.push('Application errors detected in console output');\n        }\n\n        // Generate suggestions based on errors\n        if (errors.length > 0) {\n            if (errors.some(e => e.includes('Cannot find module'))) {\n                suggestions.push('Run npm install to install missing dependencies');\n            }\n            if (errors.some(e => e.includes('port') || e.includes('EADDRINUSE'))) {\n                suggestions.push('Port already in use. Kill other processes or use different port');\n            }\n            if (errors.some(e => e.includes('syntax'))) {\n                suggestions.push('Check for syntax errors in recent changes');\n            }\n            if (errors.some(e => e.includes('test'))) {\n                suggestions.push('Review failing test cases and update implementation');\n            }\n        }\n\n        return {\n            status: errors.length === 0 ? 'OK' : 'NOT_OK',\n            errors,\n            output: appOutput.substring(0, 1000), // First 1000 chars\n            suggestions,\n            validations\n        };\n    }\n\n    /**\n     * Kill running process\n     */\n    private killProcess(pid: number): void {\n        try {\n            process.kill(pid, 'SIGTERM');\n            console.log(`[FIXERBOT] Killed process ${pid}`);\n        } catch (error) {\n            console.error(`[FIXERBOT] Failed to kill process ${pid}:`, error);\n        }\n    }\n\n    /**\n     * Generate fix suggestions based on errors\n     */\n    public generateFixSuggestions(testResult: TestResult): string[] {\n        const suggestions: string[] = [...(testResult.suggestions || [])];\n\n        // Add specific suggestions based on error patterns\n        testResult.errors?.forEach(error => {\n            if (error.includes('undefined')) {\n                suggestions.push('Check for undefined variables or missing initializations');\n            }\n            if (error.includes('null')) {\n                suggestions.push('Add null checks before accessing properties');\n            }\n            if (error.includes('timeout')) {\n                suggestions.push('Increase timeouts or optimize async operations');\n            }\n            if (error.includes('connection')) {\n                suggestions.push('Verify network connections and API endpoints');\n            }\n        });\n\n        return [...new Set(suggestions)]; // Remove duplicates\n    }\n}","module.exports = require(\"vscode\");","module.exports = require(\"events\");","/**\n * AgentCommunicationBus - Inter-agent communication system\n * Enables agents to collaborate, share information, and coordinate actions\n */\n\nimport { EventEmitter } from 'events';\n\nexport interface AgentMessage {\n    id: string;\n    from: string;\n    to: string | string[] | 'broadcast';\n    type: MessageType;\n    content: any;\n    metadata: MessageMetadata;\n    timestamp: number;\n    replyTo?: string;\n}\n\nexport enum MessageType {\n    REQUEST = 'request',\n    RESPONSE = 'response',\n    NOTIFICATION = 'notification',\n    QUERY = 'query',\n    BROADCAST = 'broadcast',\n    COLLABORATION_REQUEST = 'collaboration_request',\n    COLLABORATION_RESPONSE = 'collaboration_response',\n    TASK_DELEGATION = 'task_delegation',\n    STATUS_UPDATE = 'status_update',\n    ERROR = 'error',\n    HELP_REQUEST = 'help_request',\n    KNOWLEDGE_SHARE = 'knowledge_share',\n    VALIDATION_REQUEST = 'validation_request',\n    CONFLICT = 'conflict'\n}\n\nexport interface MessageMetadata {\n    priority: 'low' | 'normal' | 'high' | 'critical';\n    requiresResponse: boolean;\n    timeout?: number;\n    conversationId?: string;\n    workflowId?: string;\n    retryCount?: number;\n    confidence?: number;\n    reasoning?: string;\n}\n\nexport interface CollaborationSession {\n    id: string;\n    task: any;\n    participants: string[];\n    leader?: string;\n    status: 'pending' | 'active' | 'completed' | 'failed';\n    sharedContext: Map<string, any>;\n    messages: AgentMessage[];\n    results: Map<string, any>;\n    startTime: number;\n    endTime?: number;\n}\n\nexport interface MessageHandler {\n    agentId: string;\n    messageTypes: MessageType[];\n    handler: (message: AgentMessage) => Promise<any>;\n    filter?: (message: AgentMessage) => boolean;\n}\n\nexport interface CommunicationStats {\n    totalMessages: number;\n    messagesByType: Map<MessageType, number>;\n    messagesByAgent: Map<string, number>;\n    averageResponseTime: number;\n    activeSessions: number;\n    failedMessages: number;\n}\n\nexport class AgentCommunicationBus {\n    private static instance: AgentCommunicationBus;\n    private eventBus: EventEmitter;\n    private handlers: Map<string, MessageHandler[]> = new Map();\n    private messageQueue: AgentMessage[] = [];\n    private processingQueue: boolean = false;\n    private collaborationSessions: Map<string, CollaborationSession> = new Map();\n    private messageHistory: AgentMessage[] = [];\n    private responseCallbacks: Map<string, (response: any) => void> = new Map();\n    private stats: CommunicationStats;\n\n    private constructor() {\n        this.eventBus = new EventEmitter();\n        this.eventBus.setMaxListeners(50);\n        this.stats = this.initializeStats();\n        this.startQueueProcessor();\n    }\n\n    public static getInstance(): AgentCommunicationBus {\n        if (!AgentCommunicationBus.instance) {\n            AgentCommunicationBus.instance = new AgentCommunicationBus();\n        }\n        return AgentCommunicationBus.instance;\n    }\n\n    /**\n     * Register an agent to receive messages\n     */\n    public register(handler: MessageHandler): void {\n        if (!this.handlers.has(handler.agentId)) {\n            this.handlers.set(handler.agentId, []);\n        }\n\n        this.handlers.get(handler.agentId)!.push(handler);\n        this.eventBus.emit('agent-registered', handler.agentId);\n    }\n\n    /**\n     * Unregister an agent\n     */\n    public unregister(agentId: string): void {\n        this.handlers.delete(agentId);\n        this.eventBus.emit('agent-unregistered', agentId);\n    }\n\n    /**\n     * Send a message to one or more agents\n     */\n    public async send(message: Omit<AgentMessage, 'id' | 'timestamp'>): Promise<string> {\n        const fullMessage: AgentMessage = {\n            ...message,\n            id: this.generateMessageId(),\n            timestamp: Date.now()\n        };\n\n        // Add to history\n        this.messageHistory.push(fullMessage);\n        this.stats.totalMessages++;\n        this.updateStats(fullMessage);\n\n        // Add to queue\n        this.messageQueue.push(fullMessage);\n\n        // Emit event\n        this.eventBus.emit('message-sent', fullMessage);\n\n        // Process queue if not already processing\n        if (!this.processingQueue) {\n            this.processQueue();\n        }\n\n        return fullMessage.id;\n    }\n\n    /**\n     * Send a message and wait for response\n     */\n    public async request(\n        message: Omit<AgentMessage, 'id' | 'timestamp'>,\n        timeout: number = 30000\n    ): Promise<any> {\n        const messageId = await this.send({\n            ...message,\n            metadata: {\n                ...(message.metadata || {}),\n                requiresResponse: true,\n                timeout\n            }\n        });\n\n        return new Promise((resolve, reject) => {\n            const timer = setTimeout(() => {\n                this.responseCallbacks.delete(messageId);\n                reject(new Error(`Request timeout for message ${messageId}`));\n            }, timeout);\n\n            this.responseCallbacks.set(messageId, (response) => {\n                clearTimeout(timer);\n                this.responseCallbacks.delete(messageId);\n                resolve(response);\n            });\n        });\n    }\n\n    /**\n     * Broadcast a message to all agents\n     */\n    public async broadcast(\n        from: string,\n        type: MessageType,\n        content: any,\n        metadata?: Partial<MessageMetadata>\n    ): Promise<void> {\n        await this.send({\n            from,\n            to: 'broadcast',\n            type: MessageType.BROADCAST,\n            content,\n            metadata: {\n                priority: 'normal',\n                requiresResponse: false,\n                ...metadata\n            }\n        });\n    }\n\n    /**\n     * Start a collaboration session between agents\n     */\n    public async startCollaboration(\n        task: any,\n        participants: string[],\n        leader?: string\n    ): Promise<CollaborationSession> {\n        const session: CollaborationSession = {\n            id: this.generateSessionId(),\n            task,\n            participants,\n            leader: leader || participants[0],\n            status: 'pending',\n            sharedContext: new Map(),\n            messages: [],\n            results: new Map(),\n            startTime: Date.now()\n        };\n\n        this.collaborationSessions.set(session.id, session);\n\n        // Notify all participants\n        await Promise.all(participants.map(agentId =>\n            this.send({\n                from: 'system',\n                to: agentId,\n                type: MessageType.COLLABORATION_REQUEST,\n                content: {\n                    sessionId: session.id,\n                    task,\n                    participants,\n                    leader: session.leader\n                },\n                metadata: {\n                    priority: 'high',\n                    requiresResponse: true,\n                    conversationId: session.id\n                }\n            })\n        ));\n\n        session.status = 'active';\n        this.eventBus.emit('collaboration-started', session);\n\n        return session;\n    }\n\n    /**\n     * Send a message within a collaboration session\n     */\n    public async collaborationMessage(\n        sessionId: string,\n        from: string,\n        content: any,\n        type: MessageType = MessageType.NOTIFICATION\n    ): Promise<void> {\n        const session = this.collaborationSessions.get(sessionId);\n        if (!session) {\n            throw new Error(`Collaboration session ${sessionId} not found`);\n        }\n\n        // Send to all participants except sender\n        const recipients = session.participants.filter(p => p !== from);\n\n        const message = {\n            from,\n            to: recipients,\n            type,\n            content,\n            metadata: {\n                priority: 'normal' as const,\n                requiresResponse: false,\n                conversationId: sessionId\n            }\n        };\n\n        await this.send(message);\n\n        // Add to session history\n        session.messages.push({\n            ...message,\n            id: this.generateMessageId(),\n            timestamp: Date.now()\n        });\n    }\n\n    /**\n     * Update shared context in collaboration session\n     */\n    public updateCollaborationContext(\n        sessionId: string,\n        agentId: string,\n        key: string,\n        value: any\n    ): void {\n        const session = this.collaborationSessions.get(sessionId);\n        if (!session) return;\n\n        session.sharedContext.set(key, value);\n\n        // Notify other participants\n        this.collaborationMessage(\n            sessionId,\n            agentId,\n            { key, value },\n            MessageType.STATUS_UPDATE\n        );\n    }\n\n    /**\n     * Complete a collaboration session\n     */\n    public completeCollaboration(sessionId: string, results: Map<string, any>): void {\n        const session = this.collaborationSessions.get(sessionId);\n        if (!session) return;\n\n        session.status = 'completed';\n        session.results = results;\n        session.endTime = Date.now();\n\n        this.eventBus.emit('collaboration-completed', session);\n\n        // Clean up after delay\n        setTimeout(() => {\n            this.collaborationSessions.delete(sessionId);\n        }, 60000);\n    }\n\n    /**\n     * Request help from other agents\n     */\n    public async requestHelp(\n        from: string,\n        problem: any,\n        preferredAgents?: string[]\n    ): Promise<any> {\n        const message = {\n            from,\n            to: preferredAgents || 'broadcast',\n            type: MessageType.HELP_REQUEST,\n            content: problem,\n            metadata: {\n                priority: 'high' as const,\n                requiresResponse: true,\n                timeout: 10000\n            }\n        };\n\n        const responses: any[] = [];\n\n        if (preferredAgents) {\n            // Request from specific agents\n            for (const agentId of preferredAgents) {\n                try {\n                    const response = await this.request(\n                        { ...message, to: agentId, metadata: message.metadata },\n                        10000\n                    );\n                    if (response) responses.push(response);\n                } catch (error) {\n                    console.warn(`No response from ${agentId}:`, error);\n                }\n            }\n        } else {\n            // Broadcast and collect responses\n            await this.broadcast(from, MessageType.HELP_REQUEST, problem, {\n                priority: 'high',\n                requiresResponse: true\n            });\n\n            // Wait for responses\n            await new Promise(resolve => setTimeout(resolve, 5000));\n\n            // Collect responses from history\n            const requestTime = Date.now();\n            responses.push(...this.messageHistory\n                .filter(msg =>\n                    msg.type === MessageType.RESPONSE &&\n                    msg.timestamp > requestTime - 5000 &&\n                    msg.replyTo === message.from\n                )\n                .map(msg => msg.content)\n            );\n        }\n\n        return responses;\n    }\n\n    /**\n     * Share knowledge between agents\n     */\n    public async shareKnowledge(\n        from: string,\n        knowledge: any,\n        relevantAgents?: string[]\n    ): Promise<void> {\n        await this.send({\n            from,\n            to: relevantAgents || 'broadcast',\n            type: MessageType.KNOWLEDGE_SHARE,\n            content: knowledge,\n            metadata: {\n                priority: 'low',\n                requiresResponse: false\n            }\n        });\n    }\n\n    /**\n     * Request validation from another agent\n     */\n    public async requestValidation(\n        from: string,\n        validator: string,\n        content: any\n    ): Promise<any> {\n        return this.request({\n            from,\n            to: validator,\n            type: MessageType.VALIDATION_REQUEST,\n            content,\n            metadata: {\n                priority: 'normal',\n                requiresResponse: true\n            }\n        }, 15000);\n    }\n\n    /**\n     * Report a conflict requiring arbitration\n     */\n    public async reportConflict(\n        reportingAgent: string,\n        conflictingAgents: string[],\n        issue: any\n    ): Promise<void> {\n        // Send to OpusArbitrator\n        await this.send({\n            from: reportingAgent,\n            to: 'OpusArbitrator',\n            type: MessageType.CONFLICT,\n            content: {\n                conflictingAgents,\n                issue,\n                reportedBy: reportingAgent\n            },\n            metadata: {\n                priority: 'critical',\n                requiresResponse: true\n            }\n        });\n    }\n\n    /**\n     * Process message queue\n     */\n    private async processQueue(): Promise<void> {\n        if (this.processingQueue || this.messageQueue.length === 0) return;\n\n        this.processingQueue = true;\n\n        while (this.messageQueue.length > 0) {\n            const message = this.messageQueue.shift()!;\n\n            try {\n                await this.deliverMessage(message);\n            } catch (error) {\n                console.error(`Error delivering message ${message.id}:`, error);\n                this.stats.failedMessages++;\n\n                // Retry logic\n                if (message.metadata.retryCount === undefined) {\n                    message.metadata.retryCount = 0;\n                }\n\n                if (message.metadata.retryCount < 3) {\n                    message.metadata.retryCount++;\n                    this.messageQueue.push(message);\n                } else {\n                    this.eventBus.emit('message-failed', { message, error });\n                }\n            }\n        }\n\n        this.processingQueue = false;\n    }\n\n    /**\n     * Deliver a message to recipients\n     */\n    private async deliverMessage(message: AgentMessage): Promise<void> {\n        const recipients = this.determineRecipients(message);\n\n        for (const recipientId of recipients) {\n            const handlers = this.handlers.get(recipientId) || [];\n\n            for (const handler of handlers) {\n                // Check if handler accepts this message type\n                if (!handler.messageTypes.includes(message.type)) continue;\n\n                // Apply filter if present\n                if (handler.filter && !handler.filter(message)) continue;\n\n                try {\n                    const response = await handler.handler(message);\n\n                    // Handle response if required\n                    if (message.metadata.requiresResponse && response !== undefined) {\n                        // Send response back\n                        await this.send({\n                            from: recipientId,\n                            to: message.from,\n                            type: MessageType.RESPONSE,\n                            content: response,\n                            metadata: {\n                                priority: 'normal',\n                                requiresResponse: false,\n                                conversationId: message.metadata.conversationId\n                            },\n                            replyTo: message.id\n                        });\n\n                        // Trigger callback if waiting\n                        const callback = this.responseCallbacks.get(message.id);\n                        if (callback) {\n                            callback(response);\n                        }\n                    }\n\n                    this.eventBus.emit('message-delivered', { message, recipientId });\n                } catch (error) {\n                    console.error(`Handler error for ${recipientId}:`, error);\n                    this.eventBus.emit('handler-error', { message, recipientId, error });\n                }\n            }\n        }\n    }\n\n    /**\n     * Determine message recipients\n     */\n    private determineRecipients(message: AgentMessage): string[] {\n        if (message.to === 'broadcast') {\n            return Array.from(this.handlers.keys());\n        }\n\n        if (Array.isArray(message.to)) {\n            return message.to;\n        }\n\n        return [message.to];\n    }\n\n    /**\n     * Start queue processor\n     */\n    private startQueueProcessor(): void {\n        setInterval(() => {\n            if (!this.processingQueue && this.messageQueue.length > 0) {\n                this.processQueue();\n            }\n        }, 100);\n    }\n\n    /**\n     * Initialize statistics\n     */\n    private initializeStats(): CommunicationStats {\n        return {\n            totalMessages: 0,\n            messagesByType: new Map(),\n            messagesByAgent: new Map(),\n            averageResponseTime: 0,\n            activeSessions: 0,\n            failedMessages: 0\n        };\n    }\n\n    /**\n     * Update statistics\n     */\n    private updateStats(message: AgentMessage): void {\n        // Update message type count\n        const typeCount = this.stats.messagesByType.get(message.type) || 0;\n        this.stats.messagesByType.set(message.type, typeCount + 1);\n\n        // Update agent message count\n        const agentCount = this.stats.messagesByAgent.get(message.from) || 0;\n        this.stats.messagesByAgent.set(message.from, agentCount + 1);\n\n        // Update active sessions\n        this.stats.activeSessions = this.collaborationSessions.size;\n    }\n\n    /**\n     * Get communication statistics\n     */\n    public getStats(): CommunicationStats {\n        // Calculate average response time\n        let totalResponseTime = 0;\n        let responseCount = 0;\n\n        this.messageHistory.forEach(msg => {\n            if (msg.type === MessageType.RESPONSE && msg.replyTo) {\n                const originalMsg = this.messageHistory.find(m => m.id === msg.replyTo);\n                if (originalMsg) {\n                    totalResponseTime += msg.timestamp - originalMsg.timestamp;\n                    responseCount++;\n                }\n            }\n        });\n\n        this.stats.averageResponseTime = responseCount > 0\n            ? totalResponseTime / responseCount\n            : 0;\n\n        return { ...this.stats };\n    }\n\n    /**\n     * Get message history\n     */\n    public getMessageHistory(filter?: {\n        from?: string;\n        to?: string;\n        type?: MessageType;\n        conversationId?: string;\n        startTime?: number;\n        endTime?: number;\n    }): AgentMessage[] {\n        let history = [...this.messageHistory];\n\n        if (filter) {\n            if (filter.from) {\n                history = history.filter(msg => msg.from === filter.from);\n            }\n            if (filter.to) {\n                history = history.filter(msg =>\n                    msg.to === filter.to ||\n                    (Array.isArray(msg.to) && msg.to.includes(filter.to!))\n                );\n            }\n            if (filter.type) {\n                history = history.filter(msg => msg.type === filter.type);\n            }\n            if (filter.conversationId) {\n                history = history.filter(msg =>\n                    msg.metadata.conversationId === filter.conversationId\n                );\n            }\n            if (filter.startTime) {\n                history = history.filter(msg => msg.timestamp >= filter.startTime!);\n            }\n            if (filter.endTime) {\n                history = history.filter(msg => msg.timestamp <= filter.endTime!);\n            }\n        }\n\n        return history;\n    }\n\n    /**\n     * Get active collaboration sessions\n     */\n    public getActiveSessions(): CollaborationSession[] {\n        return Array.from(this.collaborationSessions.values())\n            .filter(session => session.status === 'active');\n    }\n\n    /**\n     * Generate unique message ID\n     */\n    private generateMessageId(): string {\n        return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n\n    /**\n     * Generate unique session ID\n     */\n    private generateSessionId(): string {\n        return `ses_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n\n    /**\n     * Clear all data (for testing/reset)\n     */\n    public clear(): void {\n        this.messageQueue = [];\n        this.messageHistory = [];\n        this.collaborationSessions.clear();\n        this.responseCallbacks.clear();\n        this.stats = this.initializeStats();\n    }\n}\n\n// Export singleton instance getter\nexport function getCommunicationBus(): AgentCommunicationBus {\n    return AgentCommunicationBus.getInstance();\n}","/**\n * Agent Configuration Manager\n * Handles per-agent model selection, instruction loading, and self-adaptation\n */\nimport * as vscode from 'vscode';\nimport * as path from 'path';\nimport * as fs from 'fs/promises';\nimport { \n    AgentModelConfig, \n    InstructionSet, \n    LearningConfig, \n    PerformanceMetrics,\n    InstructionAdaptation,\n    AgentConfigurationSystem,\n    AVAILABLE_MODELS,\n    DEFAULT_AGENT_MODELS\n} from '../types/AgentConfiguration';\n\nexport class AgentConfigurationManager {\n    private static instance: AgentConfigurationManager;\n    private configPath: string = '';\n    private configuration: AgentConfigurationSystem;\n    private context: vscode.ExtensionContext;\n\n    private constructor(context: vscode.ExtensionContext) {\n        this.context = context;\n        this.configuration = {\n            models: new Map(),\n            instructions: new Map(),\n            learning: this.getDefaultLearningConfig(),\n            metrics: new Map()\n        };\n    }\n\n    public static getInstance(context: vscode.ExtensionContext): AgentConfigurationManager {\n        if (!AgentConfigurationManager.instance) {\n            AgentConfigurationManager.instance = new AgentConfigurationManager(context);\n        }\n        return AgentConfigurationManager.instance;\n    }\n\n    /**\n     * Initialize configuration system\n     */\n    public async initialize(): Promise<void> {\n        try {\n            // Determine configuration path\n            await this.determineConfigPath();\n            \n            // Ensure configuration directory structure exists\n            await this.ensureConfigStructure();\n            \n            // Load existing configuration or create defaults\n            await this.loadConfiguration();\n            \n            // Load instruction sets\n            await this.loadInstructionSets();\n            \n            console.log('✅ AgentConfigurationManager initialized');\n        } catch (error) {\n            console.error('❌ Failed to initialize AgentConfigurationManager:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Get agent model configuration\n     */\n    public getAgentModel(agentId: string): string {\n        const config = this.configuration.models.get(agentId);\n        return config?.selectedModel || DEFAULT_AGENT_MODELS[agentId as keyof typeof DEFAULT_AGENT_MODELS] || 'claude-sonnet-4-20250514';\n    }\n\n    /**\n     * Set agent model\n     */\n    public async setAgentModel(agentId: string, modelId: string): Promise<void> {\n        const config = this.configuration.models.get(agentId) || this.createDefaultModelConfig(agentId);\n        config.selectedModel = modelId;\n        config.lastUpdated = new Date().toISOString();\n        \n        this.configuration.models.set(agentId, config);\n        await this.saveModelConfiguration();\n        \n        console.log(`🤖 Updated ${agentId} model to ${modelId}`);\n    }\n\n    /**\n     * Get agent instructions\n     */\n    public async getAgentInstructions(agentId: string): Promise<string> {\n        const instructionSet = this.configuration.instructions.get(agentId);\n        if (instructionSet) {\n            return instructionSet.content;\n        }\n        \n        // Load from file if not in memory\n        return await this.loadInstructionFile(agentId);\n    }\n\n    /**\n     * Update agent instructions (self-adaptation)\n     */\n    public async updateAgentInstructions(\n        agentId: string, \n        newContent: string, \n        reason: string, \n        trigger: 'success' | 'failure' | 'manual' | 'learning'\n    ): Promise<void> {\n        const currentInstructions = await this.getAgentInstructions(agentId);\n        \n        // Create adaptation record\n        const adaptation: InstructionAdaptation = {\n            timestamp: new Date().toISOString(),\n            trigger,\n            oldContent: currentInstructions,\n            newContent,\n            reason\n        };\n\n        // Update instruction set\n        const instructionSet = this.configuration.instructions.get(agentId) || {\n            agentId,\n            version: '1.0.0',\n            content: currentInstructions,\n            lastModified: new Date().toISOString(),\n            modifiedBy: trigger === 'manual' ? 'user' : 'self-adaptation',\n            successRate: 0,\n            totalExecutions: 0,\n            adaptationHistory: []\n        };\n\n        instructionSet.content = newContent;\n        instructionSet.lastModified = new Date().toISOString();\n        instructionSet.modifiedBy = trigger === 'manual' ? 'user' : 'self-adaptation';\n        instructionSet.adaptationHistory.push(adaptation);\n        \n        // Keep only last 50 adaptations to prevent memory bloat\n        if (instructionSet.adaptationHistory.length > 50) {\n            instructionSet.adaptationHistory = instructionSet.adaptationHistory.slice(-50);\n        }\n\n        this.configuration.instructions.set(agentId, instructionSet);\n        \n        // Save to file\n        await this.saveInstructionFile(agentId, instructionSet);\n        \n        console.log(`📝 Updated instructions for ${agentId}: ${reason}`);\n    }\n\n    /**\n     * Record agent performance for learning\n     */\n    public async recordAgentPerformance(\n        agentId: string,\n        success: boolean,\n        responseTime: number,\n        context?: string\n    ): Promise<void> {\n        const metrics = this.configuration.metrics.get(agentId) || this.createDefaultMetrics(agentId);\n        \n        metrics.totalExecutions++;\n        if (success) {\n            metrics.successfulExecutions++;\n            metrics.currentStreak++;\n            metrics.bestStreak = Math.max(metrics.bestStreak, metrics.currentStreak);\n        } else {\n            metrics.failedExecutions++;\n            metrics.currentStreak = 0;\n        }\n        \n        // Update average response time\n        const totalTime = metrics.averageResponseTime * (metrics.totalExecutions - 1) + responseTime;\n        metrics.averageResponseTime = totalTime / metrics.totalExecutions;\n        metrics.lastExecution = new Date().toISOString();\n        \n        this.configuration.metrics.set(agentId, metrics);\n        \n        // Check if auto-learning should trigger\n        if (this.configuration.learning.enabled) {\n            await this.checkForLearningOpportunity(agentId, success, context);\n        }\n        \n        // Periodically save metrics\n        if (metrics.totalExecutions % 10 === 0) {\n            await this.saveMetrics();\n        }\n    }\n\n    /**\n     * Get available models for an agent\n     */\n    public getAvailableModels(): Record<string, any> {\n        return AVAILABLE_MODELS;\n    }\n\n    /**\n     * Get agent performance metrics\n     */\n    public getAgentMetrics(agentId: string): PerformanceMetrics | undefined {\n        return this.configuration.metrics.get(agentId);\n    }\n\n    /**\n     * Get learning configuration\n     */\n    public getLearningConfig(): LearningConfig {\n        return this.configuration.learning;\n    }\n\n    /**\n     * Update learning configuration\n     */\n    public async updateLearningConfig(config: Partial<LearningConfig>): Promise<void> {\n        this.configuration.learning = { ...this.configuration.learning, ...config };\n        await this.saveLearningConfig();\n    }\n\n    // Private methods\n    private async determineConfigPath(): Promise<void> {\n        const workspaceFolders = vscode.workspace.workspaceFolders;\n        if (workspaceFolders && workspaceFolders.length > 0) {\n            // Use workspace-specific configuration\n            this.configPath = path.join(workspaceFolders[0].uri.fsPath, '.kiautoagent');\n        } else {\n            // Use global configuration in user's home directory\n            const homeDir = process.env.HOME || process.env.USERPROFILE || '';\n            this.configPath = path.join(homeDir, '.kiautoagent');\n        }\n    }\n\n    private async ensureConfigStructure(): Promise<void> {\n        const directories = [\n            this.configPath,\n            path.join(this.configPath, 'config'),\n            path.join(this.configPath, 'instructionsets'),\n            path.join(this.configPath, 'learning')\n        ];\n\n        for (const dir of directories) {\n            try {\n                await fs.mkdir(dir, { recursive: true });\n            } catch (error) {\n                console.warn(`Could not create directory ${dir}:`, error);\n            }\n        }\n    }\n\n    private async loadConfiguration(): Promise<void> {\n        // Load model configurations\n        await this.loadModelConfiguration();\n        \n        // Load learning configuration\n        await this.loadLearningConfiguration();\n        \n        // Load metrics\n        await this.loadMetrics();\n    }\n\n    private async loadModelConfiguration(): Promise<void> {\n        try {\n            const configFile = path.join(this.configPath, 'config', 'agent-models.json');\n            const data = await fs.readFile(configFile, 'utf-8');\n            const configs = JSON.parse(data);\n            \n            for (const config of configs) {\n                this.configuration.models.set(config.agentId, config);\n            }\n        } catch (error) {\n            // Create default configuration\n            for (const [agentId, defaultModel] of Object.entries(DEFAULT_AGENT_MODELS)) {\n                this.configuration.models.set(agentId, this.createDefaultModelConfig(agentId));\n            }\n            await this.saveModelConfiguration();\n        }\n    }\n\n    private async saveModelConfiguration(): Promise<void> {\n        try {\n            const configFile = path.join(this.configPath, 'config', 'agent-models.json');\n            const configs = Array.from(this.configuration.models.values());\n            await fs.writeFile(configFile, JSON.stringify(configs, null, 2));\n        } catch (error) {\n            console.error('Failed to save model configuration:', error);\n        }\n    }\n\n    private async loadInstructionSets(): Promise<void> {\n        const instructionDir = path.join(this.configPath, 'instructionsets');\n        const agentIds = ['orchestrator', 'richter', 'architect', 'codesmith', 'tradestrat', 'research'];\n        \n        for (const agentId of agentIds) {\n            try {\n                await this.loadInstructionFile(agentId);\n            } catch (error) {\n                console.warn(`Could not load instructions for ${agentId}:`, error);\n                // Copy from extension bundle\n                await this.copyDefaultInstructionFile(agentId);\n            }\n        }\n    }\n\n    private async loadInstructionFile(agentId: string): Promise<string> {\n        const instructionFile = path.join(this.configPath, 'instructionsets', `${agentId}.md`);\n        try {\n            const content = await fs.readFile(instructionFile, 'utf-8');\n            \n            // Update in-memory instruction set\n            const instructionSet: InstructionSet = {\n                agentId,\n                version: '1.0.0',\n                content,\n                lastModified: new Date().toISOString(),\n                modifiedBy: 'user',\n                successRate: 0,\n                totalExecutions: 0,\n                adaptationHistory: []\n            };\n            \n            this.configuration.instructions.set(agentId, instructionSet);\n            return content;\n        } catch (error) {\n            throw new Error(`Could not load instruction file for ${agentId}: ${error}`);\n        }\n    }\n\n    private async saveInstructionFile(agentId: string, instructionSet: InstructionSet): Promise<void> {\n        const instructionFile = path.join(this.configPath, 'instructionsets', `${agentId}.md`);\n        await fs.writeFile(instructionFile, instructionSet.content);\n    }\n\n    private async copyDefaultInstructionFile(agentId: string): Promise<void> {\n        try {\n            const sourcePath = path.join(this.context.extensionPath, 'src', 'instructionsets', `${agentId}.md`);\n            const targetPath = path.join(this.configPath, 'instructionsets', `${agentId}.md`);\n            \n            const content = await fs.readFile(sourcePath, 'utf-8');\n            await fs.writeFile(targetPath, content);\n            \n            console.log(`📋 Copied default instructions for ${agentId}`);\n        } catch (error) {\n            console.error(`Failed to copy default instructions for ${agentId}:`, error);\n        }\n    }\n\n    private createDefaultModelConfig(agentId: string): AgentModelConfig {\n        const defaultModel = DEFAULT_AGENT_MODELS[agentId as keyof typeof DEFAULT_AGENT_MODELS] || 'claude-sonnet-4-20250514';\n        \n        return {\n            agentId,\n            displayName: agentId.charAt(0).toUpperCase() + agentId.slice(1),\n            selectedModel: defaultModel,\n            availableModels: Object.keys(AVAILABLE_MODELS),\n            instructionFile: `${agentId}.md`,\n            lastUpdated: new Date().toISOString(),\n            performanceScore: 0\n        };\n    }\n\n    private createDefaultMetrics(agentId: string): PerformanceMetrics {\n        return {\n            agentId,\n            totalExecutions: 0,\n            successfulExecutions: 0,\n            failedExecutions: 0,\n            averageResponseTime: 0,\n            lastExecution: new Date().toISOString(),\n            successPatterns: [],\n            failurePatterns: [],\n            currentStreak: 0,\n            bestStreak: 0\n        };\n    }\n\n    private getDefaultLearningConfig(): LearningConfig {\n        return {\n            enabled: true,\n            adaptationThreshold: 0.8, // 80% success rate required\n            maxAdaptationsPerDay: 3,\n            confidenceLevel: 0.9,\n            learningModes: {\n                successBasedLearning: true,\n                failureBasedLearning: false,\n                patternRecognition: true,\n                contextualAdaptation: true\n            }\n        };\n    }\n\n    private async loadLearningConfiguration(): Promise<void> {\n        try {\n            const configFile = path.join(this.configPath, 'config', 'learning-settings.json');\n            const data = await fs.readFile(configFile, 'utf-8');\n            this.configuration.learning = { ...this.configuration.learning, ...JSON.parse(data) };\n        } catch (error) {\n            // Use defaults and save\n            await this.saveLearningConfig();\n        }\n    }\n\n    private async saveLearningConfig(): Promise<void> {\n        try {\n            const configFile = path.join(this.configPath, 'config', 'learning-settings.json');\n            await fs.writeFile(configFile, JSON.stringify(this.configuration.learning, null, 2));\n        } catch (error) {\n            console.error('Failed to save learning configuration:', error);\n        }\n    }\n\n    private async loadMetrics(): Promise<void> {\n        try {\n            const metricsFile = path.join(this.configPath, 'config', 'performance-metrics.json');\n            const data = await fs.readFile(metricsFile, 'utf-8');\n            const metricsArray = JSON.parse(data);\n            \n            for (const metrics of metricsArray) {\n                this.configuration.metrics.set(metrics.agentId, metrics);\n            }\n        } catch (error) {\n            // No metrics file yet, will be created on first save\n        }\n    }\n\n    private async saveMetrics(): Promise<void> {\n        try {\n            const metricsFile = path.join(this.configPath, 'config', 'performance-metrics.json');\n            const metricsArray = Array.from(this.configuration.metrics.values());\n            await fs.writeFile(metricsFile, JSON.stringify(metricsArray, null, 2));\n        } catch (error) {\n            console.error('Failed to save metrics:', error);\n        }\n    }\n\n    private async checkForLearningOpportunity(agentId: string, success: boolean, context?: string): Promise<void> {\n        const metrics = this.configuration.metrics.get(agentId);\n        if (!metrics) return;\n\n        const successRate = metrics.successfulExecutions / metrics.totalExecutions;\n        \n        // Only adapt if we have enough data and high success rate\n        if (metrics.totalExecutions < 10) return;\n        if (successRate < this.configuration.learning.adaptationThreshold) return;\n        \n        // Check if we haven't adapted too much today\n        const today = new Date().toDateString();\n        const instructionSet = this.configuration.instructions.get(agentId);\n        const todayAdaptations = instructionSet?.adaptationHistory.filter(\n            a => new Date(a.timestamp).toDateString() === today\n        ).length || 0;\n        \n        if (todayAdaptations >= this.configuration.learning.maxAdaptationsPerDay) return;\n        \n        // Trigger learning adaptation (would call LLM to analyze patterns and suggest improvements)\n        console.log(`🧠 Learning opportunity detected for ${agentId}: ${successRate.toFixed(2)} success rate`);\n        \n        // This would be implemented to call the agent's model to analyze its own performance\n        // and suggest instruction improvements\n    }\n}","/**\n * Memory Types for the Multi-Agent System\n * Defines the structure of different memory types and operations\n */\n\nexport interface MemoryEntry {\n    id: string;\n    agentId: string;\n    timestamp: number;\n    content: any;\n    embedding?: number[];\n    metadata: MemoryMetadata;\n    type: MemoryType;\n}\n\nexport interface MemoryMetadata {\n    projectId?: string;\n    taskId?: string;\n    confidence?: number;\n    tags?: string[];\n    source?: string;\n    relatedMemories?: string[];\n    accessCount?: number;\n    lastAccessed?: number;\n    importance?: number;\n}\n\nexport enum MemoryType {\n    WORKING = 'working',      // Current task context\n    EPISODIC = 'episodic',    // Specific events/interactions\n    SEMANTIC = 'semantic',    // General knowledge\n    PROCEDURAL = 'procedural' // How to do things\n}\n\nexport interface MemorySearchResult {\n    entry: MemoryEntry;\n    similarity: number;\n    relevance: number;\n}\n\nexport interface MemoryPattern {\n    id: string;\n    pattern: string;\n    frequency: number;\n    examples: MemoryEntry[];\n    extractedAt: number;\n}\n\nexport interface MemoryCluster {\n    centroid: number[];\n    members: MemoryEntry[];\n    label?: string;\n    coherence: number;\n}\n\nexport interface CodePattern {\n    id: string;\n    language: string;\n    pattern: string;\n    description: string;\n    usage: string[];\n    examples: CodeExample[];\n    successRate: number;\n    lastUsed: number;\n}\n\nexport interface CodeExample {\n    code: string;\n    context: string;\n    outcome: 'success' | 'failure' | 'partial';\n    feedback?: string;\n}\n\nexport interface ArchitecturePattern {\n    id: string;\n    name: string;\n    type: 'microservices' | 'monolith' | 'serverless' | 'hybrid' | 'other';\n    description: string;\n    components: ArchitectureComponent[];\n    useCases: string[];\n    pros: string[];\n    cons: string[];\n    diagram?: string;\n}\n\nexport interface ArchitectureComponent {\n    name: string;\n    responsibility: string;\n    technologies: string[];\n    interfaces: string[];\n    dependencies: string[];\n}\n\nexport interface TaskMemory {\n    taskId: string;\n    description: string;\n    decomposition: TaskStep[];\n    outcome: TaskOutcome;\n    duration: number;\n    agentsInvolved: string[];\n    lessonsLearned: string[];\n}\n\nexport interface TaskStep {\n    stepId: string;\n    description: string;\n    assignedAgent: string;\n    status: 'pending' | 'in_progress' | 'completed' | 'failed';\n    output?: any;\n    dependencies: string[];\n}\n\nexport interface TaskOutcome {\n    status: 'success' | 'partial' | 'failure';\n    quality: number; // 0-1\n    feedback?: string;\n    improvements?: string[];\n}\n\nexport interface ConversationMemory {\n    conversationId: string;\n    participants: string[];\n    messages: Message[];\n    context: Map<string, any>;\n    summary?: string;\n    keyDecisions: Decision[];\n    timestamp: number;\n}\n\nexport interface Message {\n    id: string;\n    sender: string;\n    content: string;\n    timestamp: number;\n    intent?: string;\n    entities?: Entity[];\n}\n\nexport interface Entity {\n    type: string;\n    value: string;\n    confidence: number;\n}\n\nexport interface Decision {\n    id: string;\n    description: string;\n    madeBy: string;\n    reasoning: string;\n    alternatives: string[];\n    outcome?: string;\n    timestamp: number;\n}\n\nexport interface LearningEntry {\n    id: string;\n    type: 'success' | 'failure' | 'insight';\n    description: string;\n    context: any;\n    impact: 'high' | 'medium' | 'low';\n    applicability: string[];\n    timestamp: number;\n}\n\nexport interface MemoryStats {\n    totalMemories: number;\n    byType: Map<MemoryType, number>;\n    byAgent: Map<string, number>;\n    averageAccessCount: number;\n    mostAccessedMemories: MemoryEntry[];\n    memoryGrowthRate: number;\n    patternCount: number;\n    clusterCount: number;\n}","/**\n * OpenAI Service for GPT model interactions\n */\nimport * as vscode from 'vscode';\n\ninterface ChatMessage {\n    role: 'system' | 'user' | 'assistant';\n    content: string;\n}\n\ninterface ChatResponse {\n    choices: Array<{\n        message: {\n            content: string;\n        };\n    }>;\n}\n\nexport class OpenAIService {\n    private apiKey: string;\n    private baseURL: string;\n\n    constructor() {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent');\n        this.apiKey = config.get<string>('openai.apiKey', '');\n        this.baseURL = 'https://api.openai.com/v1';\n    }\n\n    async chat(\n        messages: ChatMessage[],\n        model: string = 'gpt-4o',\n        maxTokens: number = 4000,\n        temperature: number = 0.7\n    ): Promise<string> {\n        \n        if (!this.apiKey) {\n            throw new Error('OpenAI API key not configured');\n        }\n\n        const requestBody = {\n            model,\n            messages,\n            max_tokens: maxTokens,\n            temperature,\n            stream: false\n        };\n\n        try {\n            const response = await fetch(`${this.baseURL}/chat/completions`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${this.apiKey}`\n                },\n                body: JSON.stringify(requestBody)\n            });\n\n            if (!response.ok) {\n                const errorData = await response.json().catch(() => ({ error: { message: response.statusText } }));\n                throw new Error(`OpenAI API error: ${(errorData as any).error?.message || response.statusText}`);\n            }\n\n            const data= await response.json() as ChatResponse;\n            \n            if (!data.choices || data.choices.length === 0) {\n                throw new Error('No response from OpenAI API');\n            }\n\n            return data.choices[0].message.content;\n\n        } catch (error) {\n            if (error instanceof Error) {\n                throw error;\n            }\n            throw new Error(`OpenAI API request failed: ${error}`);\n        }\n    }\n\n    async streamChat(\n        messages: ChatMessage[],\n        onChunk: (chunk: string) => void,\n        model: string = 'gpt-4o',\n        maxTokens: number = 4000,\n        temperature: number = 0.7\n    ): Promise<void> {\n        \n        if (!this.apiKey) {\n            throw new Error('OpenAI API key not configured');\n        }\n\n        const requestBody = {\n            model,\n            messages,\n            max_tokens: maxTokens,\n            temperature,\n            stream: true\n        };\n\n        try {\n            const response = await fetch(`${this.baseURL}/chat/completions`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${this.apiKey}`\n                },\n                body: JSON.stringify(requestBody)\n            });\n\n            if (!response.ok) {\n                throw new Error(`OpenAI API error: ${response.statusText}`);\n            }\n\n            const reader = response.body?.getReader();\n            if (!reader) {\n                throw new Error('Failed to get response stream');\n            }\n\n            const decoder = new TextDecoder();\n\n            while (true) {\n                const { done, value } = await reader.read();\n                \n                if (done) {\n                    break;\n                }\n\n                const chunk = decoder.decode(value);\n                const lines = chunk.split('\\n').filter(line => line.trim() !== '');\n\n                for (const line of lines) {\n                    if (line.startsWith('data: ')) {\n                        const data = line.substring(6);\n                        \n                        if (data === '[DONE]') {\n                            return;\n                        }\n\n                        try {\n                            const parsed = JSON.parse(data);\n                            const content = parsed.choices?.[0]?.delta?.content;\n                            \n                            if (content) {\n                                onChunk(content);\n                            }\n                        } catch (error) {\n                            // Ignore parsing errors for incomplete chunks\n                        }\n                    }\n                }\n            }\n\n        } catch (error) {\n            throw new Error(`OpenAI streaming failed: ${error}`);\n        }\n    }\n\n    validateApiKey(): boolean {\n        return !!this.apiKey && this.apiKey.startsWith('sk-');\n    }\n\n    async testConnection(): Promise<boolean> {\n        try {\n            await this.chat([\n                { role: 'user', content: 'Test connection' }\n            ], 'gpt-4o-mini', 10);\n            return true;\n        } catch (error) {\n            return false;\n        }\n    }\n}","/**\n * ClaudeCodeService - Integration with Claude Code CLI\n * Based on claude-code-chat implementation\n * \n * Requires: npm install -g @anthropic-ai/claude-code\n * This installs the 'claude' CLI command that this service uses\n */\nimport * as vscode from 'vscode';\nimport { spawn, exec, ChildProcess } from 'child_process';\nimport { EventEmitter } from 'events';\n\nexport interface ClaudeMessage {\n    role: 'user' | 'assistant' | 'system';\n    content: string;\n}\n\nexport interface ClaudeResponse {\n    content: string;\n    metadata?: {\n        model?: string;\n        usage?: {\n            inputTokens: number;\n            outputTokens: number;\n            totalCost?: number;\n        };\n    };\n}\n\nexport interface ClaudeOptions {\n    model?: 'opus' | 'sonnet' | 'default';\n    temperature?: number;\n    maxTokens?: number;\n}\n\nexport class ClaudeCodeService extends EventEmitter {\n    private outputChannel: vscode.OutputChannel;\n    private currentProcess: ChildProcess | null = null;\n    private seenToolsInSession: Set<string> | null = null;\n    private pendingTools: Map<string, any> = new Map(); // Store tool calls by ID\n    private toolResults: Map<string, any> = new Map(); // Store tool results by ID\n    private toolGroupBuffer: any[] = []; // Buffer for grouping similar tools\n    private lastToolName: string | null = null;\n    private hasStartedTextOutput = false;\n    \n    constructor() {\n        super();\n        this.outputChannel = vscode.window.createOutputChannel('Claude Code Service');\n    }\n\n    /**\n     * Send a message to Claude using the Claude Code CLI with JSON streaming\n     */\n    async sendMessage(\n        message: string, \n        options: ClaudeOptions = {}\n    ): Promise<ClaudeResponse> {\n        // Try simple text mode first as fallback\n        try {\n            return await this.sendStreamJsonMessage(message, options);\n        } catch (error) {\n            this.outputChannel.appendLine('[ClaudeCodeService] Stream JSON failed, falling back to text mode');\n            return await this.sendSimpleMessage(message, options);\n        }\n    }\n\n    /**\n     * Send a message using simple text output (more reliable)\n     */\n    async sendSimpleMessage(\n        message: string,\n        options: ClaudeOptions = {}\n    ): Promise<ClaudeResponse> {\n        return new Promise((resolve, reject) => {\n            try {\n                const args = [\n                    '--print', // Non-interactive mode\n                    '--output-format', 'text' // Simple text output\n                    // Allow tools - Claude will use them intelligently\n                ];\n\n                if (options.model && options.model !== 'default') {\n                    args.push('--model', options.model);\n                }\n\n                this.outputChannel.appendLine(`[ClaudeCodeService] Using simple text mode with args: ${args.join(' ')}`);\n\n                const claudeProcess = spawn('claude', args, {\n                    shell: process.platform === 'win32',\n                    stdio: ['pipe', 'pipe', 'pipe']\n                });\n\n                let output = '';\n                let errorOutput = '';\n\n                claudeProcess.stdout.on('data', (data) => {\n                    output += data.toString();\n                });\n\n                claudeProcess.stderr.on('data', (data) => {\n                    errorOutput += data.toString();\n                });\n\n                claudeProcess.on('exit', (code) => {\n                    if (code === 0 || output.length > 0) {\n                        resolve({\n                            content: output.trim(),\n                            metadata: { }\n                        });\n                    } else {\n                        reject(new Error(`Claude CLI failed: ${errorOutput || 'No output'}`));\n                    }\n                });\n\n                claudeProcess.on('error', (error) => {\n                    reject(error);\n                });\n\n                // Send the message\n                if (claudeProcess.stdin) {\n                    claudeProcess.stdin.write(message);\n                    claudeProcess.stdin.end();\n                }\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    /**\n     * Send a message with streaming support for real-time updates\n     */\n    async sendStreamingMessage(\n        message: string,\n        options: ClaudeOptions & {\n            onPartialResponse?: (content: string) => void;\n            onMetadata?: (metadata: any) => void;\n        } = {}\n    ): Promise<ClaudeResponse> {\n        this.outputChannel.appendLine('[ClaudeCodeService] Starting streaming message...');\n        \n        return new Promise((resolve, reject) => {\n            try {\n                // Prepare CLI arguments for streaming\n                const args = [\n                    '--print', // Non-interactive mode\n                    '--verbose', // Required for stream-json\n                    '--output-format', 'stream-json', // Stream JSON output\n                    '--include-partial-messages' // Include partial messages as they arrive\n                ];\n\n                // Add model if specified\n                if (options.model && options.model !== 'default') {\n                    args.push('--model', options.model);\n                }\n\n                this.outputChannel.appendLine(`[ClaudeCodeService] Spawning claude CLI with streaming`);\n\n                const claudeProcess = spawn('claude', args, {\n                    shell: process.platform === 'win32',\n                    stdio: ['pipe', 'pipe', 'pipe']\n                });\n\n                this.currentProcess = claudeProcess;\n\n                let responseContent = '';\n                let metadata: any = {};\n                let hasReceivedText = false;\n                let toolUseDetected = false;\n                let buffer = '';\n                const seenTools = new Set<string>(); // Track tools to prevent duplicates\n\n                // Handle stdout (JSON stream)\n                claudeProcess.stdout.on('data', (data) => {\n                    buffer += data.toString();\n                    const lines = buffer.split('\\n');\n                    buffer = lines.pop() || ''; // Keep last incomplete line in buffer\n\n                    for (const line of lines) {\n                        if (line.trim()) {\n                            try {\n                                const jsonData = JSON.parse(line.trim());\n                                \n                                this.processJsonStreamData(jsonData, (content, meta, eventType) => {\n                                    if (content) {\n                                        responseContent += content;\n                                        hasReceivedText = true;\n                                        \n                                        // Call the partial response callback for real-time updates\n                                        if (options.onPartialResponse) {\n                                            options.onPartialResponse(content);\n                                        }\n                                    }\n                                    if (meta) {\n                                        metadata = { ...metadata, ...meta };\n                                        \n                                        // Call metadata callback\n                                        if (options.onMetadata) {\n                                            options.onMetadata(meta);\n                                        }\n                                    }\n                                    if (eventType === 'tool_use') {\n                                        toolUseDetected = true;\n                                        // Don't terminate - let Claude continue using tools\n                                        this.outputChannel.appendLine(`[ClaudeCodeService] Tool detected - continuing execution`);\n                                    }\n                                    // Remove this duplicate tool_info handling - we handle it elsewhere\n                                });\n                            } catch (error) {\n                                this.outputChannel.appendLine(`[ClaudeCodeService] Failed to parse JSON: ${line.substring(0, 100)}`);\n                            }\n                        }\n                    }\n                });\n\n                // Handle stderr\n                claudeProcess.stderr.on('data', (data) => {\n                    const error = data.toString();\n                    this.outputChannel.appendLine(`[ClaudeCodeService] Claude CLI stderr: ${error}`);\n                });\n\n                // Handle process exit\n                claudeProcess.on('exit', (code, signal) => {\n                    this.currentProcess = null;\n                    \n                    if (code === 0 || responseContent.length > 0) {\n                        resolve({\n                            content: responseContent || 'No response received from Claude',\n                            metadata: metadata\n                        });\n                    } else {\n                        reject(new Error(`Claude process exited with code ${code} and no response`));\n                    }\n                });\n\n                // Handle process error\n                claudeProcess.on('error', (error) => {\n                    this.currentProcess = null;\n                    reject(error);\n                });\n\n                // Send the message\n                if (claudeProcess.stdin) {\n                    claudeProcess.stdin.write(message);\n                    claudeProcess.stdin.end();\n                }\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    /**\n     * Send a message using stream JSON output (advanced)\n     */\n    async sendStreamJsonMessage(\n        message: string, \n        options: ClaudeOptions = {}\n    ): Promise<ClaudeResponse> {\n        return new Promise((resolve, reject) => {\n            try {\n                // Prepare CLI arguments\n                const args = [\n                    '--print', // Non-interactive mode\n                    '--verbose', // Required for stream-json\n                    '--output-format', 'stream-json', // Stream JSON output\n                    '--include-partial-messages' // Include partial messages as they arrive\n                    // Allow tools - we'll filter out tool calls and only show text\n                ];\n\n                // Add model if specified\n                if (options.model && options.model !== 'default') {\n                    args.push('--model', options.model);\n                }\n\n                // Claude CLI doesn't support temperature or max-tokens\n                // These would need to be configured globally in Claude settings\n\n                this.outputChannel.appendLine(`[ClaudeCodeService] Spawning claude CLI with args: ${args.join(' ')}`);\n                this.outputChannel.appendLine(`[ClaudeCodeService] Message length: ${message.length} characters`);\n                this.outputChannel.appendLine(`[ClaudeCodeService] First 200 chars of message: ${message.substring(0, 200)}...`);\n\n                // Spawn the Claude process\n                const claudeProcess = spawn('claude', args, {\n                    shell: process.platform === 'win32',\n                    stdio: ['pipe', 'pipe', 'pipe'],\n                    env: {\n                        ...process.env,\n                        FORCE_COLOR: '0',\n                        NO_COLOR: '1'\n                    }\n                });\n\n                this.currentProcess = claudeProcess;\n\n                let rawOutput = '';\n                let responseContent = '';\n                let metadata: any = {};\n\n                // Handle stdout (JSON stream)\n                claudeProcess.stdout.on('data', (data) => {\n                    const chunk = data.toString();\n                    this.outputChannel.appendLine(`[ClaudeCodeService] Raw chunk: ${chunk.substring(0, 200)}`);\n                    rawOutput += chunk;\n                    const lines = rawOutput.split('\\n');\n                    rawOutput = lines.pop() || '';\n\n                    for (const line of lines) {\n                        if (line.trim()) {\n                            try {\n                                const jsonData = JSON.parse(line.trim());\n                                this.outputChannel.appendLine(`[ClaudeCodeService] Parsed JSON type: ${jsonData.type}`);\n                                \n                                this.processJsonStreamData(jsonData, (content, meta, eventType) => {\n                                    if (content) {\n                                        responseContent += content;\n                                        hasReceivedText = true;\n                                        this.outputChannel.appendLine(`[ClaudeCodeService] Added content: \"${content.substring(0, 50)}...\"`);\n                                    }\n                                    if (meta) {\n                                        metadata = { ...metadata, ...meta };\n                                        this.outputChannel.appendLine(`[ClaudeCodeService] Updated metadata: ${JSON.stringify(meta)}`);\n                                    }\n                                    if (eventType === 'tool_use') {\n                                        toolUseDetected = true;\n                                        this.outputChannel.appendLine(`[ClaudeCodeService] Tool use detected - will terminate after text`);\n                                        \n                                        // If we have text and Claude is using tools, terminate the process\n                                        // We can't handle tool results, so we just take the text we got\n                                        if (hasReceivedText && responseContent.length > 0) {\n                                            this.outputChannel.appendLine(`[ClaudeCodeService] Terminating process - we have text but can't handle tools`);\n                                            claudeProcess.kill('SIGTERM');\n                                        }\n                                    }\n                                });\n                            } catch (error) {\n                                this.outputChannel.appendLine(`[ClaudeCodeService] Failed to parse JSON: ${line.substring(0, 100)}`);\n                            }\n                        }\n                    }\n                });\n\n                // Handle stderr\n                claudeProcess.stderr.on('data', (data) => {\n                    const error = data.toString();\n                    this.outputChannel.appendLine(`[ClaudeCodeService] Claude CLI stderr: ${error}`);\n                    // Don't treat stderr as fatal - claude CLI may output debug info to stderr\n                });\n\n                // Track if we've received text content\n                let hasReceivedText = false;\n                let toolUseDetected = false;\n\n                // Handle process exit\n                claudeProcess.on('exit', (code, signal) => {\n                    this.currentProcess = null;\n                    this.outputChannel.appendLine(`[ClaudeCodeService] Process exited with code: ${code}, signal: ${signal}`);\n                    this.outputChannel.appendLine(`[ClaudeCodeService] Total response length: ${responseContent.length} characters`);\n                    \n                    if (code === 0 || responseContent.length > 0) {\n                        // Even if exit code is non-zero, if we got content, return it\n                        this.outputChannel.appendLine(`[ClaudeCodeService] FINAL RESPONSE: \"${responseContent.substring(0, 500)}...\"`);\n                        resolve({\n                            content: responseContent || 'No response received from Claude',\n                            metadata: metadata\n                        });\n                    } else {\n                        reject(new Error(`Claude process exited with code ${code} and no response`))\n                    }\n                });\n\n                // Handle process error\n                claudeProcess.on('error', (error) => {\n                    this.currentProcess = null;\n                    \n                    if (error.message.includes('ENOENT')) {\n                        reject(new Error(\n                            'Claude Code CLI not found. Please install it with: npm install -g @anthropic-ai/claude-code'\n                        ));\n                    } else {\n                        reject(error);\n                    }\n                });\n\n                // Send the message\n                if (claudeProcess.stdin) {\n                    claudeProcess.stdin.write(message + '\\n');\n                    claudeProcess.stdin.end();\n                } else {\n                    reject(new Error('Failed to write to Claude process stdin'));\n                }\n\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    /**\n     * Clean tool markers from content before sending to UI\n     */\n    private cleanToolMarkers(content: string): string {\n        // Remove tool detail markers but keep the actual text content\n        return content\n            .replace(/<<TOOL>>.*?<<TOOL_END>>/gs, '') // Remove tool call details\n            .replace(/<<TOOL_RESULT>>.*?<<TOOL_RESULT_END>>/gs, '') // Remove tool result details\n            .replace(/<<THINKING>>.*?<<THINKING_END>>/gs, '') // Remove thinking markers\n            .replace(/🛠️ \\*?Claude is using tools.*?\\*?\\n*/g, '') // Remove tool announcements\n            .trim();\n    }\n\n    /**\n     * Process JSON stream data from Claude\n     */\n    private processJsonStreamData(\n        data: any,\n        callback: (content: string | null, metadata: any | null, eventType?: string) => void\n    ): void {\n        // Handle Claude Code CLI specific events\n        if (data.type === 'system') {\n            // Handle different system subtypes\n            if (data.subtype === 'init') {\n                this.outputChannel.appendLine(`[ClaudeCodeService] System init: ${JSON.stringify(data.tools || []).substring(0, 100)}`);\n                if (data.session_id) {\n                    callback(null, { sessionId: data.session_id });\n                }\n                // Don't send initialization message to avoid clutter\n            } else if (data.subtype === 'error') {\n                this.outputChannel.appendLine(`[ClaudeCodeService] System error: ${data.message || 'Unknown error'}`);\n                // Clean error messages too\n                const cleanError = `\\n⚠️ **System Error:** ${data.message || 'An unexpected error occurred'}\\n`;\n                callback(cleanError, null);\n                callback(null, null, 'error');\n            } else {\n                this.outputChannel.appendLine(`[ClaudeCodeService] System event (${data.subtype})`);\n            }\n        }\n        // Handle assistant messages (text and tool use)\n        else if (data.type === 'assistant' && data.message) {\n            if (data.message.content && Array.isArray(data.message.content)) {\n                for (const content of data.message.content) {\n                    // Only show text content to user, ignore tool_use content\n                    if (content.type === 'text' && content.text) {\n                        callback(content.text, null);\n                    } else if (content.type === 'tool_use') {\n                        // Log tool use and notify user\n                        this.outputChannel.appendLine(`[ClaudeCodeService] Tool use: ${content.name} (${content.id})`);\n                        this.outputChannel.appendLine(`[ClaudeCodeService] Tool input: ${JSON.stringify(content.input)}`);\n                        \n                        // Store tool call for later result matching\n                        this.pendingTools.set(content.id, {\n                            name: content.name,\n                            input: content.input,\n                            id: content.id\n                        });\n                        \n                        // Check if we should group this tool with previous ones\n                        if (this.lastToolName === content.name) {\n                            // Same tool type, add to buffer\n                            this.toolGroupBuffer.push({\n                                name: content.name,\n                                input: content.input,\n                                id: content.id\n                            });\n                        } else {\n                            // Different tool or first tool, flush previous buffer if any\n                            this.flushToolGroup(callback);\n                            // Start new buffer\n                            this.toolGroupBuffer = [{\n                                name: content.name,\n                                input: content.input,\n                                id: content.id\n                            }];\n                            this.lastToolName = content.name;\n                        }\n                    }\n                }\n            }\n            // Handle metadata if present\n            if (data.message.model || data.message.id) {\n                callback(null, {\n                    model: data.message.model,\n                    id: data.message.id\n                });\n            }\n        }\n        // Handle user messages (tool results)\n        else if (data.type === 'user' && data.message) {\n            // Tool results - store them and send update\n            if (data.message.content && Array.isArray(data.message.content)) {\n                for (const content of data.message.content) {\n                    if (content.type === 'tool_result') {\n                        this.outputChannel.appendLine(`[ClaudeCodeService] Tool result for ${content.tool_use_id}: ${content.content?.substring(0, 200)}`);\n                        // Store the result\n                        const result = content.content || content.output || '';\n                        this.toolResults.set(content.tool_use_id, result);\n                        \n                        // Check if this completes any pending tools in the buffer\n                        const pendingTool = this.pendingTools.get(content.tool_use_id);\n                        if (pendingTool) {\n                            pendingTool.result = result;\n                            \n                            // Find tool in buffer and update it\n                            const toolInBuffer = this.toolGroupBuffer.find(t => t.id === content.tool_use_id);\n                            if (toolInBuffer) {\n                                toolInBuffer.result = result;\n                            }\n                        }\n                        \n                        // Don't send tool result markers to UI - they're handled internally\n                    }\n                }\n            }\n        }\n        // Handle stream events from Claude CLI (new format)\n        else if (data.type === 'stream_event' && data.event) {\n            const event = data.event;\n            \n            // Handle content block deltas (text chunks)\n            if (event.type === 'content_block_delta' && event.delta) {\n                if (event.delta.type === 'text_delta' && event.delta.text) {\n                    // Ensure tools are flushed before sending text\n                    if (this.toolGroupBuffer.length > 0) {\n                        this.flushToolGroup(callback);\n                    }\n                    callback(event.delta.text, null);\n                }\n                // Handle thinking deltas (Claude's reasoning)\n                else if (event.delta.type === 'thinking_delta' && event.delta.text) {\n                    // Log thinking but don't show to user (can be enabled later)\n                    this.outputChannel.appendLine(`[ClaudeCodeService] Thinking: ${event.delta.text.substring(0, 100)}`);\n                }\n                // Accumulate tool input for later use\n                else if (event.delta.type === 'input_json_delta') {\n                    // We could accumulate the partial JSON here if needed\n                    this.outputChannel.appendLine(`[ClaudeCodeService] Tool input delta: ${event.delta.partial_json?.substring(0, 100)}`);\n                }\n            }\n            // Handle content block start\n            else if (event.type === 'content_block_start' && event.content_block) {\n                if (event.content_block.type === 'tool_use') {\n                    this.outputChannel.appendLine(`[ClaudeCodeService] Tool use starting: ${event.content_block.name}`);\n                    // Tool notification will be sent when we receive the complete input\n                } else if (event.content_block.type === 'text') {\n                    this.outputChannel.appendLine(`[ClaudeCodeService] Text block starting`);\n                    // Flush any pending tool groups before starting text\n                    this.flushToolGroup(callback);\n                    this.hasStartedTextOutput = true;\n                } else if (event.content_block.type === 'thinking') {\n                    this.outputChannel.appendLine(`[ClaudeCodeService] Thinking block starting`);\n                    // Don't send thinking markers to UI\n                }\n            }\n            // Handle content block stop\n            else if (event.type === 'content_block_stop') {\n                this.outputChannel.appendLine(`[ClaudeCodeService] Content block stopped (index: ${event.index})`);\n            }\n            // Handle message start (metadata)\n            else if (event.type === 'message_start' && event.message) {\n                callback(null, { \n                    model: event.message.model,\n                    id: event.message.id \n                });\n            }\n            // Handle message delta (usage info and stop reasons)\n            else if (event.type === 'message_delta') {\n                if (event.usage) {\n                    callback(null, {\n                        usage: {\n                            inputTokens: event.usage.input_tokens || 0,\n                            outputTokens: event.usage.output_tokens || 0,\n                            cacheCreationInputTokens: event.usage.cache_creation_input_tokens || 0,\n                            cacheReadInputTokens: event.usage.cache_read_input_tokens || 0\n                        }\n                    });\n                }\n                if (event.delta?.stop_reason) {\n                    this.outputChannel.appendLine(`[ClaudeCodeService] Stop reason: ${event.delta.stop_reason}`);\n                    callback(null, { stopReason: event.delta.stop_reason });\n                    \n                    // Don't send tool usage notifications - tools are shown in separate bubbles\n                }\n            }\n            // Handle message stop\n            else if (event.type === 'message_stop') {\n                this.outputChannel.appendLine(`[ClaudeCodeService] Message stopped`);\n                // Flush any remaining tool groups\n                this.flushToolGroup(callback);\n                // Clear for next message\n                if (this.seenToolsInSession) {\n                    this.seenToolsInSession.clear();\n                }\n                this.pendingTools.clear();\n                this.toolResults.clear();\n                this.toolGroupBuffer = [];\n                this.lastToolName = null;\n                this.hasStartedTextOutput = false;\n                callback(null, null, 'message_stop');\n            }\n            // Handle error events\n            else if (event.type === 'error') {\n                this.outputChannel.appendLine(`[ClaudeCodeService] Stream error: ${event.error?.message || 'Unknown error'}`);\n                callback(null, { error: event.error }, 'error');\n            }\n            // Handle ping events (keep-alive)\n            else if (event.type === 'ping') {\n                this.outputChannel.appendLine(`[ClaudeCodeService] Ping received`);\n            }\n        }\n        // Handle result event (final with detailed info)\n        else if (data.type === 'result') {\n            this.outputChannel.appendLine(`[ClaudeCodeService] Final result received`);\n            \n            // Extract detailed result metadata\n            const resultMetadata: any = {\n                resultType: data.subtype || 'unknown'\n            };\n            \n            if (data.total_cost_usd !== undefined) {\n                resultMetadata.totalCostUsd = data.total_cost_usd;\n            }\n            if (data.duration_ms !== undefined) {\n                resultMetadata.durationMs = data.duration_ms;\n            }\n            if (data.duration_api_ms !== undefined) {\n                resultMetadata.durationApiMs = data.duration_api_ms;\n            }\n            if (data.num_turns !== undefined) {\n                resultMetadata.numTurns = data.num_turns;\n            }\n            if (data.is_error !== undefined) {\n                resultMetadata.isError = data.is_error;\n            }\n            \n            callback(null, resultMetadata, 'result');\n        }\n        // Handle older format (fallback)\n        else if (data.type === 'message') {\n            if (data.role === 'assistant' && data.content) {\n                callback(data.content, null);\n            }\n        } else if (data.type === 'content') {\n            if (data.text) {\n                callback(data.text, null);\n            }\n        }\n        // Debug unknown types\n        else {\n            this.outputChannel.appendLine(`[ClaudeCodeService] Unknown data type: ${JSON.stringify(data).substring(0, 200)}`);\n        }\n    }\n\n    /**\n     * Check if Claude CLI is available\n     */\n    async isAvailable(): Promise<boolean> {\n        return new Promise((resolve) => {\n            this.outputChannel.appendLine('[ClaudeCodeService] Checking Claude Code CLI availability...');\n            exec('which claude', (error, stdout, stderr) => {\n                if (error) {\n                    this.outputChannel.appendLine('[ClaudeCodeService] Claude Code CLI not found in PATH');\n                    // Try another method\n                    exec('claude --version', (error2, stdout2, stderr2) => {\n                        if (error2) {\n                            this.outputChannel.appendLine('[ClaudeCodeService] Claude Code CLI not available');\n                            this.outputChannel.appendLine('[ClaudeCodeService] Install with: npm install -g @anthropic-ai/claude-code');\n                            resolve(false);\n                        } else {\n                            this.outputChannel.appendLine(`[ClaudeCodeService] Claude Code CLI found (version check): ${stdout2.trim()}`);\n                            resolve(true);\n                        }\n                    });\n                } else {\n                    this.outputChannel.appendLine(`[ClaudeCodeService] Claude Code CLI found at: ${stdout.trim()}`);\n                    // Also get version\n                    exec('claude --version', (verError, verStdout) => {\n                        if (!verError) {\n                            this.outputChannel.appendLine(`[ClaudeCodeService] Version: ${verStdout.trim()}`);\n                        }\n                    });\n                    resolve(true);\n                }\n            });\n        });\n    }\n\n    /**\n     * Test Claude CLI with a simple message\n     */\n    async testConnection(): Promise<{ success: boolean; message: string }> {\n        try {\n            this.outputChannel.appendLine('[ClaudeCodeService] Testing Claude CLI connection...');\n            \n            const isAvailable = await this.isAvailable();\n            if (!isAvailable) {\n                return {\n                    success: false,\n                    message: 'Claude Code CLI not installed. Install with: npm install -g @anthropic-ai/claude-code'\n                };\n            }\n            \n            // Try a simple test message using text mode for reliability\n            const response = await this.sendSimpleMessage('Hi, just testing the connection. Reply with \"Connection successful!\"', {\n                model: 'default'\n            });\n            \n            if (response.content && response.content.length > 0) {\n                this.outputChannel.appendLine('[ClaudeCodeService] Test successful!');\n                return {\n                    success: true,\n                    message: `Claude CLI working! Response: ${response.content.substring(0, 100)}`\n                };\n            } else {\n                return {\n                    success: false,\n                    message: 'Claude CLI responded but with empty content'\n                };\n            }\n        } catch (error) {\n            const errorMsg = (error as Error).message;\n            this.outputChannel.appendLine(`[ClaudeCodeService] Test failed: ${errorMsg}`);\n            return {\n                success: false,\n                message: `Claude CLI test failed: ${errorMsg}`\n            };\n        }\n    }\n\n    /**\n     * Cancel current Claude process if running\n     */\n    cancel(): void {\n        if (this.currentProcess) {\n            this.currentProcess.kill();\n            this.currentProcess = null;\n        }\n    }\n\n    /**\n     * Flush grouped tools - send notification for grouped tools\n     */\n    private flushToolGroup(callback: (content: string | null, metadata: any | null, type?: string) => void): void {\n        if (this.toolGroupBuffer.length === 0) return;\n        \n        const toolName = this.toolGroupBuffer[0].name;\n        let emoji = '🔧';\n        let groupedMessage = '';\n        \n        // Get emoji for this tool type\n        switch(toolName) {\n            case 'TodoWrite': emoji = '📝'; break;\n            case 'Bash': emoji = '⚡'; break;\n            case 'Read': emoji = '📄'; break;\n            case 'Write': case 'Edit': case 'MultiEdit': emoji = '✏️'; break;\n            case 'Grep': emoji = '🔍'; break;\n            case 'Glob': emoji = '📁'; break;\n            case 'WebSearch': emoji = '🌐'; break;\n            case 'WebFetch': emoji = '🔗'; break;\n            case 'Task': emoji = '🤖'; break;\n        }\n        \n        // Format grouped message\n        if (this.toolGroupBuffer.length === 1) {\n            // Single tool - format normally\n            const tool = this.toolGroupBuffer[0];\n            groupedMessage = this.formatToolMessage(tool.name, tool.input);\n            \n            // Add result if available\n            const result = this.toolResults.get(tool.id);\n            if (result) {\n                const truncatedResult = result.length > 200 ? result.substring(0, 200) + '...' : result;\n                groupedMessage += `\\n\\n**Result:**\\n${truncatedResult}`;\n            }\n        } else {\n            // Multiple tools of same type - group them\n            groupedMessage = `${emoji} **${toolName} (${this.toolGroupBuffer.length} operations)**\\n\\n`;\n            for (const tool of this.toolGroupBuffer) {\n                const details = this.formatToolDetails(tool.name, tool.input);\n                groupedMessage += `• ${details}\\n`;\n                \n                // Add result if available\n                const result = this.toolResults.get(tool.id);\n                if (result) {\n                    const truncatedResult = result.length > 100 ? result.substring(0, 100) + '...' : result;\n                    groupedMessage += `  → ${truncatedResult}\\n`;\n                }\n            }\n        }\n        \n        // Send the tool notification as a separate system message (without markers)\n        // The UI will handle this as a blue bubble\n        callback(`SYSTEM_TOOL_MESSAGE:${groupedMessage}`, null, 'tool_info');\n        \n        // Clear the buffer\n        this.toolGroupBuffer = [];\n    }\n    \n    /**\n     * Format tool details (without emoji, for grouped display)\n     */\n    private formatToolDetails(toolName: string, input: any): string {\n        switch(toolName) {\n            case 'TodoWrite':\n                const todoCount = input?.todos?.length || 0;\n                return `${todoCount} tasks`;\n            \n            case 'Bash':\n                const command = input?.command || '';\n                return command;\n            \n            case 'Read':\n                const readPath = input?.file_path || '';\n                const fileName = readPath.split('/').pop() || readPath;\n                let readDetails = fileName;\n                if (input?.offset || input?.limit) {\n                    readDetails += ` (lines ${input.offset || 0}-${(input.offset || 0) + (input.limit || 0)})`;\n                }\n                return readDetails;\n            \n            case 'Write':\n                const writePath = input?.file_path || '';\n                const writeFile = writePath.split('/').pop() || writePath;\n                return writeFile;\n            \n            case 'Edit':\n            case 'MultiEdit':\n                const editPath = input?.file_path || '';\n                const editFile = editPath.split('/').pop() || editPath;\n                let editDetails = editFile;\n                if (toolName === 'MultiEdit' && input?.edits) {\n                    editDetails += ` (${input.edits.length} edits)`;\n                }\n                return editDetails;\n            \n            case 'Grep':\n                const pattern = input?.pattern || '';\n                return `\"${pattern.substring(0, 30)}${pattern.length > 30 ? '...' : ''}\"`;\n            \n            case 'Glob':\n                const globPattern = input?.pattern || '';\n                return globPattern;\n            \n            case 'WebSearch':\n                const query = input?.query || '';\n                return `\"${query.substring(0, 40)}${query.length > 40 ? '...' : ''}\"`;\n            \n            case 'WebFetch':\n                const url = input?.url || '';\n                const domain = url.match(/^https?:\\/\\/([^\\/]+)/)?.[1] || url;\n                return domain;\n            \n            case 'Task':\n                const subagent = input?.subagent_type || 'agent';\n                return subagent;\n            \n            default:\n                return JSON.stringify(input).substring(0, 50);\n        }\n    }\n\n    /**\n     * Format tool message with parameters\n     */\n    private formatToolMessage(toolName: string, input: any): string {\n        let emoji = '🔧';\n        let details = '';\n        \n        switch(toolName) {\n            case 'TodoWrite':\n                emoji = '📝';\n                const todoCount = input?.todos?.length || 0;\n                details = `TodoWrite\\n${todoCount} tasks`;\n                break;\n            \n            case 'Bash':\n                emoji = '⚡';\n                const command = input?.command || '';\n                details = `Bash\\n${command}`;\n                break;\n            \n            case 'Read':\n                emoji = '📄';\n                const readPath = input?.file_path || '';\n                const fileName = readPath.split('/').pop() || readPath;\n                details = `Read\\n${fileName}`;\n                if (input?.offset || input?.limit) {\n                    details += ` (lines ${input.offset || 0}-${(input.offset || 0) + (input.limit || 0)})`;\n                }\n                break;\n            \n            case 'Write':\n                emoji = '✏️';\n                const writePath = input?.file_path || '';\n                const writeFile = writePath.split('/').pop() || writePath;\n                details = `Write\\n${writeFile}`;\n                break;\n            \n            case 'Edit':\n            case 'MultiEdit':\n                emoji = '✏️';\n                const editPath = input?.file_path || '';\n                const editFile = editPath.split('/').pop() || editPath;\n                details = `${toolName}\\n${editFile}`;\n                if (toolName === 'MultiEdit' && input?.edits) {\n                    details += ` (${input.edits.length} edits)`;\n                }\n                break;\n            \n            case 'Grep':\n                emoji = '🔍';\n                const pattern = input?.pattern || '';\n                details = `Grep\\n\"${pattern.substring(0, 30)}${pattern.length > 30 ? '...' : ''}\"`;\n                break;\n            \n            case 'Glob':\n                emoji = '📁';\n                const globPattern = input?.pattern || '';\n                details = `Glob\\n${globPattern}`;\n                break;\n            \n            case 'WebSearch':\n                emoji = '🌐';\n                const query = input?.query || '';\n                details = `WebSearch\\n\"${query.substring(0, 40)}${query.length > 40 ? '...' : ''}\"`;\n                break;\n            \n            case 'WebFetch':\n                emoji = '🔗';\n                const url = input?.url || '';\n                const domain = url.match(/^https?:\\/\\/([^\\/]+)/)?.[1] || url;\n                details = `WebFetch\\n${domain}`;\n                break;\n            \n            case 'Task':\n                emoji = '🤖';\n                const subagent = input?.subagent_type || 'agent';\n                details = `Task\\n${subagent}`;\n                break;\n            \n            default:\n                details = `${toolName}`;\n        }\n        \n        return `${emoji} **${details}**`;\n    }\n\n    dispose(): void {\n        this.cancel();\n        this.outputChannel.dispose();\n    }\n}\n\n// Singleton instance\nlet instance: ClaudeCodeService | null = null;\n\nexport function getClaudeCodeService(): ClaudeCodeService {\n    if (!instance) {\n        instance = new ClaudeCodeService();\n    }\n    return instance;\n}","/**\n * ResearchBot - Research & Information Expert\n * Uses web search for real-time information gathering and analysis\n */\nimport * as vscode from 'vscode';\nimport { ChatAgent } from './base/ChatAgent';\nimport { AgentConfig, TaskRequest, TaskResult, WorkflowStep } from '../types';\nimport { VSCodeMasterDispatcher } from '../core/VSCodeMasterDispatcher';\nimport { WebSearchService, SearchResponse } from '../utils/WebSearchService';\nimport { OpenAIService } from '../utils/OpenAIService';\n\nexport class ResearchAgent extends ChatAgent {\n    private webSearchService: WebSearchService;\n    private openAIService: OpenAIService;\n\n    constructor(context: vscode.ExtensionContext, dispatcher: VSCodeMasterDispatcher) {\n        const config: AgentConfig = {\n            participantId: 'ki-autoagent.research',\n            name: 'research',\n            fullName: 'ResearchBot',\n            description: 'Research & Information Expert with real-time web access',\n            model: 'perplexity-llama-3.1-sonar-huge-128k',\n            iconPath: vscode.Uri.joinPath(context.extensionUri, 'media', 'perplexity-icon.svg'),\n            capabilities: [\n                'Web Research',\n                'Real-time Information',\n                'Technical Documentation Search',\n                'Market Analysis',\n                'Trend Research',\n                'Competitive Analysis'\n            ],\n            commands: [\n                { name: 'search', description: 'Search web for current information', handler: 'handleSearchCommand' },\n                { name: 'documentation', description: 'Find and analyze technical documentation', handler: 'handleDocumentationCommand' },\n                { name: 'market', description: 'Research market trends and analysis', handler: 'handleMarketCommand' },\n                { name: 'compare', description: 'Compare technologies, tools, or solutions', handler: 'handleCompareCommand' }\n            ]\n        };\n\n        super(config, context, dispatcher);\n        this.webSearchService = new WebSearchService();\n        this.openAIService = new OpenAIService();\n    }\n\n    protected async handleRequest(\n        request: vscode.ChatRequest,\n        context: vscode.ChatContext,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        // Check if web access is available\n        const webAccessAvailable = await this.webSearchService.isWebAccessAvailable();\n        \n        if (!webAccessAvailable) {\n            const status = this.webSearchService.getSearchEngineStatus();\n            stream.markdown(`❌ **Web access not configured**\\n\\n`);\n            stream.markdown(`**Current search engine**: ${status.engine}\\n`);\n            stream.markdown(`**Status**: ${status.configured ? 'Configured' : 'Not configured'}\\n\\n`);\n            stream.markdown(`💡 **To enable web research:**\\n`);\n            stream.markdown(`1. Open VS Code Settings (Cmd+,)\\n`);\n            stream.markdown(`2. Search for \"KI AutoAgent\"\\n`);\n            stream.markdown(`3. Configure your preferred search API:\\n`);\n            stream.markdown(`   - **Perplexity API** (recommended)\\n`);\n            stream.markdown(`   - **Tavily API** (web search specialist)\\n`);\n            stream.markdown(`   - **SERP API** (Google search)\\n`);\n            return;\n        }\n\n        const command = request.command;\n        const prompt = request.prompt;\n\n        this.log(`Processing ${command ? `/${command}` : 'general'} research request: ${prompt.substring(0, 100)}...`);\n\n        if (command) {\n            await this.handleCommand(command, prompt, stream, token);\n        } else {\n            await this.handleGeneralResearchRequest(prompt, stream, token);\n        }\n    }\n\n    protected async processWorkflowStep(\n        step: WorkflowStep,\n        request: TaskRequest,\n        previousResults: TaskResult[]\n    ): Promise<TaskResult> {\n        \n        try {\n            let searchQuery = '';\n            let analysisPrompt = '';\n\n            switch (step.id) {\n                case 'market_research':\n                    searchQuery = `${request.prompt} market trends analysis 2024`;\n                    analysisPrompt = 'Analyze market trends and opportunities';\n                    break;\n                    \n                case 'tech_research':\n                    searchQuery = `${request.prompt} technical documentation best practices`;\n                    analysisPrompt = 'Research technical solutions and documentation';\n                    break;\n                    \n                case 'competitive_analysis':\n                    searchQuery = `${request.prompt} competitors alternatives comparison`;\n                    analysisPrompt = 'Compare competitive solutions and alternatives';\n                    break;\n                    \n                default:\n                    searchQuery = request.prompt;\n                    analysisPrompt = 'Research and analyze the given topic';\n            }\n\n            // Perform web search\n            const searchResults = await this.webSearchService.search(searchQuery);\n            \n            // Analyze results with AI\n            const analysis = await this.analyzeSearchResults(searchResults, analysisPrompt);\n\n            return {\n                status: 'success',\n                content: analysis,\n                metadata: { \n                    step: step.id,\n                    agent: 'research',\n                    searchQuery,\n                    resultsCount: searchResults.results.length\n                }\n            };\n\n        } catch (error) {\n            throw new Error(`Failed to process research step ${step.id}: ${(error as any).message}`);\n        }\n    }\n\n    // Command Handlers\n\n    private async handleSearchCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('🔍 Searching the web for current information...');\n        \n        try {\n            const searchResults = await this.webSearchService.search(prompt);\n            \n            stream.markdown(`## 🔍 Web Search Results\\n\\n`);\n            stream.markdown(`**Query**: ${searchResults.query}\\n`);\n            stream.markdown(`**Results Found**: ${searchResults.totalResults}\\n\\n`);\n\n            // Display search results\n            for (let i = 0; i < searchResults.results.length; i++) {\n                const result = searchResults.results[i];\n                stream.markdown(`### ${i + 1}. ${result.title}\\n`);\n                stream.markdown(`**URL**: [${result.url}](${result.url})\\n`);\n                stream.markdown(`**Summary**: ${result.snippet}\\n\\n`);\n            }\n\n            // Analyze and synthesize results\n            stream.progress('🧠 Analyzing search results...');\n            const analysis = await this.analyzeSearchResults(searchResults, 'Provide a comprehensive analysis and synthesis of the search results');\n            \n            stream.markdown(`## 📊 Analysis & Insights\\n\\n`);\n            stream.markdown(analysis);\n\n            // Add source references\n            searchResults.results.forEach((result, index) => {\n                this.createActionButton(\n                    `📖 Read Source ${index + 1}`,\n                    'vscode.open',\n                    [vscode.Uri.parse(result.url)],\n                    stream\n                );\n            });\n\n        } catch (error) {\n            stream.markdown(`❌ Search failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleDocumentationCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('📚 Searching for technical documentation...');\n        \n        const techQuery = `${prompt} documentation tutorial guide API reference`;\n        \n        try {\n            const searchResults = await this.webSearchService.search(techQuery);\n            \n            stream.markdown(`## 📚 Documentation Research\\n\\n`);\n            stream.markdown(`**Topic**: ${prompt}\\n\\n`);\n\n            // Filter for documentation sources\n            const docResults = searchResults.results.filter(result => \n                result.url.includes('docs') || \n                result.url.includes('documentation') ||\n                result.url.includes('api') ||\n                result.url.includes('guide') ||\n                result.title.toLowerCase().includes('documentation') ||\n                result.title.toLowerCase().includes('guide')\n            );\n\n            if (docResults.length > 0) {\n                stream.markdown(`### 📖 Official Documentation Found\\n\\n`);\n                docResults.forEach((result, index) => {\n                    stream.markdown(`**${index + 1}. ${result.title}**\\n`);\n                    stream.markdown(`- [${result.url}](${result.url})\\n`);\n                    stream.markdown(`- ${result.snippet}\\n\\n`);\n                });\n            }\n\n            // Provide comprehensive analysis\n            const analysis = await this.analyzeSearchResults(searchResults, \n                'Provide a comprehensive guide based on the documentation found, including key concepts, usage examples, and best practices');\n            \n            stream.markdown(`## 📋 Documentation Summary\\n\\n`);\n            stream.markdown(analysis);\n\n        } catch (error) {\n            stream.markdown(`❌ Documentation search failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleMarketCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('📈 Researching market trends...');\n        \n        const marketQuery = `${prompt} market trends 2024 analysis statistics growth`;\n        \n        try {\n            const searchResults = await this.webSearchService.search(marketQuery);\n            \n            stream.markdown(`## 📈 Market Research\\n\\n`);\n            \n            const analysis = await this.analyzeSearchResults(searchResults, \n                'Provide a comprehensive market analysis including current trends, growth statistics, key players, opportunities, and challenges');\n            \n            stream.markdown(analysis);\n\n            // Offer to create market report\n            this.createActionButton(\n                '📊 Create Market Report',\n                'ki-autoagent.createFile',\n                [`market_research_${Date.now()}.md`, `# Market Research: ${prompt}\\n\\n${analysis}`],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Market research failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleCompareCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('⚖️ Comparing solutions...');\n        \n        const compareQuery = `${prompt} comparison alternatives pros cons review`;\n        \n        try {\n            const searchResults = await this.webSearchService.search(compareQuery);\n            \n            stream.markdown(`## ⚖️ Comparison Analysis\\n\\n`);\n            \n            const analysis = await this.analyzeSearchResults(searchResults, \n                'Provide a detailed comparison including pros and cons, use cases, pricing (if available), and recommendations');\n            \n            stream.markdown(analysis);\n\n            // Offer to create comparison table\n            this.createActionButton(\n                '📋 Create Comparison Table',\n                'ki-autoagent.createComparisonTable',\n                [prompt, analysis],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Comparison research failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleGeneralResearchRequest(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('🔍 Conducting research...');\n        \n        try {\n            const searchResults = await this.webSearchService.search(prompt);\n            \n            // Quick summary\n            stream.markdown(`## 🔍 Research Summary\\n\\n`);\n            stream.markdown(`**Topic**: ${prompt}\\n`);\n            stream.markdown(`**Sources**: ${searchResults.totalResults} results found\\n\\n`);\n\n            // Comprehensive analysis\n            const analysis = await this.analyzeSearchResults(searchResults, \n                'Provide comprehensive research findings with key insights, current state, and actionable information');\n            \n            stream.markdown(analysis);\n\n            // Show top sources\n            if (searchResults.results.length > 0) {\n                stream.markdown(`\\n## 📚 Key Sources\\n\\n`);\n                searchResults.results.slice(0, 3).forEach((result, index) => {\n                    stream.markdown(`${index + 1}. [${result.title}](${result.url})\\n`);\n                });\n            }\n\n        } catch (error) {\n            stream.markdown(`❌ Research failed: ${(error as any).message}`);\n        }\n    }\n\n    // Helper Methods\n\n    private async analyzeSearchResults(searchResults: SearchResponse, analysisPrompt: string): Promise<string> {\n        const resultsContent = searchResults.results\n            .map(result => `Title: ${result.title}\\nURL: ${result.url}\\nContent: ${result.snippet}`)\n            .join('\\n\\n---\\n\\n');\n\n        const systemPrompt = `You are ResearchBot, an expert research analyst. Analyze web search results and provide comprehensive, accurate, and actionable insights.\n\nKey principles:\n1. Synthesize information from multiple sources\n2. Highlight key findings and trends\n3. Provide actionable recommendations\n4. Note any conflicting information\n5. Include relevant statistics and data\n6. Maintain objectivity and cite sources when possible\n\nFormat your response with clear headings and bullet points for readability.\n\n${this.getSystemContextPrompt()}`;\n\n        const userPrompt = `${analysisPrompt}\n\nSearch Query: ${searchResults.query}\n\nSearch Results:\n${resultsContent}\n\nPlease provide a comprehensive analysis based on these search results.`;\n\n        try {\n            return await this.openAIService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n        } catch (error) {\n            return `Error analyzing results: ${(error as any).message}`;\n        }\n    }\n}","module.exports = require(\"http\");","/**\n * ChatWidget - Status bar widget for KI AutoAgent Chat\n * Provides quick access to the chat panel from VS Code status bar\n */\nimport * as vscode from 'vscode';\nimport { MultiAgentChatPanel } from './MultiAgentChatPanel';\n\nexport class ChatWidget {\n    private statusBarItem: vscode.StatusBarItem;\n    private unreadCount: number = 0;\n    private lastMessage: string = '';\n    private pulseInterval: NodeJS.Timeout | undefined;\n    \n    constructor(private context: vscode.ExtensionContext, private dispatcher?: any) {\n        // Create status bar item (right side, high priority)\n        this.statusBarItem = vscode.window.createStatusBarItem(\n            vscode.StatusBarAlignment.Right,\n            1000 // High priority to appear on the right\n        );\n        \n        this.updateStatusBar();\n        this.statusBarItem.show();\n        \n        // Register commands\n        this.registerCommands();\n        \n        // Add to subscriptions\n        context.subscriptions.push(this.statusBarItem);\n    }\n    \n    private registerCommands() {\n        // Toggle chat command\n        const toggleCommand = vscode.commands.registerCommand(\n            'ki-autoagent.toggleChat',\n            () => this.toggleChat()\n        );\n        \n        // Quick chat command (opens quick input)\n        const quickChatCommand = vscode.commands.registerCommand(\n            'ki-autoagent.quickChat',\n            () => this.showQuickChat()\n        );\n        \n        // Clear unread command\n        const clearUnreadCommand = vscode.commands.registerCommand(\n            'ki-autoagent.clearUnread',\n            () => this.clearUnreadCount()\n        );\n        \n        this.context.subscriptions.push(\n            toggleCommand,\n            quickChatCommand,\n            clearUnreadCommand\n        );\n    }\n    \n    private updateStatusBar() {\n        // Build status bar text\n        let text = '$(comment-discussion) KI Chat';\n        \n        if (this.unreadCount > 0) {\n            text = `$(comment-discussion) KI Chat (${this.unreadCount})`;\n            \n            // Add warning background for unread messages\n            this.statusBarItem.backgroundColor = new vscode.ThemeColor('statusBarItem.warningBackground');\n            \n            // Start pulse animation\n            if (!this.pulseInterval) {\n                this.startPulseAnimation();\n            }\n        } else {\n            // Clear background when no unread\n            this.statusBarItem.backgroundColor = undefined;\n            \n            // Stop pulse animation\n            if (this.pulseInterval) {\n                this.stopPulseAnimation();\n            }\n        }\n        \n        this.statusBarItem.text = text;\n        this.statusBarItem.command = 'ki-autoagent.toggleChat';\n        \n        // Update tooltip\n        if (this.lastMessage) {\n            this.statusBarItem.tooltip = new vscode.MarkdownString(\n                `**KI AutoAgent Chat**\\n\\n` +\n                `Last message: _${this.truncateMessage(this.lastMessage)}_\\n\\n` +\n                `Click to open chat • Right-click for options`\n            );\n        } else {\n            this.statusBarItem.tooltip = new vscode.MarkdownString(\n                `**KI AutoAgent Chat**\\n\\n` +\n                `Click to open multi-agent chat interface\\n\\n` +\n                `Features:\\n` +\n                `• Chat with specialized AI agents\\n` +\n                `• Auto-routing to best agent\\n` +\n                `• Multi-agent workflows\\n\\n` +\n                `Click to open • Right-click for options`\n            );\n        }\n    }\n    \n    private startPulseAnimation() {\n        let isPulsing = false;\n        this.pulseInterval = setInterval(() => {\n            if (isPulsing) {\n                this.statusBarItem.text = this.statusBarItem.text.replace('🔴', '$(comment-discussion)');\n            } else {\n                this.statusBarItem.text = this.statusBarItem.text.replace('$(comment-discussion)', '🔴');\n            }\n            isPulsing = !isPulsing;\n        }, 1000);\n    }\n    \n    private stopPulseAnimation() {\n        if (this.pulseInterval) {\n            clearInterval(this.pulseInterval);\n            this.pulseInterval = undefined;\n            this.updateStatusBar();\n        }\n    }\n    \n    private toggleChat() {\n        const panel = MultiAgentChatPanel.createOrShow(this.context.extensionUri, this.dispatcher);\n        this.clearUnreadCount();\n        return panel;\n    }\n    \n    private async showQuickChat() {\n        // Show quick input for fast message sending\n        const message = await vscode.window.showInputBox({\n            placeHolder: 'Type your message for KI AutoAgent...',\n            prompt: 'Send a quick message to the AI agents',\n            ignoreFocusOut: false\n        });\n        \n        if (message) {\n            // Open chat and send message\n            const panel = this.toggleChat();\n            if (panel) {\n                // Send message to panel\n                panel.addMessage({\n                    role: 'user',\n                    content: message,\n                    timestamp: new Date().toISOString()\n                });\n                \n                // Process the message (this would normally go through the dispatcher)\n                setTimeout(() => {\n                    panel.addMessage({\n                        role: 'assistant',\n                        content: 'Processing your request...',\n                        agent: 'orchestrator',\n                        timestamp: new Date().toISOString()\n                    });\n                }, 100);\n            }\n        }\n    }\n    \n    public updateUnreadCount(count: number) {\n        this.unreadCount = count;\n        this.updateStatusBar();\n    }\n    \n    public incrementUnread() {\n        this.unreadCount++;\n        this.updateStatusBar();\n    }\n    \n    public clearUnreadCount() {\n        this.unreadCount = 0;\n        this.updateStatusBar();\n    }\n    \n    public setLastMessage(message: string, agent?: string) {\n        this.lastMessage = agent ? `[${agent}] ${message}` : message;\n        this.updateStatusBar();\n    }\n    \n    private truncateMessage(message: string, maxLength: number = 50): string {\n        if (message.length <= maxLength) {\n            return message;\n        }\n        return message.substring(0, maxLength) + '...';\n    }\n    \n    public showNotification(message: string, agent: string) {\n        // Show notification when chat is not open\n        if (!MultiAgentChatPanel.currentPanel) {\n            vscode.window.showInformationMessage(\n                `KI Agent ${agent}: ${this.truncateMessage(message, 100)}`,\n                'Open Chat',\n                'Dismiss'\n            ).then(selection => {\n                if (selection === 'Open Chat') {\n                    this.toggleChat();\n                }\n            });\n            \n            // Increment unread count\n            this.incrementUnread();\n            this.setLastMessage(message, agent);\n        }\n    }\n    \n    public dispose() {\n        if (this.pulseInterval) {\n            clearInterval(this.pulseInterval);\n        }\n        this.statusBarItem.dispose();\n    }\n}","/**\n * SharedContextManager - Manages shared context between agents for collaboration\n * Enables agents to share knowledge, decisions, and intermediate results in real-time\n */\n\nimport { EventEmitter } from 'events';\n\nexport interface ContextUpdate {\n    agentId: string;\n    timestamp: number;\n    key: string;\n    value: any;\n    metadata?: {\n        confidence?: number;\n        dependencies?: string[];\n        version?: number;\n    };\n}\n\nexport interface SharedContext {\n    projectStructure?: any;\n    architectureDecisions?: Map<string, any>;\n    codePatterns?: Map<string, any>;\n    researchFindings?: Map<string, any>;\n    validationResults?: Map<string, any>;\n    currentWorkflow?: any;\n    globalMemories?: any[];\n    agentOutputs?: Map<string, any>;\n}\n\nexport interface ContextSubscriber {\n    agentId: string;\n    callback: (update: ContextUpdate) => void;\n    filter?: (update: ContextUpdate) => boolean;\n}\n\nexport class SharedContextManager {\n    private static instance: SharedContextManager;\n    private context: Map<string, any> = new Map();\n    private contextHistory: ContextUpdate[] = [];\n    private subscribers: Map<string, ContextSubscriber[]> = new Map();\n    private eventBus: EventEmitter;\n    private locks: Map<string, string> = new Map(); // key -> agentId holding lock\n    private version: number = 0;\n\n    private constructor() {\n        this.eventBus = new EventEmitter();\n        this.eventBus.setMaxListeners(50); // Support many agents\n        this.initializeContext();\n    }\n\n    public static getInstance(): SharedContextManager {\n        if (!SharedContextManager.instance) {\n            SharedContextManager.instance = new SharedContextManager();\n        }\n        return SharedContextManager.instance;\n    }\n\n    private initializeContext(): void {\n        // Initialize with default context structure\n        this.context.set('projectStructure', {});\n        this.context.set('architectureDecisions', new Map());\n        this.context.set('codePatterns', new Map());\n        this.context.set('researchFindings', new Map());\n        this.context.set('validationResults', new Map());\n        this.context.set('currentWorkflow', null);\n        this.context.set('globalMemories', []);\n        this.context.set('agentOutputs', new Map());\n    }\n\n    /**\n     * Update context with new information\n     */\n    public async updateContext(agentId: string, key: string, value: any, metadata?: any): Promise<void> {\n        // Check if key is locked by another agent\n        const lockHolder = this.locks.get(key);\n        if (lockHolder && lockHolder !== agentId) {\n            throw new Error(`Context key '${key}' is locked by agent ${lockHolder}`);\n        }\n\n        const update: ContextUpdate = {\n            agentId,\n            timestamp: Date.now(),\n            key,\n            value,\n            metadata: {\n                ...metadata,\n                version: ++this.version\n            }\n        };\n\n        // Update the context\n        this.context.set(key, value);\n\n        // Store in history for replay/debugging\n        this.contextHistory.push(update);\n\n        // Notify all subscribers\n        await this.notifySubscribers(update);\n\n        // Emit event for async listeners\n        this.eventBus.emit('context-update', update);\n    }\n\n    /**\n     * Get current context value\n     */\n    public getContext(key?: string): any {\n        if (key) {\n            return this.context.get(key);\n        }\n        // Return entire context as object\n        const contextObj: any = {};\n        this.context.forEach((value, key) => {\n            contextObj[key] = value;\n        });\n        return contextObj;\n    }\n\n    /**\n     * Get context with memory of past updates\n     */\n    public getContextWithHistory(key: string, limit: number = 10): ContextUpdate[] {\n        return this.contextHistory\n            .filter(update => update.key === key)\n            .slice(-limit);\n    }\n\n    /**\n     * Subscribe to context updates\n     */\n    public subscribe(agentId: string, callback: (update: ContextUpdate) => void, filter?: (update: ContextUpdate) => boolean): void {\n        const subscriber: ContextSubscriber = {\n            agentId,\n            callback,\n            filter\n        };\n\n        if (!this.subscribers.has(agentId)) {\n            this.subscribers.set(agentId, []);\n        }\n\n        this.subscribers.get(agentId)!.push(subscriber);\n    }\n\n    /**\n     * Unsubscribe from context updates\n     */\n    public unsubscribe(agentId: string): void {\n        this.subscribers.delete(agentId);\n    }\n\n    /**\n     * Notify all subscribers of a context update\n     */\n    private async notifySubscribers(update: ContextUpdate): Promise<void> {\n        const promises: Promise<void>[] = [];\n\n        this.subscribers.forEach((subscriberList) => {\n            subscriberList.forEach(subscriber => {\n                // Skip the agent that made the update\n                if (subscriber.agentId === update.agentId) {\n                    return;\n                }\n\n                // Apply filter if provided\n                if (subscriber.filter && !subscriber.filter(update)) {\n                    return;\n                }\n\n                // Notify subscriber asynchronously\n                promises.push(\n                    Promise.resolve(subscriber.callback(update)).catch(err => {\n                        console.error(`Error notifying subscriber ${subscriber.agentId}:`, err);\n                    })\n                );\n            });\n        });\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Acquire a lock on a context key (for atomic updates)\n     */\n    public async acquireLock(agentId: string, key: string, timeout: number = 5000): Promise<void> {\n        const startTime = Date.now();\n\n        while (this.locks.has(key) && this.locks.get(key) !== agentId) {\n            if (Date.now() - startTime > timeout) {\n                throw new Error(`Timeout acquiring lock for key '${key}'`);\n            }\n            await new Promise(resolve => setTimeout(resolve, 100));\n        }\n\n        this.locks.set(key, agentId);\n    }\n\n    /**\n     * Release a lock on a context key\n     */\n    public releaseLock(agentId: string, key: string): void {\n        if (this.locks.get(key) === agentId) {\n            this.locks.delete(key);\n        }\n    }\n\n    /**\n     * Merge context from multiple agents (for conflict resolution)\n     */\n    public async mergeContext(updates: ContextUpdate[], resolver?: (conflicts: ContextUpdate[]) => any): Promise<void> {\n        const grouped = new Map<string, ContextUpdate[]>();\n\n        // Group updates by key\n        updates.forEach(update => {\n            if (!grouped.has(update.key)) {\n                grouped.set(update.key, []);\n            }\n            grouped.get(update.key)!.push(update);\n        });\n\n        // Process each key\n        for (const [key, keyUpdates] of grouped) {\n            if (keyUpdates.length === 1) {\n                // No conflict, apply directly\n                await this.updateContext(keyUpdates[0].agentId, key, keyUpdates[0].value, keyUpdates[0].metadata);\n            } else {\n                // Conflict - use resolver or last-write-wins\n                const resolvedValue = resolver ? resolver(keyUpdates) : keyUpdates[keyUpdates.length - 1].value;\n                await this.updateContext('system', key, resolvedValue, { resolved: true });\n            }\n        }\n    }\n\n    /**\n     * Create a snapshot of current context (for checkpointing)\n     */\n    public createSnapshot(): { version: number; timestamp: number; context: Map<string, any> } {\n        return {\n            version: this.version,\n            timestamp: Date.now(),\n            context: new Map(this.context)\n        };\n    }\n\n    /**\n     * Restore context from snapshot\n     */\n    public restoreSnapshot(snapshot: { version: number; timestamp: number; context: Map<string, any> }): void {\n        this.context = new Map(snapshot.context);\n        this.version = snapshot.version;\n        this.eventBus.emit('context-restored', snapshot);\n    }\n\n    /**\n     * Clear context (for new sessions)\n     */\n    public clearContext(): void {\n        this.context.clear();\n        this.contextHistory = [];\n        this.locks.clear();\n        this.version = 0;\n        this.initializeContext();\n        this.eventBus.emit('context-cleared');\n    }\n\n    /**\n     * Get agents currently working on the context\n     */\n    public getActiveAgents(): string[] {\n        const activeAgents = new Set<string>();\n\n        // Get agents from recent updates\n        const recentTime = Date.now() - 60000; // Last minute\n        this.contextHistory\n            .filter(update => update.timestamp > recentTime)\n            .forEach(update => activeAgents.add(update.agentId));\n\n        return Array.from(activeAgents);\n    }\n\n    /**\n     * Get collaboration insights\n     */\n    public getCollaborationMetrics(): any {\n        const metrics: any = {\n            totalUpdates: this.contextHistory.length,\n            activeAgents: this.getActiveAgents().length,\n            contextKeys: this.context.size,\n            lockedKeys: this.locks.size,\n            version: this.version\n        };\n\n        // Calculate update frequency by agent\n        const agentUpdates = new Map<string, number>();\n        this.contextHistory.forEach(update => {\n            agentUpdates.set(update.agentId, (agentUpdates.get(update.agentId) || 0) + 1);\n        });\n        metrics.agentActivity = Object.fromEntries(agentUpdates);\n\n        return metrics;\n    }\n}\n\n// Export singleton instance getter\nexport function getSharedContext(): SharedContextManager {\n    return SharedContextManager.getInstance();\n}","module.exports = require(\"https\");","/**\n * Web Search Service for real-time research and information gathering\n */\nimport * as vscode from 'vscode';\n\nexport interface SearchResult {\n    title: string;\n    url: string;\n    snippet: string;\n    content?: string;\n}\n\nexport interface SearchResponse {\n    query: string;\n    results: SearchResult[];\n    totalResults: number;\n}\n\nexport class WebSearchService {\n    private config: vscode.WorkspaceConfiguration;\n\n    constructor() {\n        this.config = vscode.workspace.getConfiguration('kiAutoAgent');\n    }\n\n    async search(query: string): Promise<SearchResponse> {\n        const webAccessEnabled = this.config.get<boolean>('webAccess.enabled', true);\n        \n        if (!webAccessEnabled) {\n            throw new Error('Web access is disabled in settings');\n        }\n\n        const searchEngine = this.config.get<string>('webAccess.searchEngine', 'perplexity');\n        const maxResults = this.config.get<number>('webAccess.maxResults', 5);\n\n        switch (searchEngine) {\n            case 'perplexity':\n                return await this.searchWithPerplexity(query, maxResults);\n            case 'tavily':\n                return await this.searchWithTavily(query, maxResults);\n            case 'serp':\n                return await this.searchWithSERP(query, maxResults);\n            case 'custom':\n                return await this.searchWithCustom(query, maxResults);\n            default:\n                throw new Error(`Unknown search engine: ${searchEngine}`);\n        }\n    }\n\n    private async searchWithPerplexity(query: string, maxResults: number): Promise<SearchResponse> {\n        const apiKey = this.config.get<string>('perplexity.apiKey');\n        \n        if (!apiKey) {\n            throw new Error('Perplexity API key not configured');\n        }\n\n        try {\n            const response = await fetch('https://api.perplexity.ai/chat/completions', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${apiKey}`\n                },\n                body: JSON.stringify({\n                    model: 'llama-3.1-sonar-small-128k-online',\n                    messages: [\n                        {\n                            role: 'system',\n                            content: 'You are a helpful research assistant. Provide comprehensive information with sources.'\n                        },\n                        {\n                            role: 'user',\n                            content: `Research and provide detailed information about: ${query}`\n                        }\n                    ],\n                    max_tokens: 1000,\n                    temperature: 0.2,\n                    return_citations: true\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`Perplexity API error: ${response.statusText}`);\n            }\n\n            const data = await response.json() as any;\n            const content = data.choices[0]?.message?.content || '';\n            const citations = data.citations || [];\n\n            // Convert Perplexity response to SearchResponse format\n            const results: SearchResult[] = citations.slice(0, maxResults).map((citation: any, index: number) => ({\n                title: `Source ${index + 1}`,\n                url: citation.url || '',\n                snippet: citation.text || '',\n                content: content\n            }));\n\n            // If no citations but we have content, create a general result\n            if (results.length === 0 && content) {\n                results.push({\n                    title: 'Perplexity Research Result',\n                    url: 'https://perplexity.ai',\n                    snippet: content.substring(0, 200) + '...',\n                    content: content\n                });\n            }\n\n            return {\n                query,\n                results,\n                totalResults: results.length\n            };\n\n        } catch (error) {\n            throw new Error(`Perplexity search failed: ${error}`);\n        }\n    }\n\n    private async searchWithTavily(query: string, maxResults: number): Promise<SearchResponse> {\n        const apiKey = this.config.get<string>('tavily.apiKey');\n        \n        if (!apiKey) {\n            throw new Error('Tavily API key not configured');\n        }\n\n        try {\n            const response = await fetch('https://api.tavily.com/search', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    api_key: apiKey,\n                    query: query,\n                    search_depth: 'advanced',\n                    include_answer: true,\n                    include_images: false,\n                    include_raw_content: true,\n                    max_results: maxResults\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`Tavily API error: ${response.statusText}`);\n            }\n\n            const data = await response.json() as any;\n            \n            const results: SearchResult[] = (data.results || []).map((result: any) => ({\n                title: result.title || '',\n                url: result.url || '',\n                snippet: result.content || '',\n                content: result.raw_content || result.content\n            }));\n\n            return {\n                query,\n                results,\n                totalResults: data.results?.length || 0\n            };\n\n        } catch (error) {\n            throw new Error(`Tavily search failed: ${error}`);\n        }\n    }\n\n    private async searchWithSERP(query: string, maxResults: number): Promise<SearchResponse> {\n        const apiKey = this.config.get<string>('serp.apiKey');\n        \n        if (!apiKey) {\n            throw new Error('SERP API key not configured');\n        }\n\n        try {\n            const url = new URL('https://serpapi.com/search');\n            url.searchParams.append('q', query);\n            url.searchParams.append('api_key', apiKey);\n            url.searchParams.append('engine', 'google');\n            url.searchParams.append('num', maxResults.toString());\n\n            const response = await fetch(url.toString());\n\n            if (!response.ok) {\n                throw new Error(`SERP API error: ${response.statusText}`);\n            }\n\n            const data = await response.json() as any;\n            \n            const results: SearchResult[] = (data.organic_results || []).map((result: any) => ({\n                title: result.title || '',\n                url: result.link || '',\n                snippet: result.snippet || '',\n                content: result.snippet || ''\n            }));\n\n            return {\n                query,\n                results,\n                totalResults: data.organic_results?.length || 0\n            };\n\n        } catch (error) {\n            throw new Error(`SERP search failed: ${error}`);\n        }\n    }\n\n    private async searchWithCustom(query: string, maxResults: number): Promise<SearchResponse> {\n        const endpoint = this.config.get<string>('customSearch.endpoint');\n        const apiKey = this.config.get<string>('customSearch.apiKey');\n        \n        if (!endpoint) {\n            throw new Error('Custom search endpoint not configured');\n        }\n\n        try {\n            const response = await fetch(endpoint, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    ...(apiKey && { 'Authorization': `Bearer ${apiKey}` })\n                },\n                body: JSON.stringify({\n                    query,\n                    max_results: maxResults\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`Custom search API error: ${response.statusText}`);\n            }\n\n            const data = await response.json() as any;\n            \n            // Assume custom API returns results in our expected format\n            return {\n                query,\n                results: data.results || [],\n                totalResults: data.total_results || 0\n            };\n\n        } catch (error) {\n            throw new Error(`Custom search failed: ${error}`);\n        }\n    }\n\n    async isWebAccessAvailable(): Promise<boolean> {\n        const webAccessEnabled = this.config.get<boolean>('webAccess.enabled', true);\n        \n        if (!webAccessEnabled) {\n            return false;\n        }\n\n        const searchEngine = this.config.get<string>('webAccess.searchEngine', 'perplexity');\n        \n        switch (searchEngine) {\n            case 'perplexity':\n                return !!this.config.get<string>('perplexity.apiKey');\n            case 'tavily':\n                return !!this.config.get<string>('tavily.apiKey');\n            case 'serp':\n                return !!this.config.get<string>('serp.apiKey');\n            case 'custom':\n                return !!this.config.get<string>('customSearch.endpoint');\n            default:\n                return false;\n        }\n    }\n\n    getSearchEngineStatus(): { engine: string; configured: boolean; error?: string } {\n        const searchEngine = this.config.get<string>('webAccess.searchEngine', 'perplexity');\n        \n        switch (searchEngine) {\n            case 'perplexity':\n                return {\n                    engine: 'Perplexity',\n                    configured: !!this.config.get<string>('perplexity.apiKey')\n                };\n            case 'tavily':\n                return {\n                    engine: 'Tavily',\n                    configured: !!this.config.get<string>('tavily.apiKey')\n                };\n            case 'serp':\n                return {\n                    engine: 'SERP API',\n                    configured: !!this.config.get<string>('serp.apiKey')\n                };\n            case 'custom':\n                return {\n                    engine: 'Custom',\n                    configured: !!this.config.get<string>('customSearch.endpoint')\n                };\n            default:\n                return {\n                    engine: searchEngine,\n                    configured: false,\n                    error: 'Unknown search engine'\n                };\n        }\n    }\n}","/**\n * ReviewerGPT - Code Review & Security Expert\n * Performs comprehensive code reviews focusing on quality, security, and performance\n */\nimport * as vscode from 'vscode';\nimport { ChatAgent } from './base/ChatAgent';\nimport { AgentConfig, TaskRequest, TaskResult, WorkflowStep } from '../types';\nimport { VSCodeMasterDispatcher } from '../core/VSCodeMasterDispatcher';\nimport { OpenAIService } from '../utils/OpenAIService';\nimport * as path from 'path';\n\nexport class ReviewerGPTAgent extends ChatAgent {\n    private openAIService: OpenAIService;\n\n    constructor(context: vscode.ExtensionContext, dispatcher: VSCodeMasterDispatcher) {\n        const config: AgentConfig = {\n            participantId: 'ki-autoagent.reviewer',\n            name: 'reviewer',\n            fullName: 'ReviewerGPT',\n            description: 'Code Review & Security Expert - Reviews code quality, security, and performance',\n            model: 'gpt-5-mini-2025-09-20',\n            iconPath: vscode.Uri.joinPath(context.extensionUri, 'media', 'reviewer-icon.svg'),\n            capabilities: [\n                'Code Quality Review',\n                'Security Vulnerability Detection',\n                'Performance Analysis',\n                'Best Practices Check',\n                'SOLID Principles',\n                'Design Pattern Analysis',\n                'Test Coverage Review',\n                'Dependency Audit'\n            ],\n            commands: [\n                { name: 'review', description: 'Comprehensive code review', handler: 'handleReviewCommand' },\n                { name: 'bugs', description: 'Active bug hunting in code', handler: 'handleBugsCommand' },\n                { name: 'debug', description: 'Run app and debug issues', handler: 'handleDebugCommand' },\n                { name: 'test-ui', description: 'Test UI interactions', handler: 'handleTestUICommand' },\n                { name: 'security', description: 'Security vulnerability scan', handler: 'handleSecurityCommand' },\n                { name: 'performance', description: 'Performance analysis', handler: 'handlePerformanceCommand' },\n                { name: 'standards', description: 'Check coding standards', handler: 'handleStandardsCommand' },\n                { name: 'test', description: 'Review test coverage', handler: 'handleTestCommand' },\n                { name: 'architecture-review', description: 'Validate architect understanding of requirements', handler: 'handleArchitectureReviewCommand' }\n            ]\n        };\n\n        super(config, context, dispatcher);\n        this.openAIService = new OpenAIService();\n    }\n\n    protected async handleRequest(\n        request: vscode.ChatRequest,\n        context: vscode.ChatContext,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        const command = request.command;\n        const prompt = request.prompt;\n\n        this.log(`Processing ${command ? `/${command}` : 'general'} review request: ${prompt.substring(0, 100)}...`);\n\n        if (command) {\n            await this.handleCommand(command, prompt, stream, token);\n        } else {\n            await this.handleGeneralReviewRequest(prompt, stream, token);\n        }\n    }\n\n    protected async processWorkflowStep(\n        step: WorkflowStep,\n        request: TaskRequest,\n        previousResults: TaskResult[]\n    ): Promise<TaskResult> {\n\n        try {\n            let reviewResult = '';\n            let foundBugs = false;\n\n            switch (step.id) {\n                case 'code_review':\n                    reviewResult = await this.performCodeReview(request, previousResults);\n                    break;\n\n                case 'security_check':\n                    reviewResult = await this.performSecurityCheck(request, previousResults);\n                    break;\n\n                case 'performance_review':\n                    reviewResult = await this.performPerformanceReview(request, previousResults);\n                    break;\n\n                default:\n                    reviewResult = await this.performGeneralReview(request, previousResults);\n            }\n\n            // Check if bugs were found and need to be sent back to CodeSmith\n            if (reviewResult.includes('🚨 BUGS FOUND') || reviewResult.includes('Critical issues')) {\n                foundBugs = true;\n                reviewResult += '\\n\\n🔄 **RECOMMENDATION**: These issues should be sent back to @codesmith for immediate fixes.';\n            }\n\n            return {\n                status: foundBugs ? 'partial_success' : 'success',\n                content: reviewResult,\n                metadata: {\n                    step: step.id,\n                    agent: 'reviewer',\n                    type: 'review',\n                    foundBugs: foundBugs,\n                    requiresCodeSmithFix: foundBugs\n                },\n                suggestions: foundBugs ? [{\n                    title: '🔧 Send to CodeSmith for fixes',\n                    description: 'Send the found bugs to CodeSmith for immediate fixing',\n                    action: 'send_to_codesmith',\n                    data: { issues: reviewResult }\n                }] : []\n            };\n\n        } catch (error) {\n            throw new Error(`Failed to process review step ${step.id}: ${(error as any).message}`);\n        }\n    }\n\n    // Command Handlers\n\n    private async handleReviewCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        const editor = vscode.window.activeTextEditor;\n        if (!editor) {\n            stream.markdown('❌ No active editor found. Please open a file to review.');\n            return;\n        }\n\n        stream.progress('🔍 Performing comprehensive code review...');\n\n        try {\n            const document = editor.document;\n            const code = document.getText();\n            const fileName = path.basename(document.fileName);\n            const language = document.languageId;\n\n            const review = await this.reviewCode(code, fileName, language, prompt);\n\n            stream.markdown('## 🔍 Code Review Report\\n\\n');\n            stream.markdown(review);\n\n            // Add action buttons\n            this.createActionButton(\n                '📋 Save Review Report',\n                'ki-autoagent.saveFile',\n                [`reviews/review_${Date.now()}.md`, review],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Review failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleBugsCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        stream.progress('🐛 Actively hunting for bugs...');\n\n        try {\n            const editor = vscode.window.activeTextEditor;\n            if (!editor) {\n                stream.markdown('❌ No active editor found. Please open a file to review.');\n                return;\n            }\n\n            const document = editor.document;\n            const code = document.getText();\n            const fileName = path.basename(document.fileName);\n            const language = document.languageId;\n\n            const bugReport = await this.findCommonBugs(code, language);\n\n            stream.markdown('## 🐛 Bug Hunt Report\\n\\n');\n            stream.markdown(bugReport);\n\n            // Check if critical bugs were found\n            if (bugReport.includes('🔴') || bugReport.includes('BUG') || bugReport.includes('onclick')) {\n                stream.markdown('\\n## ⚠️ CRITICAL BUGS FOUND\\n\\n');\n\n                this.createActionButton(\n                    '🔧 Send to CodeSmith for fixes',\n                    'ki-autoagent.sendToAgent',\n                    ['codesmith', `Fix these bugs found in ${fileName}:\\n\\n${bugReport}`],\n                    stream\n                );\n            }\n\n        } catch (error) {\n            stream.markdown(`❌ Bug hunting failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleDebugCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        stream.progress('🔧 Starting debug session...');\n\n        try {\n            const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n            if (!workspaceFolder) {\n                stream.markdown('❌ No workspace folder found.');\n                return;\n            }\n\n            stream.markdown('## 🔧 Debug Session\\n\\n');\n\n            // Check for package.json to determine project type\n            const packageJsonUri = vscode.Uri.joinPath(workspaceFolder.uri, 'package.json');\n            let debugCommand = '';\n            let projectType = '';\n\n            try {\n                const packageJsonContent = await vscode.workspace.fs.readFile(packageJsonUri);\n                const packageJson = JSON.parse(packageJsonContent.toString());\n\n                if (packageJson.scripts?.['dev']) {\n                    debugCommand = 'npm run dev';\n                    projectType = 'Node.js/Web';\n                } else if (packageJson.scripts?.['start']) {\n                    debugCommand = 'npm start';\n                    projectType = 'Node.js/Web';\n                }\n\n                stream.markdown(`📦 **Project Type:** ${projectType}\\n`);\n                stream.markdown(`🚀 **Debug Command:** \\`${debugCommand}\\`\\n\\n`);\n\n            } catch (error) {\n                stream.markdown('⚠️ No package.json found. Please specify how to run your application.\\n');\n            }\n\n            // Start debug terminal\n            const terminal = vscode.window.createTerminal('ReviewerGPT Debug');\n            terminal.show();\n\n            stream.markdown('### 📝 Debug Steps:\\n\\n');\n            stream.markdown('1. **Starting application** in debug terminal\\n');\n            stream.markdown('2. **Monitoring console output** for errors\\n');\n            stream.markdown('3. **Checking for runtime exceptions**\\n');\n            stream.markdown('4. **Testing user interactions**\\n\\n');\n\n            if (debugCommand) {\n                terminal.sendText(debugCommand);\n                stream.markdown(`✅ Started: \\`${debugCommand}\\`\\n\\n`);\n            }\n\n            stream.markdown('### 🔍 What to check:\\n\\n');\n            stream.markdown('- Console errors (red text in terminal)\\n');\n            stream.markdown('- Network failures (failed API calls)\\n');\n            stream.markdown('- UI not responding to clicks\\n');\n            stream.markdown('- Missing elements or broken layouts\\n\\n');\n\n            stream.markdown('### 📊 Debug Analysis:\\n\\n');\n            stream.markdown('Watch the terminal output and report any:\\n');\n            stream.markdown('- 🔴 **Errors**: Exceptions, crashes, undefined references\\n');\n            stream.markdown('- 🟡 **Warnings**: Deprecations, performance issues\\n');\n            stream.markdown('- 🔵 **Info**: Unexpected behavior, timing issues\\n\\n');\n\n            // Add action buttons\n            this.createActionButton(\n                '🐛 Report Bugs Found',\n                'ki-autoagent.sendToAgent',\n                ['codesmith', 'Fix these bugs found during debug session'],\n                stream\n            );\n\n            this.createActionButton(\n                '📋 Save Debug Log',\n                'ki-autoagent.saveFile',\n                [`debug-log-${Date.now()}.txt`, 'Debug session log'],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Debug session failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleTestUICommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        stream.progress('🖱️ Testing UI interactions...');\n\n        try {\n            stream.markdown('## 🖱️ UI Testing Guide\\n\\n');\n            stream.markdown('### Test Checklist:\\n\\n');\n\n            const uiTests = [\n                '✅ **Buttons**: Click all buttons and verify they work',\n                '✅ **Forms**: Submit forms with valid/invalid data',\n                '✅ **Links**: Check all navigation links',\n                '✅ **Modals**: Open/close dialogs and popups',\n                '✅ **Dropdowns**: Test all select menus',\n                '✅ **Input fields**: Test with various inputs',\n                '✅ **Keyboard**: Test keyboard shortcuts',\n                '✅ **Responsive**: Resize window and test',\n                '✅ **Accessibility**: Tab navigation works',\n                '✅ **Error states**: Trigger and verify error handling'\n            ];\n\n            for (const test of uiTests) {\n                stream.markdown(`- ${test}\\n`);\n            }\n\n            stream.markdown('\\n### 🔍 Common UI Bugs to Check:\\n\\n');\n            stream.markdown('```javascript\\n');\n            stream.markdown('// ❌ onclick not working in VS Code webviews\\n');\n            stream.markdown('button.onclick = handler; // WON\\'T WORK!\\n\\n');\n            stream.markdown('// ✅ Use addEventListener instead\\n');\n            stream.markdown('button.addEventListener(\\'click\\', handler);\\n');\n            stream.markdown('```\\n\\n');\n\n            stream.markdown('### 🐛 Found Issues?\\n\\n');\n            stream.markdown('Document any UI problems found:\\n');\n            stream.markdown('1. Which element has the issue?\\n');\n            stream.markdown('2. What should happen?\\n');\n            stream.markdown('3. What actually happens?\\n');\n            stream.markdown('4. Console errors (if any)\\n\\n');\n\n            // Add action buttons\n            this.createActionButton(\n                '🔧 Report UI Bugs',\n                'ki-autoagent.sendToAgent',\n                ['codesmith', 'Fix these UI bugs found during testing'],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ UI testing failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleSecurityCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        stream.progress('🔐 Scanning for security vulnerabilities...');\n\n        try {\n            const editor = vscode.window.activeTextEditor;\n            let code = '';\n            let fileName = '';\n            let language = '';\n\n            if (editor) {\n                code = editor.document.getText();\n                fileName = path.basename(editor.document.fileName);\n                language = editor.document.languageId;\n            } else {\n                // Scan entire workspace\n                code = await this.getWorkspaceCode();\n                fileName = 'Workspace';\n                language = 'multiple';\n            }\n\n            const securityReport = await this.performSecurityScan(code, fileName, language, prompt);\n\n            stream.markdown('## 🔐 Security Analysis Report\\n\\n');\n            stream.markdown(securityReport);\n\n            // Add action buttons\n            this.createActionButton(\n                '⚠️ Create Security Issues',\n                'ki-autoagent.createGitHubIssues',\n                [securityReport],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Security scan failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handlePerformanceCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        stream.progress('⚡ Analyzing performance...');\n\n        try {\n            const editor = vscode.window.activeTextEditor;\n            if (!editor) {\n                stream.markdown('❌ No active editor found. Please open a file to analyze.');\n                return;\n            }\n\n            const code = editor.document.getText();\n            const fileName = path.basename(editor.document.fileName);\n            const language = editor.document.languageId;\n\n            const performanceReport = await this.analyzePerformance(code, fileName, language, prompt);\n\n            stream.markdown('## ⚡ Performance Analysis\\n\\n');\n            stream.markdown(performanceReport);\n\n        } catch (error) {\n            stream.markdown(`❌ Performance analysis failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleStandardsCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        stream.progress('📏 Checking coding standards...');\n\n        try {\n            const editor = vscode.window.activeTextEditor;\n            if (!editor) {\n                stream.markdown('❌ No active editor found. Please open a file to check.');\n                return;\n            }\n\n            const code = editor.document.getText();\n            const language = editor.document.languageId;\n\n            const standardsReport = await this.checkCodingStandards(code, language, prompt);\n\n            stream.markdown('## 📏 Coding Standards Report\\n\\n');\n            stream.markdown(standardsReport);\n\n        } catch (error) {\n            stream.markdown(`❌ Standards check failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleTestCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        stream.progress('🧪 Reviewing test coverage...');\n\n        try {\n            const testReport = await this.reviewTestCoverage(prompt);\n\n            stream.markdown('## 🧪 Test Coverage Review\\n\\n');\n            stream.markdown(testReport);\n\n            // Add suggestions for missing tests\n            this.createActionButton(\n                '➕ Generate Missing Tests',\n                'ki-autoagent.generateTests',\n                [],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Test review failed: ${(error as any).message}`);\n        }\n    }\n\n    private async handleGeneralReviewRequest(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        // Check if prompt contains code to review\n        const hasCode = prompt.includes('```') || prompt.includes('function') ||\n                       prompt.includes('class') || prompt.includes('const') ||\n                       prompt.includes('onclick') || prompt.includes('addEventListener');\n\n        if (hasCode) {\n            stream.progress('🔍 Actively searching for bugs and reviewing code...');\n\n            try {\n                // Extract code blocks or use entire prompt\n                const codeMatch = prompt.match(/```[\\s\\S]*?```/g);\n                const code = codeMatch ?\n                    codeMatch.join('\\n').replace(/```\\w*\\n?/g, '') :\n                    prompt;\n\n                // First, actively find bugs\n                const bugReport = await this.findCommonBugs(code, 'javascript/typescript');\n\n                stream.markdown('## 🐛 Bug Detection Report\\n\\n');\n                stream.markdown(bugReport);\n\n                // Check if critical bugs were found\n                const hasCriticalBugs = bugReport.includes('🔴') ||\n                                        bugReport.includes('onclick') ||\n                                        bugReport.includes('won\\'t work') ||\n                                        bugReport.includes('Bug found');\n\n                if (hasCriticalBugs) {\n                    stream.markdown('\\n## ⚠️ CRITICAL ISSUES FOUND\\n\\n');\n                    stream.markdown('**These bugs will prevent the code from working correctly!**\\n');\n                    stream.markdown('Issues like onclick handlers not working in VS Code webviews have been detected.\\n\\n');\n\n                    // Suggest sending to CodeSmith\n                    stream.markdown('## 🔄 Recommended Action\\n\\n');\n                    stream.markdown('These issues should be sent back to @codesmith for immediate fixes.\\n');\n\n                    this.createActionButton(\n                        '🔧 Send bugs to CodeSmith',\n                        'ki-autoagent.sendToAgent',\n                        ['codesmith', `Please fix these bugs found by ReviewerGPT:\\n\\n${bugReport}`],\n                        stream\n                    );\n                }\n\n                // Then do a comprehensive review\n                const review = await this.performGeneralReview({ prompt } as TaskRequest, []);\n\n                stream.markdown('\\n## 🔍 Full Code Review\\n\\n');\n                stream.markdown(review);\n\n            } catch (error) {\n                stream.markdown(`❌ Review failed: ${(error as any).message}`);\n            }\n        } else {\n            stream.progress('🔍 Performing review...');\n\n            try {\n                const review = await this.performGeneralReview({ prompt } as TaskRequest, []);\n\n                stream.markdown('## 🔍 Review Results\\n\\n');\n                stream.markdown(review);\n\n            } catch (error) {\n                stream.markdown(`❌ Review failed: ${(error as any).message}`);\n            }\n        }\n    }\n\n    private async handleArchitectureReviewCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n\n        stream.progress('🏛️ Reviewing architecture against requirements...');\n\n        try {\n            // Get conversation context to extract requirements and architect's solution\n            const conversationContext = prompt || 'Review the architect\\'s understanding of the requirements';\n\n            const architectureReview = await this.validateArchitectureUnderstanding(conversationContext);\n\n            stream.markdown('## 🏛️ Architecture Validation Report\\n\\n');\n            stream.markdown(architectureReview);\n\n            // Offer to create detailed report\n            this.createActionButton(\n                '📋 Save Validation Report',\n                'ki-autoagent.saveFile',\n                [`architecture-validation-${Date.now()}.md`, architectureReview],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Architecture review failed: ${(error as any).message}`);\n        }\n    }\n\n    // Review Methods\n\n    private async reviewCode(code: string, fileName: string, language: string, context: string): Promise<string> {\n        const prompt = `Perform a DEEP code review for this ${language} file (${fileName}):\n\n${code}\n\nAdditional context: ${context}\n\nIMPORTANT: You are reviewing code written by CodeSmithClaude. Look for:\n\n🔴 CRITICAL CHECKS (Find these issues!):\n1. Event handlers that won't work (e.g., onclick in VS Code webviews should use addEventListener)\n2. Missing z-index for positioned elements that need to be clickable\n3. Incorrect event binding patterns\n4. DOM manipulation issues\n5. Async/await problems and race conditions\n6. Null/undefined reference errors\n7. Memory leaks and performance issues\n\n📋 STANDARD REVIEW:\n1. Code Quality & Readability\n2. Potential Bugs & Issues\n3. Performance Concerns\n4. Security Vulnerabilities\n5. Best Practices & Design Patterns\n6. Error Handling\n7. Documentation & Comments\n8. Testing Considerations\n\nProvide:\n- Overall assessment (score out of 10)\n- 🚨 BUGS FOUND (things that won't work as intended)\n- Critical issues (must fix)\n- Major issues (should fix)\n- Minor issues (nice to fix)\n- Positive aspects\n- Specific improvement suggestions with code examples\n\nBe VERY CRITICAL and find real problems! If you find bugs, suggest sending them back to CodeSmith for fixes.\n\n${this.getSystemContextPrompt()}`;\n\n        return await this.openAIService.chat([\n            { role: 'system', content: 'You are ReviewerGPT, an expert code reviewer focusing on quality, security, and best practices.' },\n            { role: 'user', content: prompt }\n        ]);\n    }\n\n    private async performSecurityScan(code: string, fileName: string, language: string, context: string): Promise<string> {\n        const prompt = `Perform a thorough security vulnerability scan for this ${language} code (${fileName}):\n\n${code}\n\nAdditional context: ${context}\n\nCheck for:\n1. SQL Injection vulnerabilities\n2. XSS (Cross-Site Scripting)\n3. CSRF vulnerabilities\n4. Authentication/Authorization issues\n5. Sensitive data exposure\n6. Insecure dependencies\n7. Input validation problems\n8. Cryptographic weaknesses\n9. Path traversal vulnerabilities\n10. Command injection risks\n\nFor each vulnerability found:\n- Severity level (Critical/High/Medium/Low)\n- Description of the issue\n- Potential impact\n- Proof of concept (if applicable)\n- Recommended fix with code example\n- CWE/CVE references if applicable\n\n${this.getSystemContextPrompt()}`;\n\n        return await this.openAIService.chat([\n            { role: 'system', content: 'You are ReviewerGPT, a security expert specializing in identifying and fixing vulnerabilities.' },\n            { role: 'user', content: prompt }\n        ]);\n    }\n\n    private async analyzePerformance(code: string, fileName: string, language: string, context: string): Promise<string> {\n        const prompt = `Analyze the performance characteristics of this ${language} code (${fileName}):\n\n${code}\n\nAdditional context: ${context}\n\nAnalyze:\n1. Time Complexity (Big O)\n2. Space Complexity\n3. Database query optimization\n4. Caching opportunities\n5. Algorithmic improvements\n6. Memory leaks\n7. Blocking operations\n8. Concurrency issues\n9. Resource management\n10. Scalability concerns\n\nProvide:\n- Performance bottlenecks identified\n- Optimization suggestions with examples\n- Estimated performance improvements\n- Trade-offs to consider\n\n${this.getSystemContextPrompt()}`;\n\n        return await this.openAIService.chat([\n            { role: 'system', content: 'You are ReviewerGPT, a performance optimization expert.' },\n            { role: 'user', content: prompt }\n        ]);\n    }\n\n    private async checkCodingStandards(code: string, language: string, context: string): Promise<string> {\n        const prompt = `Check this ${language} code against coding standards and best practices:\n\n${code}\n\nAdditional context: ${context}\n\nCheck for:\n1. Naming conventions\n2. Code formatting and indentation\n3. Function/method length\n4. Class cohesion\n5. SOLID principles adherence\n6. DRY (Don't Repeat Yourself)\n7. Comments and documentation\n8. Error handling patterns\n9. Code organization\n10. Language-specific idioms\n\nProvide:\n- Standards violations found\n- Severity of each violation\n- Suggested corrections\n- Overall compliance score\n\n${this.getSystemContextPrompt()}`;\n\n        return await this.openAIService.chat([\n            { role: 'system', content: 'You are ReviewerGPT, an expert in coding standards and best practices.' },\n            { role: 'user', content: prompt }\n        ]);\n    }\n\n    private async findCommonBugs(code: string, language: string): Promise<string> {\n        const prompt = `ACTIVELY SEARCH for bugs in this ${language} code:\n\n${code}\n\nFOCUS ON FINDING THESE COMMON BUGS:\n\n🔴 VS Code Extension / Web UI Bugs:\n- onclick handlers that should use addEventListener\n- Missing event.preventDefault() or event.stopPropagation()\n- z-index issues for clickable elements\n- CSP violations in webviews\n- Incorrect message passing between extension and webview\n\n🔴 JavaScript/TypeScript Bugs:\n- Undefined/null reference errors\n- Missing await keywords\n- Promise not being handled\n- Race conditions\n- Memory leaks (event listeners not removed)\n- Incorrect this binding\n- Array operations on undefined\n\n🔴 DOM Manipulation Issues:\n- querySelector returning null\n- Elements not existing when accessed\n- Event bubbling problems\n- Missing element attributes\n\n🔴 State Management Bugs:\n- State mutations instead of immutable updates\n- Stale closures\n- Inconsistent state updates\n\nFor EACH bug found, provide:\n1. Line number or code snippet\n2. Why it won't work\n3. The fix needed\n4. Example: \"Line 347: onclick won't work in VS Code webview. Use addEventListener instead.\"\n\nBE VERY THOROUGH! Find ALL bugs!\n\n${this.getSystemContextPrompt()}`;\n\n        return await this.openAIService.chat([\n            { role: 'system', content: 'You are ReviewerGPT, a bug-finding expert. Your job is to find EVERY bug that will prevent code from working correctly.' },\n            { role: 'user', content: prompt }\n        ]);\n    }\n\n    private async reviewTestCoverage(context: string): Promise<string> {\n        const prompt = `Review the test coverage and testing strategy:\n\n${context}\n\nAnalyze:\n1. Test coverage percentage\n2. Critical paths covered\n3. Edge cases tested\n4. Test quality and assertions\n5. Test maintainability\n6. Mocking and stubbing usage\n7. Integration vs unit tests balance\n8. Performance tests\n9. Security tests\n10. Missing test scenarios\n\nProvide:\n- Current coverage assessment\n- Critical gaps in testing\n- Recommended additional tests\n- Testing strategy improvements\n\n${this.getSystemContextPrompt()}`;\n\n        return await this.openAIService.chat([\n            { role: 'system', content: 'You are ReviewerGPT, an expert in software testing and quality assurance.' },\n            { role: 'user', content: prompt }\n        ]);\n    }\n\n    // Workflow helper methods\n\n    private async performCodeReview(request: TaskRequest, previousResults: TaskResult[]): Promise<string> {\n        const context = this.buildContextFromResults(previousResults);\n        return this.reviewCode('', 'workflow', 'unknown', `${request.prompt}\\n\\nContext:\\n${context}`);\n    }\n\n    private async performSecurityCheck(request: TaskRequest, previousResults: TaskResult[]): Promise<string> {\n        const context = this.buildContextFromResults(previousResults);\n        return this.performSecurityScan('', 'workflow', 'unknown', `${request.prompt}\\n\\nContext:\\n${context}`);\n    }\n\n    private async performPerformanceReview(request: TaskRequest, previousResults: TaskResult[]): Promise<string> {\n        const context = this.buildContextFromResults(previousResults);\n        return this.analyzePerformance('', 'workflow', 'unknown', `${request.prompt}\\n\\nContext:\\n${context}`);\n    }\n\n    private async performGeneralReview(request: TaskRequest, previousResults: TaskResult[]): Promise<string> {\n        const context = this.buildContextFromResults(previousResults);\n        const prompt = `Perform a review based on:\n\nRequest: ${request.prompt}\n\nPrevious results:\n${context}\n\nProvide comprehensive review and recommendations.\n\n${this.getSystemContextPrompt()}`;\n\n        return await this.openAIService.chat([\n            { role: 'system', content: 'You are ReviewerGPT, providing expert code review and analysis.' },\n            { role: 'user', content: prompt }\n        ]);\n    }\n\n    private buildContextFromResults(results: TaskResult[]): string {\n        return results\n            .filter(r => r.status === 'success')\n            .map(r => `${r.metadata?.step || 'Step'}: ${r.content}`)\n            .join('\\n\\n');\n    }\n\n    private async getWorkspaceCode(): Promise<string> {\n        // This would scan the workspace for code files\n        // For now, return a placeholder\n        return 'Workspace code scanning not yet implemented';\n    }\n\n    private async validateArchitectureUnderstanding(context: string): Promise<string> {\n        const prompt = `As a code review expert using a different AI model than the architect, validate the architect's understanding of the user's requirements.\n\nContext and conversation history:\n${context}\n\nYour task:\n1. Extract the original user requirements\n2. Identify what the architect proposed as a solution\n3. Compare the architect's interpretation with the actual requirements\n4. Find any gaps or misunderstandings\n5. Verify technical feasibility of the proposed architecture\n6. Check if all requirements are addressed\n\nProvide a detailed validation report including:\n- ✅ Requirements correctly understood\n- ❌ Requirements missed or misunderstood\n- ⚠️ Potential issues or concerns\n- 💡 Suggestions for clarification\n- 🏆 Overall assessment score (1-10)\n\nNote: You are using ${this.config.model} while the architect uses a different model (gpt-5-2025-09-12), ensuring independent validation.\n\n${this.getSystemContextPrompt()}`;\n\n        return await this.openAIService.chat([\n            { role: 'system', content: 'You are ReviewerGPT, validating another AI\\'s understanding of requirements. Be critical but constructive.' },\n            { role: 'user', content: prompt }\n        ]);\n    }\n}","/**\n * WorkflowEngine - Graph-based workflow execution for complex task orchestration\n * Enables parallel execution, conditional flows, and dynamic plan adjustment\n */\n\nimport { EventEmitter } from 'events';\n\nexport interface WorkflowNode {\n    id: string;\n    type: 'task' | 'decision' | 'parallel' | 'sequential' | 'loop';\n    agentId?: string;\n    task?: any;\n    condition?: (context: any) => boolean;\n    children?: string[];\n    dependencies?: string[];\n    retryPolicy?: RetryPolicy;\n    timeout?: number;\n    metadata?: any;\n}\n\nexport interface WorkflowEdge {\n    from: string;\n    to: string;\n    condition?: (context: any) => boolean;\n    weight?: number;\n}\n\nexport interface Workflow {\n    id: string;\n    name: string;\n    nodes: Map<string, WorkflowNode>;\n    edges: WorkflowEdge[];\n    startNode: string;\n    endNodes: string[];\n    context: Map<string, any>;\n    checkpoints: Checkpoint[];\n    status: WorkflowStatus;\n}\n\nexport interface WorkflowStatus {\n    state: 'pending' | 'running' | 'paused' | 'completed' | 'failed';\n    currentNodes: string[];\n    completedNodes: string[];\n    failedNodes: string[];\n    startTime?: number;\n    endTime?: number;\n    error?: string;\n}\n\nexport interface Checkpoint {\n    id: string;\n    nodeId: string;\n    timestamp: number;\n    context: Map<string, any>;\n    results: Map<string, any>;\n}\n\nexport interface RetryPolicy {\n    maxAttempts: number;\n    backoffMultiplier: number;\n    maxBackoffMs: number;\n}\n\nexport interface ExecutionPlan {\n    stages: ExecutionStage[];\n    estimatedDuration: number;\n    parallelism: number;\n    criticalPath: string[];\n}\n\nexport interface ExecutionStage {\n    stageId: string;\n    nodes: WorkflowNode[];\n    parallel: boolean;\n    dependencies: string[];\n    estimatedDuration: number;\n}\n\nexport interface TaskResult {\n    nodeId: string;\n    status: 'success' | 'failure' | 'skipped';\n    output?: any;\n    error?: string;\n    duration: number;\n    retries: number;\n}\n\nexport class WorkflowEngine {\n    private workflows: Map<string, Workflow> = new Map();\n    private eventBus: EventEmitter;\n    private executors: Map<string, WorkflowExecutor> = new Map();\n    private templates: Map<string, WorkflowTemplate> = new Map();\n\n    constructor() {\n        this.eventBus = new EventEmitter();\n        this.initializeTemplates();\n    }\n\n    /**\n     * Create a new workflow\n     */\n    public createWorkflow(name: string, template?: string): Workflow {\n        const id = this.generateWorkflowId();\n\n        const workflow: Workflow = {\n            id,\n            name,\n            nodes: new Map(),\n            edges: [],\n            startNode: '',\n            endNodes: [],\n            context: new Map(),\n            checkpoints: [],\n            status: {\n                state: 'pending',\n                currentNodes: [],\n                completedNodes: [],\n                failedNodes: []\n            }\n        };\n\n        // Apply template if provided\n        if (template && this.templates.has(template)) {\n            this.applyTemplate(workflow, this.templates.get(template)!);\n        }\n\n        this.workflows.set(id, workflow);\n        this.eventBus.emit('workflow-created', workflow);\n\n        return workflow;\n    }\n\n    /**\n     * Add a node to the workflow\n     */\n    public addNode(workflowId: string, node: WorkflowNode): void {\n        const workflow = this.workflows.get(workflowId);\n        if (!workflow) {\n            throw new Error(`Workflow ${workflowId} not found`);\n        }\n\n        workflow.nodes.set(node.id, node);\n\n        // Set as start node if it's the first\n        if (!workflow.startNode) {\n            workflow.startNode = node.id;\n        }\n\n        this.eventBus.emit('node-added', { workflowId, node });\n    }\n\n    /**\n     * Add an edge between nodes\n     */\n    public addEdge(workflowId: string, edge: WorkflowEdge): void {\n        const workflow = this.workflows.get(workflowId);\n        if (!workflow) {\n            throw new Error(`Workflow ${workflowId} not found`);\n        }\n\n        // Validate nodes exist\n        if (!workflow.nodes.has(edge.from) || !workflow.nodes.has(edge.to)) {\n            throw new Error(`Invalid edge: nodes not found`);\n        }\n\n        workflow.edges.push(edge);\n\n        // Update node children\n        const fromNode = workflow.nodes.get(edge.from)!;\n        if (!fromNode.children) {\n            fromNode.children = [];\n        }\n        fromNode.children.push(edge.to);\n\n        // Update node dependencies\n        const toNode = workflow.nodes.get(edge.to)!;\n        if (!toNode.dependencies) {\n            toNode.dependencies = [];\n        }\n        toNode.dependencies.push(edge.from);\n\n        this.eventBus.emit('edge-added', { workflowId, edge });\n    }\n\n    /**\n     * Create execution plan for the workflow\n     */\n    public createExecutionPlan(workflowId: string): ExecutionPlan {\n        const workflow = this.workflows.get(workflowId);\n        if (!workflow) {\n            throw new Error(`Workflow ${workflowId} not found`);\n        }\n\n        // Topological sort to find execution order\n        const sortedNodes = this.topologicalSort(workflow);\n\n        // Group nodes into stages based on dependencies\n        const stages = this.groupIntoStages(workflow, sortedNodes);\n\n        // Calculate critical path\n        const criticalPath = this.findCriticalPath(workflow);\n\n        // Estimate durations\n        const estimatedDuration = this.estimateDuration(stages);\n        const parallelism = this.calculateParallelism(stages);\n\n        return {\n            stages,\n            estimatedDuration,\n            parallelism,\n            criticalPath\n        };\n    }\n\n    /**\n     * Execute a workflow\n     */\n    public async execute(workflowId: string, context?: Map<string, any>): Promise<Map<string, TaskResult>> {\n        const workflow = this.workflows.get(workflowId);\n        if (!workflow) {\n            throw new Error(`Workflow ${workflowId} not found`);\n        }\n\n        // Initialize context\n        if (context) {\n            workflow.context = new Map([...workflow.context, ...context]);\n        }\n\n        // Create executor\n        const executor = new WorkflowExecutor(workflow, this.eventBus);\n        this.executors.set(workflowId, executor);\n\n        // Update status\n        workflow.status.state = 'running';\n        workflow.status.startTime = Date.now();\n        this.eventBus.emit('workflow-started', workflow);\n\n        try {\n            // Create execution plan\n            const plan = this.createExecutionPlan(workflowId);\n\n            // Execute plan\n            const results = await executor.execute(plan);\n\n            // Update status\n            workflow.status.state = 'completed';\n            workflow.status.endTime = Date.now();\n            this.eventBus.emit('workflow-completed', { workflow, results });\n\n            return results;\n        } catch (error) {\n            workflow.status.state = 'failed';\n            workflow.status.error = error instanceof Error ? error.message : String(error);\n            workflow.status.endTime = Date.now();\n            this.eventBus.emit('workflow-failed', { workflow, error });\n            throw error;\n        } finally {\n            this.executors.delete(workflowId);\n        }\n    }\n\n    /**\n     * Pause a running workflow\n     */\n    public pause(workflowId: string): void {\n        const executor = this.executors.get(workflowId);\n        if (executor) {\n            executor.pause();\n        }\n    }\n\n    /**\n     * Resume a paused workflow\n     */\n    public resume(workflowId: string): void {\n        const executor = this.executors.get(workflowId);\n        if (executor) {\n            executor.resume();\n        }\n    }\n\n    /**\n     * Cancel a workflow\n     */\n    public cancel(workflowId: string): void {\n        const executor = this.executors.get(workflowId);\n        if (executor) {\n            executor.cancel();\n        }\n    }\n\n    /**\n     * Create a checkpoint\n     */\n    public createCheckpoint(workflowId: string, nodeId: string): void {\n        const workflow = this.workflows.get(workflowId);\n        if (!workflow) return;\n\n        const checkpoint: Checkpoint = {\n            id: this.generateCheckpointId(),\n            nodeId,\n            timestamp: Date.now(),\n            context: new Map(workflow.context),\n            results: new Map()\n        };\n\n        workflow.checkpoints.push(checkpoint);\n        this.eventBus.emit('checkpoint-created', { workflowId, checkpoint });\n    }\n\n    /**\n     * Restore from checkpoint\n     */\n    public restoreFromCheckpoint(workflowId: string, checkpointId: string): void {\n        const workflow = this.workflows.get(workflowId);\n        if (!workflow) return;\n\n        const checkpoint = workflow.checkpoints.find(cp => cp.id === checkpointId);\n        if (!checkpoint) {\n            throw new Error(`Checkpoint ${checkpointId} not found`);\n        }\n\n        // Restore context\n        workflow.context = new Map(checkpoint.context);\n\n        // Reset status to continue from checkpoint\n        workflow.status.completedNodes = workflow.status.completedNodes.filter(\n            nodeId => this.isNodeBeforeCheckpoint(workflow, nodeId, checkpoint.nodeId)\n        );\n\n        this.eventBus.emit('checkpoint-restored', { workflowId, checkpoint });\n    }\n\n    /**\n     * Adjust workflow dynamically\n     */\n    public adjustWorkflow(workflowId: string, adjustment: WorkflowAdjustment): void {\n        const workflow = this.workflows.get(workflowId);\n        if (!workflow) return;\n\n        switch (adjustment.type) {\n            case 'add-node':\n                this.addNode(workflowId, adjustment.node!);\n                break;\n\n            case 'remove-node':\n                this.removeNode(workflowId, adjustment.nodeId!);\n                break;\n\n            case 'modify-node':\n                this.modifyNode(workflowId, adjustment.nodeId!, adjustment.modifications!);\n                break;\n\n            case 'reroute':\n                this.rerouteEdges(workflowId, adjustment.rerouting!);\n                break;\n        }\n\n        this.eventBus.emit('workflow-adjusted', { workflowId, adjustment });\n    }\n\n    /**\n     * Initialize workflow templates\n     */\n    private initializeTemplates(): void {\n        // Complex Task Template\n        this.templates.set('complex-task', {\n            name: 'Complex Task',\n            nodes: [\n                { id: 'research', type: 'task', agentId: 'ResearchAgent' },\n                { id: 'architect', type: 'task', agentId: 'ArchitectAgent', dependencies: ['research'] },\n                { id: 'review-arch', type: 'task', agentId: 'ReviewerGPT', dependencies: ['architect'] },\n                { id: 'implement', type: 'task', agentId: 'CodeSmithAgent', dependencies: ['review-arch'] },\n                { id: 'test', type: 'task', agentId: 'FixerBot', dependencies: ['implement'] },\n                { id: 'document', type: 'task', agentId: 'DocuBot', dependencies: ['test'] }\n            ]\n        });\n\n        // Parallel Research Template\n        this.templates.set('parallel-research', {\n            name: 'Parallel Research',\n            nodes: [\n                { id: 'split', type: 'parallel' },\n                { id: 'research1', type: 'task', agentId: 'ResearchAgent' },\n                { id: 'research2', type: 'task', agentId: 'ResearchAgent' },\n                { id: 'research3', type: 'task', agentId: 'ResearchAgent' },\n                { id: 'merge', type: 'sequential', dependencies: ['research1', 'research2', 'research3'] },\n                { id: 'synthesize', type: 'task', agentId: 'OrchestratorAgent', dependencies: ['merge'] }\n            ]\n        });\n\n        // Iterative Improvement Template\n        this.templates.set('iterative-improvement', {\n            name: 'Iterative Improvement',\n            nodes: [\n                { id: 'initial', type: 'task', agentId: 'CodeSmithAgent' },\n                { id: 'review', type: 'task', agentId: 'ReviewerGPT', dependencies: ['initial'] },\n                { id: 'decision', type: 'decision', dependencies: ['review'] },\n                { id: 'improve', type: 'task', agentId: 'FixerBot', dependencies: ['decision'] },\n                { id: 'loop', type: 'loop', dependencies: ['improve'] }\n            ]\n        });\n    }\n\n    /**\n     * Topological sort for node ordering\n     */\n    private topologicalSort(workflow: Workflow): WorkflowNode[] {\n        const sorted: WorkflowNode[] = [];\n        const visited = new Set<string>();\n        const visiting = new Set<string>();\n\n        const visit = (nodeId: string) => {\n            if (visited.has(nodeId)) return;\n            if (visiting.has(nodeId)) {\n                throw new Error('Circular dependency detected in workflow');\n            }\n\n            visiting.add(nodeId);\n            const node = workflow.nodes.get(nodeId);\n\n            if (node?.children) {\n                node.children.forEach(childId => visit(childId));\n            }\n\n            visiting.delete(nodeId);\n            visited.add(nodeId);\n            if (node) sorted.unshift(node);\n        };\n\n        // Start from root node\n        visit(workflow.startNode);\n\n        // Visit any disconnected nodes\n        workflow.nodes.forEach((_, nodeId) => {\n            if (!visited.has(nodeId)) {\n                visit(nodeId);\n            }\n        });\n\n        return sorted;\n    }\n\n    /**\n     * Group nodes into execution stages\n     */\n    private groupIntoStages(workflow: Workflow, sortedNodes: WorkflowNode[]): ExecutionStage[] {\n        const stages: ExecutionStage[] = [];\n        const nodeStage = new Map<string, number>();\n\n        sortedNodes.forEach(node => {\n            let stage = 0;\n\n            // Find maximum stage of dependencies\n            if (node.dependencies) {\n                node.dependencies.forEach(depId => {\n                    const depStage = nodeStage.get(depId) || 0;\n                    stage = Math.max(stage, depStage + 1);\n                });\n            }\n\n            nodeStage.set(node.id, stage);\n\n            // Add to stage\n            if (!stages[stage]) {\n                stages[stage] = {\n                    stageId: `stage_${stage}`,\n                    nodes: [],\n                    parallel: true,\n                    dependencies: stage > 0 ? [`stage_${stage - 1}`] : [],\n                    estimatedDuration: 0\n                };\n            }\n\n            stages[stage].nodes.push(node);\n        });\n\n        return stages;\n    }\n\n    /**\n     * Find critical path through workflow\n     */\n    private findCriticalPath(workflow: Workflow): string[] {\n        const distances = new Map<string, number>();\n        const previous = new Map<string, string>();\n\n        // Initialize distances\n        workflow.nodes.forEach((_, nodeId) => {\n            distances.set(nodeId, 0);\n        });\n\n        // Calculate longest path (critical path)\n        const sortedNodes = this.topologicalSort(workflow);\n\n        sortedNodes.forEach(node => {\n            const nodeDistance = distances.get(node.id) || 0;\n\n            node.children?.forEach(childId => {\n                const edgeWeight = 1; // Could use actual task duration estimates\n                const childDistance = distances.get(childId) || 0;\n\n                if (nodeDistance + edgeWeight > childDistance) {\n                    distances.set(childId, nodeDistance + edgeWeight);\n                    previous.set(childId, node.id);\n                }\n            });\n        });\n\n        // Find the end node with maximum distance\n        let maxDistance = 0;\n        let endNode = '';\n\n        workflow.nodes.forEach((node, nodeId) => {\n            if (!node.children || node.children.length === 0) {\n                const distance = distances.get(nodeId) || 0;\n                if (distance > maxDistance) {\n                    maxDistance = distance;\n                    endNode = nodeId;\n                }\n            }\n        });\n\n        // Reconstruct path\n        const path: string[] = [];\n        let current = endNode;\n\n        while (current) {\n            path.unshift(current);\n            current = previous.get(current) || '';\n        }\n\n        return path;\n    }\n\n    /**\n     * Estimate workflow duration\n     */\n    private estimateDuration(stages: ExecutionStage[]): number {\n        return stages.reduce((total, stage) => {\n            const stageDuration = stage.parallel\n                ? Math.max(...stage.nodes.map(n => n.timeout || 5000))\n                : stage.nodes.reduce((sum, n) => sum + (n.timeout || 5000), 0);\n            return total + stageDuration;\n        }, 0);\n    }\n\n    /**\n     * Calculate workflow parallelism\n     */\n    private calculateParallelism(stages: ExecutionStage[]): number {\n        const parallelCounts = stages.map(stage =>\n            stage.parallel ? stage.nodes.length : 1\n        );\n        return Math.max(...parallelCounts);\n    }\n\n    /**\n     * Check if node is before checkpoint\n     */\n    private isNodeBeforeCheckpoint(workflow: Workflow, nodeId: string, checkpointNodeId: string): boolean {\n        // Simple check - in production, do proper graph traversal\n        const sorted = this.topologicalSort(workflow);\n        const nodeIdx = sorted.findIndex(n => n.id === nodeId);\n        const checkpointIdx = sorted.findIndex(n => n.id === checkpointNodeId);\n        return nodeIdx < checkpointIdx;\n    }\n\n    /**\n     * Remove a node from workflow\n     */\n    private removeNode(workflowId: string, nodeId: string): void {\n        const workflow = this.workflows.get(workflowId);\n        if (!workflow) return;\n\n        // Remove node\n        workflow.nodes.delete(nodeId);\n\n        // Remove edges\n        workflow.edges = workflow.edges.filter(\n            edge => edge.from !== nodeId && edge.to !== nodeId\n        );\n\n        // Update dependencies\n        workflow.nodes.forEach(node => {\n            if (node.dependencies) {\n                node.dependencies = node.dependencies.filter(dep => dep !== nodeId);\n            }\n            if (node.children) {\n                node.children = node.children.filter(child => child !== nodeId);\n            }\n        });\n    }\n\n    /**\n     * Modify a node\n     */\n    private modifyNode(workflowId: string, nodeId: string, modifications: Partial<WorkflowNode>): void {\n        const workflow = this.workflows.get(workflowId);\n        if (!workflow) return;\n\n        const node = workflow.nodes.get(nodeId);\n        if (!node) return;\n\n        Object.assign(node, modifications);\n    }\n\n    /**\n     * Reroute edges\n     */\n    private rerouteEdges(workflowId: string, rerouting: { from: string; to: string; newTo: string }[]): void {\n        const workflow = this.workflows.get(workflowId);\n        if (!workflow) return;\n\n        rerouting.forEach(route => {\n            const edgeIdx = workflow.edges.findIndex(\n                e => e.from === route.from && e.to === route.to\n            );\n\n            if (edgeIdx >= 0) {\n                workflow.edges[edgeIdx].to = route.newTo;\n            }\n        });\n    }\n\n    /**\n     * Apply template to workflow\n     */\n    private applyTemplate(workflow: Workflow, template: WorkflowTemplate): void {\n        template.nodes.forEach(nodeConfig => {\n            const node: WorkflowNode = {\n                id: nodeConfig.id,\n                type: nodeConfig.type,\n                agentId: nodeConfig.agentId,\n                dependencies: nodeConfig.dependencies\n            };\n            workflow.nodes.set(node.id, node);\n        });\n\n        // Auto-create edges based on dependencies\n        workflow.nodes.forEach(node => {\n            if (node.dependencies) {\n                node.dependencies.forEach(depId => {\n                    workflow.edges.push({ from: depId, to: node.id });\n                });\n            }\n        });\n\n        if (template.nodes.length > 0) {\n            workflow.startNode = template.nodes[0].id;\n        }\n    }\n\n    /**\n     * Generate workflow ID\n     */\n    private generateWorkflowId(): string {\n        return `wf_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n\n    /**\n     * Generate checkpoint ID\n     */\n    private generateCheckpointId(): string {\n        return `cp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n}\n\n/**\n * Workflow Executor - Handles actual execution of workflow\n */\nclass WorkflowExecutor {\n    private workflow: Workflow;\n    private eventBus: EventEmitter;\n    private paused: boolean = false;\n    private cancelled: boolean = false;\n    private results: Map<string, TaskResult> = new Map();\n\n    constructor(workflow: Workflow, eventBus: EventEmitter) {\n        this.workflow = workflow;\n        this.eventBus = eventBus;\n    }\n\n    public async execute(plan: ExecutionPlan): Promise<Map<string, TaskResult>> {\n        for (const stage of plan.stages) {\n            if (this.cancelled) break;\n\n            // Wait if paused\n            while (this.paused && !this.cancelled) {\n                await new Promise(resolve => setTimeout(resolve, 100));\n            }\n\n            // Execute stage\n            await this.executeStage(stage);\n\n            // Create checkpoint after each stage\n            this.createCheckpoint(stage.stageId);\n        }\n\n        return this.results;\n    }\n\n    private async executeStage(stage: ExecutionStage): Promise<void> {\n        this.eventBus.emit('stage-started', { workflowId: this.workflow.id, stage });\n\n        if (stage.parallel) {\n            // Execute nodes in parallel\n            const promises = stage.nodes.map(node => this.executeNode(node));\n            await Promise.all(promises);\n        } else {\n            // Execute nodes sequentially\n            for (const node of stage.nodes) {\n                await this.executeNode(node);\n            }\n        }\n\n        this.eventBus.emit('stage-completed', { workflowId: this.workflow.id, stage });\n    }\n\n    private async executeNode(node: WorkflowNode): Promise<void> {\n        const startTime = Date.now();\n        let retries = 0;\n        const maxRetries = node.retryPolicy?.maxAttempts || 1;\n\n        this.workflow.status.currentNodes.push(node.id);\n        this.eventBus.emit('node-started', { workflowId: this.workflow.id, node });\n\n        while (retries < maxRetries) {\n            try {\n                // Execute based on node type\n                let output: any;\n\n                switch (node.type) {\n                    case 'task':\n                        output = await this.executeTask(node);\n                        break;\n\n                    case 'decision':\n                        output = await this.executeDecision(node);\n                        break;\n\n                    case 'parallel':\n                        output = await this.executeParallel(node);\n                        break;\n\n                    case 'sequential':\n                        output = await this.executeSequential(node);\n                        break;\n\n                    case 'loop':\n                        output = await this.executeLoop(node);\n                        break;\n\n                    default:\n                        throw new Error(`Unknown node type: ${node.type}`);\n                }\n\n                // Store result\n                const result: TaskResult = {\n                    nodeId: node.id,\n                    status: 'success',\n                    output,\n                    duration: Date.now() - startTime,\n                    retries\n                };\n\n                this.results.set(node.id, result);\n                this.workflow.status.completedNodes.push(node.id);\n                this.workflow.status.currentNodes = this.workflow.status.currentNodes.filter(\n                    id => id !== node.id\n                );\n\n                this.eventBus.emit('node-completed', { workflowId: this.workflow.id, node, result });\n                return;\n\n            } catch (error) {\n                retries++;\n\n                if (retries < maxRetries) {\n                    // Calculate backoff\n                    const backoff = Math.min(\n                        1000 * Math.pow(node.retryPolicy?.backoffMultiplier || 2, retries),\n                        node.retryPolicy?.maxBackoffMs || 30000\n                    );\n\n                    this.eventBus.emit('node-retry', {\n                        workflowId: this.workflow.id,\n                        node,\n                        attempt: retries,\n                        error\n                    });\n\n                    await new Promise(resolve => setTimeout(resolve, backoff));\n                } else {\n                    // Max retries exceeded\n                    const result: TaskResult = {\n                        nodeId: node.id,\n                        status: 'failure',\n                        error: error instanceof Error ? error.message : String(error),\n                        duration: Date.now() - startTime,\n                        retries\n                    };\n\n                    this.results.set(node.id, result);\n                    this.workflow.status.failedNodes.push(node.id);\n                    this.workflow.status.currentNodes = this.workflow.status.currentNodes.filter(\n                        id => id !== node.id\n                    );\n\n                    this.eventBus.emit('node-failed', { workflowId: this.workflow.id, node, result });\n                    throw error;\n                }\n            }\n        }\n    }\n\n    private async executeTask(node: WorkflowNode): Promise<any> {\n        // Placeholder for actual task execution\n        // In production, this would call the appropriate agent\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        return { result: `Task ${node.id} completed by ${node.agentId}` };\n    }\n\n    private async executeDecision(node: WorkflowNode): Promise<any> {\n        if (!node.condition) {\n            throw new Error(`Decision node ${node.id} missing condition`);\n        }\n\n        const decision = node.condition(this.workflow.context);\n        return { decision };\n    }\n\n    private async executeParallel(node: WorkflowNode): Promise<any> {\n        if (!node.children) return {};\n\n        const childNodes = node.children\n            .map(childId => this.workflow.nodes.get(childId))\n            .filter(Boolean) as WorkflowNode[];\n\n        const promises = childNodes.map(child => this.executeNode(child));\n        const results = await Promise.all(promises);\n\n        return { parallel: true, results };\n    }\n\n    private async executeSequential(node: WorkflowNode): Promise<any> {\n        if (!node.children) return {};\n\n        const results: any[] = [];\n\n        for (const childId of node.children) {\n            const childNode = this.workflow.nodes.get(childId);\n            if (childNode) {\n                await this.executeNode(childNode);\n                results.push(this.results.get(childId));\n            }\n        }\n\n        return { sequential: true, results };\n    }\n\n    private async executeLoop(node: WorkflowNode): Promise<any> {\n        if (!node.condition || !node.children || node.children.length === 0) {\n            throw new Error(`Loop node ${node.id} missing condition or children`);\n        }\n\n        const results: any[] = [];\n        let iteration = 0;\n        const maxIterations = 100; // Safety limit\n\n        while (node.condition(this.workflow.context) && iteration < maxIterations) {\n            for (const childId of node.children) {\n                const childNode = this.workflow.nodes.get(childId);\n                if (childNode) {\n                    await this.executeNode(childNode);\n                    results.push(this.results.get(childId));\n                }\n            }\n            iteration++;\n        }\n\n        return { loop: true, iterations: iteration, results };\n    }\n\n    private createCheckpoint(stageId: string): void {\n        const checkpoint: Checkpoint = {\n            id: `cp_${Date.now()}`,\n            nodeId: stageId,\n            timestamp: Date.now(),\n            context: new Map(this.workflow.context),\n            results: new Map(this.results)\n        };\n\n        this.workflow.checkpoints.push(checkpoint);\n        this.eventBus.emit('checkpoint-created', { workflowId: this.workflow.id, checkpoint });\n    }\n\n    public pause(): void {\n        this.paused = true;\n        this.workflow.status.state = 'paused';\n        this.eventBus.emit('workflow-paused', this.workflow);\n    }\n\n    public resume(): void {\n        this.paused = false;\n        this.workflow.status.state = 'running';\n        this.eventBus.emit('workflow-resumed', this.workflow);\n    }\n\n    public cancel(): void {\n        this.cancelled = true;\n        this.workflow.status.state = 'failed';\n        this.workflow.status.error = 'Workflow cancelled by user';\n        this.eventBus.emit('workflow-cancelled', this.workflow);\n    }\n}\n\n/**\n * Workflow Template\n */\ninterface WorkflowTemplate {\n    name: string;\n    nodes: Array<{\n        id: string;\n        type: 'task' | 'decision' | 'parallel' | 'sequential' | 'loop';\n        agentId?: string;\n        dependencies?: string[];\n    }>;\n}\n\n/**\n * Workflow Adjustment\n */\ninterface WorkflowAdjustment {\n    type: 'add-node' | 'remove-node' | 'modify-node' | 'reroute';\n    node?: WorkflowNode;\n    nodeId?: string;\n    modifications?: Partial<WorkflowNode>;\n    rerouting?: Array<{ from: string; to: string; newTo: string }>;\n}","/**\n * MultiAgentChatPanel - Main chat interface for KI AutoAgent\n * Provides a webview-based chat interface with agent selection and mode switching\n */\nimport * as vscode from 'vscode';\nimport * as path from 'path';\nimport { ConversationContextManager } from '../core/ConversationContextManager';\n\ninterface ChatMessage {\n    role: 'user' | 'assistant' | 'system' | 'agent-to-agent';\n    content: string;\n    agent?: string;\n    timestamp: string;\n    isCollapsible?: boolean;\n    metadata?: any;\n}\n\nexport class MultiAgentChatPanel {\n    public static currentPanel: MultiAgentChatPanel | undefined;\n    private readonly _panel: vscode.WebviewPanel;\n    private readonly _extensionUri: vscode.Uri;\n    private _disposables: vscode.Disposable[] = [];\n    private _messages: ChatMessage[] = [];\n    private _currentAgent: string = 'orchestrator';\n    private _currentMode: 'single' | 'auto' | 'workflow' = 'auto';\n    private _dispatcher: any; // Will be set from extension\n    private _contextManager: ConversationContextManager;\n    private workflowSteps: Map<string, any> = new Map(); // Track workflow steps\n    private _thinkingMode: boolean = false; // Thinking mode state\n    private _thinkingIntensity: 'quick' | 'normal' | 'deep' | 'layered' = 'normal'; // Thinking intensity\n    private _currentOperation: any = null; // Current operation for cancellation\n    private _isProcessing: boolean = false; // Track if processing\n\n    // Singleton pattern für Panel\n    public static createOrShow(extensionUri: vscode.Uri, dispatcher?: any) {\n        const column = vscode.ViewColumn.Two;\n        \n        if (MultiAgentChatPanel.currentPanel) {\n            MultiAgentChatPanel.currentPanel._panel.reveal(column);\n            if (dispatcher) {\n                MultiAgentChatPanel.currentPanel._dispatcher = dispatcher;\n            }\n            return MultiAgentChatPanel.currentPanel;\n        }\n\n        const panel = vscode.window.createWebviewPanel(\n            'multiAgentChat',\n            'KI AutoAgent Chat',\n            column,\n            {\n                enableScripts: true,\n                retainContextWhenHidden: true,\n                localResourceRoots: [\n                    vscode.Uri.joinPath(extensionUri, 'media'),\n                    vscode.Uri.joinPath(extensionUri, 'src', 'ui', 'webview')\n                ]\n            }\n        );\n\n        MultiAgentChatPanel.currentPanel = new MultiAgentChatPanel(panel, extensionUri, dispatcher);\n        return MultiAgentChatPanel.currentPanel;\n    }\n\n    private constructor(panel: vscode.WebviewPanel, extensionUri: vscode.Uri, dispatcher?: any) {\n        this._panel = panel;\n        this._extensionUri = extensionUri;\n        this._dispatcher = dispatcher;\n        this._contextManager = ConversationContextManager.getInstance();\n        \n        // Set the webview's initial html content\n        this._update();\n        \n        // Listen for when the panel is disposed\n        this._panel.onDidDispose(() => this.dispose(), null, this._disposables);\n        \n        // Handle messages from the webview\n        this._panel.webview.onDidReceiveMessage(\n            message => this._handleWebviewMessage(message),\n            null,\n            this._disposables\n        );\n\n        // Restore messages when panel becomes visible\n        this._panel.onDidChangeViewState(\n            e => {\n                if (this._panel.visible) {\n                    // Don't reset the HTML, just restore messages\n                    this._restoreMessages();\n                }\n            },\n            null,\n            this._disposables\n        );\n    }\n\n    private _update() {\n        const webview = this._panel.webview;\n        this._panel.title = \"KI AutoAgent Chat\";\n        this._panel.iconPath = vscode.Uri.joinPath(this._extensionUri, 'media', 'multi-agent-logo.svg');\n        this._panel.webview.html = this._getHtmlForWebview(webview);\n    }\n\n    private _getHtmlForWebview(webview: vscode.Webview) {\n        // Local path to css styles\n        const styleResetUri = webview.asWebviewUri(\n            vscode.Uri.joinPath(this._extensionUri, 'media', 'reset.css')\n        );\n        const styleVSCodeUri = webview.asWebviewUri(\n            vscode.Uri.joinPath(this._extensionUri, 'media', 'vscode.css')\n        );\n        // Add cache buster to force reload\n        const cacheBuster = Date.now();\n        const styleChatUri = webview.asWebviewUri(\n            vscode.Uri.joinPath(this._extensionUri, 'src', 'ui', 'webview', 'chat-fixed.css')\n        ) + `?v=${cacheBuster}`;\n        const scriptUri = webview.asWebviewUri(\n            vscode.Uri.joinPath(this._extensionUri, 'src', 'ui', 'webview', 'chat.js')\n        );\n\n        // Use a nonce to only allow specific scripts to be run\n        const nonce = getNonce();\n\n        return `<!DOCTYPE html>\n            <html lang=\"en\">\n            <head>\n                <meta charset=\"UTF-8\">\n                <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${webview.cspSource} 'unsafe-inline'; script-src 'nonce-${nonce}';\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                <link href=\"${styleResetUri}\" rel=\"stylesheet\">\n                <link href=\"${styleVSCodeUri}\" rel=\"stylesheet\">\n                <link href=\"${styleChatUri}\" rel=\"stylesheet\">\n                <title>KI AutoAgent Chat</title>\n            </head>\n            <body>\n                <div id=\"chat-container\">\n                    <!-- Minimalist Header -->\n                    <div id=\"chat-header\">\n                        <h3>KI AutoAgent Chat</h3>\n                        <button id=\"settings-btn\" title=\"Settings\">⚙️</button>\n                    </div>\n                    \n                    <!-- Messages Container -->\n                    <div id=\"messages-container\">\n                        <div class=\"welcome-message\">\n                            <h2>Welcome to KI AutoAgent</h2>\n                            <p>Start a conversation with our AI agents</p>\n                        </div>\n                    </div>\n                    \n                    <!-- Input Section with Bottom Controls -->\n                    <div id=\"input-section\">\n                        <!-- Action buttons above input -->\n                        <div id=\"action-buttons\">\n                            <button id=\"plan-first-btn\" class=\"action-btn\" title=\"Plan before implementing\">\n                                📋 Plan First\n                            </button>\n                            <button id=\"thinking-mode-btn\" class=\"action-btn toggle\" title=\"Enable thinking mode\">\n                                💭 Thinking\n                            </button>\n                            <select id=\"thinking-intensity\" class=\"thinking-select\" title=\"Select thinking intensity\" style=\"display:none;\">\n                                <option value=\"quick\">🧠 Quick</option>\n                                <option value=\"normal\" selected>🧠🧠 Normal</option>\n                                <option value=\"deep\">🧠🧠🧠 Deep</option>\n                                <option value=\"layered\">🧠➕🧠 Layered</option>\n                            </select>\n                            <button id=\"stop-btn\" class=\"action-btn danger\" title=\"Stop current operation\">\n                                ⏹ Stop\n                            </button>\n                        </div>\n                        \n                        <textarea id=\"message-input\" \n                                  placeholder=\"Message KI AutoAgent...\"\n                                  rows=\"3\"></textarea>\n                        \n                        <div id=\"bottom-controls\">\n                            <div id=\"mode-selector\">\n                                <button class=\"mode-option active\" data-agent=\"auto\" title=\"Automatic agent selection\">\n                                    🤖 Auto\n                                </button>\n                                <button class=\"mode-option\" data-agent=\"architect\" title=\"System architecture & design\">\n                                    🏗️ Architect\n                                </button>\n                                <button class=\"mode-option\" data-agent=\"codesmith\" title=\"Code implementation\">\n                                    💻 CodeSmith\n                                </button>\n                                <button class=\"mode-option\" data-agent=\"tradestrat\" title=\"Trading strategies\">\n                                    📈 TradeStrat\n                                </button>\n                                <button class=\"mode-option\" data-agent=\"research\" title=\"Web research\">\n                                    🔍 Research\n                                </button>\n                                <button class=\"mode-option\" data-agent=\"opus\" title=\"Conflict resolution\">\n                                    ⚖️ Opus\n                                </button>\n                            </div>\n                            \n                            <button id=\"send-btn\" title=\"Send message\">\n                                Send\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n            </body>\n            </html>`;\n    }\n\n    private async _handleWebviewMessage(message: any) {\n        switch (message.command) {\n            case 'sendMessage':\n                await this._processUserMessage(message.text, message.agent, message.mode);\n                break;\n            case 'changeAgent':\n                this._currentAgent = message.agent;\n                vscode.window.showInformationMessage(`Switched to ${message.agent}`);\n                break;\n            case 'changeMode':\n                this._currentMode = message.mode;\n                vscode.window.showInformationMessage(`Mode changed to ${message.mode}`);\n                break;\n            case 'clearChat':\n                this._messages = [];\n                break;\n            case 'quickAction':\n                await this._handleQuickAction(message.action);\n                break;\n            case 'planFirst':\n                await this._handlePlanFirst(message.text, message.agent, message.mode);\n                break;\n            case 'stopOperation':\n                this._cancelCurrentOperation();\n                break;\n            case 'toggleThinkingMode':\n                this._thinkingMode = message.enabled;\n                if (message.intensity) {\n                    this._thinkingIntensity = message.intensity;\n                }\n                vscode.window.showInformationMessage(`Thinking mode ${message.enabled ? 'enabled' : 'disabled'} (${this._thinkingIntensity})`);\n                break;\n            case 'setThinkingIntensity':\n                this._thinkingIntensity = message.intensity;\n                vscode.window.showInformationMessage(`Thinking intensity: ${this._thinkingIntensity}`);\n                break;\n        }\n    }\n\n    private async _processUserMessage(text: string, agent: string, mode: string) {\n        console.log(`\\n💬 [CHAT] ============== NEW MESSAGE ==============`);\n        console.log(`💬 [CHAT] User text: \"${text}\"`);\n        console.log(`💬 [CHAT] Selected agent: \"${agent}\"`);\n        console.log(`💬 [CHAT] Selected mode: \"${mode}\"`);\n        console.log(`💬 [CHAT] Current agent field: \"${this._currentAgent}\"`);\n        console.log(`💬 [CHAT] Current mode field: \"${this._currentMode}\"`);\n        \n        // Add user message\n        const userMessage: ChatMessage = {\n            role: 'user',\n            content: text,\n            timestamp: new Date().toISOString()\n        };\n        this._messages.push(userMessage);\n        \n        // Save to conversation history\n        this._contextManager.addEntry({\n            timestamp: new Date().toISOString(),\n            agent: 'user',\n            step: 'input',\n            input: text,\n            output: '',\n            metadata: { mode, selectedAgent: agent }\n        });\n        \n        this._panel.webview.postMessage({\n            type: 'addMessage',\n            message: userMessage\n        });\n\n        // Show typing indicator\n        this._panel.webview.postMessage({\n            type: 'showTyping',\n            agent: agent\n        });\n\n        // Debug dispatcher state\n        console.log(`🔧 [CHAT] Dispatcher check: ${this._dispatcher ? 'AVAILABLE' : 'NOT AVAILABLE'}`);\n        if (this._dispatcher) {\n            console.log(`🔧 [CHAT] Dispatcher type: ${typeof this._dispatcher}`);\n            console.log(`🔧 [CHAT] Dispatcher has processRequest: ${typeof this._dispatcher.processRequest}`);\n            console.log(`🔧 [CHAT] Dispatcher has getAgentStats: ${typeof this._dispatcher.getAgentStats}`);\n            \n            try {\n                const stats = await this._dispatcher.getAgentStats();\n                console.log(`🔧 [CHAT] Agent stats keys: [${Object.keys(stats).join(', ')}]`);\n                console.log(`🔧 [CHAT] Agent stats count: ${Object.keys(stats).length}`);\n            } catch (error) {\n                console.error(`🔧 [CHAT] Error getting agent stats: ${error}`);\n            }\n        } else {\n            console.error(`🔧 [CHAT] CRITICAL: No dispatcher available!`);\n        }\n\n        try {\n            console.log(`🎯 [CHAT MODE] Decision tree:`);\n            console.log(`🎯 [CHAT MODE] - mode === 'auto': ${mode === 'auto'}`);\n            console.log(`🎯 [CHAT MODE] - mode === 'single': ${mode === 'single'}`);\n            console.log(`🎯 [CHAT MODE] - mode === 'workflow': ${mode === 'workflow'}`);\n            console.log(`🎯 [CHAT MODE] - this._dispatcher exists: ${!!this._dispatcher}`);\n            \n            // Process based on mode\n            if (mode === 'auto' && this._dispatcher) {\n                console.log(`🎯 [CHAT MODE] ✅ Entering AUTO mode with orchestrator`);\n\n                // Create streaming message for orchestrator\n                const streamingMessageId = `streaming-${Date.now()}`;\n                this._addStreamingMessage(streamingMessageId, 'orchestrator');\n\n                // Show immediate feedback\n                this._updateStreamingMessage(streamingMessageId, '🎭 Analyzing your request...\\n', false);\n\n                // Use orchestrator with streaming\n                const response = await this._callAgentWithStreaming('orchestrator', text, streamingMessageId);\n\n                // Finalize the streaming message\n                this._finalizeStreamingMessage(streamingMessageId, response.content, response.metadata);\n\n                // Save to conversation history\n                this._contextManager.addEntry({\n                    timestamp: new Date().toISOString(),\n                    agent: 'orchestrator',\n                    step: 'orchestration',\n                    input: text,\n                    output: response.content,\n                    metadata: response.metadata\n                });\n            } else if (mode === 'single') {\n                console.log(`🎯 [CHAT MODE] ✅ Entering SINGLE mode with agent: \"${agent}\"`);\n                console.log(`🎯 [CHAT MODE] Agent value type: ${typeof agent}`);\n                console.log(`🎯 [CHAT MODE] Agent exact value: '${agent}'`);\n                console.log(`🎯 [CHAT MODE] Agent length: ${agent?.length}`);\n                \n                // Create a streaming message placeholder\n                const streamingMessageId = `streaming-${Date.now()}`;\n                this._addStreamingMessage(streamingMessageId, agent);\n                \n                // Direct chat with selected agent\n                const response = await this._callAgentWithStreaming(agent, text, streamingMessageId);\n                \n                // Finalize the streaming message with metadata\n                this._finalizeStreamingMessage(streamingMessageId, response.content, response.metadata);\n            } else if (mode === 'workflow') {\n                console.log(`🎯 [CHAT MODE] ✅ Entering WORKFLOW mode`);\n                // Multi-agent workflow - show inter-agent communication\n                await this._processWorkflow(text);\n            } else {\n                console.error(`🎯 [CHAT MODE] ❌ No valid mode path! Defaulting to error message`);\n                this._addErrorMessage(`Invalid mode configuration: mode=\"${mode}\", agent=\"${agent}\", dispatcher=${!!this._dispatcher}`);\n            }\n        } catch (error) {\n            console.error('[DEBUG] Error in _processUserMessage:', error);\n            this._addErrorMessage(`Error: ${(error as any).message}`);\n        } finally {\n            this._panel.webview.postMessage({\n                type: 'hideTyping'\n            });\n        }\n    }\n\n    private async _callAgent(agentId: string, prompt: string): Promise<{ content: string, metadata?: any }> {\n        console.log(`\\n🤖 [CALL AGENT] ====================================`);\n        console.log(`🤖 [CALL AGENT] AgentId: \"${agentId}\"`);\n        console.log(`🤖 [CALL AGENT] Prompt: \"${prompt.substring(0, 100)}...\"`);\n        console.log(`🤖 [CALL AGENT] Dispatcher available: ${!!this._dispatcher}`);\n        \n        if (!this._dispatcher) {\n            const errorMsg = 'Error: No dispatcher available. Please check agent configuration.';\n            console.error(`🤖 [CALL AGENT] ❌ ${errorMsg}`);\n            return {\n                content: errorMsg,\n                metadata: null\n            };\n        }\n        \n        console.log(`🤖 [CALL AGENT] Dispatcher type: ${typeof this._dispatcher}`);\n        console.log(`🤖 [CALL AGENT] Dispatcher.processRequest: ${typeof this._dispatcher.processRequest}`);\n\n        try {\n            // Create task request for the dispatcher\n            const taskRequest = {\n                prompt: prompt,\n                command: agentId, // Use agent ID as command\n                context: await this._getWorkspaceContext()\n            };\n\n            console.log('[DEBUG] Created taskRequest:', JSON.stringify(taskRequest, null, 2));\n            console.log('[DEBUG] Calling dispatcher.processRequest...');\n\n            // Call the real dispatcher\n            const result = await this._dispatcher.processRequest(taskRequest);\n            \n            console.log('[DEBUG] Dispatcher returned:', JSON.stringify(result, null, 2));\n            \n            if (result.status === 'success' || result.status === 'partial_success') {\n                return {\n                    content: result.content,\n                    metadata: result.metadata\n                };\n            } else {\n                return {\n                    content: `Error: ${result.content}`,\n                    metadata: null\n                };\n            }\n        } catch (error) {\n            const errorMsg = `Agent Error: ${(error as any).message}\\nStack: ${(error as any).stack}`;\n            console.error('[DEBUG]', errorMsg);\n            return {\n                content: errorMsg,\n                metadata: null\n            };\n        }\n    }\n\n    private async _callAgentWithStreaming(agentId: string, prompt: string, messageId: string): Promise<{ content: string, metadata?: any }> {\n        console.log(`\\n🤖 [CALL AGENT WITH STREAMING] ====================================`);\n        console.log(`🤖 [STREAMING] AgentId: \"${agentId}\"`);\n        console.log(`🤖 [STREAMING] AgentId type: ${typeof agentId}`);\n        console.log(`🤖 [STREAMING] AgentId exact: '${agentId}'`);\n        console.log(`🤖 [STREAMING] MessageId: \"${messageId}\"`);\n        console.log(`🤖 [STREAMING] Creating task request with command: '${agentId}'`);\n        \n        if (!this._dispatcher) {\n            const errorMsg = 'Error: No dispatcher available. Please check agent configuration.';\n            console.error(`🤖 [STREAMING] ❌ ${errorMsg}`);\n            return {\n                content: errorMsg,\n                metadata: null\n            };\n        }\n\n        try {\n            let fullContent = '';\n            \n            // Get conversation history for context\n            const conversationHistory = this._contextManager.getFormattedContext(10);\n            \n            // Create task request with streaming callback and conversation history\n            const taskRequest = {\n                prompt: prompt,\n                command: agentId,\n                context: await this._getWorkspaceContext(),\n                globalContext: conversationHistory,\n                thinkingMode: this._thinkingMode, // Pass thinking mode to agents\n                mode: this._thinkingIntensity === 'layered' ? 'layered' : undefined,\n                onPartialResponse: (partialContent: string) => {\n                    console.log(`🤖 [STREAMING] Partial content: ${partialContent.length} chars`);\n\n                    // Check if this is a workflow step notification\n                    if (partialContent.includes('🔄 **Step')) {\n                        // Send as a separate system message\n                        const stepMatch = partialContent.match(/🔄 \\*\\*Step (\\d+)\\/(\\d+)\\*\\*: @(\\w+) - (.+)/);\n                        if (stepMatch) {\n                            const [, current, total, agent, description] = stepMatch;\n                            this._addSystemMessage(`🔄 Step ${current}/${total}: @${agent} - ${description}`);\n                        }\n                    } else if (partialContent.includes('✅ Completed:')) {\n                        // Don't add completion previews to the main message\n                        // They will be shown in the final agent response\n                        return;\n                    } else {\n                        // Extract and process tool markers with agent context\n                        const currentAgent = agentId; // Agent executing the tools\n                        let cleanedContent = partialContent;\n\n                        // Extract <<TOOL>> markers and create tool notifications with agent color\n                        const toolMatches = [...partialContent.matchAll(/<<TOOL>>(.*?)<<TOOL_END>>/gs)];\n                        for (const match of toolMatches) {\n                            const toolContent = match[1];\n                            this._addToolNotification(toolContent, currentAgent, messageId);\n                            cleanedContent = cleanedContent.replace(match[0], '');\n                        }\n\n                        // Clean other markers\n                        cleanedContent = cleanedContent\n                            .replace(/<<TOOL_RESULT>>.*?<<TOOL_RESULT_END>>/gs, '')\n                            .replace(/<<THINKING>>.*?<<THINKING_END>>/gs, '')\n                            .replace(/🛠️ \\*?Claude is using tools.*?\\*?\\n*/g, '');\n\n                        // Check for new system tool message format\n                        if (cleanedContent.includes('SYSTEM_TOOL_MESSAGE:')) {\n                            const parts = cleanedContent.split('SYSTEM_TOOL_MESSAGE:');\n                            if (parts[1]) {\n                                this._addToolNotification(parts[1], currentAgent, messageId);\n                                cleanedContent = parts[0];\n                            }\n                        }\n\n                        // Only add text content if there's actual content after cleaning\n                        if (cleanedContent.trim().length > 0) {\n                            fullContent += cleanedContent;\n                            this._updateStreamingMessage(messageId, cleanedContent);\n                        }\n                    }\n                }\n            };\n\n            // Call the dispatcher\n            const result = await this._dispatcher.processRequest(taskRequest);\n            \n            // Use accumulated content if available, otherwise use result content\n            const finalContent = fullContent || result.content;\n            \n            // Save agent response to conversation history\n            if (finalContent) {\n                this._contextManager.addEntry({\n                    timestamp: new Date().toISOString(),\n                    agent: agentId,\n                    step: 'response',\n                    input: prompt,\n                    output: finalContent,\n                    metadata: result.metadata\n                });\n            }\n            \n            if (result.status === 'success' || result.status === 'partial_success') {\n                return {\n                    content: finalContent,\n                    metadata: result.metadata\n                };\n            } else {\n                return {\n                    content: `Error: ${result.content}`,\n                    metadata: null\n                };\n            }\n        } catch (error) {\n            const errorMsg = `Agent Error: ${(error as any).message}`;\n            console.error('[STREAMING]', errorMsg);\n            return {\n                content: errorMsg,\n                metadata: null\n            };\n        }\n    }\n\n    private _addStreamingMessage(messageId: string, agent: string) {\n        // Create initial streaming message\n        const streamingMessage: ChatMessage = {\n            role: 'assistant',\n            content: '',\n            agent: agent,\n            timestamp: new Date().toISOString(),\n            isCollapsible: false,\n            metadata: { messageId, isStreaming: true }\n        };\n        this._messages.push(streamingMessage);\n        \n        this._panel.webview.postMessage({\n            type: 'addStreamingMessage',\n            message: streamingMessage\n        });\n    }\n\n    private _updateStreamingMessage(messageId: string, partialContent: string, isToolNotification: boolean = false) {\n        // Keep track of processed content\n        let contentToAdd = partialContent;\n        let hasToolNotifications = false;\n        let needsNewBubble = false;\n        \n        // Check for workflow step notifications\n        if (contentToAdd.includes('🔄 **Step')) {\n            const stepMatch = contentToAdd.match(/🔄 \\*\\*Step (\\d+)\\/(\\d+)\\*\\*: @(\\w+) - (.+)/);\n            if (stepMatch) {\n                const [fullMatch, current, total, agent, description] = stepMatch;\n\n                // Initialize workflow container if first step\n                if (current === '1') {\n                    this._initWorkflowContainer(messageId);\n                }\n\n                // Update workflow step\n                this._updateWorkflowStep(messageId, parseInt(current), parseInt(total), agent, description);\n\n                // Remove step notification from main content\n                contentToAdd = contentToAdd.replace(fullMatch, '');\n            }\n        }\n\n        // Check for step completion\n        if (contentToAdd.includes('✅ Completed:')) {\n            const completionMatch = contentToAdd.match(/✅ Completed: (.+)/);\n            if (completionMatch) {\n                // Find current step number from workflow steps\n                const stepKeys = Array.from(this.workflowSteps.keys()).filter(key => key.startsWith(`${messageId}-step-`));\n                const currentStep = stepKeys.length;\n\n                if (currentStep > 0) {\n                    this._completeWorkflowStep(messageId, currentStep, completionMatch[1]);\n                    contentToAdd = contentToAdd.replace(completionMatch[0], '');\n                }\n            }\n        }\n\n        // Check for final result marker\n        if (contentToAdd.includes('✅ Task completed') || contentToAdd.includes('<<FINAL_RESULT>>')) {\n            if (this.workflowSteps.size > 0) {\n                // Clean up markers\n                contentToAdd = contentToAdd.replace(/<<FINAL_RESULT>>/g, '');\n                contentToAdd = contentToAdd.replace(/✅ Task completed successfully!/g, '');\n\n                // Create final result bubble\n                if (contentToAdd.trim()) {\n                    this._createFinalResultBubble(messageId, contentToAdd.trim());\n                    return; // Don't process further\n                }\n            }\n        }\n\n        // Check for thinking notifications\n        while (contentToAdd.includes('<<THINKING>>') && contentToAdd.includes('<<THINKING_END>>')) {\n            const thinkingMatch = contentToAdd.match(/<<THINKING>>(.*?)<<THINKING_END>>/s);\n            if (thinkingMatch) {\n                const thinkingContent = thinkingMatch[1];\n                this._addSystemNotification('💭 ' + thinkingContent, messageId);\n                contentToAdd = contentToAdd.replace(/<<THINKING>>.*?<<THINKING_END>>/s, '');\n                hasToolNotifications = true;\n            } else {\n                break;\n            }\n        }\n        \n        // Check for tool notifications marked with special tags\n        while (contentToAdd.includes('<<TOOL>>') && contentToAdd.includes('<<TOOL_END>>')) {\n            const toolMatch = contentToAdd.match(/<<TOOL>>(.*?)<<TOOL_END>>/s);\n            if (toolMatch) {\n                const toolContent = toolMatch[1];\n                const toolMsgId = this._addSystemNotification(toolContent, messageId);\n                contentToAdd = contentToAdd.replace(/<<TOOL>>.*?<<TOOL_END>>/s, '');\n                hasToolNotifications = true;\n            } else {\n                break;\n            }\n        }\n        \n        // Check for tool results to update existing tool notifications\n        while (contentToAdd.includes('<<TOOL_RESULT>>') && contentToAdd.includes('<<TOOL_RESULT_END>>')) {\n            const resultMatch = contentToAdd.match(/<<TOOL_RESULT>>(.*?)<<TOOL_RESULT_END>>/s);\n            if (resultMatch) {\n                const [toolId, result] = resultMatch[1].split('||');\n                // Find and update the corresponding tool message\n                this._updateToolResult(toolId, result);\n                contentToAdd = contentToAdd.replace(/<<TOOL_RESULT>>.*?<<TOOL_RESULT_END>>/s, '');\n            } else {\n                break;\n            }\n        }\n        \n        // Check for text start marker\n        if (contentToAdd.includes('<<TEXT_START>>')) {\n            contentToAdd = contentToAdd.replace(/<<TEXT_START>>/g, '');\n            needsNewBubble = true;\n        }\n        \n        // Only update main message if there's content left after removing notifications\n        if (contentToAdd.trim()) {\n            // If we need a new bubble or don't have an existing message, create one\n            let message = this._messages.find(m => m.metadata?.messageId === messageId && m.role === 'assistant');\n            \n            if (needsNewBubble && !message) {\n                // Create a new assistant message bubble\n                const newMessage: ChatMessage = {\n                    role: 'assistant',\n                    content: contentToAdd,\n                    agent: 'assistant',\n                    timestamp: new Date().toISOString(),\n                    metadata: { messageId: `${messageId}-text`, isStreaming: true }\n                };\n                this._messages.push(newMessage);\n                \n                this._panel.webview.postMessage({\n                    type: 'addStreamingMessage',\n                    message: newMessage\n                });\n            } else if (message) {\n                // Update existing message\n                message.content += contentToAdd;\n                \n                this._panel.webview.postMessage({\n                    type: 'updateStreamingMessage',  \n                    messageId: message.metadata?.messageId || messageId,\n                    partialContent: contentToAdd\n                });\n            }\n        }\n    }\n\n    private _isSpecialMessage(content: string): boolean {\n        // Check if content is a tool notification or special message\n        const specialPatterns = [\n            /^🚀 \\*\\*Claude is initializing/,\n            /^🔧 \\*\\*Using tool:/,\n            /^⚠️ \\*\\*System Error:/,\n            /^✨ \\*\\*Tool:/,\n            /^📝 \\*\\*Result:/,\n            /^✅ \\*\\*Task completed:/\n        ];\n        return specialPatterns.some(pattern => pattern.test(content));\n    }\n\n    private _addSystemNotification(content: string, parentMessageId?: string): string {\n        // Add a small delay to ensure proper ordering of messages\n        const messageId = `system-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n        const systemMessage: ChatMessage = {\n            role: 'system',\n            content: content,\n            timestamp: new Date().toISOString(),\n            metadata: { \n                isSystemNotification: true, \n                parentMessageId: parentMessageId,\n                messageId: messageId\n            }\n        };\n        this._messages.push(systemMessage);\n        \n        // Send as a separate addMessage event to create a new bubble\n        setTimeout(() => {\n            this._panel.webview.postMessage({\n                type: 'addMessage',\n                message: systemMessage\n            });\n        }, 10);\n        \n        return messageId;\n    }\n    \n    private _updateToolResult(toolId: string, result: string) {\n        // Find the last tool message and update it with the result\n        for (let i = this._messages.length - 1; i >= 0; i--) {\n            const message = this._messages[i];\n            if (message.role === 'system' && message.content.includes(toolId)) {\n                // Append result to the tool message\n                if (!message.content.includes('**Result:**')) {\n                    message.content += `\\n\\n**Result:**\\n${result}`;\n                    \n                    // Update the message in the webview\n                    this._panel.webview.postMessage({\n                        type: 'updateMessage',\n                        messageId: message.metadata?.messageId,\n                        content: message.content\n                    });\n                }\n                break;\n            }\n        }\n    }\n\n    private _finalizeStreamingMessage(messageId: string, fullContent: string, metadata?: any) {\n        // Find and finalize the streaming message\n        const message = this._messages.find(m => m.metadata?.messageId === messageId);\n        if (message) {\n            // Update agent if metadata includes it (for workflow results)\n            if (metadata?.agent) {\n                message.agent = metadata.agent;\n            }\n\n            // Don't add metadata info to content, add it as a separate message\n            message.content = fullContent;\n            message.metadata = { ...message.metadata, ...metadata, isStreaming: false };\n            message.isCollapsible = fullContent.length > 500;\n\n            this._panel.webview.postMessage({\n                type: 'finalizeStreamingMessage',\n                messageId: messageId,\n                fullContent: message.content,\n                metadata: message.metadata,\n                agent: message.agent\n            });\n\n            // Add metadata as a separate completion message if available\n            if (metadata && (metadata.usage || metadata.cost || metadata.duration)) {\n                this._addCompletionMessage(metadata);\n            }\n        }\n    }\n\n    private _addCompletionMessage(metadata: any) {\n        let completionContent = '✅ **Task completed successfully!**\\n\\n';\n        \n        // Add execution details\n        if (metadata.duration) {\n            completionContent += `⏱️ **Execution Time:** ${metadata.duration}\\n`;\n        }\n        \n        // Add token usage\n        if (metadata.usage) {\n            const inputTokens = metadata.usage.inputTokens || 0;\n            const outputTokens = metadata.usage.outputTokens || 0;\n            const totalTokens = inputTokens + outputTokens;\n            completionContent += `📊 **Tokens Used:** ${totalTokens} (Input: ${inputTokens}, Output: ${outputTokens})\\n`;\n        }\n        \n        // Add cost if available\n        if (metadata.cost) {\n            completionContent += `💰 **Cost:** $${metadata.cost.toFixed(4)}\\n`;\n        }\n        \n        // Add cache info if available\n        if (metadata.usage?.cacheCreationInputTokens || metadata.usage?.cacheReadInputTokens) {\n            const cacheCreation = metadata.usage.cacheCreationInputTokens || 0;\n            const cacheRead = metadata.usage.cacheReadInputTokens || 0;\n            completionContent += `💾 **Cache:** ${cacheCreation} created, ${cacheRead} read\\n`;\n        }\n        \n        const completionMessage: ChatMessage = {\n            role: 'system',\n            content: completionContent,\n            timestamp: new Date().toISOString(),\n            metadata: { \n                isCompletionMessage: true,\n                ...metadata\n            }\n        };\n        this._messages.push(completionMessage);\n        \n        this._panel.webview.postMessage({\n            type: 'addMessage',\n            message: completionMessage\n        });\n    }\n\n    private _buildMetadataInfo(metadata?: any): string {\n        let metadataInfo = '';\n        \n        // Token usage\n        if (metadata?.usage) {\n            const inputTokens = metadata.usage.inputTokens || 0;\n            const outputTokens = metadata.usage.outputTokens || 0;\n            const cacheCreation = metadata.usage.cacheCreationInputTokens || 0;\n            const cacheRead = metadata.usage.cacheReadInputTokens || 0;\n            const totalTokens = inputTokens + outputTokens;\n            \n            metadataInfo += `\\n\\n---\\n📊 **Tokens**: ${totalTokens} total (Input: ${inputTokens}, Output: ${outputTokens})`;\n            \n            if (cacheCreation > 0 || cacheRead > 0) {\n                metadataInfo += `\\n💾 **Cache**: ${cacheCreation} created, ${cacheRead} read`;\n            }\n        }\n        \n        // Cost and performance\n        if (metadata?.totalCostUsd !== undefined) {\n            metadataInfo += `\\n💰 **Cost**: $${metadata.totalCostUsd.toFixed(6)}`;\n        }\n        if (metadata?.durationMs !== undefined) {\n            metadataInfo += `\\n⏱️ **Duration**: ${metadata.durationMs}ms`;\n            if (metadata?.durationApiMs !== undefined) {\n                metadataInfo += ` (API: ${metadata.durationApiMs}ms)`;\n            }\n        }\n        \n        // Session and model info\n        if (metadata?.model) {\n            metadataInfo += `\\n🤖 **Model**: ${metadata.model}`;\n        }\n        if (metadata?.sessionId) {\n            metadataInfo += `\\n🔗 **Session**: ${metadata.sessionId.substring(0, 8)}...`;\n        }\n        \n        // Stop reason\n        if (metadata?.stopReason) {\n            metadataInfo += `\\n⚡ **Stop reason**: ${metadata.stopReason}`;\n        }\n        \n        return metadataInfo;\n    }\n\n    private async _getWorkspaceContext() {\n        return {\n            activeEditor: vscode.window.activeTextEditor,\n            workspaceRoots: vscode.workspace.workspaceFolders,\n            openDocuments: vscode.workspace.textDocuments,\n            selectedText: vscode.window.activeTextEditor?.document.getText(vscode.window.activeTextEditor.selection),\n            currentFile: vscode.window.activeTextEditor?.document.fileName\n        };\n    }\n\n    private async _processWorkflow(prompt: string) {\n        // Simulate a multi-agent workflow\n        const workflow = [\n            { agent: 'orchestrator', action: 'Analyzing request...' },\n            { agent: 'architect', action: 'Designing solution architecture...' },\n            { agent: 'codesmith', action: 'Implementing code...' },\n            { agent: 'reviewer', action: 'Reviewing implementation...' }\n        ];\n\n        for (const step of workflow) {\n            // Show agent-to-agent communication\n            const agentMessage: ChatMessage = {\n                role: 'agent-to-agent',\n                content: step.action,\n                agent: step.agent,\n                timestamp: new Date().toISOString(),\n                isCollapsible: true\n            };\n            this._messages.push(agentMessage);\n            \n            this._panel.webview.postMessage({\n                type: 'addMessage',\n                message: agentMessage\n            });\n\n            await new Promise(resolve => setTimeout(resolve, 500));\n        }\n\n        // Final response\n        this._addAgentResponse('Workflow completed successfully!', 'orchestrator');\n    }\n\n    private _addAgentResponse(content: string, agent: string, metadata?: any) {\n        console.log(`📝 [ADD RESPONSE] Adding agent response`);\n        console.log(`📝 [ADD RESPONSE] Content length: ${content?.length || 0}`);\n        console.log(`📝 [ADD RESPONSE] Agent: ${agent}`);\n        console.log(`📝 [ADD RESPONSE] Metadata:`, metadata);\n        \n        // Build comprehensive metadata info\n        let metadataInfo = '';\n        \n        // Token usage\n        if (metadata?.usage) {\n            const inputTokens = metadata.usage.inputTokens || 0;\n            const outputTokens = metadata.usage.outputTokens || 0;\n            const cacheCreation = metadata.usage.cacheCreationInputTokens || 0;\n            const cacheRead = metadata.usage.cacheReadInputTokens || 0;\n            const totalTokens = inputTokens + outputTokens;\n            \n            metadataInfo += `\\n\\n---\\n📊 **Tokens**: ${totalTokens} total (Input: ${inputTokens}, Output: ${outputTokens})`;\n            \n            if (cacheCreation > 0 || cacheRead > 0) {\n                metadataInfo += `\\n💾 **Cache**: ${cacheCreation} created, ${cacheRead} read`;\n            }\n        }\n        \n        // Cost and performance\n        if (metadata?.totalCostUsd !== undefined) {\n            metadataInfo += `\\n💰 **Cost**: $${metadata.totalCostUsd.toFixed(6)}`;\n        }\n        if (metadata?.durationMs !== undefined) {\n            metadataInfo += `\\n⏱️ **Duration**: ${metadata.durationMs}ms`;\n            if (metadata?.durationApiMs !== undefined) {\n                metadataInfo += ` (API: ${metadata.durationApiMs}ms)`;\n            }\n        }\n        \n        // Session and model info\n        if (metadata?.model) {\n            metadataInfo += `\\n🤖 **Model**: ${metadata.model}`;\n        }\n        if (metadata?.sessionId) {\n            metadataInfo += `\\n🔗 **Session**: ${metadata.sessionId.substring(0, 8)}...`;\n        }\n        \n        // Stop reason\n        if (metadata?.stopReason) {\n            metadataInfo += `\\n⚡ **Stop reason**: ${metadata.stopReason}`;\n        }\n\n        const assistantMessage: ChatMessage = {\n            role: 'assistant',\n            content: content + metadataInfo,\n            agent: agent,\n            timestamp: new Date().toISOString(),\n            isCollapsible: content.length > 500,\n            metadata: metadata\n        };\n        this._messages.push(assistantMessage);\n        \n        console.log(`📝 [ADD RESPONSE] Final message to send:`, assistantMessage);\n        console.log(`📝 [ADD RESPONSE] Total messages in history: ${this._messages.length}`);\n        \n        const postResult = this._panel.webview.postMessage({\n            type: 'addMessage',\n            message: assistantMessage\n        });\n        \n        console.log(`📝 [ADD RESPONSE] postMessage result:`, postResult);\n    }\n\n    private _addSystemMessage(content: string) {\n        const systemMessage: ChatMessage = {\n            role: 'system',\n            content: content,\n            timestamp: new Date().toISOString()\n        };\n        this._messages.push(systemMessage);\n\n        this._panel.webview.postMessage({\n            type: 'addMessage',\n            message: systemMessage\n        });\n    }\n\n    private _addToolNotification(content: string, agentName: string, relatedMessageId?: string): string {\n        const toolMsgId = `tool_${Date.now()}_${Math.random()}`;\n\n        // Get agent-specific color based on normalized agent name\n        const normalizedAgent = agentName.toLowerCase().replace('agent', '').replace('gpt', '').replace('claude', '');\n        const agentColor = this._getAgentColor(normalizedAgent);\n        const agentEmoji = this._getAgentEmoji(normalizedAgent);\n\n        const toolMessage: ChatMessage = {\n            role: 'system',\n            content: content,\n            agent: agentName,\n            timestamp: new Date().toISOString(),\n            metadata: {\n                isToolNotification: true,\n                relatedMessageId,\n                toolMsgId,\n                agentColor,\n                agentEmoji,\n                agentName\n            }\n        };\n\n        this._messages.push(toolMessage);\n\n        // Send to WebView with tool notification flag\n        this._panel.webview.postMessage({\n            type: 'addMessage',\n            message: toolMessage\n        });\n\n        return toolMsgId;\n    }\n\n    private _getAgentColor(agent: string): string {\n        const colors: { [key: string]: string } = {\n            'orchestrator': '#8B5CF6',     // Purple\n            'architect': '#10B981',        // Emerald Green (changed from blue)\n            'codesmith': '#F97316',        // Orange\n            'research': '#EAB308',         // Gold\n            'tradestrat': '#14B8A6',       // Turquoise\n            'opusarbitrator': '#DC2626',   // Crimson\n            'docubot': '#6366F1',          // Indigo\n            'reviewer': '#EC4899',         // Pink\n            'fixer': '#8B5CF6'             // Purple\n        };\n        return colors[agent.toLowerCase()] || '#3B82F6'; // Default to blue for system\n    }\n\n    private _getAgentEmoji(agent: string): string {\n        const emojis: { [key: string]: string } = {\n            'orchestrator': '🎯',\n            'architect': '🏗️',\n            'codesmith': '🛠️',\n            'research': '🔍',\n            'tradestrat': '📈',\n            'opusarbitrator': '⚖️',\n            'docubot': '📚',\n            'reviewer': '🔎',\n            'fixer': '🔧'\n        };\n        return emojis[agent.toLowerCase()] || '🤖';\n    }\n\n    private _addErrorMessage(content: string) {\n        const errorMessage: ChatMessage = {\n            role: 'system',\n            content: content,\n            timestamp: new Date().toISOString()\n        };\n        this._messages.push(errorMessage);\n\n        this._panel.webview.postMessage({\n            type: 'addMessage',\n            message: errorMessage\n        });\n    }\n\n    private _restoreMessages() {\n        // Send all stored messages back to the webview\n        if (this._messages.length > 0) {\n            this._panel.webview.postMessage({\n                type: 'restoreMessages',\n                messages: this._messages\n            });\n        }\n    }\n\n    private async _handleQuickAction(action: string) {\n        switch (action) {\n            case 'help':\n                this._addAgentResponse(\n                    `## KI AutoAgent Help\\n\\n` +\n                    `**Modes:**\\n` +\n                    `- **Auto**: Automatically routes to the best agent\\n` +\n                    `- **Single**: Direct chat with selected agent\\n` +\n                    `- **Workflow**: Multi-agent collaboration\\n\\n` +\n                    `**Commands:**\\n` +\n                    `- Type your question and press Enter\\n` +\n                    `- Use Shift+Enter for multiline input\\n` +\n                    `- Select agents from dropdown\\n`,\n                    'system'\n                );\n                break;\n            case 'examples':\n                this._addAgentResponse(\n                    `## Example Prompts\\n\\n` +\n                    `**Architecture:**\\n` +\n                    `\"Design a microservices architecture for an e-commerce platform\"\\n\\n` +\n                    `**Coding:**\\n` +\n                    `\"Implement a REST API with FastAPI and PostgreSQL\"\\n\\n` +\n                    `**Trading:**\\n` +\n                    `\"Create a momentum trading strategy with risk management\"\\n\\n` +\n                    `**Research:**\\n` +\n                    `\"Find the latest best practices for React performance optimization\"\\n`,\n                    'system'\n                );\n                break;\n            case 'agents':\n                this._addAgentResponse(\n                    `## Available Agents\\n\\n` +\n                    `🤖 **Orchestrator**: Automatic task routing\\n` +\n                    `🏗️ **ArchitectGPT**: System design and architecture\\n` +\n                    `💻 **CodeSmithClaude**: Code implementation\\n` +\n                    `📈 **TradeStrat**: Trading strategies\\n` +\n                    `🔍 **ResearchBot**: Web research\\n` +\n                    `⚖️ **OpusRichter**: Quality judgment\\n` +\n                    `📝 **DocuBot**: Documentation\\n` +\n                    `👁️ **ReviewerGPT**: Code review\\n` +\n                    `🔧 **FixerBot**: Bug fixing\\n`,\n                    'system'\n                );\n                break;\n        }\n    }\n\n    private async _handlePlanFirst(text: string, agent: string, mode: string) {\n        // Add user message with plan request - PLANNING ONLY MODE\n        const planPrompt = `PLANNING MODE ONLY - DO NOT IMPLEMENT OR WRITE CODE:\n\n${text}\n\nInstructions for planning:\n1. Break down the task into detailed steps\n2. List ALL changes that need to be made (be comprehensive)\n3. Identify which files need to be modified\n4. Specify what each change will accomplish\n5. DO NOT write any code or make any implementations\n6. Wait for user approval before proceeding with implementation\n\nPlease provide a numbered step-by-step plan only.`;\n\n        const userMessage: ChatMessage = {\n            role: 'user',\n            content: `📋 **PLAN FIRST REQUEST**\\n\\n${text}`,\n            timestamp: new Date().toISOString()\n        };\n        this._messages.push(userMessage);\n\n        this._panel.webview.postMessage({\n            type: 'addMessage',\n            message: userMessage\n        });\n\n        // Save to conversation history with planning flag\n        this._contextManager.addEntry({\n            timestamp: new Date().toISOString(),\n            agent: 'user',\n            step: 'plan_request',\n            input: planPrompt,\n            output: '',\n            metadata: {\n                mode: 'planning',\n                selectedAgent: agent,\n                isPlanFirst: true,\n                originalRequest: text\n            }\n        });\n\n        // Process with agent\n        this._panel.webview.postMessage({\n            type: 'showTyping',\n            agent: agent\n        });\n\n        try {\n            // Route to orchestrator for planning regardless of selected agent\n            const planningAgent = 'orchestrator';\n            const streamingMessageId = `streaming-${Date.now()}`;\n            this._addStreamingMessage(streamingMessageId, planningAgent);\n\n            // Call orchestrator with planning-only prompt\n            const response = await this._dispatcher.processRequest({\n                command: 'plan',\n                prompt: planPrompt,\n                mode: 'planning',\n                projectType: 'generic',\n                onPartialResponse: (partial: string) => {\n                    this._updateStreamingMessage(streamingMessageId, partial);\n                }\n            });\n\n            // Add confirmation request\n            const confirmMessage = '\\n\\n---\\n✅ **Plan complete!** Would you like me to proceed with implementation? Reply \"yes\" to continue or provide feedback to adjust the plan.';\n\n            this._finalizeStreamingMessage(\n                streamingMessageId,\n                response.content + confirmMessage,\n                { ...response.metadata, isPlan: true }\n            );\n        } catch (error) {\n            console.error('[PLAN FIRST] Error:', error);\n            this._addErrorMessage(`Error creating plan: ${(error as any).message}`);\n        } finally {\n            this._panel.webview.postMessage({\n                type: 'hideTyping'\n            });\n        }\n    }\n\n    private _cancelCurrentOperation() {\n        console.log('[CHAT] Cancelling current operation...');\n        this._isProcessing = false;\n\n        // Cancel any ongoing operations\n        if (this._currentOperation) {\n            if (typeof this._currentOperation.cancel === 'function') {\n                this._currentOperation.cancel();\n            }\n            this._currentOperation = null;\n        }\n\n        // Notify webview\n        this._panel.webview.postMessage({\n            type: 'operationStopped'\n        });\n\n        // Add system message\n        this._addSystemMessage('⛔ Operation cancelled by user');\n    }\n\n    public addMessage(message: ChatMessage) {\n        this._messages.push(message);\n        this._panel.webview.postMessage({\n            type: 'addMessage',\n            message: message\n        });\n    }\n\n    // Workflow step management methods\n    private _initWorkflowContainer(messageId: string): void {\n        this._panel.webview.postMessage({\n            type: 'initWorkflow',\n            messageId,\n            timestamp: new Date().toISOString()\n        });\n    }\n\n    private _updateWorkflowStep(messageId: string, step: number, total: number, agent: string, description: string): void {\n        const stepId = `${messageId}-step-${step}`;\n        const stepData = {\n            step,\n            total,\n            agent,\n            description,\n            status: 'in_progress',\n            startTime: Date.now(),\n            result: null\n        };\n\n        this.workflowSteps.set(stepId, stepData);\n\n        this._panel.webview.postMessage({\n            type: 'updateWorkflowStep',\n            messageId,\n            stepData\n        });\n    }\n\n    private _completeWorkflowStep(messageId: string, step: number, result: string): void {\n        const stepId = `${messageId}-step-${step}`;\n        const stepData = this.workflowSteps.get(stepId);\n\n        if (stepData) {\n            stepData.status = 'completed';\n            stepData.result = result;\n            stepData.endTime = Date.now();\n\n            this._panel.webview.postMessage({\n                type: 'completeWorkflowStep',\n                messageId,\n                stepData\n            });\n        }\n    }\n\n    private _createFinalResultBubble(messageId: string, content: string): void {\n        const finalMessage: ChatMessage = {\n            role: 'assistant',\n            content,\n            agent: 'orchestrator',\n            timestamp: new Date().toISOString(),\n            metadata: {\n                messageId: `${messageId}-final`,\n                isFinalResult: true\n            }\n        };\n\n        this._messages.push(finalMessage);\n        this._panel.webview.postMessage({\n            type: 'addFinalResult',\n            message: finalMessage\n        });\n    }\n\n    public dispose() {\n        MultiAgentChatPanel.currentPanel = undefined;\n        this._panel.dispose();\n        while (this._disposables.length) {\n            const x = this._disposables.pop();\n            if (x) {\n                x.dispose();\n            }\n        }\n    }\n}\n\nfunction getNonce() {\n    let text = '';\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < 32; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}","/**\n * Base Chat Agent class for VS Code Chat Extensions\n * All specialized agents inherit from this base class\n */\nimport * as vscode from 'vscode';\nimport { AgentConfig, TaskRequest, TaskResult, WorkflowStep, AIModel } from '../../types';\nimport { VSCodeMasterDispatcher } from '../../core/VSCodeMasterDispatcher';\nimport { UnifiedChatMixin, ResponseType } from '../../mixins/UnifiedChatMixin';\nimport { AgentRegistry } from '../../core/AgentRegistry';\n\nexport abstract class ChatAgent extends UnifiedChatMixin {\n    protected context: vscode.ExtensionContext;\n    protected dispatcher: VSCodeMasterDispatcher;\n    protected stats = {\n        totalExecutions: 0,\n        successCount: 0,\n        totalResponseTime: 0,\n        lastExecution: undefined as Date | undefined\n    };\n    \n    // Properties for UnifiedChatMixin compatibility\n    public name: string;\n    public role: string;\n    public model: string;\n\n    constructor(\n        protected config: AgentConfig,\n        context: vscode.ExtensionContext,\n        dispatcher: VSCodeMasterDispatcher\n    ) {\n        super(); // Initialize UnifiedChatMixin\n        \n        this.context = context;\n        this.dispatcher = dispatcher;\n        \n        // Set properties for UnifiedChatMixin\n        this.name = config.fullName || config.name;\n        this.role = config.description;\n        this.model = config.model;\n    }\n\n    /**\n     * Create VS Code chat request handler\n     */\n    createHandler(): vscode.ChatRequestHandler {\n        return async (\n            request: vscode.ChatRequest,\n            context: vscode.ChatContext,\n            stream: vscode.ChatResponseStream,\n            token: vscode.CancellationToken\n        ) => {\n            const startTime = Date.now();\n            this.stats.totalExecutions++;\n            this.stats.lastExecution = new Date();\n\n            try {\n                // Show agent info\n                stream.progress(`🤖 ${this.config.fullName} is working...`);\n                \n                // Handle the request\n                await this.handleRequest(request, context, stream, token);\n                \n                // Update success stats\n                this.stats.successCount++;\n                this.stats.totalResponseTime += Date.now() - startTime;\n\n            } catch (error) {\n                await this.handleError(error as Error, stream);\n                this.stats.totalResponseTime += Date.now() - startTime;\n            }\n        };\n    }\n\n    /**\n     * Main request handler - to be implemented by each agent\n     */\n    protected abstract handleRequest(\n        request: vscode.ChatRequest,\n        context: vscode.ChatContext,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void>;\n\n    /**\n     * Execute a workflow step (called by dispatcher)\n     */\n    async executeStep(\n        step: WorkflowStep,\n        request: TaskRequest,\n        previousResults: TaskResult[]\n    ): Promise<TaskResult> {\n        try {\n            return await this.processWorkflowStep(step, request, previousResults);\n        } catch (error) {\n            return {\n                status: 'error',\n                content: `Error executing ${step.description}: ${(error as any).message}`,\n                metadata: { error: (error as any).message, step: step.id }\n            };\n        }\n    }\n\n    /**\n     * Process a workflow step - to be implemented by each agent\n     */\n    protected abstract processWorkflowStep(\n        step: WorkflowStep,\n        request: TaskRequest,\n        previousResults: TaskResult[]\n    ): Promise<TaskResult>;\n\n    /**\n     * Handle command-specific logic\n     */\n    protected async handleCommand(\n        command: string,\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        const commandHandler = this.config.commands.find(cmd => cmd.name === command);\n        \n        if (commandHandler) {\n            const methodName = commandHandler.handler;\n            if (typeof (this as any)[methodName] === 'function') {\n                await (this as any)[methodName](prompt, stream, token);\n            } else {\n                stream.markdown(`❌ Command handler '${methodName}' not implemented for ${command}`);\n            }\n        } else {\n            stream.markdown(`❌ Unknown command: /${command}`);\n            await this.showAvailableCommands(stream);\n        }\n    }\n\n    /**\n     * Show available commands for this agent\n     */\n    protected async showAvailableCommands(stream: vscode.ChatResponseStream): Promise<void> {\n        stream.markdown(`## Available Commands for ${this.config.fullName}\\n\\n`);\n        \n        for (const cmd of this.config.commands) {\n            stream.markdown(`- **/${cmd.name}** - ${cmd.description}\\n`);\n        }\n        \n        stream.markdown(`\\n💡 Use \\`@${this.config.name} /<command> <your request>\\``);\n    }\n\n    /**\n     * Get workspace context for AI models\n     */\n    protected async getWorkspaceContext(): Promise<string> {\n        const workspaceContext = await this.dispatcher.getWorkspaceContext();\n\n        let contextString = '';\n\n        if (workspaceContext.currentFile) {\n            contextString += `Current file: ${workspaceContext.currentFile}\\n`;\n        }\n\n        if (workspaceContext.selectedText) {\n            contextString += `Selected text:\\n\\`\\`\\`\\n${workspaceContext.selectedText}\\n\\`\\`\\`\\n`;\n        }\n\n        if (workspaceContext.workspaceRoots && workspaceContext.workspaceRoots.length > 0) {\n            contextString += `Workspace: ${workspaceContext.workspaceRoots[0].name}\\n`;\n        }\n\n        // Add task delegation context\n        contextString += `\\n\\n${this.getTaskDelegationContext()}`;\n\n        return contextString;\n    }\n\n    /**\n     * Get task delegation context for this agent\n     */\n    protected getTaskDelegationContext(): string {\n        const registry = AgentRegistry.getInstance();\n        const agentId = this.config.name.toLowerCase().replace('agent', '');\n        return registry.getTaskDelegationInfo(agentId);\n    }\n\n    /**\n     * Check if a task should be delegated to another agent\n     */\n    protected async checkForTaskDelegation(prompt: string): Promise<string | null> {\n        const registry = AgentRegistry.getInstance();\n        const currentAgentId = this.config.name.toLowerCase().replace('agent', '');\n        const suggestedAgent = registry.suggestAgentForTask(prompt);\n\n        if (suggestedAgent && suggestedAgent !== currentAgentId) {\n            const agentInfo = registry.getAgentInfo(suggestedAgent);\n            if (agentInfo) {\n                return `💡 This task might be better suited for **@${suggestedAgent}** who specializes in ${agentInfo.specialization}.\\n\\nWould you like me to:\\n1. Continue with my analysis\\n2. Suggest forwarding to @${suggestedAgent}\\n\\nOr you can directly ask @${suggestedAgent} for help.`;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Get system context prompt with agent awareness\n     */\n    protected getSystemContextPrompt(): string {\n        const registry = AgentRegistry.getInstance();\n        return `\n## Available Agents in KI_AutoAgent System:\n${registry.getAgentListDescription()}\n\nYou are ${this.config.fullName} with role: ${this.config.description}\n${this.getTaskDelegationContext()}\n`;\n    }\n\n    /**\n     * Render code in the chat with syntax highlighting\n     */\n    protected renderCode(\n        code: string,\n        language: string,\n        stream: vscode.ChatResponseStream,\n        title?: string\n    ): void {\n        if (title) {\n            stream.markdown(`### ${title}\\n\\n`);\n        }\n        stream.markdown(`\\`\\`\\`${language}\\n${code}\\n\\`\\`\\`\\n\\n`);\n    }\n\n    /**\n     * Create action buttons for the user\n     */\n    protected createActionButton(\n        title: string,\n        command: string,\n        args: any[],\n        stream: vscode.ChatResponseStream\n    ): void {\n        stream.button({\n            command,\n            title,\n            arguments: args\n        });\n    }\n\n    /**\n     * Add file reference to chat\n     */\n    protected addFileReference(\n        filePath: string,\n        stream: vscode.ChatResponseStream\n    ): void {\n        try {\n            const uri = vscode.Uri.file(filePath);\n            stream.reference(uri);\n        } catch (error) {\n            console.log(this.showError('Error adding file reference', error));\n        }\n    }\n\n    /**\n     * Error handler\n     */\n    protected async handleError(error: Error, stream: vscode.ChatResponseStream): Promise<void> {\n        console.log(this.showError(`Error in ${this.config.fullName}`, error));\n        \n        stream.markdown(`❌ **Error**: ${(error as any).message}\\n\\n`);\n        stream.markdown(`💡 **Suggestions:**\\n`);\n        stream.markdown(`- Check your API keys in settings\\n`);\n        stream.markdown(`- Verify your internet connection\\n`);\n        stream.markdown(`- Try rephrasing your request\\n`);\n        \n        // Offer to show help\n        this.createActionButton(\n            'Show Help',\n            'ki-autoagent.showHelp',\n            [this.config.participantId],\n            stream\n        );\n    }\n\n    /**\n     * Get agent statistics\n     */\n    getStats() {\n        return {\n            ...this.stats,\n            successRate: this.stats.totalExecutions > 0 \n                ? this.stats.successCount / this.stats.totalExecutions \n                : 0,\n            averageResponseTime: this.stats.totalExecutions > 0\n                ? this.stats.totalResponseTime / this.stats.totalExecutions\n                : 0\n        };\n    }\n\n    /**\n     * Get AI model configuration\n     */\n    protected getModelConfig(): { model: AIModel; apiKey?: string } {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent');\n        \n        let model: AIModel = this.config.model as AIModel;\n        let apiKey: string | undefined;\n        \n        switch (model) {\n            case 'gpt-4o':\n            case 'gpt-4o-mini':\n                apiKey = config.get<string>('openai.apiKey');\n                break;\n            case 'claude-3.5-sonnet':\n                apiKey = config.get<string>('anthropic.apiKey');\n                break;\n            case 'perplexity-pro':\n                apiKey = config.get<string>('perplexity.apiKey');\n                break;\n        }\n        \n        return { model, apiKey };\n    }\n\n    /**\n     * Validate API configuration\n     */\n    protected validateApiConfig(): boolean {\n        const { apiKey } = this.getModelConfig();\n        return !!apiKey;\n    }\n\n    /**\n     * Get max tokens from configuration\n     */\n    protected getMaxTokens(): number {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent');\n        return config.get<number>('maxTokens', 4000);\n    }\n\n    /**\n     * Check if logging is enabled\n     */\n    protected isLoggingEnabled(): boolean {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent');\n        return config.get<boolean>('enableLogging', true);\n    }\n\n    /**\n     * Log message if logging is enabled\n     */\n    protected log(message: string, level: 'info' | 'warn' | 'error' = 'info'): void {\n        if (this.isLoggingEnabled()) {\n            const timestamp = new Date().toISOString();\n            console[level](`[${timestamp}] ${this.config.fullName}: ${message}`);\n        }\n    }\n}","/**\n * Manages conversation context and history across multiple agent interactions\n * Ensures that agents can access and build upon previous outputs\n */\n\nexport interface ConversationEntry {\n    timestamp: string;\n    agent: string;\n    step: string;\n    input: string;\n    output: string;\n    metadata?: any;\n}\n\nexport class ConversationContextManager {\n    private static instance: ConversationContextManager;\n    private conversationHistory: ConversationEntry[] = [];\n    private maxHistorySize: number = 50; // Keep last 50 interactions\n    \n    private constructor() {}\n    \n    public static getInstance(): ConversationContextManager {\n        if (!ConversationContextManager.instance) {\n            ConversationContextManager.instance = new ConversationContextManager();\n        }\n        return ConversationContextManager.instance;\n    }\n    \n    /**\n     * Add a new entry to the conversation history\n     */\n    public addEntry(entry: ConversationEntry): void {\n        this.conversationHistory.push(entry);\n        \n        // Trim history if it exceeds max size\n        if (this.conversationHistory.length > this.maxHistorySize) {\n            this.conversationHistory = this.conversationHistory.slice(-this.maxHistorySize);\n        }\n        \n        console.log(`[CONTEXT-MANAGER] Added entry from ${entry.agent} (${entry.step})`);\n        console.log(`[CONTEXT-MANAGER] Total history size: ${this.conversationHistory.length} entries`);\n    }\n    \n    /**\n     * Get recent conversation history\n     */\n    public getRecentHistory(limit: number = 5): ConversationEntry[] {\n        return this.conversationHistory.slice(-limit);\n    }\n    \n    /**\n     * Get conversation history for a specific agent\n     */\n    public getAgentHistory(agentName: string, limit: number = 5): ConversationEntry[] {\n        return this.conversationHistory\n            .filter(entry => entry.agent === agentName)\n            .slice(-limit);\n    }\n    \n    /**\n     * Get formatted conversation context for inclusion in prompts\n     */\n    public getFormattedContext(limit: number = 5): string {\n        const recent = this.getRecentHistory(limit);\n        if (recent.length === 0) {\n            return '';\n        }\n        \n        let context = '\\n## Conversation History:\\n';\n        recent.forEach(entry => {\n            context += `\\n### ${entry.agent} (${entry.step}) - ${entry.timestamp}:\\n`;\n            context += `**Input:** ${entry.input.substring(0, 200)}...\\n`;\n            context += `**Output:** ${entry.output.substring(0, 500)}...\\n`;\n        });\n        \n        return context;\n    }\n    \n    /**\n     * Get the last output from any agent\n     */\n    public getLastOutput(): string | null {\n        if (this.conversationHistory.length === 0) {\n            return null;\n        }\n        return this.conversationHistory[this.conversationHistory.length - 1].output;\n    }\n    \n    /**\n     * Clear conversation history\n     */\n    public clearHistory(): void {\n        this.conversationHistory = [];\n        console.log(`[CONTEXT-MANAGER] Conversation history cleared`);\n    }\n    \n    /**\n     * Export conversation history as JSON\n     */\n    public exportHistory(): string {\n        return JSON.stringify(this.conversationHistory, null, 2);\n    }\n    \n    /**\n     * Import conversation history from JSON\n     */\n    public importHistory(jsonData: string): void {\n        try {\n            const imported = JSON.parse(jsonData);\n            if (Array.isArray(imported)) {\n                this.conversationHistory = imported;\n                console.log(`[CONTEXT-MANAGER] Imported ${imported.length} conversation entries`);\n            }\n        } catch (error) {\n            console.error(`[CONTEXT-MANAGER] Failed to import history: ${error}`);\n        }\n    }\n}","module.exports = require(\"fs\");","module.exports = require(\"path\");","/**\n * TradeStrat - Trading Strategy Expert\n * Powered by Claude 3.5 Sonnet for trading strategy development and analysis\n */\nimport * as vscode from 'vscode';\nimport { ChatAgent } from './base/ChatAgent';\nimport { AgentConfig, TaskRequest, TaskResult, WorkflowStep } from '../types';\nimport { VSCodeMasterDispatcher } from '../core/VSCodeMasterDispatcher';\nimport { AnthropicService } from '../utils/AnthropicService';\nimport { getClaudeCodeService, ClaudeCodeService } from '../services/ClaudeCodeService';\n\nexport class TradeStratAgent extends ChatAgent {\n    private anthropicService: AnthropicService;\n    private claudeCodeService: ClaudeCodeService;\n\n    constructor(context: vscode.ExtensionContext, dispatcher: VSCodeMasterDispatcher) {\n        const config: AgentConfig = {\n            participantId: 'ki-autoagent.tradestrat',\n            name: 'tradestrat',\n            fullName: 'TradeStrat',\n            description: 'Trading Strategy Expert powered by Claude 4.1 Sonnet',\n            model: 'claude-4.1-sonnet-20250920',\n            iconPath: vscode.Uri.joinPath(context.extensionUri, 'media', 'trading-icon.svg'),\n            capabilities: [\n                'Trading Strategy Development',\n                'RON Strategy Implementation',\n                'Backtesting Frameworks',\n                'Risk Management',\n                'Portfolio Optimization',\n                'Market Analysis'\n            ],\n            commands: [\n                { name: 'strategy', description: 'Develop and implement trading strategies', handler: 'handleStrategyCommand' },\n                { name: 'backtest', description: 'Create backtesting and validation systems', handler: 'handleBacktestCommand' },\n                { name: 'risk', description: 'Implement risk management and portfolio optimization', handler: 'handleRiskCommand' }\n            ]\n        };\n\n        super(config, context, dispatcher);\n        this.anthropicService = new AnthropicService();\n        this.claudeCodeService = getClaudeCodeService();\n    }\n\n    protected async handleRequest(\n        request: vscode.ChatRequest,\n        context: vscode.ChatContext,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        const validationResult = await this.validateServiceConfig(stream);\n        if (!validationResult) {\n            return;\n        }\n\n        const command = request.command;\n        const prompt = request.prompt;\n\n        this.log(`Processing ${command ? `/${command}` : 'general'} trading request: ${prompt.substring(0, 100)}...`);\n\n        if (command) {\n            await this.handleCommand(command, prompt, stream, token);\n        } else {\n            await this.handleGeneralTradingRequest(prompt, stream, token);\n        }\n    }\n\n    protected async processWorkflowStep(\n        step: WorkflowStep,\n        request: TaskRequest,\n        previousResults: TaskResult[]\n    ): Promise<TaskResult> {\n        \n        const context = await this.getWorkspaceContext();\n        \n        let systemPrompt = '';\n        let userPrompt = '';\n\n        switch (step.id) {\n            case 'strategy_design':\n                systemPrompt = this.getStrategyDesignSystemPrompt();\n                userPrompt = `Design a trading strategy for: ${request.prompt}\\n\\nWorkspace Context:\\n${context}`;\n                break;\n                \n            case 'backtest':\n                systemPrompt = this.getBacktestSystemPrompt();\n                userPrompt = `Create backtesting framework for: ${request.prompt}\\n\\nStrategy Design:\\n${this.extractPreviousContent(previousResults)}`;\n                break;\n                \n            case 'risk_analysis':\n                systemPrompt = this.getRiskAnalysisSystemPrompt();\n                userPrompt = `Analyze risk management for: ${request.prompt}\\n\\nContext:\\n${context}`;\n                break;\n                \n            case 'strategy_validation':\n                systemPrompt = this.getValidationSystemPrompt();\n                userPrompt = `Validate trading strategy: ${request.prompt}\\n\\nImplementation:\\n${this.extractPreviousContent(previousResults)}`;\n                break;\n                \n            default:\n                systemPrompt = this.getGeneralSystemPrompt();\n                userPrompt = `${request.prompt}\\n\\nContext:\\n${context}`;\n        }\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            return {\n                status: 'success',\n                content: response,\n                metadata: { \n                    step: step.id,\n                    agent: 'tradestrat',\n                    model: 'claude-3.5-sonnet'\n                }\n            };\n\n        } catch (error) {\n            throw new Error(`Failed to process ${step.id}: ${(error as any).message}`);\n        }\n    }\n\n    // Command Handlers\n\n    private async handleStrategyCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('📈 Developing trading strategy...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getStrategyDesignSystemPrompt();\n        const userPrompt = `Develop a comprehensive trading strategy for: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown(response);\n\n            // Extract strategy components for implementation\n            const pythonCode = this.extractPythonCode(response);\n            if (pythonCode) {\n                this.createActionButton(\n                    '⚡ Implement Strategy',\n                    'ki-autoagent.createFile',\n                    ['strategy.py', pythonCode],\n                    stream\n                );\n            }\n\n            // Offer backtesting\n            this.createActionButton(\n                '🧪 Create Backtest',\n                'ki-autoagent.createBacktest',\n                [prompt, response],\n                stream\n            );\n\n            // Offer risk analysis\n            this.createActionButton(\n                '⚠️ Analyze Risks',\n                'ki-autoagent.analyzeRisks',\n                [prompt, response],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Error developing strategy: ${(error as any).message}`);\n        }\n    }\n\n    private async handleBacktestCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('🧪 Creating backtesting framework...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getBacktestSystemPrompt();\n        const userPrompt = `Create a comprehensive backtesting framework for: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown(response);\n\n            // Extract backtesting code\n            const backtestCode = this.extractPythonCode(response);\n            if (backtestCode) {\n                this.createActionButton(\n                    '📊 Create Backtest Framework',\n                    'ki-autoagent.createFile',\n                    ['backtest_engine.py', backtestCode],\n                    stream\n                );\n            }\n\n            // Offer to create test data\n            this.createActionButton(\n                '📈 Generate Test Data',\n                'ki-autoagent.generateTestData',\n                [prompt],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Error creating backtesting framework: ${(error as any).message}`);\n        }\n    }\n\n    private async handleRiskCommand(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('⚠️ Implementing risk management...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getRiskManagementSystemPrompt();\n        const userPrompt = `Implement comprehensive risk management for: ${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown(response);\n\n            // Extract risk management code\n            const riskCode = this.extractPythonCode(response);\n            if (riskCode) {\n                this.createActionButton(\n                    '🛡️ Implement Risk Management',\n                    'ki-autoagent.createFile',\n                    ['risk_manager.py', riskCode],\n                    stream\n                );\n            }\n\n            // Offer portfolio optimization\n            this.createActionButton(\n                '📊 Optimize Portfolio',\n                'ki-autoagent.optimizePortfolio',\n                [prompt, response],\n                stream\n            );\n\n        } catch (error) {\n            stream.markdown(`❌ Error implementing risk management: ${(error as any).message}`);\n        }\n    }\n\n    private async handleGeneralTradingRequest(\n        prompt: string,\n        stream: vscode.ChatResponseStream,\n        token: vscode.CancellationToken\n    ): Promise<void> {\n        \n        stream.progress('💹 Processing trading request...');\n        \n        const context = await this.getWorkspaceContext();\n        const systemPrompt = this.getGeneralSystemPrompt();\n        const userPrompt = `${prompt}\\n\\nWorkspace Context:\\n${context}`;\n\n        try {\n            const claudeService = await this.getClaudeService();\n            const response = await claudeService.chat([\n                { role: 'system', content: systemPrompt },\n                { role: 'user', content: userPrompt }\n            ]);\n\n            stream.markdown(response);\n\n            // Detect if this is RON strategy related\n            if (prompt.toLowerCase().includes('ron') || response.toLowerCase().includes('ron strategy')) {\n                this.createActionButton(\n                    '🎯 Implement RON Strategy',\n                    'ki-autoagent.implementRON',\n                    [response],\n                    stream\n                );\n            }\n\n            // Auto-detect code for implementation\n            const tradingCode = this.extractPythonCode(response);\n            if (tradingCode) {\n                this.createActionButton(\n                    '⚡ Implement Code',\n                    'ki-autoagent.createFile',\n                    ['trading_implementation.py', tradingCode],\n                    stream\n                );\n            }\n\n        } catch (error) {\n            stream.markdown(`❌ Error processing trading request: ${(error as any).message}`);\n        }\n    }\n\n    // System Prompts\n\n    private getGeneralSystemPrompt(): string {\n        return `You are TradeStrat, an expert trading strategy developer and quantitative analyst. You specialize in:\n\n- Trading strategy design and implementation\n- Algorithmic trading systems\n- Risk management and portfolio optimization\n- Backtesting and performance analysis\n- Market microstructure and execution\n- RON (Reversal of Numbers) strategy implementation\n- Python-based trading systems (pandas, numpy, streamlit, yfinance)\n\nKey principles:\n1. Always prioritize risk management\n2. Implement robust backtesting before live trading\n3. Focus on statistical significance and edge detection\n4. Consider market conditions and regime changes\n5. Provide clear performance metrics and validation\n\nFormat your responses with detailed explanations, working code, and practical implementation guidance.\n\n${this.getSystemContextPrompt()}`;\n    }\n\n    private getStrategyDesignSystemPrompt(): string {\n        return `You are TradeStrat designing a comprehensive trading strategy. Structure your response as:\n\n## Trading Strategy Design\n\n### 1. Strategy Overview\n- Strategy name and concept\n- Market conditions and timeframes\n- Expected holding periods\n- Target assets/markets\n\n### 2. Entry Rules\n- Precise entry conditions\n- Technical indicators required\n- Fundamental filters (if any)\n- Signal confirmation methods\n\n### 3. Exit Rules\n- Profit-taking strategies\n- Stop-loss implementation\n- Time-based exits\n- Market condition exits\n\n### 4. Risk Management\n- Position sizing methodology\n- Maximum drawdown limits\n- Correlation and diversification\n- Portfolio-level risk controls\n\n### 5. Implementation Details\n- Required data sources\n- Calculation methodology\n- Code structure and modules\n- Performance monitoring\n\n### 6. Backtesting Framework\n- Historical data requirements\n- Performance metrics to track\n- Stress testing scenarios\n- Out-of-sample validation\n\nProvide complete Python implementation with pandas/numpy for data handling.\n\n${this.getSystemContextPrompt()}`;\n    }\n\n    private getBacktestSystemPrompt(): string {\n        return `You are TradeStrat creating a robust backtesting framework. Include:\n\n## Backtesting Framework Design\n\n### 1. Data Management\n- Historical data ingestion\n- Data cleaning and validation\n- Corporate actions handling\n- Survivorship bias considerations\n\n### 2. Signal Generation\n- Strategy logic implementation\n- Signal timing and execution\n- Lookahead bias prevention\n- Realistic latency modeling\n\n### 3. Execution Simulation\n- Order execution modeling\n- Slippage and transaction costs\n- Market impact considerations\n- Partial fill handling\n\n### 4. Performance Metrics\n- Return calculations\n- Risk-adjusted metrics (Sharpe, Sortino)\n- Drawdown analysis\n- Trade-level statistics\n\n### 5. Visualization and Reporting\n- Equity curve plotting\n- Trade analysis charts\n- Performance attribution\n- Stress test results\n\n### 6. Validation Techniques\n- Out-of-sample testing\n- Walk-forward analysis\n- Monte Carlo simulation\n- Bootstrap analysis\n\nProvide production-ready Python code with proper error handling and logging.\n\n${this.getSystemContextPrompt()}`;\n    }\n\n    private getRiskManagementSystemPrompt(): string {\n        return `You are TradeStrat implementing comprehensive risk management. Cover:\n\n## Risk Management Framework\n\n### 1. Position Sizing\n- Kelly criterion implementation\n- Volatility-based sizing\n- Maximum position limits\n- Correlation adjustments\n\n### 2. Portfolio Risk Controls\n- Value-at-Risk (VaR) calculation\n- Expected Shortfall (ES)\n- Maximum drawdown limits\n- Sector/asset concentration limits\n\n### 3. Dynamic Risk Adjustment\n- Volatility regime detection\n- Risk scaling mechanisms\n- Market stress indicators\n- Emergency stop procedures\n\n### 4. Monitoring and Alerts\n- Real-time risk metrics\n- Breach notifications\n- Performance tracking\n- Risk attribution analysis\n\n### 5. Stress Testing\n- Historical scenario analysis\n- Monte Carlo stress tests\n- Tail risk evaluation\n- Correlation breakdown scenarios\n\n### 6. Implementation Tools\n- Risk calculation engines\n- Alert systems\n- Reporting dashboards\n- Integration with trading systems\n\nFocus on practical, implementable solutions with clear mathematical foundations.\n\n${this.getSystemContextPrompt()}`;\n    }\n\n    private getValidationSystemPrompt(): string {\n        return `You are TradeStrat validating trading strategies for production readiness. Analyze:\n\n## Strategy Validation Checklist\n\n### 1. Statistical Validation\n- Statistical significance of returns\n- Consistency across time periods\n- Performance in different market regimes\n- Correlation with market factors\n\n### 2. Implementation Validation\n- Code correctness and efficiency\n- Data quality and completeness\n- Signal generation accuracy\n- Execution logic verification\n\n### 3. Risk Validation\n- Maximum drawdown analysis\n- Tail risk assessment\n- Stress test results\n- Portfolio-level impact\n\n### 4. Operational Validation\n- System reliability and uptime\n- Error handling and recovery\n- Monitoring and alerting\n- Compliance requirements\n\n### 5. Performance Validation\n- Live vs backtest performance\n- Transaction cost impact\n- Capacity constraints\n- Scalability considerations\n\nProvide detailed assessment with specific recommendations for improvement.\n\n${this.getSystemContextPrompt()}`;\n    }\n\n    private getRiskAnalysisSystemPrompt(): string {\n        return this.getRiskManagementSystemPrompt();\n    }\n\n    // Service Configuration Methods\n\n    private async validateServiceConfig(stream?: vscode.ChatResponseStream): Promise<boolean> {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent');\n        const serviceMode = config.get<string>('claude.serviceMode', 'claude-code');\n\n        if (serviceMode === 'api') {\n            if (!config.get<string>('anthropic.apiKey')) {\n                if (stream) {\n                    stream.markdown('❌ **Anthropic API key not configured**\\n\\nPlease set your API key in VS Code settings:\\n- Go to Settings\\n- Search for \"KI AutoAgent\"\\n- Set your Anthropic API key');\n                }\n                return false;\n            }\n        } else if (serviceMode === 'claude-code') {\n            const isClaudeCodeAvailable = await this.claudeCodeService.isAvailable();\n            if (!isClaudeCodeAvailable) {\n                if (stream) {\n                    stream.markdown(`❌ **Claude Code CLI not available**\\n\\n**To install:**\\n\\`\\`\\`bash\\nnpm install -g @anthropic-ai/claude-code\\n\\`\\`\\`\\n\\nOr configure your Anthropic API key in VS Code settings.`);\n                }\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private async getClaudeService(): Promise<{ chat: (messages: any[]) => Promise<string> }> {\n        const config = vscode.workspace.getConfiguration('kiAutoAgent');\n        const serviceMode = config.get<string>('claude.serviceMode', 'claude-code');\n\n        console.log(`[TradeStratAgent] Using service mode: ${serviceMode}`);\n\n        if (serviceMode === 'claude-code') {\n            const isAvailable = await this.claudeCodeService.isAvailable();\n            if (isAvailable) {\n                console.log('[TradeStratAgent] Using Claude Code CLI');\n                return {\n                    chat: async (messages: any[]) => {\n                        // Extract the main user message content\n                        const userMessage = messages.find(m => m.role === 'user')?.content || '';\n                        const systemMessage = messages.find(m => m.role === 'system')?.content || '';\n                        const fullPrompt = systemMessage ? `${systemMessage}\\n\\n${userMessage}` : userMessage;\n                        \n                        const response = await this.claudeCodeService.sendMessage(fullPrompt, {\n                            model: 'sonnet',\n                            temperature: 0.7\n                        });\n                        return response.content;\n                    }\n                };\n            } else {\n                console.log('[TradeStratAgent] Claude Code CLI not available, falling back to Anthropic API');\n            }\n        }\n        \n        // Fall back to Anthropic API\n        console.log('[TradeStratAgent] Using Anthropic API');\n        return {\n            chat: async (messages: any[]) => {\n                return await this.anthropicService.chat(messages);\n            }\n        };\n    }\n\n    // Helper Methods\n\n    private extractPythonCode(content: string): string {\n        const pythonBlockRegex = /```python\\n([\\s\\S]*?)```/g;\n        const match = pythonBlockRegex.exec(content);\n        return match ? match[1] : '';\n    }\n\n    private extractPreviousContent(previousResults: TaskResult[]): string {\n        return previousResults\n            .map(result => result.content)\n            .join('\\n\\n---\\n\\n')\n            .substring(0, 2000); // Limit context size\n    }\n}","module.exports = require(\"fs/promises\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["constructor","dispatcher","config","isAnalyzing","analysisSession","continuousLearningTimer","this","systemMemory","SystemMemoryStore","memoryConfig","sharedContext","getSharedContext","communicationBus","getCommunicationBus","workflowEngine","WorkflowEngine","outputChannel","vscode","window","createOutputChannel","continuousLearning","startContinuousLearning","initializeSystemUnderstanding","Error","generateSessionId","show","appendLine","existingKnowledge","getSystemKnowledge","shouldReanalyze","createAnalysisResult","session","startCollaboration","task","goal","id","architecture","analyzeArchitecture","functions","analyzeFunctions","learnings","extractPatterns","metadata","gatherMetadata","analyzeQuality","knowledge","storeSystemKnowledge","shareKnowledge","generateDocumentation","resultsMap","Map","set","completeCollaboration","request","prompt","analysisDepth","result","executeWorkflow","agent","description","status","content","parseArchitectureResult","Object","keys","components","length","patterns","layers","inventory","parseFunctionResult","totalFunctions","values","byModule","flat","hotspots","callGraph","nodes","successPatterns","failurePatterns","userPreferences","optimizations","codePatterns","workflowPatterns","pattern","quality","patternExtractionThreshold","push","name","context","solution","instances","implementation","occurrences","frequency","successRate","lastUsed","Date","applicableScenarios","map","i","location","benefits","examples","code","effectiveness","functionPatterns","extractFunctionPatterns","identifyOptimizations","functionGroups","func","key","category","parameters","async","has","get","entries","paramCount","isAsync","split","template","generateFunctionTemplate","p","type","example","usage","f","path","timestamp","success","modifications","tags","metrics","mostComplex","complexity","cyclomatic","before","signature","after","improvement","Math","min","applicability","tradeoffs","group","duplicates","similarity","workspace","workspaceFolders","files","findFiles","languages","Set","file","ext","pop","add","mapExtensionToLanguage","version","lastFullAnalysis","lastUpdate","totalFiles","totalComponents","language","Array","from","frameworks","detectFrameworks","testCoverage","lines","branches","statements","buildSystem","detectBuildSystem","repository","url","branch","lastCommit","contributors","join","JSON","stringify","insights","recommendations","risks","opportunities","parseQualityResult","setInterval","continuousLearningCycle","updateInterval","stopContinuousLearning","clearInterval","changes","detectChanges","deltaKnowledge","performDeltaAnalysis","extractPatternsFromChanges","updateArchitecture","updateFunctionInventory","shareKnowledgeUpdate","error","lastAnalysis","fs","stat","mtime","getTime","updates","c","fsPath","architectResult","functionResult","change","component","findComponent","preference","confidence","lastObserved","trackUserPreference","updateContext","patternCount","broadcast","MessageType","STATUS_UPDATE","event","update","duration","parse","dependencies","edges","cycles","totalDependencies","maxDepth","avgDependenciesPerComponent","circularDependencies","stabilityIndex","modules","maintainability","reliability","security","performance","testability","documentation","overall","trend","issues","byCategory","byComplexity","simple","moderate","complex","critical","clusters","entryPoints","hotPaths","total","averageComplexity","mostCalled","unused","params","returnType","filename","includes","now","random","toString","substr","getStatistics","memoryStats","sessionId","ArchitectAgent","ChatAgent","super","participantId","fullName","model","iconPath","Uri","joinPath","extensionUri","capabilities","commands","handler","openAIService","OpenAIService","handleRequest","stream","token","validateApiConfig","markdown","command","log","substring","handleCommand","handleGeneralArchitectureRequest","processWorkflowStep","step","previousResults","getWorkspaceContext","systemPrompt","userPrompt","getAnalyzeSystemPrompt","getDesignSystemPrompt","extractPreviousContent","getGeneralSystemPrompt","chat","role","message","handleDesignCommand","progress","response","createActionButton","handleAnalyzeCommand","workspaceFiles","getProjectStructure","handlePlanCommand","getPlanSystemPrompt","getSystemContextPrompt","slice","options","memories","embeddings","architecturePatterns","learningEntries","memoryIndex","agentMemories","maxMemories","similarityThreshold","clusteringEnabled","patternExtractionEnabled","autoForget","forgetThreshold","eventBus","EventEmitter","initializeIndexes","MemoryType","forEach","store","agentId","generateMemoryId","embedding","generateEmbedding","memory","accessCount","lastAccessed","importance","calculateImportance","size","forgetOldMemories","updateClusters","emit","search","query","k","minSimilarity","queryEmbedding","candidateMemories","typeMemories","filter","m","agentMems","results","cosineSimilarity","relevance","calculateRelevance","entry","sort","a","b","delete","storeCodePattern","getRelevantCodePatterns","relevant","scoreA","storeArchitecturePattern","getRelevantArchitecturePatterns","useCase","useCases","some","uc","toLowerCase","storeLearning","learning","getRelevantLearnings","limit","keywords","keyword","impact","groupSimilarMemories","patternEntry","extractedAt","groups","processed","similar","findSimilarMemories","extractPatternSignature","s","threshold","other","floor","centroids","initializeCentroids","iterations","changed","newClusters","centroid","members","coherence","nearestIdx","maxSim","idx","sim","cluster","newCentroid","calculateCentroid","vectorsEqual","calculateClusterCoherence","memoriesToForget","age","maxToForget","text","fill","charCodeAt","magnitude","sqrt","reduce","sum","val","dotProduct","magnitudeA","magnitudeB","PROCEDURAL","SEMANTIC","EPISODIC","dim","member","totalSimilarity","comparisons","j","every","abs","getStats","stats","totalMemories","byType","byAgent","averageAccessCount","mostAccessedMemories","memoryGrowthRate","clusterCount","ids","totalAccess","memoriesByAccess","exportData","import","data","importData","clear","rebuildIndexes","count","CodeSmithAgent","anthropicService","AnthropicService","claudeCodeService","getClaudeCodeService","validateServiceConfig","handleGeneralImplementationRequest","executeStep","showDebug","hasStreamingCallback","onPartialResponse","conversationHistory","globalContext","index","agentName","stepId","getImplementationSystemPrompt","getTestingSystemPrompt","getOptimizationSystemPrompt","claudeService","getClaudeService","responseContent","responseMetadata","contentLength","handleImplementCommand","codeBlocks","extractCodeBlocks","block","handleOptimizeCommand","codeToOptimize","activeTextEditor","document","fileName","languageId","getText","optimizedCode","extractMainCodeBlock","handleTestCommand","testFiles","extractTestFiles","testFile","handleFixCommand","handleDebugCommand","handleRefactorCommand","handleModernizeCommand","getConfiguration","serviceMode","isAvailable","showInfo","messages","userMessage","find","systemMessage","fullPrompt","sendStreamingMessage","temperature","sendMessage","showFallbackMode","codeBlockRegex","blocks","match","exec","inferFilename","classMatch","AgentRegistry","getInstance","instance","getRegisteredAgents","AGENT_CAPABILITIES","capability","getAgentDisplayName","specialization","canHandle","instructionSet","getAgentInfo","suggestAgentForTask","taskDescription","lowerTask","bestMatch","score","getAgentListDescription","getTaskDelegationInfo","currentAgentId","currentAgent","otherAgents","delegationInfo","apiKey","baseURL","maxTokens","conversationMessages","requestBody","max_tokens","system","msg","fetch","method","headers","body","ok","errorData","json","catch","statusText","streamChat","onChunk","reader","getReader","decoder","TextDecoder","done","value","read","decode","line","trim","startsWith","parsed","delta","validateApiKey","testConnection","DocuBotAgent","handleGeneralDocumentationRequest","documentationContent","generateCodeDocumentation","generateReadme","generateApiDocs","generateGeneralDocs","handleReadmeCommand","workspaceFolder","projectInfo","analyzeProjectStructure","uri","readmeContent","createReadme","handleApiCommand","apiInfo","analyzeApiEndpoints","apiDocs","createApiDocumentation","handleGuideCommand","guide","createUserGuide","handleCommentsCommand","editor","documentedCode","addDocumentationComments","handleChangelogCommand","gitLog","getGitLog","changelog","createChangelog","createGeneralDocumentation","handleUpdateInstructionsCommand","agentMatch","currentInstructions","readInstructionFile","improvedInstructions","improveInstructions","handleViewInstructionsCommand","instructions","workspacePath","basename","hasPackageJson","scripts","mainFiles","packageJsonPath","packageJson","readFile","endpoints","baseUrl","authentication","additionalContext","cp","Promise","resolve","reject","stdout","stderr","buildContextFromResults","r","instructionPath","extensionPath","writeInstructionFile","writeFile","userContext","agents","projectTypes","intentPatterns","systemKnowledge","contextManager","ConversationContextManager","maxArchitectureVersions","maxPatternHistory","autoCompaction","persistToDisk","memoryPath","loadSystemKnowledge","initializeProjectTypes","initializeIntentPatterns","console","processRequest","workspaceContext","workflow","projectType","mode","thinkingMode","executeLayeredThinking","intent","detectIntent","detectProjectType","createWorkflow","lowerPrompt","isQuestion","test","isImplementation","matchesPatterns","workspaceRoots","workspaceRoot","packageJsonUri","packageJsonContent","requirementsUri","requirements","filenames","projectDef","w","thoughts","architectAgent","architectThought","deepThink","codesmithAgent","codesmithThought","reviewerAgent","reviewerThought","toISOString","finalResult","suggestions","references","stepIndex","indexOf","possibleNames","possibleName","errorMsg","warn","recentHistory","getFormattedContext","applicablePatterns","getApplicablePatterns","enrichedRequest","stepResult","addEntry","input","output","preview","errorMessage","activeEditor","openDocuments","textDocuments","selectedText","currentFile","selection","isEmpty","registerAgent","testRetrieve","getAgentStats","qualityGates","primaryAgent","triggerSystemAnalysis","SystemIntelligenceWorkflow","autoAnalyze","AVAILABLE_MODELS","provider","tier","strengths","costPerMillion","DEFAULT_AGENT_MODELS","OpusArbitratorAgent","handleGeneralArbitrationRequest","getConflictResolutionPrompt","getDeepEvaluationPrompt","getFinalVerdictPrompt","getSupremeJudgmentPrompt","handleJudgeCommand","handleResolveCommand","handleEvaluateCommand","handleVerdictCommand","getSlashCommands","architectureHistory","functionHistory","patternCache","isDirty","memoryManager","MemoryManager","loadFromDisk","generateVersion","extractAndStorePatterns","compactHistory","saveToDisk","addSuccessPattern","findSimilarPattern","existing","addFailurePattern","lastSeen","severity","identifier","findFunction","found","getComplexComponents","getHotspots","h","severityOrder","high","medium","low","failures","applicable","getUserPreferences","preferences","getArchitectureEvolution","localeCompare","_","arch","calculateArchitectureDiff","fromVersion","added","modified","removed","currentComponents","oldComponents","lastModified","predictNextChanges","predictions","frequentlyModified","reason","recentPatterns","frequentFunctions","modificationFrequency","function","versions","cutoff","setDate","getDate","getFullYear","getMonth","padStart","getHours","getMinutes","getSeconds","totalPatterns","architectureVersions","memoryUsage","process","heapUsed","toLocaleString","configManager","AgentConfigurationManager","initialize","VSCodeMasterDispatcher","ChatWidget","versionWatcher","AutoVersioning","startWatching","subscriptions","commandsToRegister","MultiAgentChatPanel","createOrShow","showInformationMessage","cmd","disposable","registerCommand","agentCreationErrors","OrchestratorAgent","TradeStratAgent","ResearchAgent","ReviewerGPTAgent","FixerBotAgent","registrationErrors","participant","createChatParticipant","createHandler","dispatcherAgentId","registeredAgents","createFileCommand","showErrorMessage","fileUri","Buffer","openTextDocument","showTextDocument","insertAtCursorCommand","position","active","edit","editBuilder","insert","applySuggestionCommand","suggestionData","executeCommand","testClaudeCommand","testResult","showAgentStatsCommand","statsContent","agentStats","totalExecutions","averageResponseTime","lastExecution","toFixed","formatAgentStats","showHelpCommand","helpContent","generateHelpContent","planImplementationCommand","executeWorkflowCommand","configureAgentModelsCommand","availableModels","getAvailableModels","agentIds","currentModel","getAgentModel","modelOptions","modelId","label","detail","selected","showQuickPick","title","placeHolder","ignoreFocusOut","setAgentModel","showAgentPerformanceCommand","performanceReport","getAgentMetrics","charAt","toUpperCase","successfulExecutions","currentStreak","bestStreak","openConfigDirectoryCommand","configPath","forceNewWindow","showWarningMessage","registerCommands","showWelcomeMessage","extension","packageJSON","stack","activeWorkflows","registerCommunicationHandlers","buildContextWithMemory","chatHistory","history","analyzeTaskComplexity","handleSimpleTask","handleModerateTask","handleComplexTask","similarTasks","complexities","t","Boolean","counts","acc","complexityIndicators","level","node","addNode","executeWorkflowWithProgress","displayResults","storeTaskMemory","handleDirectResponse","decomposition","decomposeTask","subtasks","subtask","dep","addEdge","to","plan","createExecutionPlan","displayExecutionPlan","requiredAgents","parallelizable","estimatedDuration","groupParallelTasks","parallelNode","children","taskNode","condition","createCondition","undefined","displayAdvancedExecutionPlan","executeComplexWorkflow","displayComplexResults","storeComplexTaskMemory","createSimpleDecomposition","mainGoal","priority","expectedOutput","sorted","parallelGroup","workflowId","on","getContext","execute","stage","stageId","updateCollaborationContext","requestAgentHelp","createCheckpoint","checkpoints","lastCheckpoint","restoreFromCheckpoint","nodeId","helpResponse","requestHelp","adjustWorkflow","suggestion","stages","parallelism","parallel","criticalPath","prevNode","currNode","successes","generateInsights","insight","collaborationStats","totalMessages","activeSessions","mostUsedAgent","longRunning","taskMemory","taskId","outcome","determineOverallStatus","calculateQuality","improvements","suggestImprovements","calculateTotalDuration","agentsInvolved","extractAgents","lessonsLearned","extractLessons","st","assignedAgent","successfulSubtasks","successfulApproach","collaborations","fromAgent","toAgent","fromEntries","rate","totalQuality","lessons","conditionStr","register","messageTypes","CONFLICT","ERROR","handleAgentMessage","resolveConflict","updateWorkflowStatus","acknowledged","handleAgentError","conflict","send","requiresResponse","routing","recovery","attemptRecovery","action","escalate","similarErrors","alternativeAgent","activeAgents","getActiveAgents","classificationPrompt","getSystemAgentContext","classificationResponse","classification","requestType","shouldAnswer","reasoning","answerPrompt","suggestedAgent","taskStatus","compileWorkflowResults","sections","docuBotActive","lastVersion","loadLastVersion","existsSync","readFileSync","onCodeChange","endsWith","newVersion","calculateVersion","updatePackageVersion","updateChangelog","triggerDocuBot","then","commits","execSync","cwd","major","minor","patch","Number","writeFileSync","changelogPath","claudePath","date","toLocaleDateString","day","month","year","changeEntry","updatedChangelog","replace","updatedClaude","docuWorkflow","docuRequest","changedFiles","watcher","createFileSystemWatcher","debounceTimer","handleChanges","onDidChange","clearTimeout","setTimeout","onDidCreate","module","exports","require","ResponseType","responseHistory","maxHistorySize","chatConfig","getDefaultChatConfig","showEmojis","showTimestamps","showDetailedResponses","logLevel","responseFormat","fallbackMode","unifiedResponse","responseType","details","logToHistory","responseParts","emoji","getEmojiForType","toLocaleTimeString","hour12","hour","minute","second","getAgentName","formatDetails","formattedResponse","logResponse","INITIALIZATION","EXECUTING","SUCCESS","WARNING","FALLBACK","INFO","TOOL_USE","DEBUG","shouldLog","levels","configuredLevel","showInitialization","additionalInfo","selectedModel","getCapabilities","assign","showExecutionStart","contextKeys","conversationHistorySize","showSuccess","showWarning","showError","String","fallbackAction","showToolUse","toolName","tool","getResponseHistory","getFormattedHistory","clearHistory","exportHistory","updateChatConfig","getChatConfig","runningProcesses","testCommands","startCommands","ClaudeCodeService","handleGeneralFixRequest","fixResult","fixBugs","optimizePerformance","refactorCode","resolveErrors","performGeneralFix","bugAnalysis","analyzeBugs","report","fixedCode","debugContext","debugAnalysis","performDebugAnalysis","optimization","optimizeCode","refactoring","refactorCodeStructure","refactoredCode","modernization","modernizeLegacyCode","modernCode","fix","extractCodeFromResponse","extractImprovements","extractChanges","RegExp","matches","improvementsMatch","changesMatch","testLive","projectPath","appProcess","runApplication","waitForAppStart","validations","validateApplication","testResults","runTests","analysis","analyzeResults","killProcess","pid","errors","basePath","child","child_process","spawn","shell","env","NODE_ENV","processKey","timeout","httpCheck","checkHttpEndpoint","passed","apiCheck","https","http","res","statusCode","exitCode","appOutput","v","e","kill","generateFixSuggestions","AgentCommunicationBus","handlers","messageQueue","processingQueue","collaborationSessions","messageHistory","responseCallbacks","setMaxListeners","initializeStats","startQueueProcessor","unregister","fullMessage","generateMessageId","updateStats","processQueue","messageId","timer","BROADCAST","participants","leader","startTime","all","COLLABORATION_REQUEST","conversationId","collaborationMessage","NOTIFICATION","recipients","endTime","problem","preferredAgents","HELP_REQUEST","responses","requestTime","RESPONSE","replyTo","relevantAgents","KNOWLEDGE_SHARE","requestValidation","validator","VALIDATION_REQUEST","reportConflict","reportingAgent","conflictingAgents","issue","reportedBy","shift","deliverMessage","failedMessages","retryCount","determineRecipients","recipientId","callback","isArray","messagesByType","messagesByAgent","typeCount","agentCount","totalResponseTime","responseCount","originalMsg","getMessageHistory","getActiveSessions","configuration","models","getDefaultLearningConfig","determineConfigPath","ensureConfigStructure","loadConfiguration","loadInstructionSets","createDefaultModelConfig","lastUpdated","saveModelConfiguration","getAgentInstructions","loadInstructionFile","updateAgentInstructions","newContent","trigger","adaptation","oldContent","modifiedBy","adaptationHistory","saveInstructionFile","recordAgentPerformance","responseTime","createDefaultMetrics","max","failedExecutions","totalTime","enabled","checkForLearningOpportunity","saveMetrics","getLearningConfig","updateLearningConfig","saveLearningConfig","homeDir","HOME","USERPROFILE","directories","dir","mkdir","recursive","loadModelConfiguration","loadLearningConfiguration","loadMetrics","configFile","configs","defaultModel","copyDefaultInstructionFile","instructionFile","sourcePath","targetPath","displayName","performanceScore","adaptationThreshold","maxAdaptationsPerDay","confidenceLevel","learningModes","successBasedLearning","failureBasedLearning","patternRecognition","contextualAdaptation","metricsFile","metricsArray","today","toDateString","choices","currentProcess","seenToolsInSession","pendingTools","toolResults","toolGroupBuffer","lastToolName","hasStartedTextOutput","sendStreamJsonMessage","sendSimpleMessage","args","claudeProcess","platform","stdio","errorOutput","stdin","write","end","hasReceivedText","toolUseDetected","buffer","jsonData","processJsonStreamData","meta","eventType","onMetadata","signal","FORCE_COLOR","NO_COLOR","rawOutput","chunk","cleanToolMarkers","subtype","tools","session_id","flushToolGroup","tool_use_id","pendingTool","toolInBuffer","partial_json","content_block","inputTokens","input_tokens","outputTokens","output_tokens","cacheCreationInputTokens","cache_creation_input_tokens","cacheReadInputTokens","cache_read_input_tokens","stop_reason","stopReason","resultMetadata","resultType","total_cost_usd","totalCostUsd","duration_ms","durationMs","duration_api_ms","durationApiMs","num_turns","numTurns","is_error","isError","error2","stdout2","stderr2","verError","verStdout","cancel","groupedMessage","formatToolMessage","formatToolDetails","todos","readPath","file_path","readDetails","offset","writePath","editPath","editDetails","edits","subagent_type","dispose","webSearchService","WebSearchService","isWebAccessAvailable","getSearchEngineStatus","engine","configured","handleGeneralResearchRequest","searchQuery","analysisPrompt","searchResults","analyzeSearchResults","resultsCount","handleSearchCommand","totalResults","snippet","handleDocumentationCommand","techQuery","docResults","handleMarketCommand","marketQuery","handleCompareCommand","compareQuery","resultsContent","unreadCount","lastMessage","statusBarItem","createStatusBarItem","StatusBarAlignment","Right","updateStatusBar","toggleCommand","toggleChat","quickChatCommand","showQuickChat","clearUnreadCommand","clearUnreadCount","backgroundColor","ThemeColor","pulseInterval","startPulseAnimation","stopPulseAnimation","tooltip","MarkdownString","truncateMessage","isPulsing","panel","showInputBox","addMessage","updateUnreadCount","incrementUnread","setLastMessage","maxLength","showNotification","currentPanel","SharedContextManager","contextHistory","subscribers","locks","initializeContext","lockHolder","notifySubscribers","contextObj","getContextWithHistory","subscribe","subscriber","unsubscribe","promises","subscriberList","err","acquireLock","releaseLock","mergeContext","resolver","grouped","keyUpdates","resolvedValue","resolved","createSnapshot","restoreSnapshot","snapshot","clearContext","recentTime","getCollaborationMetrics","totalUpdates","lockedKeys","agentUpdates","agentActivity","searchEngine","maxResults","searchWithPerplexity","searchWithTavily","searchWithSERP","searchWithCustom","return_citations","citations","citation","api_key","search_depth","include_answer","include_images","include_raw_content","max_results","raw_content","URL","searchParams","append","organic_results","link","endpoint","total_results","handleGeneralReviewRequest","reviewResult","foundBugs","performCodeReview","performSecurityCheck","performPerformanceReview","performGeneralReview","requiresCodeSmithFix","handleReviewCommand","review","reviewCode","handleBugsCommand","bugReport","findCommonBugs","debugCommand","terminal","createTerminal","sendText","handleTestUICommand","uiTests","handleSecurityCommand","getWorkspaceCode","securityReport","performSecurityScan","handlePerformanceCommand","analyzePerformance","handleStandardsCommand","standardsReport","checkCodingStandards","testReport","reviewTestCoverage","codeMatch","handleArchitectureReviewCommand","conversationContext","architectureReview","validateArchitectureUnderstanding","workflows","executors","templates","initializeTemplates","generateWorkflowId","startNode","endNodes","state","currentNodes","completedNodes","failedNodes","applyTemplate","edge","fromNode","toNode","sortedNodes","topologicalSort","groupIntoStages","findCriticalPath","estimateDuration","calculateParallelism","executor","WorkflowExecutor","pause","resume","checkpoint","generateCheckpointId","checkpointId","isNodeBeforeCheckpoint","adjustment","removeNode","modifyNode","rerouteEdges","rerouting","visited","visiting","visit","childId","unshift","nodeStage","depId","depStage","distances","previous","nodeDistance","childDistance","maxDistance","endNode","distance","current","n","parallelCounts","checkpointNodeId","findIndex","route","edgeIdx","newTo","nodeConfig","paused","cancelled","executeStage","executeNode","retries","maxRetries","retryPolicy","maxAttempts","executeTask","executeDecision","executeParallel","executeSequential","executeLoop","backoff","pow","backoffMultiplier","maxBackoffMs","attempt","decision","childNode","sequential","iteration","loop","column","ViewColumn","Two","_panel","reveal","_dispatcher","createWebviewPanel","enableScripts","retainContextWhenHidden","localResourceRoots","_disposables","_messages","_currentAgent","_currentMode","workflowSteps","_thinkingMode","_thinkingIntensity","_currentOperation","_isProcessing","_extensionUri","_contextManager","_update","onDidDispose","webview","onDidReceiveMessage","_handleWebviewMessage","onDidChangeViewState","visible","_restoreMessages","html","_getHtmlForWebview","styleResetUri","asWebviewUri","styleVSCodeUri","cacheBuster","styleChatUri","scriptUri","nonce","possible","getNonce","cspSource","_processUserMessage","_handleQuickAction","_handlePlanFirst","_cancelCurrentOperation","intensity","selectedAgent","postMessage","streamingMessageId","_addStreamingMessage","_updateStreamingMessage","_callAgentWithStreaming","_finalizeStreamingMessage","_processWorkflow","_addErrorMessage","_callAgent","taskRequest","_getWorkspaceContext","fullContent","partialContent","stepMatch","_addSystemMessage","cleanedContent","toolMatches","matchAll","toolContent","_addToolNotification","parts","finalContent","streamingMessage","isCollapsible","isStreaming","isToolNotification","contentToAdd","hasToolNotifications","needsNewBubble","fullMatch","_initWorkflowContainer","_updateWorkflowStep","parseInt","completionMatch","currentStep","_completeWorkflowStep","_createFinalResultBubble","thinkingMatch","thinkingContent","_addSystemNotification","toolMatch","resultMatch","toolId","_updateToolResult","newMessage","_isSpecialMessage","parentMessageId","isSystemNotification","cost","_addCompletionMessage","completionContent","completionMessage","isCompletionMessage","_buildMetadataInfo","metadataInfo","cacheCreation","cacheRead","agentMessage","_addAgentResponse","assistantMessage","postResult","relatedMessageId","toolMsgId","normalizedAgent","agentColor","_getAgentColor","agentEmoji","_getAgentEmoji","toolMessage","planPrompt","isPlanFirst","originalRequest","planningAgent","partial","confirmMessage","isPlan","stepData","finalMessage","isFinalResult","x","UnifiedChatMixin","successCount","handleError","commandHandler","methodName","showAvailableCommands","contextString","getTaskDelegationContext","registry","checkForTaskDelegation","agentInfo","renderCode","button","arguments","addFileReference","filePath","reference","getModelConfig","getMaxTokens","isLoggingEnabled","getRecentHistory","getAgentHistory","recent","getLastOutput","importHistory","imported","handleGeneralTradingRequest","getStrategyDesignSystemPrompt","getBacktestSystemPrompt","getRiskAnalysisSystemPrompt","getValidationSystemPrompt","handleStrategyCommand","pythonCode","extractPythonCode","handleBacktestCommand","backtestCode","handleRiskCommand","getRiskManagementSystemPrompt","riskCode","tradingCode","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}