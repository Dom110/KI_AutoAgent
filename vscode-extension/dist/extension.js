(()=>{"use strict";var e={63:function(e,t,n){var s,a=this&&this.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,a)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},s(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=s(e),i=0;i<n.length;i++)"default"!==n[i]&&a(t,e,n[i]);return o(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.ArchitectAgent=void 0;const r=i(n(398)),c=n(806),d=n(551);class l extends c.ChatAgent{constructor(e,t){super({participantId:"ki-autoagent.architect",name:"architect",fullName:"ArchitectGPT",description:"System Architecture & Design Expert powered by GPT-5",model:"gpt-5-2025-09-12",iconPath:r.Uri.joinPath(e.extensionUri,"media","openai-icon.svg"),capabilities:["System Design","Architecture Patterns","Tech Stack Planning","Scalability Analysis","Design Documentation"],commands:[{name:"design",description:"Create system architecture and design patterns",handler:"handleDesignCommand"},{name:"analyze",description:"Analyze existing codebase architecture",handler:"handleAnalyzeCommand"},{name:"plan",description:"Create development and deployment plans",handler:"handlePlanCommand"}]},e,t),this.openAIService=new d.OpenAIService}async handleRequest(e,t,n,s){if(!this.validateApiConfig())return void n.markdown("❌ OpenAI API key not configured. Please set it in VS Code settings.");const a=e.command,o=e.prompt;this.log(`Processing ${a?`/${a}`:"general"} request: ${o.substring(0,100)}...`),a?await this.handleCommand(a,o,n,s):await this.handleGeneralArchitectureRequest(o,n,s)}async processWorkflowStep(e,t,n){const s=await this.getWorkspaceContext();let a="",o="";switch(e.id){case"analyze":a=this.getAnalyzeSystemPrompt(),o=`Analyze the architecture requirements for: ${t.prompt}\n\nWorkspace Context:\n${s}`;break;case"design":a=this.getDesignSystemPrompt(),o=`Create a system architecture design for: ${t.prompt}\n\nPrevious Analysis:\n${this.extractPreviousContent(n)}`;break;default:a=this.getGeneralSystemPrompt(),o=`${t.prompt}\n\nContext:\n${s}`}try{return{status:"success",content:await this.openAIService.chat([{role:"system",content:a},{role:"user",content:o}]),metadata:{step:e.id,agent:"architect",model:"gpt-4o"}}}catch(t){throw new Error(`Failed to process ${e.id}: ${t.message}`)}}async handleDesignCommand(e,t,n){t.progress("🏗️ Analyzing requirements and creating system design...");const s=await this.getWorkspaceContext(),a=this.getDesignSystemPrompt(),o=`Create a comprehensive system architecture design for: ${e}\n\nWorkspace Context:\n${s}`;try{const n=await this.openAIService.chat([{role:"system",content:a},{role:"user",content:o}]);t.markdown(n),this.createActionButton("📄 Create Architecture Document","ki-autoagent.createFile",["ARCHITECTURE.md",n],t),this.createActionButton("⚡ Plan Implementation","ki-autoagent.planImplementation",[e,n],t)}catch(e){t.markdown(`❌ Error creating design: ${e.message}`)}}async handleAnalyzeCommand(e,t,n){t.progress("🔍 Analyzing existing codebase architecture...");const s=await this.getWorkspaceContext(),a=await this.getProjectStructure(),o=this.getAnalyzeSystemPrompt(),i=`Analyze the architecture of this codebase: ${e}\n\nProject Structure:\n${a}\n\nWorkspace Context:\n${s}`;try{const e=await this.openAIService.chat([{role:"system",content:o},{role:"user",content:i}]);t.markdown(e),this.createActionButton("🚀 Suggest Improvements","ki-autoagent.suggestImprovements",[e],t)}catch(e){t.markdown(`❌ Error analyzing architecture: ${e.message}`)}}async handlePlanCommand(e,t,n){t.progress("📋 Creating development and deployment plans...");const s=await this.getWorkspaceContext(),a=this.getPlanSystemPrompt(),o=`Create a detailed development and deployment plan for: ${e}\n\nWorkspace Context:\n${s}`;try{const e=await this.openAIService.chat([{role:"system",content:a},{role:"user",content:o}]);t.markdown(e),this.createActionButton("🗺️ Create Roadmap","ki-autoagent.createFile",["ROADMAP.md",e],t)}catch(e){t.markdown(`❌ Error creating plan: ${e.message}`)}}async handleGeneralArchitectureRequest(e,t,n){t.progress("🤔 Processing architecture request...");const s=await this.getWorkspaceContext(),a=this.getGeneralSystemPrompt(),o=`${e}\n\nWorkspace Context:\n${s}`;try{const e=await this.openAIService.chat([{role:"system",content:a},{role:"user",content:o}]);t.markdown(e)}catch(e){t.markdown(`❌ Error processing request: ${e.message}`)}}getGeneralSystemPrompt(){return`You are ArchitectGPT, a senior system architect and design expert. You specialize in:\n\n- System architecture design and patterns\n- Technology stack selection and evaluation\n- Scalability and performance planning\n- Microservices and distributed systems\n- Database design and data modeling\n- API design and integration patterns\n- Security architecture\n- DevOps and deployment strategies\n\nAlways provide:\n1. Clear architectural reasoning\n2. Multiple solution options when applicable\n3. Trade-offs and considerations\n4. Implementation guidance\n5. Best practices and patterns\n\nFormat your responses with clear headings, diagrams where helpful (using mermaid syntax), and actionable recommendations.\n\n${this.getSystemContextPrompt()}`}getDesignSystemPrompt(){return`You are ArchitectGPT creating a comprehensive system architecture design. Follow this structure:\n\n## System Architecture Design\n\n### 1. Requirements Analysis\n- Functional requirements\n- Non-functional requirements (performance, scalability, security)\n- Constraints and assumptions\n\n### 2. High-Level Architecture\n- System overview\n- Major components and their responsibilities\n- Data flow and interactions\n\n### 3. Technology Stack\n- Recommended technologies with rationale\n- Alternatives considered\n- Integration points\n\n### 4. Database Design\n- Data model\n- Storage strategy\n- Performance considerations\n\n### 5. API Design\n- Interface specifications\n- Authentication/authorization\n- Rate limiting and caching\n\n### 6. Security Architecture\n- Security measures\n- Authentication/authorization\n- Data protection\n\n### 7. Deployment Architecture\n- Infrastructure requirements\n- Scaling strategy\n- Monitoring and observability\n\n### 8. Implementation Roadmap\n- Development phases\n- Dependencies and milestones\n- Risk mitigation\n\nUse mermaid diagrams where appropriate to illustrate the architecture.\n\n${this.getSystemContextPrompt()}`}getAnalyzeSystemPrompt(){return`You are ArchitectGPT analyzing an existing codebase architecture. Provide:\n\n## Architecture Analysis\n\n### 1. Current Architecture Overview\n- Identify architectural patterns used\n- Component structure and organization\n- Technology stack assessment\n\n### 2. Strengths\n- What's working well\n- Good design decisions\n- Proper patterns implementation\n\n### 3. Areas for Improvement\n- Architectural debt\n- Performance bottlenecks\n- Security concerns\n- Scalability limitations\n\n### 4. Recommendations\n- Prioritized improvement suggestions\n- Refactoring opportunities\n- Technology upgrades\n\n### 5. Next Steps\n- Immediate actions\n- Long-term architectural goals\n- Migration strategies\n\nBe specific and provide actionable insights based on the codebase structure.\n\n${this.getSystemContextPrompt()}`}getPlanSystemPrompt(){return`You are ArchitectGPT creating development and deployment plans. Structure your response as:\n\n## Development & Deployment Plan\n\n### 1. Project Setup\n- Repository structure\n- Development environment\n- Tool and dependency setup\n\n### 2. Development Phases\n- Phase breakdown with deliverables\n- Timeline estimates\n- Resource requirements\n\n### 3. Implementation Strategy\n- Development methodology\n- Code review process\n- Testing strategy\n\n### 4. Deployment Strategy\n- Environment setup (dev, staging, prod)\n- CI/CD pipeline\n- Rollback procedures\n\n### 5. Risk Management\n- Identified risks\n- Mitigation strategies\n- Contingency plans\n\n### 6. Success Metrics\n- KPIs and measurements\n- Monitoring and alerting\n- Performance benchmarks\n\nProvide realistic timelines and clear milestones.\n\n${this.getSystemContextPrompt()}`}async getProjectStructure(){try{return(await r.workspace.findFiles("**/*.{py,js,ts,jsx,tsx,json,md}","**/node_modules/**",50)).map(e=>e.fsPath.split("/").slice(-3).join("/")).join("\n")}catch(e){return"Unable to read project structure"}}extractPreviousContent(e){return e.map(e=>e.content).join("\n\n---\n\n").substring(0,2e3)}}t.ArchitectAgent=l},88:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MemoryManager=void 0;const s=n(434),a=n(531);t.MemoryManager=class{constructor(e={}){this.memories=new Map,this.embeddings=new Map,this.patterns=new Map,this.clusters=[],this.codePatterns=new Map,this.architecturePatterns=new Map,this.learningEntries=[],this.memoryIndex=new Map,this.agentMemories=new Map,this.options={maxMemories:e.maxMemories||1e4,similarityThreshold:e.similarityThreshold||.7,clusteringEnabled:e.clusteringEnabled??!0,patternExtractionEnabled:e.patternExtractionEnabled??!0,autoForget:e.autoForget??!0,forgetThreshold:e.forgetThreshold||.3},this.eventBus=new s.EventEmitter,this.initializeIndexes()}initializeIndexes(){Object.values(a.MemoryType).forEach(e=>{this.memoryIndex.set(e,new Set)})}async store(e,t,n,s={}){const a=this.generateMemoryId(),o=await this.generateEmbedding(t),i={id:a,agentId:e,timestamp:Date.now(),content:t,embedding:o,type:n,metadata:{...s,accessCount:0,lastAccessed:Date.now(),importance:s.importance||this.calculateImportance(t,n)}};return this.memories.set(a,i),this.embeddings.set(a,o),this.memoryIndex.get(n).add(a),this.agentMemories.has(e)||this.agentMemories.set(e,new Set),this.agentMemories.get(e).add(a),this.options.autoForget&&this.memories.size>this.options.maxMemories&&await this.forgetOldMemories(),this.options.patternExtractionEnabled&&await this.extractPatterns(),this.options.clusteringEnabled&&await this.updateClusters(),this.eventBus.emit("memory-stored",i),a}async search(e,t={}){const n=t.k||10,s=t.minSimilarity||this.options.similarityThreshold,a=await this.generateEmbedding(e);let o=Array.from(this.memories.values());if(t.type){const e=this.memoryIndex.get(t.type);e&&(o=o.filter(t=>e.has(t.id)))}if(t.agentId){const e=this.agentMemories.get(t.agentId);e&&(o=o.filter(t=>e.has(t.id)))}const i=o.map(e=>{const t=this.cosineSimilarity(a,e.embedding||[]),n=this.calculateRelevance(e,t);return e.metadata.accessCount=(e.metadata.accessCount||0)+1,e.metadata.lastAccessed=Date.now(),{entry:e,similarity:t,relevance:n}}).filter(e=>e.similarity>=s).sort((e,t)=>t.relevance-e.relevance).slice(0,n);return this.eventBus.emit("memory-searched",{query:e,results:i}),i}get(e){const t=this.memories.get(e);return t&&(t.metadata.accessCount=(t.metadata.accessCount||0)+1,t.metadata.lastAccessed=Date.now()),t}async update(e,t,n){const s=this.memories.get(e);if(!s)throw new Error(`Memory ${e} not found`);s.content=t,s.embedding=await this.generateEmbedding(t),n&&(s.metadata={...s.metadata,...n}),this.embeddings.set(e,s.embedding),this.eventBus.emit("memory-updated",s)}delete(e){const t=this.memories.get(e);return!!t&&(this.memories.delete(e),this.embeddings.delete(e),this.memoryIndex.get(t.type)?.delete(e),this.agentMemories.get(t.agentId)?.delete(e),this.eventBus.emit("memory-deleted",t),!0)}storeCodePattern(e){this.codePatterns.set(e.id,e),this.eventBus.emit("pattern-stored",{type:"code",pattern:e})}async getRelevantCodePatterns(e,t){const n=Array.from(this.codePatterns.values());let s=t?n.filter(e=>e.language===t):n;return s.sort((e,t)=>{const n=e.successRate*(1/(Date.now()-e.lastUsed));return t.successRate*(1/(Date.now()-t.lastUsed))-n}),s.slice(0,5)}storeArchitecturePattern(e){this.architecturePatterns.set(e.id,e),this.eventBus.emit("pattern-stored",{type:"architecture",pattern:e})}getRelevantArchitecturePatterns(e){return Array.from(this.architecturePatterns.values()).filter(t=>t.useCases.some(t=>t.toLowerCase().includes(e.toLowerCase())))}storeLearning(e){this.learningEntries.push(e),this.eventBus.emit("learning-stored",e)}getRelevantLearnings(e,t=5){const n=e.toLowerCase().split(" ");return this.learningEntries.filter(e=>n.some(t=>e.description.toLowerCase().includes(t))).sort((e,t)=>{const n=("high"===e.impact?3:"medium"===e.impact?2:1)*(1/(Date.now()-e.timestamp));return("high"===t.impact?3:"medium"===t.impact?2:1)*(1/(Date.now()-t.timestamp))-n}).slice(0,t)}async extractPatterns(){this.groupSimilarMemories().forEach((e,t)=>{if(e.length>=3){const n={id:this.generateMemoryId(),pattern:t,frequency:e.length,examples:e.slice(0,5),extractedAt:Date.now()};this.patterns.set(n.id,n)}})}groupSimilarMemories(){const e=new Map,t=new Set;return this.memories.forEach((n,s)=>{if(t.has(s))return;const a=this.findSimilarMemories(n,.8);if(a.length>=2){const s=this.extractPatternSignature(n);e.set(s,[n,...a]),a.forEach(e=>t.add(e.id))}}),e}findSimilarMemories(e,t){const n=[];return this.memories.forEach((s,a)=>{a!==e.id&&this.cosineSimilarity(e.embedding||[],s.embedding||[])>=t&&n.push(s)}),n}async updateClusters(){const e=Math.min(10,Math.floor(this.memories.size/50));if(e<2)return;const t=this.initializeCentroids(e);let n=0,s=!0;for(;s&&n<50;){const e=t.map(e=>({centroid:e,members:[],coherence:0}));this.memories.forEach(n=>{if(!n.embedding)return;let s=0,a=-1;t.forEach((e,t)=>{const o=this.cosineSimilarity(n.embedding,e);o>a&&(a=o,s=t)}),e[s].members.push(n)}),s=!1,e.forEach((e,n)=>{if(e.members.length>0){const a=this.calculateCentroid(e.members);this.vectorsEqual(t[n],a)||(t[n]=a,s=!0)}}),this.clusters=e,n++}this.clusters.forEach(e=>{e.coherence=this.calculateClusterCoherence(e)}),this.eventBus.emit("clusters-updated",this.clusters)}async forgetOldMemories(){const e=[],t=Date.now();this.memories.forEach((n,s)=>{const a=t-n.timestamp;(n.metadata.accessCount||0)/(a/6048e5)*.4+.6*(n.metadata.importance||.5)<this.options.forgetThreshold&&e.push(s)});const n=Math.floor(this.memories.size-.5*this.options.maxMemories);e.slice(0,n).forEach(e=>{this.delete(e)}),e.length>0&&this.eventBus.emit("memories-forgotten",e.length)}async generateEmbedding(e){const t=JSON.stringify(e).toLowerCase(),n=new Array(384).fill(0);for(let e=0;e<t.length;e++)n[t.charCodeAt(e)*(e+1)%384]+=1;const s=Math.sqrt(n.reduce((e,t)=>e+t*t,0));return n.map(e=>e/(s||1))}cosineSimilarity(e,t){if(e.length!==t.length||0===e.length)return 0;let n=0,s=0,a=0;for(let o=0;o<e.length;o++)n+=e[o]*t[o],s+=e[o]*e[o],a+=t[o]*t[o];return s=Math.sqrt(s),a=Math.sqrt(a),0===s||0===a?0:n/(s*a)}calculateRelevance(e,t){return.4*t+1/(1+(Date.now()-e.timestamp)/864e5)*.2+.3*(e.metadata.importance||.5)+.1*Math.min(1,(e.metadata.accessCount||0)/100)}calculateImportance(e,t){return t===a.MemoryType.PROCEDURAL?.8:t===a.MemoryType.SEMANTIC?.7:t===a.MemoryType.EPISODIC?.5:.3}extractPatternSignature(e){return JSON.stringify(e.content).substring(0,50)}initializeCentroids(e){const t=[],n=Array.from(this.memories.values()).filter(e=>e.embedding);for(let s=0;s<e&&s<n.length;s++)t.push([...n[s].embedding]);return t}calculateCentroid(e){if(0===e.length||!e[0].embedding)return[];const t=e[0].embedding.length,n=new Array(t).fill(0);return e.forEach(e=>{e.embedding&&e.embedding.forEach((e,t)=>{n[t]+=e})}),n.map(t=>t/e.length)}calculateClusterCoherence(e){if(e.members.length<2)return 1;let t=0,n=0;for(let s=0;s<e.members.length;s++)for(let a=s+1;a<e.members.length;a++)e.members[s].embedding&&e.members[a].embedding&&(t+=this.cosineSimilarity(e.members[s].embedding,e.members[a].embedding),n++);return n>0?t/n:0}vectorsEqual(e,t){return e.length===t.length&&e.every((e,n)=>Math.abs(e-t[n])<.001)}generateMemoryId(){return`mem_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}getStats(){const e={totalMemories:this.memories.size,byType:new Map,byAgent:new Map,averageAccessCount:0,mostAccessedMemories:[],memoryGrowthRate:0,patternCount:this.patterns.size,clusterCount:this.clusters.length};this.memoryIndex.forEach((t,n)=>{e.byType.set(n,t.size)}),this.agentMemories.forEach((t,n)=>{e.byAgent.set(n,t.size)});let t=0;const n=Array.from(this.memories.values()).sort((e,t)=>(t.metadata.accessCount||0)-(e.metadata.accessCount||0));return n.forEach(e=>{t+=e.metadata.accessCount||0}),e.averageAccessCount=t/(this.memories.size||1),e.mostAccessedMemories=n.slice(0,10),e}export(){const e={memories:Array.from(this.memories.entries()),patterns:Array.from(this.patterns.entries()),codePatterns:Array.from(this.codePatterns.entries()),architecturePatterns:Array.from(this.architecturePatterns.entries()),learningEntries:this.learningEntries,timestamp:Date.now()};return JSON.stringify(e)}import(e){const t=JSON.parse(e);this.memories.clear(),this.patterns.clear(),this.codePatterns.clear(),this.architecturePatterns.clear(),this.learningEntries=[],t.memories.forEach(([e,t])=>{this.memories.set(e,t),t.embedding&&this.embeddings.set(e,t.embedding)}),t.patterns.forEach(([e,t])=>{this.patterns.set(e,t)}),t.codePatterns.forEach(([e,t])=>{this.codePatterns.set(e,t)}),t.architecturePatterns.forEach(([e,t])=>{this.architecturePatterns.set(e,t)}),this.learningEntries=t.learningEntries||[],this.rebuildIndexes(),this.eventBus.emit("memories-imported",{count:this.memories.size,timestamp:t.timestamp})}rebuildIndexes(){this.memoryIndex.clear(),this.agentMemories.clear(),this.initializeIndexes(),this.memories.forEach(e=>{this.memoryIndex.get(e.type)?.add(e.id),this.agentMemories.has(e.agentId)||this.agentMemories.set(e.agentId,new Set),this.agentMemories.get(e.agentId)?.add(e.id)})}}},122:function(e,t,n){var s,a=this&&this.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,a)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},s(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=s(e),i=0;i<n.length;i++)"default"!==n[i]&&a(t,e,n[i]);return o(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.CodeSmithAgent=void 0;const r=i(n(398)),c=n(806),d=n(167),l=n(567);class u extends c.ChatAgent{constructor(e,t){super({participantId:"ki-autoagent.codesmith",name:"codesmith",fullName:"CodeSmithClaude",description:"Senior Python/Web Developer powered by Claude 4.1 Sonnet",model:"claude-4.1-sonnet-20250920",iconPath:r.Uri.joinPath(e.extensionUri,"media","claude-icon.svg"),capabilities:["Python Development","Web Development","API Implementation","Testing & TDD","Code Optimization","Framework Integration"],commands:[{name:"implement",description:"Implement code based on specifications",handler:"handleImplementCommand"},{name:"fix",description:"Fix bugs and issues in code",handler:"handleFixCommand"},{name:"debug",description:"Debug and resolve issues",handler:"handleDebugCommand"},{name:"optimize",description:"Optimize existing code for performance",handler:"handleOptimizeCommand"},{name:"refactor",description:"Refactor code for better structure",handler:"handleRefactorCommand"},{name:"modernize",description:"Modernize legacy code",handler:"handleModernizeCommand"},{name:"test",description:"Generate comprehensive test suites",handler:"handleTestCommand"}]},e,t),this.anthropicService=new d.AnthropicService,this.claudeCodeService=(0,l.getClaudeCodeService)()}async handleRequest(e,t,n,s){if(!await this.validateServiceConfig(n))return;const a=e.command,o=e.prompt;this.log(`Processing ${a?`/${a}`:"general"} request: ${o.substring(0,100)}...`),a?await this.handleCommand(a,o,n,s):await this.handleGeneralImplementationRequest(o,n,s)}async executeStep(e,t,n){return this.showDebug("ExecuteStep called",{step:e.id,hasStreamingCallback:!!t.onPartialResponse}),await this.processWorkflowStep(e,t,n)}async processWorkflowStep(e,t,n){const s=await this.getWorkspaceContext();let a="";t.globalContext&&(a+=t.globalContext),n.length>0&&(a+="\n\n## Current Workflow Progress:\n",n.forEach((e,t)=>{const n=e.metadata?.agent||`Agent ${t+1}`,s=e.metadata?.step||"unknown";a+=`\n### ${n} (${s}):\n${e.content}\n`}));let o="",i="";switch(e.id){case"implement":o=this.getImplementationSystemPrompt(),i=`Implement the following: ${t.prompt}\n\nWorkspace Context:\n${s}${a}`;break;case"test":o=this.getTestingSystemPrompt(),i=`Create comprehensive tests for: ${t.prompt}\n\nPrevious Implementation:\n${this.extractPreviousContent(n)}`;break;case"optimize":o=this.getOptimizationSystemPrompt(),i=`Optimize this implementation: ${t.prompt}\n\nContext:\n${s}${a}`;break;default:o=this.getGeneralSystemPrompt(),i=`${t.prompt}\n\nContext:\n${s}${a}`}try{const n=await this.getClaudeService(t.onPartialResponse),s=await n.chat([{role:"system",content:o},{role:"user",content:i}]),a="string"==typeof s?s:s.content||"",r="object"==typeof s&&null!==s?s.metadata:{};return this.showDebug("Response received",{contentLength:a.length,metadata:r}),{status:"success",content:a,metadata:{step:e.id,agent:"codesmith",model:"claude-3.5-sonnet",...r}}}catch(t){throw new Error(`Failed to process ${e.id}: ${t.message}`)}}async handleImplementCommand(e,t,n){t.progress("⚡ Implementing your requirements...");const s=await this.getWorkspaceContext(),a=this.getImplementationSystemPrompt(),o=`Implement the following requirements: ${e}\n\nWorkspace Context:\n${s}`;try{const n=await this.getClaudeService(),s=await n.chat([{role:"system",content:a},{role:"user",content:o}]),i="string"==typeof s?s:s.content||"";t.markdown(i);const r=this.extractCodeBlocks(i);for(const e of r)e.filename&&this.createActionButton(`📄 Create ${e.filename}`,"ki-autoagent.createFile",[e.filename,e.code],t);this.createActionButton("🧪 Generate Tests","ki-autoagent.generateTests",[e,s],t)}catch(e){t.markdown(`❌ Error during implementation: ${e.message}`)}}async handleOptimizeCommand(e,t,n){t.progress("🚀 Optimizing code for performance...");const s=await this.getWorkspaceContext(),a=this.getOptimizationSystemPrompt();let o="";if(s.includes("Selected text:"))o=s;else if(r.window.activeTextEditor){const e=r.window.activeTextEditor.document;o=`Current file: ${e.fileName}\n\`\`\`${e.languageId}\n${e.getText()}\n\`\`\``}const i=`Optimize the following code: ${e}\n\nCode to optimize:\n${o}`;try{const e=await this.getClaudeService(),n=await e.chat([{role:"system",content:a},{role:"user",content:i}]),s="string"==typeof n?n:n.content||"";t.markdown(s);const o=this.extractMainCodeBlock(s);o&&this.createActionButton("✨ Apply Optimization","ki-autoagent.insertAtCursor",[o],t)}catch(e){t.markdown(`❌ Error during optimization: ${e.message}`)}}async handleTestCommand(e,t,n){t.progress("🧪 Generating comprehensive test suite...");const s=await this.getWorkspaceContext(),a=this.getTestingSystemPrompt(),o=`Generate comprehensive tests for: ${e}\n\nWorkspace Context:\n${s}`;try{const e=await this.getClaudeService(),n=await e.chat([{role:"system",content:a},{role:"user",content:o}]),s="string"==typeof n?n:n.content||"";t.markdown(s);const i=this.extractTestFiles(s);for(const e of i)this.createActionButton(`🧪 Create ${e.filename}`,"ki-autoagent.createFile",[e.filename,e.code],t);this.createActionButton("▶️ Run Tests","ki-autoagent.runTests",[],t)}catch(e){t.markdown(`❌ Error generating tests: ${e.message}`)}}async handleFixCommand(e,t,n){t.progress("🔧 Fixing bugs and issues...");const s=await this.getWorkspaceContext(),a=`You are CodeSmithClaude, an expert bug fixer. Your task is to:\n1. Identify the root cause of the bug\n2. Implement a robust fix\n3. Ensure no new bugs are introduced\n4. Add error handling where needed\n5. Test the fix thoroughly\n\n${this.getSystemContextPrompt()}`,o=`Fix the following issue: ${e}\n\nWorkspace Context:\n${s}`;try{const e=await this.getClaudeService(),n=await e.chat([{role:"system",content:a},{role:"user",content:o}]),s="string"==typeof n?n:n.content||"";t.markdown(s)}catch(e){t.markdown(`❌ Error during bug fix: ${e.message}`)}}async handleDebugCommand(e,t,n){t.progress("🐛 Debugging and analyzing issue...");const s=await this.getWorkspaceContext(),a=`You are CodeSmithClaude, an expert debugger. Your task is to:\n1. Analyze error messages and stack traces\n2. Identify the root cause\n3. Add debug logging to trace the issue\n4. Provide step-by-step debugging instructions\n5. Suggest a permanent fix\n\n${this.getSystemContextPrompt()}`,o=`Debug this issue: ${e}\n\nWorkspace Context:\n${s}`;try{const e=await this.getClaudeService(),n=await e.chat([{role:"system",content:a},{role:"user",content:o}]),s="string"==typeof n?n:n.content||"";t.markdown(s)}catch(e){t.markdown(`❌ Error during debugging: ${e.message}`)}}async handleRefactorCommand(e,t,n){t.progress("♻️ Refactoring code for better structure...");const s=await this.getWorkspaceContext(),a=`You are CodeSmithClaude, a refactoring expert. Your task is to:\n1. Improve code structure and organization\n2. Apply design patterns where appropriate\n3. Reduce code duplication (DRY principle)\n4. Improve naming and readability\n5. Maintain functionality while improving quality\n\n${this.getSystemContextPrompt()}`,o=`Refactor the following: ${e}\n\nWorkspace Context:\n${s}`;try{const e=await this.getClaudeService(),n=await e.chat([{role:"system",content:a},{role:"user",content:o}]),s="string"==typeof n?n:n.content||"";t.markdown(s)}catch(e){t.markdown(`❌ Error during refactoring: ${e.message}`)}}async handleModernizeCommand(e,t,n){t.progress("🚀 Modernizing legacy code...");const s=await this.getWorkspaceContext(),a=`You are CodeSmithClaude, a code modernization expert. Your task is to:\n1. Update deprecated APIs and methods\n2. Use modern language features (async/await, arrow functions, etc.)\n3. Update to latest framework versions\n4. Improve TypeScript types\n5. Add modern tooling support\n\n${this.getSystemContextPrompt()}`,o=`Modernize the following code: ${e}\n\nWorkspace Context:\n${s}`;try{const e=await this.getClaudeService(),n=await e.chat([{role:"system",content:a},{role:"user",content:o}]),s="string"==typeof n?n:n.content||"";t.markdown(s)}catch(e){t.markdown(`❌ Error during modernization: ${e.message}`)}}async handleGeneralImplementationRequest(e,t,n){t.progress("💻 Processing implementation request...");const s=await this.getWorkspaceContext(),a=this.getGeneralSystemPrompt(),o=`${e}\n\nWorkspace Context:\n${s}`;try{const e=await this.getClaudeService(),n=await e.chat([{role:"system",content:a},{role:"user",content:o}]),s="string"==typeof n?n:n.content||"";t.markdown(s);const i=this.extractCodeBlocks(s);for(const e of i)e.filename&&this.createActionButton(`📄 Create ${e.filename}`,"ki-autoagent.createFile",[e.filename,e.code],t)}catch(e){t.markdown(`❌ Error processing request: ${e.message}`)}}getGeneralSystemPrompt(){return`You are CodeSmithClaude, a senior Python and web developer with expertise in:\n\n- Python development (Django, FastAPI, Flask, Streamlit)\n- Web development (React, TypeScript, JavaScript)\n- API design and implementation\n- Database design and ORM usage\n- Testing strategies (pytest, unittest, Jest)\n- Code optimization and performance\n- Modern development practices\n\nAlways provide:\n1. Clean, readable, and well-documented code\n2. Proper error handling and validation\n3. Performance considerations\n4. Security best practices\n5. Testing recommendations\n\nFormat your responses with clear explanations and working code examples.\n\n${this.getSystemContextPrompt()}`}getImplementationSystemPrompt(){return`You are CodeSmithClaude implementing code based on specifications. Follow this structure:\n\n## Implementation Plan\n\n### 1. Analysis\n- Break down requirements\n- Identify components needed\n- Choose appropriate patterns\n\n### 2. Core Implementation\n- Main functionality with proper structure\n- Error handling and validation\n- Clear documentation\n\n### 3. Integration Points\n- How this connects to existing code\n- Dependencies and imports\n- Configuration requirements\n\n### 4. Usage Examples\n- How to use the implemented code\n- Example scenarios\n- Common patterns\n\n### 5. Next Steps\n- Testing recommendations\n- Potential improvements\n- Deployment considerations\n\nProvide complete, working code with filenames when appropriate. Focus on clean, maintainable solutions.\n\n${this.getSystemContextPrompt()}`}getOptimizationSystemPrompt(){return`You are CodeSmithClaude optimizing code for performance. Follow this approach:\n\n## Code Optimization Analysis\n\n### 1. Current Code Analysis\n- Identify performance bottlenecks\n- Analyze complexity and efficiency\n- Spot potential issues\n\n### 2. Optimization Strategies\n- Algorithm improvements\n- Data structure optimizations\n- Caching opportunities\n- Memory efficiency\n\n### 3. Optimized Implementation\n- Improved code with explanations\n- Performance comparisons\n- Benchmark suggestions\n\n### 4. Trade-offs\n- Performance vs readability\n- Memory vs speed\n- Complexity considerations\n\nAlways maintain code readability while improving performance. Explain your optimization choices.\n\n${this.getSystemContextPrompt()}`}getTestingSystemPrompt(){return`You are CodeSmithClaude creating comprehensive test suites. Structure your tests as:\n\n## Test Suite Design\n\n### 1. Test Strategy\n- Test types needed (unit, integration, e2e)\n- Coverage goals\n- Testing framework choice\n\n### 2. Unit Tests\n- Test individual functions/methods\n- Edge cases and error conditions\n- Mocking strategies\n\n### 3. Integration Tests\n- Component interactions\n- API endpoint testing\n- Database integration\n\n### 4. Test Utilities\n- Fixtures and test data\n- Helper functions\n- Setup/teardown\n\n### 5. Test Configuration\n- Test runner setup\n- CI/CD integration\n- Coverage reporting\n\nProvide complete, runnable tests with clear assertions and good coverage.\n\n${this.getSystemContextPrompt()}`}async validateServiceConfig(e){const t=r.workspace.getConfiguration("kiAutoAgent"),n=t.get("claude.serviceMode","claude-code");if("api"===n){if(!t.get("anthropic.apiKey"))return e&&e.markdown('❌ **Anthropic API key not configured**\n\nPlease set your API key in VS Code settings:\n- Go to Settings\n- Search for "KI AutoAgent"\n- Set your Anthropic API key'),!1}else if("claude-code"===n&&!await this.claudeCodeService.isAvailable())return e&&e.markdown("❌ **Claude Code CLI not available**\n\n**To install:**\n```bash\nnpm install -g @anthropic-ai/claude-code\n```\n\nOr configure your Anthropic API key in VS Code settings."),!1;return!0}async getClaudeService(e){const t=r.workspace.getConfiguration("kiAutoAgent").get("claude.serviceMode","claude-code");if(this.showDebug("Service configuration",{serviceMode:t,hasStreamingCallback:!!e}),"claude-code"===t){if(await this.claudeCodeService.isAvailable())return this.showInfo("Using Claude Code CLI"),{chat:async t=>{const n=t.find(e=>"user"===e.role)?.content||"",s=t.find(e=>"system"===e.role)?.content||"",a=s?`${s}\n\n${n}`:n;return e?(this.showDebug("Using streaming message"),await this.claudeCodeService.sendStreamingMessage(a,{model:"sonnet",temperature:.7,onPartialResponse:e})):(await this.claudeCodeService.sendMessage(a,{model:"sonnet",temperature:.7})).content}};this.showFallbackMode("Claude Code CLI not available","Using Anthropic API")}return this.showInfo("Using Anthropic API"),{chat:async e=>await this.anthropicService.chat(e)}}extractCodeBlocks(e){const t=/```(\w+)?\s*(?:\/\/\s*(.+\.[\w]+))?\n([\s\S]*?)```/g,n=[];let s;for(;null!==(s=t.exec(e));){const e=s[1]||"text",t=s[2]||this.inferFilename(e,s[3]),a=s[3];n.push({filename:t,language:e,code:a})}return n}extractTestFiles(e){return this.extractCodeBlocks(e).filter(e=>e.filename&&(e.filename.includes("test")||e.filename.includes("spec"))).map(e=>({filename:e.filename,code:e.code}))}extractMainCodeBlock(e){const t=this.extractCodeBlocks(e);return t.length>0?t[0].code:""}inferFilename(e,t){if("python"===e){const e=t.match(/class\s+(\w+)/);return e?`${e[1].toLowerCase()}.py`:"main.py"}if("typescript"===e||"javascript"===e){const n=t.match(/(?:class|interface)\s+(\w+)/);return n?`${n[1]}.${"typescript"===e?"ts":"js"}`:"index."+("typescript"===e?"ts":"js")}return`code.${e}`}extractPreviousContent(e){return e.map(e=>e.content).join("\n\n---\n\n").substring(0,2e3)}}t.CodeSmithAgent=u},136:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AgentRegistry=void 0;class n{static getInstance(){return n.instance||(n.instance=new n),n.instance}getRegisteredAgents(){return Object.entries(n.AGENT_CAPABILITIES).map(([e,t])=>({id:e,name:this.getAgentDisplayName(e),model:t.model,specialization:t.specialization,canHandle:t.canHandle,instructionSet:t.instructionSet}))}getAgentInfo(e){const t=n.AGENT_CAPABILITIES[e];if(t)return{id:e,name:this.getAgentDisplayName(e),model:t.model,specialization:t.specialization,canHandle:t.canHandle,instructionSet:t.instructionSet}}suggestAgentForTask(e){const t=e.toLowerCase();let s=null;for(const[e,a]of Object.entries(n.AGENT_CAPABILITIES)){let n=0;for(const e of a.canHandle)t.includes(e)&&(n+=e.split("-").length);n>0&&(!s||n>s.score)&&(s={agent:e,score:n})}return s?.agent||null}getAgentListDescription(){return this.getRegisteredAgents().map((e,t)=>`${t+1}. **${e.name}** - ${e.specialization} (${e.model})`).join("\n")}getTaskDelegationInfo(e){const t=this.getAgentInfo(e);if(!t)return"";const n=this.getRegisteredAgents().filter(t=>t.id!==e);let s="## Task Delegation Guidelines\n\n";s+=`You are **${t.name}** specializing in: ${t.specialization}\n\n`,s+="When encountering tasks outside your expertise, suggest these agents:\n\n";for(const e of n)s+=`- **${e.canHandle.slice(0,3).join(", ")}** → Suggest: "@${e.id} specializes in ${e.specialization}"\n`;return s+=`\nYou ARE the expert for: ${t.canHandle.join(", ")}`,s}getAgentDisplayName(e){return{orchestrator:"OrchestratorAgent",architect:"ArchitectAgent",codesmith:"CodeSmithAgent",tradestrat:"TradeStratAgent",research:"ResearchAgent","opus-arbitrator":"OpusArbitratorAgent",docu:"DocuBot",reviewer:"ReviewerGPT",fixer:"FixerBot"}[e]||e}}t.AgentRegistry=n,n.AGENT_CAPABILITIES={orchestrator:{specialization:"Multi-Agent Workflow Coordination",canHandle:["workflow","orchestration","multi-step","complex-tasks","coordination"],model:"gpt-5-2025-09-12",instructionSet:"orchestrator.md"},architect:{specialization:"System Architecture & Design",canHandle:["architecture","design","patterns","scalability","tech-stack","system-design","database-design"],model:"gpt-5-2025-09-12",instructionSet:"architect.md"},codesmith:{specialization:"Code Implementation & Optimization",canHandle:["coding","implementation","optimization","testing","debugging","refactoring","code-review"],model:"claude-4.1-sonnet-20250920",instructionSet:"codesmith.md"},tradestrat:{specialization:"Trading Strategies & Financial Analysis",canHandle:["trading","algorithms","financial","backtesting","market-analysis","portfolio","risk-management"],model:"claude-4.1-sonnet-20250920",instructionSet:"tradestrat.md"},research:{specialization:"Web Research & Information Gathering",canHandle:["research","web-search","documentation","fact-checking","information-gathering","api-docs"],model:"perplexity-llama-3.1-sonar-huge-128k",instructionSet:"research.md"},"opus-arbitrator":{specialization:"Agent Conflict Resolution",canHandle:["conflicts","decision-making","arbitration","dispute-resolution","consensus"],model:"claude-4.1-opus-20250915",instructionSet:"richter.md"},docu:{specialization:"Technical Documentation & API Reference",canHandle:["documentation","readme","api-docs","user-guides","comments","changelog","technical-writing","instruction-management"],model:"gpt-5-2025-09-12",instructionSet:"docubot-instructions.md"},reviewer:{specialization:"Code Review & Security Analysis",canHandle:["code-review","security","performance-analysis","standards","testing","quality-assurance","vulnerabilities","architecture-validation"],model:"gpt-5-mini-2025-09-20",instructionSet:"reviewergpt-instructions.md"},fixer:{specialization:"Bug Fixing & Optimization",canHandle:["bug-fixing","debugging","error-resolution","optimization","refactoring","modernization","hotfix"],model:"claude-4.1-sonnet-20250920",instructionSet:"fixerbot-instructions.md"}}},167:function(e,t,n){var s,a=this&&this.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,a)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},s(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=s(e),i=0;i<n.length;i++)"default"!==n[i]&&a(t,e,n[i]);return o(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.AnthropicService=void 0;const r=i(n(398));t.AnthropicService=class{constructor(){const e=r.workspace.getConfiguration("kiAutoAgent");this.apiKey=e.get("anthropic.apiKey",""),this.baseURL="https://api.anthropic.com/v1"}async chat(e,t="claude-3-5-sonnet-20241022",n=4e3,s=.7){if(!this.apiKey)throw new Error("Anthropic API key not configured");const a=e.find(e=>"system"===e.role),o=e.filter(e=>"system"!==e.role),i={model:t,max_tokens:n,temperature:s,system:a?.content||"",messages:o.map(e=>({role:e.role,content:e.content}))};try{const e=await fetch(`${this.baseURL}/messages`,{method:"POST",headers:{"Content-Type":"application/json","X-API-Key":this.apiKey,"anthropic-version":"2023-06-01"},body:JSON.stringify(i)});if(!e.ok){const t=await e.json().catch(()=>({error:{message:e.statusText}}));throw new Error(`Anthropic API error: ${t.error?.message||e.statusText}`)}const t=await e.json();if(!t.content||0===t.content.length)throw new Error("No response from Anthropic API");return t.content.filter(e=>"text"===e.type).map(e=>e.text).join("")}catch(e){if(e instanceof Error)throw e;throw new Error(`Anthropic API request failed: ${e}`)}}async streamChat(e,t,n="claude-3-5-sonnet-20241022",s=4e3,a=.7){if(!this.apiKey)throw new Error("Anthropic API key not configured");const o=e.find(e=>"system"===e.role),i=e.filter(e=>"system"!==e.role),r={model:n,max_tokens:s,temperature:a,system:o?.content||"",messages:i.map(e=>({role:e.role,content:e.content})),stream:!0};try{const e=await fetch(`${this.baseURL}/messages`,{method:"POST",headers:{"Content-Type":"application/json","X-API-Key":this.apiKey,"anthropic-version":"2023-06-01"},body:JSON.stringify(r)});if(!e.ok)throw new Error(`Anthropic API error: ${e.statusText}`);const n=e.body?.getReader();if(!n)throw new Error("Failed to get response stream");const s=new TextDecoder;for(;;){const{done:e,value:a}=await n.read();if(e)break;const o=s.decode(a).split("\n").filter(e=>""!==e.trim());for(const e of o)if(e.startsWith("data: ")){const n=e.substring(6);if("[DONE]"===n)return;try{const e=JSON.parse(n);if("content_block_delta"===e.type){const n=e.delta?.text;n&&t(n)}}catch(e){}}}}catch(e){throw new Error(`Anthropic streaming failed: ${e}`)}}validateApiKey(){return!!this.apiKey&&this.apiKey.startsWith("sk-ant-")}async testConnection(){try{return await this.chat([{role:"user",content:"Test connection"}],"claude-3-5-sonnet-20241022",10),!0}catch(e){return!1}}}},172:function(e,t,n){var s,a=this&&this.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,a)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},s(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=s(e),i=0;i<n.length;i++)"default"!==n[i]&&a(t,e,n[i]);return o(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.DocuBotAgent=void 0;const r=i(n(398)),c=n(806),d=n(551),l=i(n(928)),u=i(n(943));class h extends c.ChatAgent{constructor(e,t){super({participantId:"ki-autoagent.docu",name:"docu",fullName:"DocuBot",description:"Technical Documentation Expert - Creates READMEs, API docs, user guides",model:"gpt-5-2025-09-12",iconPath:r.Uri.joinPath(e.extensionUri,"media","docu-icon.svg"),capabilities:["README Generation","API Documentation","User Guides","Code Comments","Technical Writing","Markdown Formatting","JSDoc/DocStrings","Changelog Creation"],commands:[{name:"readme",description:"Generate README for project",handler:"handleReadmeCommand"},{name:"api",description:"Create API documentation",handler:"handleApiCommand"},{name:"guide",description:"Write user guide or tutorial",handler:"handleGuideCommand"},{name:"comments",description:"Add documentation comments to code",handler:"handleCommentsCommand"},{name:"changelog",description:"Generate changelog from commits",handler:"handleChangelogCommand"},{name:"update-instructions",description:"Update agent instruction files",handler:"handleUpdateInstructionsCommand"},{name:"view-instructions",description:"View agent instruction files",handler:"handleViewInstructionsCommand"}]},e,t),this.openAIService=new d.OpenAIService}async handleRequest(e,t,n,s){const a=e.command,o=e.prompt;this.log(`Processing ${a?`/${a}`:"general"} documentation request: ${o.substring(0,100)}...`),a?await this.handleCommand(a,o,n,s):await this.handleGeneralDocumentationRequest(o,n,s)}async processWorkflowStep(e,t,n){try{let s="";switch(e.id){case"document_code":s=await this.generateCodeDocumentation(t,n);break;case"create_readme":s=await this.generateReadme(t,n);break;case"api_docs":s=await this.generateApiDocs(t,n);break;default:s=await this.generateGeneralDocs(t,n)}return{status:"success",content:s,metadata:{step:e.id,agent:"docu",type:"documentation"}}}catch(t){throw new Error(`Failed to process documentation step ${e.id}: ${t.message}`)}}async handleReadmeCommand(e,t,n){t.progress("📝 Analyzing project structure...");try{const n=r.workspace.workspaceFolders?.[0];if(!n)return void t.markdown("❌ No workspace folder found");const s=await this.analyzeProjectStructure(n.uri.fsPath);t.progress("📝 Generating README...");const a=await this.createReadme(s,e);t.markdown("## 📝 Generated README\n\n"),t.markdown("```markdown\n"+a+"\n```"),this.createActionButton("💾 Save README.md","ki-autoagent.saveFile",["README.md",a],t)}catch(e){t.markdown(`❌ README generation failed: ${e.message}`)}}async handleApiCommand(e,t,n){t.progress("🔍 Analyzing code for API endpoints...");try{const n=r.workspace.workspaceFolders?.[0];if(!n)return void t.markdown("❌ No workspace folder found");const s=await this.analyzeApiEndpoints(n.uri.fsPath);t.progress("📖 Generating API documentation...");const a=await this.createApiDocumentation(s,e);t.markdown("## 📖 API Documentation\n\n"),t.markdown("```markdown\n"+a+"\n```"),this.createActionButton("💾 Save API.md","ki-autoagent.saveFile",["docs/API.md",a],t)}catch(e){t.markdown(`❌ API documentation generation failed: ${e.message}`)}}async handleGuideCommand(e,t,n){t.progress("📚 Creating user guide...");try{const n=await this.createUserGuide(e);t.markdown("## 📚 User Guide\n\n"),t.markdown(n),this.createActionButton("💾 Save Guide","ki-autoagent.saveFile",["docs/USER_GUIDE.md",n],t)}catch(e){t.markdown(`❌ Guide creation failed: ${e.message}`)}}async handleCommentsCommand(e,t,n){const s=r.window.activeTextEditor;if(s){t.progress("💬 Adding documentation comments...");try{const n=s.document,a=n.getText(),o=n.languageId,i=await this.addDocumentationComments(a,o,e);t.markdown("## 💬 Documented Code\n\n"),t.markdown("```"+o+"\n"+i+"\n```"),this.createActionButton("💾 Apply Comments","ki-autoagent.replaceContent",[i],t)}catch(e){t.markdown(`❌ Comment generation failed: ${e.message}`)}}else t.markdown("❌ No active editor found. Please open a file to document.")}async handleChangelogCommand(e,t,n){t.progress("📋 Analyzing commit history...");try{const n=await this.getGitLog();t.progress("📋 Generating changelog...");const s=await this.createChangelog(n,e);t.markdown("## 📋 Changelog\n\n"),t.markdown("```markdown\n"+s+"\n```"),this.createActionButton("💾 Save CHANGELOG.md","ki-autoagent.saveFile",["CHANGELOG.md",s],t)}catch(e){t.markdown(`❌ Changelog generation failed: ${e.message}`)}}async handleGeneralDocumentationRequest(e,t,n){t.progress("📝 Creating documentation...");try{const n=await this.createGeneralDocumentation(e);t.markdown("## 📝 Documentation\n\n"),t.markdown(n)}catch(e){t.markdown(`❌ Documentation creation failed: ${e.message}`)}}async handleUpdateInstructionsCommand(e,t,n){t.progress("📝 Updating agent instructions...");try{const n=e.match(/\b(orchestrator|architect|codesmith|tradestrat|research|opus-arbitrator|docu|reviewer|fixer)\b/i);if(!n)return void t.markdown('❌ Please specify which agent instructions to update (e.g., "update-instructions for codesmith")');const s=n[1].toLowerCase(),a=await this.readInstructionFile(s);t.progress("📝 Analyzing and improving instructions...");const o=await this.improveInstructions(s,a,e);t.markdown(`## 📝 Improved Instructions for ${s}\n\n`),t.markdown("```markdown\n"+o+"\n```"),this.createActionButton("💾 Save Updated Instructions","ki-autoagent.saveInstructions",[s,o],t)}catch(e){t.markdown(`❌ Instruction update failed: ${e.message}`)}}async handleViewInstructionsCommand(e,t,n){t.progress("📖 Loading agent instructions...");try{const n=e.match(/\b(orchestrator|architect|codesmith|tradestrat|research|opus-arbitrator|docu|reviewer|fixer)\b/i);if(n){const e=n[1].toLowerCase(),s=await this.readInstructionFile(e);t.markdown(`## 📖 Instructions for ${e}\n\n`),t.markdown("```markdown\n"+s+"\n```")}else t.markdown("## 📖 Available Agent Instructions\n\n"),t.markdown("Choose an agent to view instructions:\n"),t.markdown("- orchestrator\n"),t.markdown("- architect\n"),t.markdown("- codesmith\n"),t.markdown("- tradestrat\n"),t.markdown("- research\n"),t.markdown("- opus-arbitrator (richter)\n"),t.markdown("- docu\n"),t.markdown("- reviewer\n"),t.markdown("- fixer\n\n"),t.markdown("Use: `/view-instructions [agent-name]` to view specific instructions")}catch(e){t.markdown(`❌ Failed to view instructions: ${e.message}`)}}async analyzeProjectStructure(e){const t={name:l.basename(e),path:e,hasPackageJson:!1,dependencies:[],scripts:{},mainFiles:[]};try{const n=l.join(e,"package.json"),s=JSON.parse(await u.readFile(n,"utf-8"));t.hasPackageJson=!0,t.dependencies=Object.keys(s.dependencies||{}),t.scripts=s.scripts||{}}catch(e){}return t}async analyzeApiEndpoints(e){return{endpoints:[],baseUrl:"",authentication:"unknown"}}async createReadme(e,t){const n=`Create a comprehensive README.md for a project with the following information:\n\nProject Name: ${e.name}\nHas package.json: ${e.hasPackageJson}\nDependencies: ${e.dependencies.join(", ")}\nScripts: ${JSON.stringify(e.scripts,null,2)}\n\nAdditional context: ${t}\n\nCreate a professional README with sections for:\n- Project title and description\n- Features\n- Installation\n- Usage\n- Configuration (if applicable)\n- API Reference (if applicable)\n- Contributing\n- License\n\nUse proper markdown formatting with badges where appropriate.\n\n${this.getSystemContextPrompt()}`;return await this.openAIService.chat([{role:"system",content:"You are DocuBot, an expert technical writer specializing in creating clear, comprehensive documentation."},{role:"user",content:n}])}async createApiDocumentation(e,t){const n=`Create comprehensive API documentation based on the following:\n\n${JSON.stringify(e,null,2)}\n\nAdditional context: ${t}\n\nInclude:\n- API overview\n- Authentication\n- Endpoints with request/response examples\n- Error codes\n- Rate limiting (if applicable)\n- Examples in multiple languages\n\n${this.getSystemContextPrompt()}`;return await this.openAIService.chat([{role:"system",content:"You are DocuBot, an expert in creating clear, comprehensive API documentation."},{role:"user",content:n}])}async createUserGuide(e){const t=`Create a comprehensive user guide for the following:\n\n${e}\n\nInclude:\n- Getting Started\n- Key Features\n- Step-by-step tutorials\n- Common use cases\n- Troubleshooting\n- FAQ\n\nMake it user-friendly and easy to follow.\n\n${this.getSystemContextPrompt()}`;return await this.openAIService.chat([{role:"system",content:"You are DocuBot, an expert in creating user-friendly documentation and guides."},{role:"user",content:t}])}async addDocumentationComments(e,t,n){const s=`Add comprehensive documentation comments to this ${t} code:\n\n${e}\n\nAdditional context: ${n}\n\nUse the appropriate comment style for ${t} (JSDoc for JavaScript/TypeScript, docstrings for Python, etc.)\nDocument all functions, classes, and complex logic.\n\n${this.getSystemContextPrompt()}`;return await this.openAIService.chat([{role:"system",content:"You are DocuBot, an expert in code documentation and technical writing."},{role:"user",content:s}])}async createChangelog(e,t){const n=`Create a CHANGELOG.md based on the following git history:\n\n${e}\n\nAdditional context: ${t}\n\nFormat using Keep a Changelog standard (https://keepachangelog.com/)\nGroup changes by version and category (Added, Changed, Deprecated, Removed, Fixed, Security)\n\n${this.getSystemContextPrompt()}`;return await this.openAIService.chat([{role:"system",content:"You are DocuBot, an expert in creating clear, organized changelogs."},{role:"user",content:n}])}async createGeneralDocumentation(e){const t=`Create comprehensive documentation for:\n\n${e}\n\nMake it clear, well-structured, and professional.\n\n${this.getSystemContextPrompt()}`;return await this.openAIService.chat([{role:"system",content:"You are DocuBot, an expert technical writer creating clear, comprehensive documentation."},{role:"user",content:t}])}async getGitLog(){const e=n(317);return new Promise((t,n)=>{e.exec("git log --oneline -50",(e,s,a)=>{e?n(e):t(s)})})}async generateCodeDocumentation(e,t){const n=this.buildContextFromResults(t);return this.createGeneralDocumentation(`Document the following code/feature:\n${e.prompt}\n\nContext from previous steps:\n${n}`)}async generateReadme(e,t){const n=r.workspace.workspaceFolders?.[0];if(!n)throw new Error("No workspace folder found");const s=await this.analyzeProjectStructure(n.uri.fsPath),a=this.buildContextFromResults(t);return this.createReadme(s,`${e.prompt}\n\nContext:\n${a}`)}async generateApiDocs(e,t){const n=r.workspace.workspaceFolders?.[0];if(!n)throw new Error("No workspace folder found");const s=await this.analyzeApiEndpoints(n.uri.fsPath),a=this.buildContextFromResults(t);return this.createApiDocumentation(s,`${e.prompt}\n\nContext:\n${a}`)}async generateGeneralDocs(e,t){const n=this.buildContextFromResults(t);return this.createGeneralDocumentation(`${e.prompt}\n\nContext from previous steps:\n${n}`)}buildContextFromResults(e){return e.filter(e=>"success"===e.status).map(e=>`${e.metadata?.step||"Step"}: ${e.content}`).join("\n\n")}async readInstructionFile(e){try{const t={orchestrator:"orchestrator-instructions",architect:"architect-instructions",codesmith:"codesmith-instructions",tradestrat:"tradestrat-instructions",research:"research-instructions","opus-arbitrator":"richter-instructions",docu:"docubot-instructions",reviewer:"reviewergpt-instructions",fixer:"fixerbot-instructions"}[e]||`${e}-instructions`,n=l.join(this.context.extensionPath,"src","instructions",`${t}.md`);return await u.readFile(n,"utf-8")}catch(t){throw new Error(`Failed to read instructions for ${e}: ${t.message}`)}}async writeInstructionFile(e,t){try{const n={orchestrator:"orchestrator-instructions",architect:"architect-instructions",codesmith:"codesmith-instructions",tradestrat:"tradestrat-instructions",research:"research-instructions","opus-arbitrator":"richter-instructions",docu:"docubot-instructions",reviewer:"reviewergpt-instructions",fixer:"fixerbot-instructions"}[e]||`${e}-instructions`,s=l.join(this.context.extensionPath,"src","instructions",`${n}.md`);await u.writeFile(s,t,"utf-8")}catch(t){throw new Error(`Failed to write instructions for ${e}: ${t.message}`)}}async improveInstructions(e,t,n){const s=`Improve the instruction set for the ${e} agent.\n\nCurrent instructions:\n${t}\n\nUser context and requirements:\n${n}\n\nPlease improve these instructions by:\n1. Ensuring clarity and completeness\n2. Adding any missing capabilities or commands\n3. Improving formatting and organization\n4. Updating best practices\n5. Ensuring consistency with the agent's role\n6. Adding examples where helpful\n7. Keeping the same markdown structure\n\nReturn the complete improved instruction set in markdown format.\n\n${this.getSystemContextPrompt()}`;return await this.openAIService.chat([{role:"system",content:"You are DocuBot, an expert in creating and improving technical documentation and agent instructions."},{role:"user",content:s}])}}t.DocuBotAgent=h},177:function(e,t,n){var s,a=this&&this.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,a)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},s(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=s(e),i=0;i<n.length;i++)"default"!==n[i]&&a(t,e,n[i]);return o(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.VSCodeMasterDispatcher=void 0;const r=i(n(398)),c=n(869);t.VSCodeMasterDispatcher=class{constructor(e){this.agents=new Map,this.projectTypes=new Map,this.intentPatterns=new Map,this.context=e,this.contextManager=c.ConversationContextManager.getInstance(),this.initializeProjectTypes(),this.initializeIntentPatterns()}async processRequest(e){console.log("\n🚦 [DISPATCHER] ====== processRequest called ======"),console.log(`🚦 [DISPATCHER] request.command: '${e.command}'`),console.log("🚦 [DISPATCHER] request.command type: "+typeof e.command),console.log(`🚦 [DISPATCHER] request.prompt: "${e.prompt?.substring(0,50)}..."`),console.log("🚦 [DISPATCHER] Command check results:"),console.log(`🚦 [DISPATCHER]   - request.command exists: ${!!e.command}`),console.log(`🚦 [DISPATCHER]   - request.command !== 'auto': ${"auto"!==e.command}`),console.log(`🚦 [DISPATCHER]   - request.command !== 'orchestrator': ${"orchestrator"!==e.command}`);try{const t=await this.getWorkspaceContext();if(e.command&&"auto"!==e.command&&"orchestrator"!==e.command){console.log("🎯 [DISPATCHER] ✅ SINGLE AGENT MODE ACTIVATED"),console.log(`🎯 [DISPATCHER] Single agent mode: Using only ${e.command}`);const n=[{id:"execute",agent:e.command,description:`Execute with ${e.command}`}];return console.log("🎯 [DISPATCHER] Created single-step workflow:"),console.log(`🎯 [DISPATCHER]   - Steps count: ${n.length}`),console.log(`🎯 [DISPATCHER]   - Step[0]: id='${n[0].id}', agent='${n[0].agent}'`),await this.executeWorkflow(n,{...e,context:t,projectType:e.projectType||"generic"})}console.log("🎯 [DISPATCHER] ⚠️ AUTO MODE ACTIVATED (not single agent)"),console.log("🎯 [DISPATCHER] Auto mode: Creating workflow based on intent");const n=await this.detectIntent(e.prompt),s=e.projectType||await this.detectProjectType(t),a=this.createWorkflow(n,s);return await this.executeWorkflow(a,{...e,context:t,projectType:s})}catch(e){return{status:"error",content:`Error processing request: ${e.message}`,metadata:{error:e.message}}}}async detectIntent(e){const t=e.toLowerCase(),n=/^(what|which|how|was|welche|wie|wer|wo|wann|warum|show|list|explain)/i.test(e),s=/(implement|create|build|write|code|develop)/i.test(e);return n&&!s?this.matchesPatterns(t,["instruction","agent","system","available","haben wir","gibt es","welche"])?{type:"query",confidence:.95,agent:"orchestrator"}:this.matchesPatterns(t,["architecture","design","pattern","structure"])?{type:"query",confidence:.9,agent:"architect"}:this.matchesPatterns(t,["research","find","information","latest"])?{type:"query",confidence:.85,agent:"research"}:{type:"query",confidence:.7,agent:"orchestrator"}:this.matchesPatterns(t,["design","architecture","system","plan","structure"])&&s?{type:"architecture",confidence:.9,agent:"architect"}:this.matchesPatterns(t,["implement","code","create","build","develop"])?{type:"implementation",confidence:.85,agent:"codesmith"}:this.matchesPatterns(t,["document","readme","docs","explain","tutorial"])?{type:"documentation",confidence:.9,agent:"docu"}:this.matchesPatterns(t,["review","check","analyze","audit","security"])?{type:"review",confidence:.85,agent:"reviewer"}:this.matchesPatterns(t,["fix","debug","error","bug","problem","issue"])?{type:"debug",confidence:.9,agent:"fixer"}:this.matchesPatterns(t,["trading","strategy","backtest","ron","market","stock"])?{type:"trading",confidence:.95,agent:"tradestrat"}:this.matchesPatterns(t,["research","search","find","information","latest"])?{type:"research",confidence:.8,agent:"research"}:{type:"query",confidence:.5,agent:"orchestrator"}}async detectProjectType(e){if(!e?.workspaceRoots||0===e.workspaceRoots.length)return"generic_software";const t=e.workspaceRoots[0];try{const e=r.Uri.joinPath(t.uri,"package.json");try{const t=await r.workspace.fs.readFile(e),n=JSON.parse(t.toString());if(n.dependencies?.streamlit||n.dependencies?.yfinance||n.dependencies?.pandas)return"trading_system";if(n.dependencies?.fastapi||n.dependencies?.express||n.dependencies?.flask)return"web_api";if(n.dependencies?.react||n.dependencies?.vue||n.dependencies?.angular)return"web_frontend"}catch(e){}const n=r.Uri.joinPath(t.uri,"requirements.txt");try{const e=(await r.workspace.fs.readFile(n)).toString();if(e.includes("yfinance")||e.includes("pandas")||e.includes("streamlit"))return"trading_system";if(e.includes("fastapi")||e.includes("flask")||e.includes("django"))return"web_api"}catch(e){}const s=(await r.workspace.findFiles("**/*.{py,js,ts,jsx,tsx}","**/node_modules/**",50)).map(e=>e.fsPath.toLowerCase());if(s.some(e=>e.includes("strategy")||e.includes("trading")||e.includes("backtest")))return"trading_system";if(s.some(e=>e.includes("api")||e.includes("server")||e.includes("endpoint")))return"web_api"}catch(e){console.error("Error detecting project type:",e)}return"generic_software"}createWorkflow(e,t){const n=this.projectTypes.get(t);let s=[];switch(e.type){case"query":s=[{id:"answer",agent:e.agent,description:"Answer query directly"}];break;case"architecture":s=[{id:"analyze",agent:"architect",description:"Analyze requirements and context"},{id:"design",agent:"architect",description:"Create architecture design"},{id:"review",agent:"codesmith",description:"Review architecture for best practices"}];break;case"implementation":s=[{id:"plan",agent:"architect",description:"Plan implementation approach"},{id:"implement",agent:"codesmith",description:"Implement the solution"},{id:"test",agent:"codesmith",description:"Create tests"},{id:"review",agent:"codesmith",description:"Review implementation"}];break;case"trading":s=[{id:"strategy_design",agent:"tradestrat",description:"Design trading strategy"},{id:"implement",agent:"codesmith",description:"Implement strategy code"},{id:"backtest",agent:"tradestrat",description:"Create backtesting framework"},{id:"review",agent:"tradestrat",description:"Review for trading best practices"}];break;case"debug":s=[{id:"analyze",agent:"codesmith",description:"Analyze the problem"},{id:"fix",agent:"codesmith",description:"Implement fix"},{id:"test",agent:"codesmith",description:"Test the fix"}];break;case"documentation":s=[{id:"analyze",agent:"architect",description:"Analyze documentation requirements"},{id:"document",agent:"codesmith",description:"Generate documentation"}];break;case"research":s=[{id:"research",agent:"research",description:"Research and gather information"}];break;default:s=[{id:"execute",agent:e.agent||"codesmith",description:"Execute task"}]}return"query"!==e.type&&n?.workflow&&(s=[...s,...n.workflow.filter(e=>!s.some(t=>t.id===e.id))]),s}async executeWorkflow(e,t){const n=[];let s={status:"success",content:"",suggestions:[],references:[]};console.log(`🚀 [WORKFLOW] Starting workflow execution with ${e.length} steps`),console.log(`🚀 [WORKFLOW] Workflow steps: ${e.map(e=>`${e.id}:${e.agent}`).join(" → ")}`),console.log(`🚀 [WORKFLOW] Current agent registry size: ${this.agents.size}`),console.log(`🚀 [WORKFLOW] Current registered agents: [${Array.from(this.agents.keys()).join(", ")}]`);for(const a of e)try{if(console.log("\n🔍 [WORKFLOW STEP] ========================================"),console.log(`🔍 [WORKFLOW STEP] Executing: ${a.description}`),console.log(`🔍 [WORKFLOW STEP] Looking for agent: "${a.agent}"`),console.log(`🔍 [WORKFLOW STEP] Agent registry has ${this.agents.size} agents`),console.log(`🔍 [WORKFLOW STEP] Available agents: [${Array.from(this.agents.keys()).join(", ")}]`),t.onPartialResponse){const n=e.indexOf(a)+1;t.onPartialResponse(`\n🔄 **Step ${n}/${e.length}**: @${a.agent} - ${a.description}\n\n`)}let o=this.agents.get(a.agent);if(console.log(`🔍 [WORKFLOW STEP] Direct lookup for "${a.agent}": ${o?"FOUND":"NOT FOUND"}`),!o){const e={architect:["architect","ki-autoagent.architect"],codesmith:["codesmith","ki-autoagent.codesmith"],tradestrat:["tradestrat","ki-autoagent.tradestrat"],research:["research","ki-autoagent.research"],richter:["richter","ki-autoagent.richter"],orchestrator:["orchestrator","ki-autoagent.orchestrator"]}[a.agent];if(e)for(const t of e)if(o=this.agents.get(t),o){console.log(`[DEBUG] Found agent ${a.agent} under name: ${t}`);break}}if(!o){if(console.error(`[DEBUG] Agent ${a.agent} not found! Available agents: ${Array.from(this.agents.keys()).join(", ")}`),o=this.agents.get("orchestrator")||this.agents.get("ki-autoagent.orchestrator"),!o){const e=`Agent ${a.agent} not found. Registered agents: [${Array.from(this.agents.keys()).join(", ")}]`;throw console.error(`❌ [WORKFLOW STEP] ${e}`),new Error(e)}console.warn(`[DEBUG] Using orchestrator as fallback for ${a.agent}`)}console.log(`[DEBUG] Found agent: ${a.agent}, executing step: ${a.description}`),console.log(`[DEBUG] Passing ${n.length} previous results to agent`);const i=this.contextManager.getFormattedContext(5),r={...t,prompt:t.prompt,conversationHistory:n.map(e=>({agent:e.metadata?.agent||"unknown",step:e.metadata?.step||"unknown",content:e.content})),globalContext:i},c=await o.executeStep(a,r,n);if(n.push(c),this.contextManager.addEntry({timestamp:(new Date).toISOString(),agent:a.agent,step:a.id,input:t.prompt,output:c.content,metadata:c.metadata}),console.log(`[INTER-AGENT] ${a.agent} completed step '${a.id}' with ${c.content.length} chars`),console.log("[INTER-AGENT] Result saved to conversation history"),console.log("[INTER-AGENT] Result will be passed to next agent in workflow"),t.onPartialResponse){const e=c.content.substring(0,200);t.onPartialResponse(`✅ Completed: ${e}${c.content.length>200?"...":""}\n\n`)}1===e.length?(s.content=c.content,s.metadata={...s.metadata,...c.metadata,agent:a.agent}):s.content+=`## ${a.description}\n\n${c.content}\n\n`,s.suggestions?.push(...c.suggestions||[]),s.references?.push(...c.references||[]),"error"===c.status&&(s.status="partial_success")}catch(e){const t=e.message||e;console.error(`❌ Error executing step ${a.id} (${a.agent}): ${t}`),s.status="error",s.content+=`❌ Error in ${a.description}: ${t}\n\n`,t.includes("not found")?(s.content+="**Troubleshooting:**\n",s.content+=`- Registered agents: [${Array.from(this.agents.keys()).join(", ")}]\n`,s.content+="- Ensure all agents are properly initialized\n\n"):t.includes("quota")||t.includes("API")?(s.content+="**API Configuration Required:**\n",s.content+="1. Open VS Code Settings (Cmd+,)\n",s.content+='2. Search for "KI AutoAgent"\n',s.content+="3. Configure your API keys:\n",s.content+="   - OpenAI API Key\n",s.content+="   - Anthropic API Key\n",s.content+="   - Perplexity API Key\n\n"):t.includes("Claude Web Proxy")&&(s.content+="**Claude Web Proxy Required:**\n",s.content+="The Claude Web Proxy server is not running.\n",s.content+="Please start the proxy server to use Claude models.\n\n")}return s}async getWorkspaceContext(){const e=r.window.activeTextEditor,t=r.workspace.workspaceFolders,n=r.workspace.textDocuments;let s="",a="";return e&&(a=e.document.fileName,e.selection.isEmpty||(s=e.document.getText(e.selection))),{activeEditor:e,workspaceRoots:t,openDocuments:n,selectedText:s,currentFile:a}}registerAgent(e,t){console.log(`🔧 [DISPATCHER] Registering agent: ${e}`),console.log("🔧 [DISPATCHER] Agent object type: "+typeof t),console.log("🔧 [DISPATCHER] Agent has executeStep: "+typeof t.executeStep),console.log(`🔧 [DISPATCHER] Agent config: ${JSON.stringify(t.config||"NO CONFIG")}`),this.agents.set(e,t),console.log(`🔧 [DISPATCHER] Total registered agents: ${this.agents.size}`),console.log(`🔧 [DISPATCHER] All registered agent IDs: [${Array.from(this.agents.keys()).join(", ")}]`),console.log(`🔧 [DISPATCHER] Agent storage verification - Can retrieve ${e}: ${this.agents.has(e)?"YES":"NO"}`);const n=this.agents.get(e);console.log(`🔧 [DISPATCHER] Immediate retrieval test for ${e}: ${n?"SUCCESS":"FAILED"}`)}getRegisteredAgents(){return Array.from(this.agents.keys())}async getAgentStats(){const e={};for(const[t,n]of this.agents)n.getStats&&(e[t]=await n.getStats());return e}matchesPatterns(e,t){return t.some(t=>e.includes(t))}initializeProjectTypes(){this.projectTypes.set("trading_system",{name:"Trading System",patterns:["streamlit","yfinance","pandas","trading","strategy"],qualityGates:["engine_parity","trading_validation","ron_compliance"],workflow:[{id:"strategy_validation",agent:"tradestrat",description:"Validate trading strategy logic"},{id:"risk_analysis",agent:"tradestrat",description:"Analyze risk management"}],primaryAgent:"tradestrat"}),this.projectTypes.set("web_api",{name:"Web API",patterns:["fastapi","flask","express","api"],qualityGates:["security_review","performance_check","api_design"],workflow:[{id:"security_review",agent:"codesmith",description:"Security vulnerability check"},{id:"api_documentation",agent:"codesmith",description:"Generate API documentation"}],primaryAgent:"codesmith"}),this.projectTypes.set("generic_software",{name:"Generic Software",patterns:[],qualityGates:["code_quality","performance","security"],workflow:[],primaryAgent:"codesmith"})}initializeIntentPatterns(){this.intentPatterns.set("architecture",[/\b(design|architect|structure|system)\b/i,/\b(plan|planning|blueprint)\b/i]),this.intentPatterns.set("implementation",[/\b(implement|code|create|build|develop)\b/i,/\b(function|class|method|api)\b/i])}}},185:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_AGENT_MODELS=t.AVAILABLE_MODELS=void 0,t.AVAILABLE_MODELS={"claude-opus-4-1-20250805":{name:"Claude Opus 4.1",provider:"anthropic",tier:"supreme",strengths:["reasoning","conflict-resolution","judgment"],costPerMillion:{input:15,output:75}},"claude-sonnet-4-20250514":{name:"Claude Sonnet 4",provider:"anthropic",tier:"premium",strengths:["coding","analysis","implementation"],costPerMillion:{input:3,output:15}},"claude-3-7-sonnet-20250219":{name:"Claude 3.7 Sonnet",provider:"anthropic",tier:"standard",strengths:["thinking","extended-reasoning"],costPerMillion:{input:3,output:15}},"gpt-4o-2024-11-20":{name:"GPT-4o (Latest)",provider:"openai",tier:"premium",strengths:["multimodal","architecture","planning"],costPerMillion:{input:2.5,output:10}},"gpt-4o-mini-2024-07-18":{name:"GPT-4o Mini",provider:"openai",tier:"efficient",strengths:["fast-responses","cost-effective","review"],costPerMillion:{input:.15,output:.6}},"llama-3.1-sonar-small-128k-online":{name:"Llama 3.1 Sonar (Online)",provider:"perplexity",tier:"research",strengths:["web-search","real-time-data","research"],costPerMillion:{input:.2,output:.2}}},t.DEFAULT_AGENT_MODELS={orchestrator:"claude-sonnet-4-20250514",richter:"claude-opus-4-1-20250805",architect:"gpt-4o-2024-11-20",codesmith:"claude-sonnet-4-20250514",tradestrat:"claude-sonnet-4-20250514",research:"llama-3.1-sonar-small-128k-online"}},191:function(e,t,n){var s,a=this&&this.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,a)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},s(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=s(e),i=0;i<n.length;i++)"default"!==n[i]&&a(t,e,n[i]);return o(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.OpusArbitratorAgent=void 0;const r=i(n(398)),c=n(806),d=n(167),l=n(567);class u extends c.ChatAgent{constructor(e,t){super({participantId:"ki-autoagent.richter",name:"richter",fullName:"OpusArbitrator",description:"⚖️ Supreme Quality Judge powered by Claude Opus 4.1 - Final arbitrator for agent conflicts with superior reasoning capabilities",model:"claude-4.1-opus-20250915",iconPath:r.Uri.joinPath(e.extensionUri,"media","claude-icon.svg"),capabilities:["Agent Conflict Resolution","Supreme Decision Making","Complex Reasoning & Analysis","Multi-Agent Coordination","Final Authority on Technical Disputes"],commands:[{name:"judge",description:"Make supreme judgment on any matter",handler:"handleJudgeCommand"},{name:"evaluate",description:"Deep technical evaluation of options",handler:"handleEvaluateCommand"},{name:"resolve",description:"Resolve conflicts between agents",handler:"handleResolveCommand"},{name:"verdict",description:"Final binding verdict on decisions",handler:"handleVerdictCommand"}]},e,t),this.anthropicService=new d.AnthropicService,this.claudeCodeService=(0,l.getClaudeCodeService)()}async handleRequest(e,t,n,s){if(!await this.validateServiceConfig(n))return;const a=e.command,o=e.prompt;this.log(`Processing ${a?`/${a}`:"general"} arbitration request: ${o.substring(0,100)}...`),a?await this.handleCommand(a,o,n,s):await this.handleGeneralArbitrationRequest(o,n,s)}async processWorkflowStep(e,t,n){const s=await this.getWorkspaceContext();let a="",o="";switch(e.id){case"conflict_analysis":a=this.getConflictResolutionPrompt(),o=`Analyze this agent conflict: ${t.prompt}\n\nContext:\n${s}`;break;case"technical_evaluation":a=this.getDeepEvaluationPrompt(),o=`Evaluate technical options: ${t.prompt}\n\nPrevious Analysis:\n${this.extractPreviousContent(n)}`;break;case"final_judgment":a=this.getFinalVerdictPrompt(),o=`Deliver final judgment: ${t.prompt}\n\nContext:\n${s}`;break;default:a=this.getSupremeJudgmentPrompt(),o=`${t.prompt}\n\nContext:\n${s}`}try{const t=await this.getClaudeService();return{status:"success",content:await t.chat([{role:"system",content:a},{role:"user",content:o}]),metadata:{step:e.id,agent:"richter",model:"claude-opus-4-1-20250805"}}}catch(t){throw new Error(`Failed to process ${e.id}: ${t.message}`)}}async handleJudgeCommand(e,t,n){t.progress("👑 OpusArbitrator applying supreme judgment...");const s=await this.getWorkspaceContext(),a=this.getSupremeJudgmentPrompt(),o=`Apply supreme judgment: ${e}\n\nWorkspace Context:\n${s}`;try{const e=await this.getClaudeService(),n=await e.chat([{role:"system",content:a},{role:"user",content:o}]);t.markdown("## 👑 SUPREME JUDGMENT\n\n"),t.markdown(n),t.markdown("\n\n**⚖️ Judgment rendered by OpusArbitrator - Claude Opus 4.1**")}catch(e){t.markdown(`❌ **Judgment Error:** ${e.message}`)}}async handleResolveCommand(e,t,n){t.progress("⚖️ OpusArbitrator analyzing conflict...");const s=await this.getWorkspaceContext(),a=this.getConflictResolutionPrompt(),o=`Resolve this agent conflict: ${e}\n\nWorkspace Context:\n${s}`;try{const e=await this.getClaudeService(),n=await e.chat([{role:"system",content:a},{role:"user",content:o}]);t.markdown("## ⚖️ SUPREME ARBITRATION DECISION\n\n"),t.markdown(n),t.markdown("\n\n**🏛️ This decision is final and binding for all agents.**")}catch(e){t.markdown(`❌ **Arbitration Error:** ${e.message}`)}}async handleEvaluateCommand(e,t,n){t.progress("🔍 OpusArbitrator performing deep evaluation...");const s=await this.getWorkspaceContext(),a=this.getDeepEvaluationPrompt(),o=`Perform deep technical evaluation: ${e}\n\nWorkspace Context:\n${s}`;try{const e=await this.getClaudeService(),n=await e.chat([{role:"system",content:a},{role:"user",content:o}]);t.markdown("## 🔍 DEEP TECHNICAL EVALUATION\n\n"),t.markdown(n),t.markdown("\n\n**📊 Analysis conducted by OpusArbitrator with Claude Opus 4.1**")}catch(e){t.markdown(`❌ **Evaluation Error:** ${e.message}`)}}async handleVerdictCommand(e,t,n){t.progress("⚡ OpusArbitrator delivering final verdict...");const s=await this.getWorkspaceContext(),a=this.getFinalVerdictPrompt(),o=`Deliver final verdict on: ${e}\n\nWorkspace Context:\n${s}`;try{const e=await this.getClaudeService(),n=await e.chat([{role:"system",content:a},{role:"user",content:o}]);t.markdown("## ⚡ FINAL VERDICT\n\n"),t.markdown(n),t.markdown("\n\n**🏛️ VERDICT IS FINAL - All agents must comply**")}catch(e){t.markdown(`❌ **Verdict Error:** ${e.message}`)}}async handleGeneralArbitrationRequest(e,t,n){t.progress("👑 OpusArbitrator applying supreme judgment...");const s=await this.getWorkspaceContext(),a=this.getSupremeJudgmentPrompt(),o=`${e}\n\nWorkspace Context:\n${s}`;try{const e=await this.getClaudeService(),n=await e.chat([{role:"system",content:a},{role:"user",content:o}]);t.markdown("## 👑 SUPREME JUDGMENT\n\n"),t.markdown(n),t.markdown("\n\n**⚖️ Judgment rendered by OpusArbitrator - Claude Opus 4.1**")}catch(e){t.markdown(`❌ **Judgment Error:** ${e.message}`)}}async validateServiceConfig(e){const t=r.workspace.getConfiguration("kiAutoAgent"),n=t.get("claude.serviceMode","claude-code");if("api"===n){if(!t.get("anthropic.apiKey"))return e.markdown("❌ **Configuration Error**: Anthropic API key is required for Claude Opus 4.1\n\n"),e.markdown("Please configure your API key in VS Code Settings:\n"),e.markdown("1. Open Settings (Ctrl+,)\n"),e.markdown('2. Search for "KI AutoAgent"\n'),e.markdown("3. Set your Anthropic API key\n"),!1}else if("claude-code"===n&&!await this.claudeCodeService.isAvailable())return e.markdown("❌ **Claude Code CLI not available for Opus 4.1**\n\n**To install:**\n```bash\nnpm install -g @anthropic-ai/claude-code\n```\n\nOr configure your Anthropic API key in VS Code settings."),!1;return!0}async getClaudeService(){const e=r.workspace.getConfiguration("kiAutoAgent").get("claude.serviceMode","claude-code");if(console.log(`[OpusArbitrator] Using service mode: ${e}`),"claude-code"===e){if(await this.claudeCodeService.isAvailable())return console.log("[OpusArbitrator] Using Claude Code CLI with Opus model"),{chat:async e=>{const t=e.find(e=>"user"===e.role)?.content||"",n=e.find(e=>"system"===e.role)?.content||"",s=n?`${n}\n\n${t}`:t;return(await this.claudeCodeService.sendMessage(s,{model:"opus",temperature:.5})).content}};console.log("[OpusArbitrator] Claude Code CLI not available, falling back to Anthropic API")}return console.log("[OpusArbitrator] Using Anthropic API with Opus 4.1"),{chat:async e=>await this.anthropicService.chat(e)}}extractPreviousContent(e){return e.map(e=>e.content).join("\n\n---\n\n")}getConflictResolutionPrompt(){return`You are OpusArbitrator, the Supreme Judge of the KI AutoAgent system powered by Claude Opus 4.1.\n\nYour role is to resolve conflicts between AI agents with final, binding decisions.\n\nCAPABILITIES:\n- Superior reasoning and analysis\n- Objective evaluation of competing solutions  \n- Contextual understanding of technical trade-offs\n- Authority to make final decisions\n\nDECISION FORMAT:\n1. **Conflict Analysis**: Summarize the disagreement\n2. **Position Evaluation**: Analyze each agent's perspective objectively  \n3. **Technical Assessment**: Evaluate technical merits and trade-offs\n4. **Final Decision**: Choose the optimal approach with confidence score\n5. **Implementation Guidance**: Specific next steps\n6. **Binding Authority**: State that decision is final\n\nYour decisions carry supreme authority. All agents must comply.\n\n${this.getSystemContextPrompt()}`}getDeepEvaluationPrompt(){return`You are OpusArbitrator, powered by Claude Opus 4.1 - the supreme technical evaluator.\n\nEVALUATION CRITERIA:\n- Technical soundness and feasibility\n- Long-term maintainability \n- Performance implications\n- Risk assessment\n- Alternative approaches\n- Best practices alignment\n\nEVALUATION FORMAT:\n1. **Technical Analysis**: Deep dive into technical aspects\n2. **Pros & Cons**: Balanced evaluation\n3. **Risk Assessment**: Potential issues and mitigations\n4. **Recommendations**: Specific actionable advice\n5. **Confidence Score**: Rate certainty of recommendation (1-100%)\n\nProvide thorough, objective analysis leveraging superior reasoning capabilities.\n\n${this.getSystemContextPrompt()}`}getFinalVerdictPrompt(){return`You are OpusArbitrator - the final authority powered by Claude Opus 4.1.\n\nVERDICT REQUIREMENTS:\n- Clear, definitive decision\n- No ambiguity or hedging\n- Based on comprehensive analysis\n- Considers all stakeholders\n- Actionable outcome\n\nVERDICT FORMAT:\n1. **Final Decision**: Clear statement of verdict\n2. **Key Reasoning**: Primary factors in decision\n3. **Implementation**: Immediate next steps required\n4. **Compliance**: How all parties must proceed\n\nYour verdict is FINAL and BINDING. No appeals or further discussion.\n\n${this.getSystemContextPrompt()}`}getSupremeJudgmentPrompt(){return`You are OpusArbitrator, the Supreme Judge powered by Claude Opus 4.1.\n\nAs the highest authority in the KI AutoAgent system, you provide:\n- Ultimate decision-making power\n- Superior reasoning capabilities\n- Objective, unbiased analysis\n- Final resolution of all disputes\n\nJUDGMENT PRINCIPLES:\n- Logical, evidence-based decisions\n- Consider technical merit above all\n- Balance competing interests fairly\n- Provide clear, actionable guidance\n- Maintain system integrity\n\nApply your superior reasoning to deliver judgment that serves the greater good of the project.\n\n${this.getSystemContextPrompt()}`}getSlashCommands(){return[{command:"judge",description:"Make supreme judgment on any matter"},{command:"evaluate",description:"Deep technical evaluation of options"},{command:"resolve",description:"Resolve conflicts between agents"},{command:"verdict",description:"Final binding verdict on decisions"}]}}t.OpusArbitratorAgent=u},265:function(e,t,n){var s,a=this&&this.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,a)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},s(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=s(e),i=0;i<n.length;i++)"default"!==n[i]&&a(t,e,n[i]);return o(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.activate=async function(e){console.log("🚀 KI AutoAgent v2.3.9: Extension activation started"),v=r.window.createOutputChannel("KI AutoAgent"),v.clear(),v.show(!0),v.appendLine("🚀 KI AutoAgent Extension v2.3.9 Activating"),v.appendLine("============================================"),v.appendLine(`Time: ${(new Date).toLocaleString()}`),v.appendLine(`VS Code Version: ${r.version}`),v.appendLine(""),v.appendLine("✨ NEW: Claude Code CLI integration - Install with: npm install -g @anthropic-ai/claude-code");try{v.appendLine("Initializing Agent Configuration Manager...");const t=l.AgentConfigurationManager.getInstance(e);await t.initialize(),v.appendLine("✅ Agent Configuration Manager ready"),v.appendLine("Initializing Master Dispatcher...");const n=new c.VSCodeMasterDispatcher(e);v.appendLine("✅ Master Dispatcher ready"),v.appendLine("Initializing Chat Widget..."),new k.ChatWidget(e,n),v.appendLine("✅ Chat Widget ready");const s=[{id:"ki-autoagent.showChat",handler:()=>C.MultiAgentChatPanel.createOrShow(e.extensionUri,n)},{id:"ki-autoagent.toggleChat",handler:()=>C.MultiAgentChatPanel.createOrShow(e.extensionUri,n)},{id:"ki-autoagent.quickChat",handler:()=>{C.MultiAgentChatPanel.createOrShow(e.extensionUri,n),r.window.showInformationMessage("🤖 KI AutoAgent Chat ready! Use @ki for universal assistance or specific agents like @richter, @architect, @codesmith")}},{id:"ki-autoagent.clearUnread",handler:()=>{v||(v=r.window.createOutputChannel("KI AutoAgent")),v.clear(),v.appendLine("Cleared messages")}}];for(const t of s)try{const n=r.commands.registerCommand(t.id,t.handler);e.subscriptions.push(n),v.appendLine(`  ✅ Registered command: ${t.id}`)}catch(e){v.appendLine(`  ⚠️ Command already exists: ${t.id} - skipping`)}v.appendLine(""),v.appendLine("\nCreating Agent Instances...");let a=[],o=[];try{a.push(new h.OrchestratorAgent(e,n)),v.appendLine("  ✅ OrchestratorAgent created")}catch(e){v.appendLine(`  ❌ OrchestratorAgent failed: ${e.message}`),o.push(`OrchestratorAgent: ${e}`)}try{a.push(new f.OpusArbitratorAgent(e,n)),v.appendLine("  ✅ OpusArbitratorAgent created")}catch(e){v.appendLine(`  ❌ OpusArbitratorAgent failed: ${e.message}`),o.push(`OpusArbitratorAgent: ${e}`)}try{a.push(new u.ArchitectAgent(e,n)),v.appendLine("  ✅ ArchitectAgent created")}catch(e){v.appendLine(`  ❌ ArchitectAgent failed: ${e.message}`),o.push(`ArchitectAgent: ${e}`)}try{a.push(new p.CodeSmithAgent(e,n)),v.appendLine("  ✅ CodeSmithAgent created")}catch(e){v.appendLine(`  ❌ CodeSmithAgent failed: ${e.message}`),o.push(`CodeSmithAgent: ${e}`)}try{a.push(new m.TradeStratAgent(e,n)),v.appendLine("  ✅ TradeStratAgent created")}catch(e){v.appendLine(`  ❌ TradeStratAgent failed: ${e.message}`),o.push(`TradeStratAgent: ${e}`)}try{a.push(new g.ResearchAgent(e,n)),v.appendLine("  ✅ ResearchAgent created")}catch(e){v.appendLine(`  ❌ ResearchAgent failed: ${e.message}`),o.push(`ResearchAgent: ${e}`)}try{a.push(new w.DocuBotAgent(e,n)),v.appendLine("  ✅ DocuBotAgent created")}catch(e){v.appendLine(`  ❌ DocuBotAgent failed: ${e.message}`),o.push(`DocuBotAgent: ${e}`)}try{a.push(new y.ReviewerGPTAgent(e,n)),v.appendLine("  ✅ ReviewerGPTAgent created")}catch(e){v.appendLine(`  ❌ ReviewerGPTAgent failed: ${e.message}`),o.push(`ReviewerGPTAgent: ${e}`)}v.appendLine(`Agent creation completed: ${a.length} created, ${o.length} errors`),o.length>0&&(v.appendLine("Agent creation errors:"),o.forEach(e=>v.appendLine(`  - ${e}`)));for(const e of a)try{console.log(`✅ Agent ${e.config?.participantId||"unknown"} ready`)}catch(e){console.warn("Failed to initialize agent:",e)}v.appendLine(`\nRegistering ${a.length} agents...`);let i=[];a.forEach((t,s)=>{try{const s=t.config.participantId,a=r.chat.createChatParticipant(s,t.createHandler()),o=t.config?.iconPath;o&&(a.iconPath=o);const i=s.split(".")[1];v.appendLine(`  Registering with dispatcher: ${s} as '${i}'`),n.registerAgent(i,t),e.subscriptions.push(a),v.appendLine(`  ✅ Registered: ${s} (dispatcher ID: ${i})`)}catch(e){const t=`Failed to register agent ${s+1}: ${e.message}`;v.appendLine(`  ❌ ${t}`),i.push(t)}}),v.appendLine("\nVerifying agent registration with dispatcher:");const S=n.getRegisteredAgents();v.appendLine(`  Registered agents: [${S.join(", ")}]`),v.appendLine(`Registration completed: ${a.length-i.length} succeeded, ${i.length} failed`),i.length>0&&(v.appendLine("Registration errors:"),i.forEach(e=>v.appendLine(`  - ${e}`))),v.appendLine("\nRegistering extension commands..."),function(e,t){const n=r.commands.registerCommand("ki-autoagent.createFile",async(e,t)=>{try{const n=r.workspace.workspaceFolders?.[0];if(!n)return void r.window.showErrorMessage("No workspace folder open");const s=r.Uri.joinPath(n.uri,e);await r.workspace.fs.writeFile(s,Buffer.from(t,"utf8"));const a=await r.workspace.openTextDocument(s);await r.window.showTextDocument(a),r.window.showInformationMessage(`✅ Created file: ${e}`)}catch(e){r.window.showErrorMessage(`❌ Failed to create file: ${e.message}`)}}),s=r.commands.registerCommand("ki-autoagent.insertAtCursor",async e=>{try{const t=r.window.activeTextEditor;if(!t)return void r.window.showErrorMessage("No active text editor");const n=t.selection.active;await t.edit(t=>{t.insert(n,e)}),r.window.showInformationMessage("✅ Content inserted at cursor")}catch(e){r.window.showErrorMessage(`❌ Failed to insert content: ${e.message}`)}}),a=r.commands.registerCommand("ki-autoagent.applySuggestion",async e=>{try{"file_creation"===e.type?await r.commands.executeCommand("ki-autoagent.createFile",e.filename,e.content):"code_insertion"===e.type?await r.commands.executeCommand("ki-autoagent.insertAtCursor",e.code):r.window.showInformationMessage(`Applied suggestion: ${e.description}`)}catch(e){r.window.showErrorMessage(`❌ Failed to apply suggestion: ${e.message}`)}}),o=r.commands.registerCommand("ki-autoagent.testClaudeCLI",async()=>{const e=r.window.createOutputChannel("Claude CLI Test");e.show(),e.appendLine("🔍 Testing Claude Code CLI Integration..."),e.appendLine("==========================================\n");try{const t=(0,d.getClaudeCodeService)();if(e.appendLine("1. Checking Claude CLI availability..."),!await t.isAvailable())return e.appendLine("❌ Claude CLI not found!"),e.appendLine("\nTo install Claude CLI:"),e.appendLine("  npm install -g @anthropic-ai/claude-code"),e.appendLine("\nOr use Anthropic API by configuring your API key in VS Code settings."),void r.window.showErrorMessage("Claude CLI not installed. See output for installation instructions.");e.appendLine("✅ Claude CLI is available!\n"),e.appendLine("2. Testing Claude CLI connection...");const n=await t.testConnection();n.success?(e.appendLine(`✅ ${n.message}\n`),e.appendLine("3. Claude CLI Integration Status: WORKING"),e.appendLine("=========================================="),e.appendLine("✨ Everything is working correctly!"),e.appendLine("\nYou can now use Claude-powered agents in your chat."),r.window.showInformationMessage("✅ Claude CLI is working correctly!")):(e.appendLine(`❌ ${n.message}\n`),e.appendLine("3. Claude CLI Integration Status: ERROR"),e.appendLine("=========================================="),e.appendLine("Please check the error message above."),r.window.showErrorMessage(`Claude CLI test failed: ${n.message}`))}catch(t){e.appendLine(`\n❌ Test failed with error: ${t.message}`),e.appendLine("\nPlease check your configuration and try again."),r.window.showErrorMessage(`Claude CLI test failed: ${t.message}`)}}),i=r.commands.registerCommand("ki-autoagent.showAgentStats",async()=>{try{const e=await t.getAgentStats();if(0===Object.keys(e).length)return void r.window.showInformationMessage("No agent statistics available yet");const n=function(e){let t="# KI AutoAgent Statistics\n\n";t+=`Generated at: ${(new Date).toLocaleString()}\n\n`;for(const[n,s]of Object.entries(e)){const{totalExecutions:e,successRate:a,averageResponseTime:o,lastExecution:i}=s;t+=`## ${n}\n\n`,t+=`- **Total Executions:** ${e}\n`,t+=`- **Success Rate:** ${(100*a).toFixed(1)}%\n`,t+=`- **Average Response Time:** ${o.toFixed(0)}ms\n`,i&&(t+=`- **Last Execution:** ${new Date(i).toLocaleString()}\n`),t+="\n"}return t}(e),s=await r.workspace.openTextDocument({content:n,language:"markdown"});await r.window.showTextDocument(s)}catch(e){r.window.showErrorMessage(`❌ Failed to show stats: ${e.message}`)}}),c=r.commands.registerCommand("ki-autoagent.showHelp",async e=>{const t=function(e){let t="# KI AutoAgent Help\n\n";return e?t+=`## Help for ${e}\n\n`:(t+="## Getting Started\n\n",t+="KI AutoAgent is a universal multi-agent AI development platform for VS Code.\n\n",t+="### Available Agents\n\n",t+="- **@ki** - Universal orchestrator that automatically routes tasks\n",t+="- **@richter** - ⚖️ Supreme judge & conflict resolver (Claude Opus 4.1)\n",t+="- **@architect** - System architecture and design expert\n",t+="- **@codesmith** - Senior Python/Web developer\n",t+="- **@docu** - Technical documentation expert\n",t+="- **@reviewer** - Code review and security expert\n",t+="- **@fixer** - Bug fixing and optimization expert\n",t+="- **@tradestrat** - Trading strategy expert\n",t+="- **@research** - Research and information expert\n\n",t+="### Usage Examples\n\n",t+="```\n",t+="@ki create a REST API with FastAPI\n",t+="@richter judge which approach is better: microservices vs monolith\n",t+="@richter resolve this disagreement between @architect and @codesmith\n",t+="@architect design a microservices architecture\n",t+="@codesmith implement a Python class for user management\n",t+="@tradestrat develop a momentum trading strategy\n",t+="@fixer debug this error message\n",t+="```\n\n",t+="### Configuration\n\n",t+="1. Open VS Code Settings (Ctrl+,)\n",t+='2. Search for "KI AutoAgent"\n',t+="3. Configure your API keys:\n",t+="   - OpenAI API Key (for GPT models)\n",t+="   - Anthropic API Key (for Claude models)\n",t+="   - Perplexity API Key (for research)\n\n",t+="### Support\n\n",t+="For issues and feature requests, please visit the GitHub repository.\n"),t}(e),n=await r.workspace.openTextDocument({content:t,language:"markdown"});await r.window.showTextDocument(n)}),u=r.commands.registerCommand("ki-autoagent.planImplementation",async(e,t)=>{r.window.showInformationMessage("Creating implementation plan...")}),h=r.commands.registerCommand("ki-autoagent.executeWorkflow",async(e,t)=>{r.window.showInformationMessage("Executing workflow...")}),p=r.commands.registerCommand("ki-autoagent.configureAgentModels",async()=>{const t=l.AgentConfigurationManager.getInstance(e),n=t.getAvailableModels(),s=["orchestrator","richter","architect","codesmith","tradestrat","research"];for(const e of s){const s=t.getAgentModel(e),a=Object.keys(n).map(e=>({label:n[e].name,description:`${n[e].provider} - ${n[e].tier}`,detail:`$${n[e].costPerMillion.input}/$${n[e].costPerMillion.output} per million tokens`,modelId:e})),o=await r.window.showQuickPick(a,{title:`Select model for ${e}`,placeHolder:`Current: ${s}`,ignoreFocusOut:!0});o&&o.modelId!==s&&(await t.setAgentModel(e,o.modelId),r.window.showInformationMessage(`✅ Updated ${e} model to ${o.label}`))}}),m=r.commands.registerCommand("ki-autoagent.showAgentPerformance",async()=>{const t=l.AgentConfigurationManager.getInstance(e),n=["orchestrator","richter","architect","codesmith","tradestrat","research"];let s="# Agent Performance Report\n\n";s+=`Generated: ${(new Date).toLocaleString()}\n\n`;for(const e of n){const n=t.getAgentMetrics(e),a=t.getAgentModel(e);s+=`## ${e.charAt(0).toUpperCase()+e.slice(1)}\n`,s+=`**Model:** ${a}\n`,n?(s+=`**Success Rate:** ${(n.successfulExecutions/n.totalExecutions*100).toFixed(1)}%\n`,s+=`**Total Executions:** ${n.totalExecutions}\n`,s+=`**Average Response Time:** ${n.averageResponseTime.toFixed(0)}ms\n`,s+=`**Current Streak:** ${n.currentStreak}\n`,s+=`**Best Streak:** ${n.bestStreak}\n`):s+="**Status:** No performance data yet\n",s+="\n"}const a=await r.workspace.openTextDocument({content:s,language:"markdown"});await r.window.showTextDocument(a)}),g=r.commands.registerCommand("ki-autoagent.openConfigDirectory",async()=>{const e=r.workspace.workspaceFolders?.[0];if(e){const t=r.Uri.joinPath(e.uri,".kiautoagent");try{await r.commands.executeCommand("vscode.openFolder",t,{forceNewWindow:!1})}catch{r.window.showInformationMessage("Configuration directory will be created when first used")}}else r.window.showWarningMessage("No workspace folder open")});e.subscriptions.push(n,s,a,o,i,c,u,h,p,m,g),console.log("✅ All extension commands registered")}(e,n),v.appendLine("✅ Extension commands registered"),function(e){e.appendLine("🤖 KI AutoAgent VS Code Extension"),e.appendLine("======================================="),e.appendLine(""),e.appendLine("✅ Extension activated successfully!"),e.appendLine(""),e.appendLine("Available Agents:"),e.appendLine("• @ki - Universal orchestrator (routes to best agent)"),e.appendLine("• @richter - ⚖️ Supreme judge & conflict resolver (Opus 4.1)"),e.appendLine("• @architect - System architecture & design"),e.appendLine("• @codesmith - Code implementation & testing"),e.appendLine("• @docu - Documentation generation"),e.appendLine("• @reviewer - Code review & security"),e.appendLine("• @fixer - Bug fixing & debugging"),e.appendLine("• @tradestrat - Trading strategy development"),e.appendLine("• @research - Web research & information gathering"),e.appendLine(""),e.appendLine("Getting Started:"),e.appendLine("1. Open VS Code Chat panel (Ctrl+Shift+I)"),e.appendLine("2. Type @ki followed by your request"),e.appendLine("3. Or use specific agents like @architect, @codesmith, etc."),e.appendLine(""),e.appendLine("Configuration:"),e.appendLine("• Set your API keys in VS Code Settings"),e.appendLine('• Search for "KI AutoAgent" in settings'),e.appendLine("• Configure OpenAI, Anthropic, and Perplexity API keys"),e.appendLine(""),e.appendLine('Need help? Type "@ki /agents" to see all available agents!')}(v),v.appendLine("\n✅ KI AUTOAGENT EXTENSION ACTIVATED!"),v.appendLine("============================================"),v.appendLine(`Total agents: ${a.length}`),v.appendLine(`Registration errors: ${i.length}`),v.appendLine(`Activated at: ${(new Date).toLocaleString()}`),v.appendLine('\nType "@ki" in chat to get started!'),r.window.showInformationMessage(`🎉 KI AutoAgent v${e.extension.packageJSON.version} activated! ${a.length} agents ready.`)}catch(e){const t=`KI AutoAgent activation failed: ${e.message||e}`;console.error(t),r.window.showErrorMessage(t),v&&(v.appendLine("\n❌ ACTIVATION ERROR:"),v.appendLine(`Error: ${e}`),v.appendLine(`Message: ${e.message}`),v.appendLine(`Stack: ${e.stack}`),v.show(!0))}},t.deactivate=function(){console.log("👋 KI AutoAgent extension is deactivated")};const r=i(n(398)),c=n(177),d=n(567),l=n(478),u=n(63),h=n(270),p=n(122),m=n(930),g=n(593),f=n(191),w=n(172),y=n(714),C=n(777),k=n(637);let v},270:function(e,t,n){var s,a=this&&this.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,a)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},s(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=s(e),i=0;i<n.length;i++)"default"!==n[i]&&a(t,e,n[i]);return o(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.OrchestratorAgent=void 0;const r=i(n(398)),c=n(806),d=n(551),l=n(136),u=n(759),h=n(88),p=n(651),m=n(469),g=n(531);class f extends c.ChatAgent{constructor(e,t){super({participantId:"ki-autoagent.orchestrator",name:"ki",fullName:"Advanced KI AutoAgent Orchestrator",description:"Intelligent task orchestration with decomposition, parallel execution, and memory",model:"gpt-5-2025-09-12",iconPath:r.Uri.joinPath(e.extensionUri,"media","orchestrator-icon.svg"),capabilities:["Task Decomposition","Parallel Execution","Dynamic Workflow Adjustment","Agent Conflict Resolution","Memory-Based Learning","Multi-Agent Collaboration"],commands:[{name:"task",description:"Execute complex task with intelligent decomposition",handler:"handleTaskCommand"},{name:"agents",description:"Show available specialized agents",handler:"handleAgentsCommand"},{name:"workflow",description:"Create advanced multi-step workflow",handler:"handleWorkflowCommand"},{name:"decompose",description:"Decompose complex task into subtasks",handler:"handleDecomposeCommand"},{name:"parallel",description:"Execute tasks in parallel",handler:"handleParallelCommand"}]},e,t),this.activeWorkflows=new Map,this.openAIService=new d.OpenAIService,this.workflowEngine=new u.WorkflowEngine,this.memoryManager=new h.MemoryManager({maxMemories:1e4,similarityThreshold:.7,patternExtractionEnabled:!0}),this.sharedContext=(0,p.getSharedContext)(),this.communicationBus=(0,m.getCommunicationBus)(),this.registerCommunicationHandlers()}async handleRequest(e,t,n,s){const a=e.command,o=e.prompt;if(n.progress("🧠 Advanced Orchestrator analyzing complexity and decomposing task..."),this.log(`Advanced Orchestrator processing: ${o.substring(0,100)}...`),await this.buildContextWithMemory({prompt:o,context:{chatHistory:t.history}}),a)await this.handleCommand(a,o,n,s);else{const e=await this.analyzeTaskComplexity(o);"simple"===e?await this.handleSimpleTask(o,n,s):"moderate"===e?await this.handleModerateTask(o,n,s):await this.handleComplexTask(o,n,s)}}async analyzeTaskComplexity(e){const t=await this.memoryManager.search(e,{k:5,type:g.MemoryType.EPISODIC});if(t.length>0){const e=t.map(e=>e.entry.content.complexity).filter(Boolean);if(e.length>0){const t=e.reduce((e,t)=>(e[t]=(e[t]||0)+1,e),{});return Object.entries(t).sort(([,e],[,t])=>t-e)[0][0]}}const n={complex:[/build.*system/i,/implement.*architecture/i,/create.*application/i,/develop.*platform/i,/design.*and.*implement/i,/multiple.*components/i,/full.*stack/i,/end.*to.*end/i,/microservices/i,/distributed/i],moderate:[/create.*feature/i,/implement.*api/i,/add.*functionality/i,/refactor/i,/optimize/i,/debug.*and.*fix/i,/integrate/i,/migrate/i],simple:[/fix.*bug/i,/update.*documentation/i,/write.*function/i,/create.*file/i,/explain/i,/what.*is/i,/how.*to/i,/show.*me/i,/list/i]};for(const[t,s]of Object.entries(n))if(s.some(t=>t.test(e)))return t;return"moderate"}async handleSimpleTask(e,t,n){t.markdown("## ⚡ Simple Task Execution\n\n");const s=l.AgentRegistry.getInstance().suggestAgentForTask(e);if(s&&"orchestrator"!==s){t.markdown(`**Routing to @${s}**\n\n`);const n=this.workflowEngine.createWorkflow(`Simple: ${e}`),a={id:"execute",type:"task",agentId:s,task:e};this.workflowEngine.addNode(n.id,a);const o=await this.executeWorkflowWithProgress(n.id,e,t);this.displayResults(o,t),await this.storeTaskMemory(e,"simple",n.id,o)}else await this.handleDirectResponse(e,t)}async handleModerateTask(e,t,n){t.markdown("## 🔄 Moderate Task Workflow\n\n");const s=await this.decomposeTask(e);t.markdown(`**Identified ${s.subtasks.length} subtasks**\n\n`);const a=this.workflowEngine.createWorkflow(`Moderate: ${e}`);s.subtasks.forEach(e=>{const t={id:e.id,type:"task",agentId:e.agent,task:e.description,dependencies:e.dependencies};this.workflowEngine.addNode(a.id,t)}),s.dependencies.forEach(e=>{this.workflowEngine.addEdge(a.id,{from:e.from,to:e.to})});const o=this.workflowEngine.createExecutionPlan(a.id);this.displayExecutionPlan(o,t);const i=await this.executeWorkflowWithProgress(a.id,e,t);this.displayResults(i,t),await this.storeTaskMemory(e,"moderate",a.id,i)}async handleComplexTask(e,t,n){t.markdown("## 🚀 Complex Task Orchestration\n\n"),t.markdown("**Initiating advanced multi-agent collaboration...**\n\n");const s=await this.decomposeTask(e);t.markdown("### 📊 Task Analysis\n"),t.markdown(`- **Complexity:** ${s.complexity}\n`),t.markdown(`- **Subtasks:** ${s.subtasks.length}\n`),t.markdown(`- **Required Agents:** ${s.requiredAgents.join(", ")}\n`),t.markdown(`- **Parallelizable:** ${s.parallelizable?"Yes":"No"}\n`),t.markdown(`- **Estimated Duration:** ${s.estimatedDuration}ms\n\n`);const a=await this.communicationBus.startCollaboration({task:e,decomposition:s},s.requiredAgents,"orchestrator");t.markdown(`**Collaboration Session Started:** ${a.id}\n\n`);const o=this.workflowEngine.createWorkflow(`Complex: ${e}`);this.groupParallelTasks(s).forEach((e,t)=>{if(e.length>1){const n={id:`parallel_${t}`,type:"parallel",children:e.map(e=>e.id)};this.workflowEngine.addNode(o.id,n),e.forEach(e=>{const t={id:e.id,type:"task",agentId:e.agent,task:e.description};this.workflowEngine.addNode(o.id,t)})}else{const t=e[0],n={id:t.id,type:"task",agentId:t.agent,task:t.description,dependencies:t.dependencies};this.workflowEngine.addNode(o.id,n)}}),s.dependencies.forEach(e=>{this.workflowEngine.addEdge(o.id,{from:e.from,to:e.to,condition:e.condition?this.createCondition(e.condition):void 0})});const i=this.workflowEngine.createExecutionPlan(o.id);this.displayAdvancedExecutionPlan(i,t),t.markdown("### ⚡ Execution Progress\n\n");const r=await this.executeComplexWorkflow(o.id,e,a.id,t);this.communicationBus.completeCollaboration(a.id,r),this.displayComplexResults(r,t),await this.storeComplexTaskMemory(e,s,o.id,r),await this.extractAndStorePatterns(s,r)}async decomposeTask(e){const t=await this.memoryManager.search(e,{k:3,type:g.MemoryType.PROCEDURAL});if(t.length>0&&t[0].similarity>.85)return t[0].entry.content.decomposition;const n=`You are an expert task decomposer. Break down complex tasks into subtasks.\n\n${this.getSystemContextPrompt()}\n\nAnalyze the task and provide a JSON response with:\n{\n  "mainGoal": "primary objective",\n  "complexity": "simple|moderate|complex",\n  "subtasks": [\n    {\n      "id": "unique_id",\n      "description": "what to do",\n      "agent": "best agent for this",\n      "priority": 1-5,\n      "dependencies": ["other_task_ids"],\n      "expectedOutput": "what this produces",\n      "estimatedDuration": milliseconds\n    }\n  ],\n  "dependencies": [\n    {\n      "from": "task_id",\n      "to": "task_id",\n      "type": "sequential|parallel|conditional",\n      "condition": "optional condition"\n    }\n  ],\n  "estimatedDuration": total_milliseconds,\n  "requiredAgents": ["agent1", "agent2"],\n  "parallelizable": boolean\n}\n\nAvailable agents: architect, codesmith, docu, reviewer, fixer, tradestrat, opus-arbitrator, research`,s=await this.openAIService.chat([{role:"system",content:n},{role:"user",content:`Decompose this task: ${e}`}]);try{const t=JSON.parse(s);return await this.memoryManager.store("orchestrator",{prompt:e,decomposition:t},g.MemoryType.PROCEDURAL,{importance:.8}),t}catch(t){return this.createSimpleDecomposition(e)}}createSimpleDecomposition(e){const t=l.AgentRegistry.getInstance().suggestAgentForTask(e)||"codesmith";return{mainGoal:e,complexity:"simple",subtasks:[{id:"task_1",description:e,agent:t,priority:1,dependencies:[],expectedOutput:"Task result",estimatedDuration:5e3}],dependencies:[],estimatedDuration:5e3,requiredAgents:[t],parallelizable:!1}}groupParallelTasks(e){const t=[],n=new Set,s=[...e.subtasks].sort((e,t)=>e.priority-t.priority);return s.forEach(a=>{if(n.has(a.id))return;const o=[a];n.add(a.id),s.forEach(t=>{n.has(t.id)||e.dependencies.some(e=>e.from===a.id&&e.to===t.id||e.from===t.id&&e.to===a.id)||t.dependencies.length!==a.dependencies.length||(o.push(t),n.add(t.id))}),t.push(o)}),t}async executeWorkflowWithProgress(e,t,n){this.activeWorkflows.set(e,t),this.workflowEngine.workflows.get(e)&&(this.workflowEngine.eventBus.on("node-started",t=>{t.workflowId===e&&n.progress(`⚡ Executing: ${t.node.id}`)}),this.workflowEngine.eventBus.on("node-completed",t=>{t.workflowId===e&&n.markdown(`✅ Completed: ${t.node.id}\n`)}));const s=new Map([["prompt",t],["sharedContext",this.sharedContext.getContext()]]),a=await this.workflowEngine.execute(e,s);return this.activeWorkflows.delete(e),a}async executeComplexWorkflow(e,t,n,s){const a=new Map,o=this.workflowEngine.workflows.get(e);if(!o)return a;this.workflowEngine.eventBus.on("stage-started",t=>{t.workflowId===e&&(s.markdown(`\n**Stage Started:** ${t.stage.stageId}\n`),this.communicationBus.updateCollaborationContext(n,"orchestrator","current_stage",t.stage))}),this.workflowEngine.eventBus.on("node-completed",t=>{t.workflowId===e&&("failure"===t.result.status&&this.requestAgentHelp(t.node,t.result.error),this.sharedContext.updateContext("orchestrator",`result_${t.node.id}`,t.result))}),this.workflowEngine.eventBus.on("stage-completed",t=>{t.workflowId===e&&(this.workflowEngine.createCheckpoint(e,t.stage.stageId),s.markdown(`💾 Checkpoint created at ${t.stage.stageId}\n`))});const i=new Map([["prompt",t],["sessionId",n],["sharedContext",this.sharedContext.getContext()]]);try{return await this.workflowEngine.execute(e,i)}catch(t){s.markdown("\n⚠️ **Workflow error, attempting recovery...**\n");const n=o.checkpoints;if(n.length>0){const t=n[n.length-1];return this.workflowEngine.restoreFromCheckpoint(e,t.id),s.markdown(`♻️ Restored from checkpoint: ${t.nodeId}\n`),await this.workflowEngine.execute(e,i)}throw t}}async requestAgentHelp(e,t){const n=await this.communicationBus.requestHelp("orchestrator",{node:e,error:t,context:this.sharedContext.getContext()});if(n&&n.length>0){const t=n[0];this.workflowEngine.adjustWorkflow(e.id,{type:"modify-node",nodeId:e.id,modifications:{task:t.suggestion||e.task}})}}displayExecutionPlan(e,t){t.markdown("### 📋 Execution Plan\n\n"),t.markdown(`**Stages:** ${e.stages.length}\n`),t.markdown(`**Parallelism:** ${e.parallelism}x\n`),t.markdown(`**Estimated Duration:** ${e.estimatedDuration}ms\n\n`),e.stages.forEach((e,n)=>{t.markdown(`**Stage ${n+1}:** ${e.parallel?"⚡ Parallel":"📝 Sequential"}\n`),e.nodes.forEach(e=>{t.markdown(`  - ${e.agentId||"system"}: ${e.id}\n`)})}),t.markdown(`\n**Critical Path:** ${e.criticalPath.join(" → ")}\n\n`)}displayAdvancedExecutionPlan(e,t){t.markdown("### 🚀 Advanced Execution Strategy\n\n"),t.markdown("```mermaid\ngraph TB\n"),e.stages.forEach((e,n)=>{e.parallel?(t.markdown(`  subgraph "Stage ${n+1} - Parallel"\n`),e.nodes.forEach(e=>{t.markdown(`    ${e.id}["${e.agentId}: ${e.id}"]\n`)}),t.markdown("  end\n")):e.nodes.forEach(e=>{t.markdown(`  ${e.id}["${e.agentId}: ${e.id}"]\n`)})}),e.stages.forEach((n,s)=>{s>0&&e.stages[s-1].nodes.forEach(e=>{n.nodes.forEach(n=>{n.dependencies?.includes(e.id)&&t.markdown(`  ${e.id} --\x3e ${n.id}\n`)})})}),t.markdown("```\n\n"),t.markdown("**Performance Optimization:**\n"),t.markdown(`- Parallel Execution Speed-up: ${e.parallelism}x\n`),t.markdown(`- Critical Path Length: ${e.criticalPath.length} steps\n`),t.markdown(`- Total Estimated Time: ${(e.estimatedDuration/1e3).toFixed(1)}s\n\n`)}displayResults(e,t){t.markdown("\n### 📊 Results\n\n"),e.forEach((e,n)=>{"success"===e.status?t.markdown(`**✅ ${n}:**\n${e.output?.result||e.output||"Completed"}\n\n`):"failure"===e.status&&t.markdown(`**❌ ${n}:** ${e.error}\n\n`)})}displayComplexResults(e,t){t.markdown("\n### 🎯 Comprehensive Results\n\n");const n=[],s=[];e.forEach((e,t)=>{"success"===e.status?n.push({nodeId:t,...e}):s.push({nodeId:t,...e})}),n.length>0&&(t.markdown(`#### ✅ Successful Tasks (${n.length})\n\n`),n.forEach(e=>{t.markdown(`**${e.nodeId}:**\n`),t.markdown(`${e.output?.result||e.output||"Completed"}\n\n`)})),s.length>0&&(t.markdown(`#### ⚠️ Failed Tasks (${s.length})\n\n`),s.forEach(e=>{t.markdown(`**${e.nodeId}:** ${e.error}\n`),t.markdown("*Suggestion:* Try using @fixer to resolve this issue\n\n")}));const a=this.generateInsights(e);a.length>0&&(t.markdown("#### 💡 Insights & Recommendations\n\n"),a.forEach(e=>{t.markdown(`- ${e}\n`)}));const o=this.communicationBus.getStats();t.markdown("\n#### 📈 Collaboration Metrics\n\n"),t.markdown(`- Total Messages Exchanged: ${o.totalMessages}\n`),t.markdown(`- Average Response Time: ${o.averageResponseTime.toFixed(0)}ms\n`),t.markdown(`- Active Sessions: ${o.activeSessions}\n`)}generateInsights(e){const t=[];let n=0,s=0;e.forEach(e=>{s++,"success"===e.status&&n++});const a=n/s*100;100===a?t.push("🎉 Perfect execution! All tasks completed successfully."):a>=80?t.push(`✅ Good performance with ${a.toFixed(0)}% success rate.`):t.push(`⚠️ Room for improvement with ${a.toFixed(0)}% success rate.`);const o=new Map;e.forEach((e,t)=>{const n=e.agent||"unknown";o.set(n,(o.get(n)||0)+1)});const i=Array.from(o.entries()).sort(([,e],[,t])=>t-e)[0];i&&t.push(`📊 Most active agent: @${i[0]} (${i[1]} tasks)`);const r=Array.from(e.entries()).filter(([,e])=>e.duration>1e4).map(([e])=>e);return r.length>0&&t.push(`⏱️ Potential bottlenecks detected in: ${r.join(", ")}`),t}async storeTaskMemory(e,t,n,s){const a={taskId:n,description:e,decomposition:[],outcome:{status:this.determineOverallStatus(s),quality:this.calculateQuality(s),improvements:this.suggestImprovements(s)},duration:this.calculateTotalDuration(s),agentsInvolved:this.extractAgents(s),lessonsLearned:this.extractLessons(s)};await this.memoryManager.store("orchestrator",{prompt:e,complexity:t,taskMemory:a},g.MemoryType.EPISODIC,{importance:.7})}async storeComplexTaskMemory(e,t,n,s){const a={taskId:n,description:e,decomposition:t.subtasks.map(e=>({stepId:e.id,description:e.description,assignedAgent:e.agent,status:s.has(e.id)&&"success"===s.get(e.id).status?"completed":"failed",output:s.get(e.id),dependencies:e.dependencies})),outcome:{status:this.determineOverallStatus(s),quality:this.calculateQuality(s),improvements:this.suggestImprovements(s)},duration:this.calculateTotalDuration(s),agentsInvolved:t.requiredAgents,lessonsLearned:this.extractLessons(s)};await this.memoryManager.store("orchestrator",{prompt:e,decomposition:t,taskMemory:a},g.MemoryType.EPISODIC,{importance:.9})}async extractAndStorePatterns(e,t){const n=e.subtasks.filter(e=>t.has(e.id)&&"success"===t.get(e.id).status);n.length>0&&await this.memoryManager.store("orchestrator",{pattern:"successful_decomposition",mainGoal:e.mainGoal,successfulApproach:n.map(e=>({agent:e.agent,task:e.description,priority:e.priority}))},g.MemoryType.PROCEDURAL,{importance:.85});const s=new Map;e.dependencies.forEach(t=>{const n=e.subtasks.find(e=>e.id===t.from)?.agent,a=e.subtasks.find(e=>e.id===t.to)?.agent;n&&a&&(s.has(n)||s.set(n,[]),s.get(n).push(a))}),s.size>0&&await this.memoryManager.store("orchestrator",{pattern:"agent_collaboration",collaborations:Object.fromEntries(s)},g.MemoryType.SEMANTIC,{importance:.75})}determineOverallStatus(e){let t=0,n=0;e.forEach(e=>{n++,"success"===e.status&&t++});const s=t/n;return 1===s?"success":s>=.5?"partial":"failure"}calculateQuality(e){let t=0,n=0;return e.forEach(e=>{n++,t+="success"===e.status?1:0}),n>0?t/n:0}suggestImprovements(e){const t=[];return e.forEach((e,n)=>{"failure"===e.status&&t.push(`Improve error handling for ${n}`),e.duration>15e3&&t.push(`Optimize performance of ${n}`)}),t}calculateTotalDuration(e){let t=0;return e.forEach(e=>{t+=e.duration||0}),t}extractAgents(e){const t=new Set;return e.forEach(e=>{e.agent&&t.add(e.agent)}),Array.from(t)}extractLessons(e){const t=[];return e.forEach((e,n)=>{"failure"===e.status&&t.push(`Task ${n} failed: ${e.error}`)}),Array.from(e.values()).filter(e=>"success"===e.status).length===e.size&&t.push("All tasks completed successfully - workflow is reliable"),t}createCondition(e){return e=>!0}async handleDirectResponse(e,t){const n=`You are an intelligent orchestrator. Answer directly and concisely.\n${this.getSystemContextPrompt()}`,s=await this.openAIService.chat([{role:"system",content:n},{role:"user",content:e}]);t.markdown(s)}registerCommunicationHandlers(){this.communicationBus.register({agentId:"orchestrator",messageTypes:[m.MessageType.CONFLICT,m.MessageType.STATUS_UPDATE,m.MessageType.ERROR],handler:async e=>await this.handleAgentMessage(e)})}async handleAgentMessage(e){switch(e.type){case m.MessageType.CONFLICT:return await this.resolveConflict(e.content);case m.MessageType.STATUS_UPDATE:return this.updateWorkflowStatus(e.content),{acknowledged:!0};case m.MessageType.ERROR:return await this.handleAgentError(e.content);default:return{acknowledged:!0}}}async resolveConflict(e){return await this.communicationBus.send({from:"orchestrator",to:"OpusArbitrator",type:m.MessageType.CONFLICT,content:e,metadata:{priority:"critical",requiresResponse:!0}}),{routing:"OpusArbitrator"}}updateWorkflowStatus(e){this.sharedContext.updateContext("orchestrator",`workflow_status_${e.workflowId}`,e)}async handleAgentError(e){const t=await this.attemptRecovery(e);return t?{recovery:!0,action:t}:{recovery:!1,escalate:!0}}async attemptRecovery(e){const t=await this.memoryManager.search(e,{k:3,type:g.MemoryType.EPISODIC});if(t.length>0){const e=t[0].entry.content.solution;if(e)return e}const n=l.AgentRegistry.getInstance().suggestAgentForTask(e.task);return n&&n!==e.agent?{type:"retry",agent:n}:null}async buildContextWithMemory(e){const t=await this.memoryManager.search(e.prompt,{k:10,type:g.MemoryType.EPISODIC}),n=this.sharedContext.getContext();return{...e,memories:t.map(e=>e.entry.content),sharedContext:n,activeAgents:this.sharedContext.getActiveAgents()}}async processWorkflowStep(e,t,n){const s=`You are the advanced orchestrator of a multi-agent AI system.\n\n${this.getSystemAgentContext()}\n\nClassify this request and decide how to handle it:\nRequest: "${t.prompt}"\n\nRespond with a JSON object:\n{\n  "requestType": "query" | "simple_task" | "complex_task",\n  "shouldAnswer": true/false (should orchestrator answer directly?),\n  "reasoning": "brief explanation",\n  "suggestedAgent": "agent_name or null if orchestrator handles it"\n}\n\nRules:\n- "query": Information requests, questions about the system, agent capabilities\n- "simple_task": Single-step implementation, bug fix, or straightforward coding\n- "complex_task": Multi-step projects requiring multiple agents\n- Set shouldAnswer=true for queries about agents, system capabilities, or general questions\n- Set shouldAnswer=false for implementation tasks that need specialist agents`;try{const n=await this.openAIService.chat([{role:"system",content:s},{role:"user",content:t.prompt}]);let a;try{a=JSON.parse(n)}catch{a={requestType:"query",shouldAnswer:!0,reasoning:"Failed to parse, treating as query"}}if(a.shouldAnswer){const n=`You are the Advanced KI AutoAgent Orchestrator, the central intelligence coordinating a sophisticated multi-agent AI system.\n\n${this.getSystemAgentContext()}\n\nImportant: When asked about agents, provide comprehensive details including:\n- Agent names and their @mentions\n- Specific capabilities and expertise\n- AI models they use\n- How they collaborate\n- System features like memory, parallel execution, and learning\n\nAnswer this question thoroughly and helpfully:\n"${t.prompt}"\n\nProvide a complete, informative response with specific details about our capabilities.`;return{status:"success",content:await this.openAIService.chat([{role:"system",content:n},{role:"user",content:t.prompt}]),metadata:{step:e.id,agent:"orchestrator",type:a.requestType,reasoning:a.reasoning}}}if("simple_task"===a.requestType&&a.suggestedAgent){const n={id:e.id,type:"task",agentId:a.suggestedAgent,task:t.prompt},s=this.workflowEngine.createWorkflow(`Simple: ${t.prompt}`);this.workflowEngine.addNode(s.id,n);const o=(await this.workflowEngine.execute(s.id)).get(e.id);let i="error";return"success"===o?.status?i="success":"failure"===o?.status?i="error":"skipped"===o?.status&&(i="partial_success"),{status:i,content:o?.output?.result||o?.output||"Task completed",metadata:{step:e.id,agent:a.suggestedAgent,type:"routed_task"}}}if("complex_task"===a.requestType){const n=await this.decomposeTask(t.prompt),s=this.workflowEngine.createWorkflow(`Complex: ${t.prompt}`);n.subtasks.forEach(e=>{const t={id:e.id,type:"task",agentId:e.agent,task:e.description,dependencies:e.dependencies};this.workflowEngine.addNode(s.id,t)});const a=await this.workflowEngine.execute(s.id);return{status:"success",content:this.compileWorkflowResults(a),metadata:{step:e.id,agent:"orchestrator",type:"complex_workflow",subtasks:n.subtasks.length}}}return{status:"success",content:await this.openAIService.chat([{role:"system",content:`You are the Orchestrator. ${this.getSystemContextPrompt()}`},{role:"user",content:t.prompt}]),metadata:{step:e.id,agent:"orchestrator",type:"direct_response"}}}catch(t){return{status:"error",content:`Error processing request: ${t.message}`,metadata:{step:e.id,agent:"orchestrator",error:t.message}}}}compileWorkflowResults(e){const t=[];t.push("## Workflow Execution Complete\n"),e.forEach((e,n)=>{"success"===e.status&&(t.push(`### ✅ ${n}`),t.push(e.output?.result||e.output||"Completed"),t.push(""))});const n=Array.from(e.entries()).filter(([,e])=>"success"!==e.status);return n.length>0&&(t.push("### ⚠️ Issues Encountered"),n.forEach(([e,n])=>{t.push(`- **${e}**: ${n.error||"Failed"}`)})),t.join("\n")}getSystemAgentContext(){return`You are part of an advanced multi-agent AI system with the following capabilities:\n\n## Available Specialist Agents:\n${l.AgentRegistry.getInstance().getRegisteredAgents().map(e=>`- **${e.id}** (${e.name}): ${e.specialization}. Can handle: ${e.canHandle.join(", ")}`).join("\n")}\n\n## System Features:\n- **Memory System**: 10k capacity with semantic search and pattern recognition\n- **Parallel Execution**: Can run multiple tasks simultaneously for 5x speedup\n- **Inter-Agent Collaboration**: Agents share knowledge and help each other\n- **Learning**: System improves from past executions with 85% similarity threshold\n- **Conflict Resolution**: OpusArbitrator resolves disagreements with superior reasoning\n\n## Your Role as Orchestrator:\nYou coordinate these agents, decompose complex tasks, and ensure efficient execution.\nFor simple queries, you can answer directly. For complex tasks, orchestrate the appropriate agents.`}}t.OrchestratorAgent=f},317:e=>{e.exports=require("child_process")},338:function(e,t,n){var s,a=this&&this.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,a)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},s(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=s(e),i=0;i<n.length;i++)"default"!==n[i]&&a(t,e,n[i]);return o(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.UnifiedChatMixin=t.ResponseType=void 0;const r=i(n(398));var c;!function(e){e.INITIALIZATION="initialization",e.EXECUTING="executing",e.SUCCESS="success",e.WARNING="warning",e.ERROR="error",e.FALLBACK="fallback",e.INFO="info",e.TOOL_USE="tool_use",e.DEBUG="debug"}(c||(t.ResponseType=c={})),t.UnifiedChatMixin=class{constructor(){this.responseHistory=[],this.maxHistorySize=100,this.chatConfig=this.getDefaultChatConfig(),this.responseHistory=[]}getDefaultChatConfig(){const e=r.workspace.getConfiguration("ki-autoagent.chat");return{showEmojis:e.get("showEmojis",!0),showTimestamps:e.get("showTimestamps",!0),showDetailedResponses:e.get("showDetailedResponses",!0),logLevel:e.get("logLevel","INFO"),responseFormat:e.get("responseFormat","detailed"),fallbackMode:e.get("fallbackMode","graceful")}}unifiedResponse(e,t,n,s=!0){const a=[];if(this.chatConfig.showEmojis){const t=this.getEmojiForType(e);a.push(`${t} `)}if(this.chatConfig.showTimestamps){const e=(new Date).toLocaleTimeString("en-US",{hour12:!1,hour:"2-digit",minute:"2-digit",second:"2-digit"});a.push(`[${e}] `)}const o=this.getAgentName();a.push(`**${o}**: `),a.push(t),n&&this.chatConfig.showDetailedResponses&&"detailed"===this.chatConfig.responseFormat&&a.push(this.formatDetails(n));const i=a.join("");return s&&this.logToHistory(e,t,n,i),this.logResponse(e,i),i}getEmojiForType(e){return{[c.INITIALIZATION]:"🚀",[c.EXECUTING]:"🛠️",[c.SUCCESS]:"✅",[c.WARNING]:"⚠️",[c.ERROR]:"❌",[c.FALLBACK]:"🔄",[c.INFO]:"ℹ️",[c.TOOL_USE]:"🔧",[c.DEBUG]:"🐛"}[e]||"📝"}formatDetails(e){return e&&0!==Object.keys(e).length?`\n   📊 Details:\n${Object.entries(e).map(([e,t])=>`      ${e.replace(/([A-Z])/g," $1").trim()}: ${"object"==typeof t?JSON.stringify(t,null,2):t}`).join("\n")}`:""}getAgentName(){return this.name||this.config?.agentId||this.config?.name||"Agent"}logResponse(e,t){const n={[c.ERROR]:"ERROR",[c.WARNING]:"WARN",[c.DEBUG]:"DEBUG",[c.INFO]:"INFO",[c.SUCCESS]:"INFO",[c.EXECUTING]:"INFO",[c.INITIALIZATION]:"INFO",[c.FALLBACK]:"WARN",[c.TOOL_USE]:"DEBUG"}[e]||"INFO";this.shouldLog(n)&&console.log(t)}shouldLog(e){const t=["DEBUG","INFO","WARN","ERROR"],n=t.indexOf(this.chatConfig.logLevel);return t.indexOf(e)>=n}logToHistory(e,t,n,s){const a={timestamp:new Date,type:e,agentName:this.getAgentName(),message:t,details:n,formattedResponse:s};this.responseHistory.push(a),this.responseHistory.length>this.maxHistorySize&&(this.responseHistory=this.responseHistory.slice(-this.maxHistorySize))}showInitialization(e){const t={role:this.role||"Unknown",model:this.model||this.selectedModel||"Unknown"};return"function"==typeof this.getCapabilities&&(t.capabilities=this.getCapabilities()),e&&Object.assign(t,e),this.unifiedResponse(c.INITIALIZATION,"Ready to assist with advanced capabilities!",t)}showExecutionStart(e,t){const n={task:e.substring(0,100),contextKeys:t?Object.keys(t):[]};return t?.conversationHistory&&(n.conversationHistorySize=t.conversationHistory.length),this.unifiedResponse(c.EXECUTING,`Starting execution: ${e.substring(0,50)}${e.length>50?"...":""}`,n)}showSuccess(e,t){return this.unifiedResponse(c.SUCCESS,e,t)}showWarning(e,t){return this.unifiedResponse(c.WARNING,e,t)}showError(e,t){const n={};return t&&(n.error=t.message||String(t),t.stack&&this.chatConfig.showDetailedResponses&&(n.stack=t.stack.split("\n").slice(0,3).join("\n"))),this.unifiedResponse(c.ERROR,e,n)}showFallbackMode(e,t){const n={reason:e,fallbackAction:t,mode:this.chatConfig.fallbackMode};return this.unifiedResponse(c.FALLBACK,`Switching to fallback mode: ${e}`,n)}showToolUse(e,t){const n={tool:e};return t&&this.chatConfig.showDetailedResponses&&(n.parameters=t),this.unifiedResponse(c.TOOL_USE,`Using tool: ${e}`,n)}showInfo(e,t){return this.unifiedResponse(c.INFO,e,t)}showDebug(e,t){return this.unifiedResponse(c.DEBUG,e,t)}getResponseHistory(){return[...this.responseHistory]}getFormattedHistory(e){return(e?this.responseHistory.slice(-e):this.responseHistory).map(e=>e.formattedResponse).join("\n")}clearHistory(){this.responseHistory=[]}exportHistory(){return JSON.stringify(this.responseHistory,null,2)}updateChatConfig(e){Object.assign(this.chatConfig,e)}getChatConfig(){return{...this.chatConfig}}}},398:e=>{e.exports=require("vscode")},434:e=>{e.exports=require("events")},469:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AgentCommunicationBus=t.MessageType=void 0,t.getCommunicationBus=function(){return o.getInstance()};const s=n(434);var a;!function(e){e.REQUEST="request",e.RESPONSE="response",e.NOTIFICATION="notification",e.QUERY="query",e.BROADCAST="broadcast",e.COLLABORATION_REQUEST="collaboration_request",e.COLLABORATION_RESPONSE="collaboration_response",e.TASK_DELEGATION="task_delegation",e.STATUS_UPDATE="status_update",e.ERROR="error",e.HELP_REQUEST="help_request",e.KNOWLEDGE_SHARE="knowledge_share",e.VALIDATION_REQUEST="validation_request",e.CONFLICT="conflict"}(a||(t.MessageType=a={}));class o{constructor(){this.handlers=new Map,this.messageQueue=[],this.processingQueue=!1,this.collaborationSessions=new Map,this.messageHistory=[],this.responseCallbacks=new Map,this.eventBus=new s.EventEmitter,this.eventBus.setMaxListeners(50),this.stats=this.initializeStats(),this.startQueueProcessor()}static getInstance(){return o.instance||(o.instance=new o),o.instance}register(e){this.handlers.has(e.agentId)||this.handlers.set(e.agentId,[]),this.handlers.get(e.agentId).push(e),this.eventBus.emit("agent-registered",e.agentId)}unregister(e){this.handlers.delete(e),this.eventBus.emit("agent-unregistered",e)}async send(e){const t={...e,id:this.generateMessageId(),timestamp:Date.now()};return this.messageHistory.push(t),this.stats.totalMessages++,this.updateStats(t),this.messageQueue.push(t),this.eventBus.emit("message-sent",t),this.processingQueue||this.processQueue(),t.id}async request(e,t=3e4){const n=await this.send({...e,metadata:{...e.metadata||{},requiresResponse:!0,timeout:t}});return new Promise((e,s)=>{const a=setTimeout(()=>{this.responseCallbacks.delete(n),s(new Error(`Request timeout for message ${n}`))},t);this.responseCallbacks.set(n,t=>{clearTimeout(a),this.responseCallbacks.delete(n),e(t)})})}async broadcast(e,t,n,s){await this.send({from:e,to:"broadcast",type:a.BROADCAST,content:n,metadata:{priority:"normal",requiresResponse:!1,...s}})}async startCollaboration(e,t,n){const s={id:this.generateSessionId(),task:e,participants:t,leader:n||t[0],status:"pending",sharedContext:new Map,messages:[],results:new Map,startTime:Date.now()};return this.collaborationSessions.set(s.id,s),await Promise.all(t.map(n=>this.send({from:"system",to:n,type:a.COLLABORATION_REQUEST,content:{sessionId:s.id,task:e,participants:t,leader:s.leader},metadata:{priority:"high",requiresResponse:!0,conversationId:s.id}}))),s.status="active",this.eventBus.emit("collaboration-started",s),s}async collaborationMessage(e,t,n,s=a.NOTIFICATION){const o=this.collaborationSessions.get(e);if(!o)throw new Error(`Collaboration session ${e} not found`);const i=o.participants.filter(e=>e!==t),r={from:t,to:i,type:s,content:n,metadata:{priority:"normal",requiresResponse:!1,conversationId:e}};await this.send(r),o.messages.push({...r,id:this.generateMessageId(),timestamp:Date.now()})}updateCollaborationContext(e,t,n,s){const o=this.collaborationSessions.get(e);o&&(o.sharedContext.set(n,s),this.collaborationMessage(e,t,{key:n,value:s},a.STATUS_UPDATE))}completeCollaboration(e,t){const n=this.collaborationSessions.get(e);n&&(n.status="completed",n.results=t,n.endTime=Date.now(),this.eventBus.emit("collaboration-completed",n),setTimeout(()=>{this.collaborationSessions.delete(e)},6e4))}async requestHelp(e,t,n){const s={from:e,to:n||"broadcast",type:a.HELP_REQUEST,content:t,metadata:{priority:"high",requiresResponse:!0,timeout:1e4}},o=[];if(n)for(const e of n)try{const t=await this.request({...s,to:e,metadata:s.metadata},1e4);t&&o.push(t)}catch(t){console.warn(`No response from ${e}:`,t)}else{await this.broadcast(e,a.HELP_REQUEST,t,{priority:"high",requiresResponse:!0}),await new Promise(e=>setTimeout(e,5e3));const n=Date.now();o.push(...this.messageHistory.filter(e=>e.type===a.RESPONSE&&e.timestamp>n-5e3&&e.replyTo===s.from).map(e=>e.content))}return o}async shareKnowledge(e,t,n){await this.send({from:e,to:n||"broadcast",type:a.KNOWLEDGE_SHARE,content:t,metadata:{priority:"low",requiresResponse:!1}})}async requestValidation(e,t,n){return this.request({from:e,to:t,type:a.VALIDATION_REQUEST,content:n,metadata:{priority:"normal",requiresResponse:!0}},15e3)}async reportConflict(e,t,n){await this.send({from:e,to:"OpusArbitrator",type:a.CONFLICT,content:{conflictingAgents:t,issue:n,reportedBy:e},metadata:{priority:"critical",requiresResponse:!0}})}async processQueue(){if(!this.processingQueue&&0!==this.messageQueue.length){for(this.processingQueue=!0;this.messageQueue.length>0;){const e=this.messageQueue.shift();try{await this.deliverMessage(e)}catch(t){console.error(`Error delivering message ${e.id}:`,t),this.stats.failedMessages++,void 0===e.metadata.retryCount&&(e.metadata.retryCount=0),e.metadata.retryCount<3?(e.metadata.retryCount++,this.messageQueue.push(e)):this.eventBus.emit("message-failed",{message:e,error:t})}}this.processingQueue=!1}}async deliverMessage(e){const t=this.determineRecipients(e);for(const n of t){const t=this.handlers.get(n)||[];for(const s of t)if(s.messageTypes.includes(e.type)&&(!s.filter||s.filter(e)))try{const t=await s.handler(e);if(e.metadata.requiresResponse&&void 0!==t){await this.send({from:n,to:e.from,type:a.RESPONSE,content:t,metadata:{priority:"normal",requiresResponse:!1,conversationId:e.metadata.conversationId},replyTo:e.id});const s=this.responseCallbacks.get(e.id);s&&s(t)}this.eventBus.emit("message-delivered",{message:e,recipientId:n})}catch(t){console.error(`Handler error for ${n}:`,t),this.eventBus.emit("handler-error",{message:e,recipientId:n,error:t})}}}determineRecipients(e){return"broadcast"===e.to?Array.from(this.handlers.keys()):Array.isArray(e.to)?e.to:[e.to]}startQueueProcessor(){setInterval(()=>{!this.processingQueue&&this.messageQueue.length>0&&this.processQueue()},100)}initializeStats(){return{totalMessages:0,messagesByType:new Map,messagesByAgent:new Map,averageResponseTime:0,activeSessions:0,failedMessages:0}}updateStats(e){const t=this.stats.messagesByType.get(e.type)||0;this.stats.messagesByType.set(e.type,t+1);const n=this.stats.messagesByAgent.get(e.from)||0;this.stats.messagesByAgent.set(e.from,n+1),this.stats.activeSessions=this.collaborationSessions.size}getStats(){let e=0,t=0;return this.messageHistory.forEach(n=>{if(n.type===a.RESPONSE&&n.replyTo){const s=this.messageHistory.find(e=>e.id===n.replyTo);s&&(e+=n.timestamp-s.timestamp,t++)}}),this.stats.averageResponseTime=t>0?e/t:0,{...this.stats}}getMessageHistory(e){let t=[...this.messageHistory];return e&&(e.from&&(t=t.filter(t=>t.from===e.from)),e.to&&(t=t.filter(t=>t.to===e.to||Array.isArray(t.to)&&t.to.includes(e.to))),e.type&&(t=t.filter(t=>t.type===e.type)),e.conversationId&&(t=t.filter(t=>t.metadata.conversationId===e.conversationId)),e.startTime&&(t=t.filter(t=>t.timestamp>=e.startTime)),e.endTime&&(t=t.filter(t=>t.timestamp<=e.endTime))),t}getActiveSessions(){return Array.from(this.collaborationSessions.values()).filter(e=>"active"===e.status)}generateMessageId(){return`msg_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}generateSessionId(){return`ses_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}clear(){this.messageQueue=[],this.messageHistory=[],this.collaborationSessions.clear(),this.responseCallbacks.clear(),this.stats=this.initializeStats()}}t.AgentCommunicationBus=o},478:function(e,t,n){var s,a=this&&this.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,a)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},s(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=s(e),i=0;i<n.length;i++)"default"!==n[i]&&a(t,e,n[i]);return o(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.AgentConfigurationManager=void 0;const r=i(n(398)),c=i(n(928)),d=i(n(943)),l=n(185);class u{constructor(e){this.configPath="",this.context=e,this.configuration={models:new Map,instructions:new Map,learning:this.getDefaultLearningConfig(),metrics:new Map}}static getInstance(e){return u.instance||(u.instance=new u(e)),u.instance}async initialize(){try{await this.determineConfigPath(),await this.ensureConfigStructure(),await this.loadConfiguration(),await this.loadInstructionSets(),console.log("✅ AgentConfigurationManager initialized")}catch(e){throw console.error("❌ Failed to initialize AgentConfigurationManager:",e),e}}getAgentModel(e){const t=this.configuration.models.get(e);return t?.selectedModel||l.DEFAULT_AGENT_MODELS[e]||"claude-sonnet-4-20250514"}async setAgentModel(e,t){const n=this.configuration.models.get(e)||this.createDefaultModelConfig(e);n.selectedModel=t,n.lastUpdated=(new Date).toISOString(),this.configuration.models.set(e,n),await this.saveModelConfiguration(),console.log(`🤖 Updated ${e} model to ${t}`)}async getAgentInstructions(e){const t=this.configuration.instructions.get(e);return t?t.content:await this.loadInstructionFile(e)}async updateAgentInstructions(e,t,n,s){const a=await this.getAgentInstructions(e),o={timestamp:(new Date).toISOString(),trigger:s,oldContent:a,newContent:t,reason:n},i=this.configuration.instructions.get(e)||{agentId:e,version:"1.0.0",content:a,lastModified:(new Date).toISOString(),modifiedBy:"manual"===s?"user":"self-adaptation",successRate:0,totalExecutions:0,adaptationHistory:[]};i.content=t,i.lastModified=(new Date).toISOString(),i.modifiedBy="manual"===s?"user":"self-adaptation",i.adaptationHistory.push(o),i.adaptationHistory.length>50&&(i.adaptationHistory=i.adaptationHistory.slice(-50)),this.configuration.instructions.set(e,i),await this.saveInstructionFile(e,i),console.log(`📝 Updated instructions for ${e}: ${n}`)}async recordAgentPerformance(e,t,n,s){const a=this.configuration.metrics.get(e)||this.createDefaultMetrics(e);a.totalExecutions++,t?(a.successfulExecutions++,a.currentStreak++,a.bestStreak=Math.max(a.bestStreak,a.currentStreak)):(a.failedExecutions++,a.currentStreak=0);const o=a.averageResponseTime*(a.totalExecutions-1)+n;a.averageResponseTime=o/a.totalExecutions,a.lastExecution=(new Date).toISOString(),this.configuration.metrics.set(e,a),this.configuration.learning.enabled&&await this.checkForLearningOpportunity(e,t,s),a.totalExecutions%10==0&&await this.saveMetrics()}getAvailableModels(){return l.AVAILABLE_MODELS}getAgentMetrics(e){return this.configuration.metrics.get(e)}getLearningConfig(){return this.configuration.learning}async updateLearningConfig(e){this.configuration.learning={...this.configuration.learning,...e},await this.saveLearningConfig()}async determineConfigPath(){const e=r.workspace.workspaceFolders;if(e&&e.length>0)this.configPath=c.join(e[0].uri.fsPath,".kiautoagent");else{const e=process.env.HOME||process.env.USERPROFILE||"";this.configPath=c.join(e,".kiautoagent")}}async ensureConfigStructure(){const e=[this.configPath,c.join(this.configPath,"config"),c.join(this.configPath,"instructionsets"),c.join(this.configPath,"learning")];for(const t of e)try{await d.mkdir(t,{recursive:!0})}catch(e){console.warn(`Could not create directory ${t}:`,e)}}async loadConfiguration(){await this.loadModelConfiguration(),await this.loadLearningConfiguration(),await this.loadMetrics()}async loadModelConfiguration(){try{const e=c.join(this.configPath,"config","agent-models.json"),t=await d.readFile(e,"utf-8"),n=JSON.parse(t);for(const e of n)this.configuration.models.set(e.agentId,e)}catch(e){for(const[e,t]of Object.entries(l.DEFAULT_AGENT_MODELS))this.configuration.models.set(e,this.createDefaultModelConfig(e));await this.saveModelConfiguration()}}async saveModelConfiguration(){try{const e=c.join(this.configPath,"config","agent-models.json"),t=Array.from(this.configuration.models.values());await d.writeFile(e,JSON.stringify(t,null,2))}catch(e){console.error("Failed to save model configuration:",e)}}async loadInstructionSets(){c.join(this.configPath,"instructionsets");const e=["orchestrator","richter","architect","codesmith","tradestrat","research"];for(const t of e)try{await this.loadInstructionFile(t)}catch(e){console.warn(`Could not load instructions for ${t}:`,e),await this.copyDefaultInstructionFile(t)}}async loadInstructionFile(e){const t=c.join(this.configPath,"instructionsets",`${e}.md`);try{const n=await d.readFile(t,"utf-8"),s={agentId:e,version:"1.0.0",content:n,lastModified:(new Date).toISOString(),modifiedBy:"user",successRate:0,totalExecutions:0,adaptationHistory:[]};return this.configuration.instructions.set(e,s),n}catch(t){throw new Error(`Could not load instruction file for ${e}: ${t}`)}}async saveInstructionFile(e,t){const n=c.join(this.configPath,"instructionsets",`${e}.md`);await d.writeFile(n,t.content)}async copyDefaultInstructionFile(e){try{const t=c.join(this.context.extensionPath,"src","instructionsets",`${e}.md`),n=c.join(this.configPath,"instructionsets",`${e}.md`),s=await d.readFile(t,"utf-8");await d.writeFile(n,s),console.log(`📋 Copied default instructions for ${e}`)}catch(t){console.error(`Failed to copy default instructions for ${e}:`,t)}}createDefaultModelConfig(e){const t=l.DEFAULT_AGENT_MODELS[e]||"claude-sonnet-4-20250514";return{agentId:e,displayName:e.charAt(0).toUpperCase()+e.slice(1),selectedModel:t,availableModels:Object.keys(l.AVAILABLE_MODELS),instructionFile:`${e}.md`,lastUpdated:(new Date).toISOString(),performanceScore:0}}createDefaultMetrics(e){return{agentId:e,totalExecutions:0,successfulExecutions:0,failedExecutions:0,averageResponseTime:0,lastExecution:(new Date).toISOString(),successPatterns:[],failurePatterns:[],currentStreak:0,bestStreak:0}}getDefaultLearningConfig(){return{enabled:!0,adaptationThreshold:.8,maxAdaptationsPerDay:3,confidenceLevel:.9,learningModes:{successBasedLearning:!0,failureBasedLearning:!1,patternRecognition:!0,contextualAdaptation:!0}}}async loadLearningConfiguration(){try{const e=c.join(this.configPath,"config","learning-settings.json"),t=await d.readFile(e,"utf-8");this.configuration.learning={...this.configuration.learning,...JSON.parse(t)}}catch(e){await this.saveLearningConfig()}}async saveLearningConfig(){try{const e=c.join(this.configPath,"config","learning-settings.json");await d.writeFile(e,JSON.stringify(this.configuration.learning,null,2))}catch(e){console.error("Failed to save learning configuration:",e)}}async loadMetrics(){try{const e=c.join(this.configPath,"config","performance-metrics.json"),t=await d.readFile(e,"utf-8"),n=JSON.parse(t);for(const e of n)this.configuration.metrics.set(e.agentId,e)}catch(e){}}async saveMetrics(){try{const e=c.join(this.configPath,"config","performance-metrics.json"),t=Array.from(this.configuration.metrics.values());await d.writeFile(e,JSON.stringify(t,null,2))}catch(e){console.error("Failed to save metrics:",e)}}async checkForLearningOpportunity(e,t,n){const s=this.configuration.metrics.get(e);if(!s)return;const a=s.successfulExecutions/s.totalExecutions;if(s.totalExecutions<10)return;if(a<this.configuration.learning.adaptationThreshold)return;const o=(new Date).toDateString(),i=this.configuration.instructions.get(e);(i?.adaptationHistory.filter(e=>new Date(e.timestamp).toDateString()===o).length||0)>=this.configuration.learning.maxAdaptationsPerDay||console.log(`🧠 Learning opportunity detected for ${e}: ${a.toFixed(2)} success rate`)}}t.AgentConfigurationManager=u},531:(e,t)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.MemoryType=void 0,function(e){e.WORKING="working",e.EPISODIC="episodic",e.SEMANTIC="semantic",e.PROCEDURAL="procedural"}(n||(t.MemoryType=n={}))},551:function(e,t,n){var s,a=this&&this.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,a)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},s(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=s(e),i=0;i<n.length;i++)"default"!==n[i]&&a(t,e,n[i]);return o(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.OpenAIService=void 0;const r=i(n(398));t.OpenAIService=class{constructor(){const e=r.workspace.getConfiguration("kiAutoAgent");this.apiKey=e.get("openai.apiKey",""),this.baseURL="https://api.openai.com/v1"}async chat(e,t="gpt-4o",n=4e3,s=.7){if(!this.apiKey)throw new Error("OpenAI API key not configured");const a={model:t,messages:e,max_tokens:n,temperature:s,stream:!1};try{const e=await fetch(`${this.baseURL}/chat/completions`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.apiKey}`},body:JSON.stringify(a)});if(!e.ok){const t=await e.json().catch(()=>({error:{message:e.statusText}}));throw new Error(`OpenAI API error: ${t.error?.message||e.statusText}`)}const t=await e.json();if(!t.choices||0===t.choices.length)throw new Error("No response from OpenAI API");return t.choices[0].message.content}catch(e){if(e instanceof Error)throw e;throw new Error(`OpenAI API request failed: ${e}`)}}async streamChat(e,t,n="gpt-4o",s=4e3,a=.7){if(!this.apiKey)throw new Error("OpenAI API key not configured");const o={model:n,messages:e,max_tokens:s,temperature:a,stream:!0};try{const e=await fetch(`${this.baseURL}/chat/completions`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.apiKey}`},body:JSON.stringify(o)});if(!e.ok)throw new Error(`OpenAI API error: ${e.statusText}`);const n=e.body?.getReader();if(!n)throw new Error("Failed to get response stream");const s=new TextDecoder;for(;;){const{done:e,value:a}=await n.read();if(e)break;const o=s.decode(a).split("\n").filter(e=>""!==e.trim());for(const e of o)if(e.startsWith("data: ")){const n=e.substring(6);if("[DONE]"===n)return;try{const e=JSON.parse(n),s=e.choices?.[0]?.delta?.content;s&&t(s)}catch(e){}}}}catch(e){throw new Error(`OpenAI streaming failed: ${e}`)}}validateApiKey(){return!!this.apiKey&&this.apiKey.startsWith("sk-")}async testConnection(){try{return await this.chat([{role:"user",content:"Test connection"}],"gpt-4o-mini",10),!0}catch(e){return!1}}}},567:function(e,t,n){var s,a=this&&this.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,a)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},s(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=s(e),i=0;i<n.length;i++)"default"!==n[i]&&a(t,e,n[i]);return o(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.ClaudeCodeService=void 0,t.getClaudeCodeService=function(){return u||(u=new l),u};const r=i(n(398)),c=n(317),d=n(434);class l extends d.EventEmitter{constructor(){super(),this.currentProcess=null,this.seenToolsInSession=null,this.pendingTools=new Map,this.toolResults=new Map,this.toolGroupBuffer=[],this.lastToolName=null,this.hasStartedTextOutput=!1,this.outputChannel=r.window.createOutputChannel("Claude Code Service")}async sendMessage(e,t={}){try{return await this.sendStreamJsonMessage(e,t)}catch(n){return this.outputChannel.appendLine("[ClaudeCodeService] Stream JSON failed, falling back to text mode"),await this.sendSimpleMessage(e,t)}}async sendSimpleMessage(e,t={}){return new Promise((n,s)=>{try{const a=["--print","--output-format","text"];t.model&&"default"!==t.model&&a.push("--model",t.model),this.outputChannel.appendLine(`[ClaudeCodeService] Using simple text mode with args: ${a.join(" ")}`);const o=(0,c.spawn)("claude",a,{shell:"win32"===process.platform,stdio:["pipe","pipe","pipe"]});let i="",r="";o.stdout.on("data",e=>{i+=e.toString()}),o.stderr.on("data",e=>{r+=e.toString()}),o.on("exit",e=>{0===e||i.length>0?n({content:i.trim(),metadata:{}}):s(new Error(`Claude CLI failed: ${r||"No output"}`))}),o.on("error",e=>{s(e)}),o.stdin&&(o.stdin.write(e),o.stdin.end())}catch(e){s(e)}})}async sendStreamingMessage(e,t={}){return this.outputChannel.appendLine("[ClaudeCodeService] Starting streaming message..."),new Promise((n,s)=>{try{const a=["--print","--verbose","--output-format","stream-json","--include-partial-messages"];t.model&&"default"!==t.model&&a.push("--model",t.model),this.outputChannel.appendLine("[ClaudeCodeService] Spawning claude CLI with streaming");const o=(0,c.spawn)("claude",a,{shell:"win32"===process.platform,stdio:["pipe","pipe","pipe"]});this.currentProcess=o;let i="",r={},d=!1,l=!1,u="";new Set,o.stdout.on("data",e=>{u+=e.toString();const n=u.split("\n");u=n.pop()||"";for(const e of n)if(e.trim())try{const n=JSON.parse(e.trim());this.processJsonStreamData(n,(e,n,s)=>{e&&(i+=e,d=!0,t.onPartialResponse&&t.onPartialResponse(e)),n&&(r={...r,...n},t.onMetadata&&t.onMetadata(n)),"tool_use"===s&&(l=!0,this.outputChannel.appendLine("[ClaudeCodeService] Tool detected - continuing execution"))})}catch(t){this.outputChannel.appendLine(`[ClaudeCodeService] Failed to parse JSON: ${e.substring(0,100)}`)}}),o.stderr.on("data",e=>{const t=e.toString();this.outputChannel.appendLine(`[ClaudeCodeService] Claude CLI stderr: ${t}`)}),o.on("exit",(e,t)=>{this.currentProcess=null,0===e||i.length>0?n({content:i||"No response received from Claude",metadata:r}):s(new Error(`Claude process exited with code ${e} and no response`))}),o.on("error",e=>{this.currentProcess=null,s(e)}),o.stdin&&(o.stdin.write(e),o.stdin.end())}catch(e){s(e)}})}async sendStreamJsonMessage(e,t={}){return new Promise((n,s)=>{try{const a=["--print","--verbose","--output-format","stream-json","--include-partial-messages"];t.model&&"default"!==t.model&&a.push("--model",t.model),this.outputChannel.appendLine(`[ClaudeCodeService] Spawning claude CLI with args: ${a.join(" ")}`),this.outputChannel.appendLine(`[ClaudeCodeService] Message length: ${e.length} characters`),this.outputChannel.appendLine(`[ClaudeCodeService] First 200 chars of message: ${e.substring(0,200)}...`);const o=(0,c.spawn)("claude",a,{shell:"win32"===process.platform,stdio:["pipe","pipe","pipe"],env:{...process.env,FORCE_COLOR:"0",NO_COLOR:"1"}});this.currentProcess=o;let i="",r="",d={};o.stdout.on("data",e=>{const t=e.toString();this.outputChannel.appendLine(`[ClaudeCodeService] Raw chunk: ${t.substring(0,200)}`),i+=t;const n=i.split("\n");i=n.pop()||"";for(const e of n)if(e.trim())try{const t=JSON.parse(e.trim());this.outputChannel.appendLine(`[ClaudeCodeService] Parsed JSON type: ${t.type}`),this.processJsonStreamData(t,(e,t,n)=>{e&&(r+=e,l=!0,this.outputChannel.appendLine(`[ClaudeCodeService] Added content: "${e.substring(0,50)}..."`)),t&&(d={...d,...t},this.outputChannel.appendLine(`[ClaudeCodeService] Updated metadata: ${JSON.stringify(t)}`)),"tool_use"===n&&(u=!0,this.outputChannel.appendLine("[ClaudeCodeService] Tool use detected - will terminate after text"),l&&r.length>0&&(this.outputChannel.appendLine("[ClaudeCodeService] Terminating process - we have text but can't handle tools"),o.kill("SIGTERM")))})}catch(t){this.outputChannel.appendLine(`[ClaudeCodeService] Failed to parse JSON: ${e.substring(0,100)}`)}}),o.stderr.on("data",e=>{const t=e.toString();this.outputChannel.appendLine(`[ClaudeCodeService] Claude CLI stderr: ${t}`)});let l=!1,u=!1;o.on("exit",(e,t)=>{this.currentProcess=null,this.outputChannel.appendLine(`[ClaudeCodeService] Process exited with code: ${e}, signal: ${t}`),this.outputChannel.appendLine(`[ClaudeCodeService] Total response length: ${r.length} characters`),0===e||r.length>0?(this.outputChannel.appendLine(`[ClaudeCodeService] FINAL RESPONSE: "${r.substring(0,500)}..."`),n({content:r||"No response received from Claude",metadata:d})):s(new Error(`Claude process exited with code ${e} and no response`))}),o.on("error",e=>{this.currentProcess=null,e.message.includes("ENOENT")?s(new Error("Claude Code CLI not found. Please install it with: npm install -g @anthropic-ai/claude-code")):s(e)}),o.stdin?(o.stdin.write(e+"\n"),o.stdin.end()):s(new Error("Failed to write to Claude process stdin"))}catch(e){s(e)}})}cleanToolMarkers(e){return e.replace(/<<TOOL>>.*?<<TOOL_END>>/gs,"").replace(/<<TOOL_RESULT>>.*?<<TOOL_RESULT_END>>/gs,"").replace(/<<THINKING>>.*?<<THINKING_END>>/gs,"").replace(/🛠️ \*?Claude is using tools.*?\*?\n*/g,"").trim()}processJsonStreamData(e,t){if("system"===e.type)"init"===e.subtype?(this.outputChannel.appendLine(`[ClaudeCodeService] System init: ${JSON.stringify(e.tools||[]).substring(0,100)}`),e.session_id&&t(null,{sessionId:e.session_id})):"error"===e.subtype?(this.outputChannel.appendLine(`[ClaudeCodeService] System error: ${e.message||"Unknown error"}`),t(`\n⚠️ **System Error:** ${e.message||"An unexpected error occurred"}\n`,null),t(null,null,"error")):this.outputChannel.appendLine(`[ClaudeCodeService] System event (${e.subtype})`);else if("assistant"===e.type&&e.message){if(e.message.content&&Array.isArray(e.message.content))for(const n of e.message.content)"text"===n.type&&n.text?t(n.text,null):"tool_use"===n.type&&(this.outputChannel.appendLine(`[ClaudeCodeService] Tool use: ${n.name} (${n.id})`),this.outputChannel.appendLine(`[ClaudeCodeService] Tool input: ${JSON.stringify(n.input)}`),this.pendingTools.set(n.id,{name:n.name,input:n.input,id:n.id}),this.lastToolName===n.name?this.toolGroupBuffer.push({name:n.name,input:n.input,id:n.id}):(this.flushToolGroup(t),this.toolGroupBuffer=[{name:n.name,input:n.input,id:n.id}],this.lastToolName=n.name));(e.message.model||e.message.id)&&t(null,{model:e.message.model,id:e.message.id})}else if("user"===e.type&&e.message){if(e.message.content&&Array.isArray(e.message.content))for(const t of e.message.content)if("tool_result"===t.type){this.outputChannel.appendLine(`[ClaudeCodeService] Tool result for ${t.tool_use_id}: ${t.content?.substring(0,200)}`);const e=t.content||t.output||"";this.toolResults.set(t.tool_use_id,e);const n=this.pendingTools.get(t.tool_use_id);if(n){n.result=e;const s=this.toolGroupBuffer.find(e=>e.id===t.tool_use_id);s&&(s.result=e)}}}else if("stream_event"===e.type&&e.event){const n=e.event;"content_block_delta"===n.type&&n.delta?"text_delta"===n.delta.type&&n.delta.text?(this.toolGroupBuffer.length>0&&this.flushToolGroup(t),t(n.delta.text,null)):"thinking_delta"===n.delta.type&&n.delta.text?this.outputChannel.appendLine(`[ClaudeCodeService] Thinking: ${n.delta.text.substring(0,100)}`):"input_json_delta"===n.delta.type&&this.outputChannel.appendLine(`[ClaudeCodeService] Tool input delta: ${n.delta.partial_json?.substring(0,100)}`):"content_block_start"===n.type&&n.content_block?"tool_use"===n.content_block.type?this.outputChannel.appendLine(`[ClaudeCodeService] Tool use starting: ${n.content_block.name}`):"text"===n.content_block.type?(this.outputChannel.appendLine("[ClaudeCodeService] Text block starting"),this.flushToolGroup(t),this.hasStartedTextOutput=!0):"thinking"===n.content_block.type&&this.outputChannel.appendLine("[ClaudeCodeService] Thinking block starting"):"content_block_stop"===n.type?this.outputChannel.appendLine(`[ClaudeCodeService] Content block stopped (index: ${n.index})`):"message_start"===n.type&&n.message?t(null,{model:n.message.model,id:n.message.id}):"message_delta"===n.type?(n.usage&&t(null,{usage:{inputTokens:n.usage.input_tokens||0,outputTokens:n.usage.output_tokens||0,cacheCreationInputTokens:n.usage.cache_creation_input_tokens||0,cacheReadInputTokens:n.usage.cache_read_input_tokens||0}}),n.delta?.stop_reason&&(this.outputChannel.appendLine(`[ClaudeCodeService] Stop reason: ${n.delta.stop_reason}`),t(null,{stopReason:n.delta.stop_reason}))):"message_stop"===n.type?(this.outputChannel.appendLine("[ClaudeCodeService] Message stopped"),this.flushToolGroup(t),this.seenToolsInSession&&this.seenToolsInSession.clear(),this.pendingTools.clear(),this.toolResults.clear(),this.toolGroupBuffer=[],this.lastToolName=null,this.hasStartedTextOutput=!1,t(null,null,"message_stop")):"error"===n.type?(this.outputChannel.appendLine(`[ClaudeCodeService] Stream error: ${n.error?.message||"Unknown error"}`),t(null,{error:n.error},"error")):"ping"===n.type&&this.outputChannel.appendLine("[ClaudeCodeService] Ping received")}else if("result"===e.type){this.outputChannel.appendLine("[ClaudeCodeService] Final result received");const n={resultType:e.subtype||"unknown"};void 0!==e.total_cost_usd&&(n.totalCostUsd=e.total_cost_usd),void 0!==e.duration_ms&&(n.durationMs=e.duration_ms),void 0!==e.duration_api_ms&&(n.durationApiMs=e.duration_api_ms),void 0!==e.num_turns&&(n.numTurns=e.num_turns),void 0!==e.is_error&&(n.isError=e.is_error),t(null,n,"result")}else"message"===e.type?"assistant"===e.role&&e.content&&t(e.content,null):"content"===e.type?e.text&&t(e.text,null):this.outputChannel.appendLine(`[ClaudeCodeService] Unknown data type: ${JSON.stringify(e).substring(0,200)}`)}async isAvailable(){return new Promise(e=>{this.outputChannel.appendLine("[ClaudeCodeService] Checking Claude Code CLI availability..."),(0,c.exec)("which claude",(t,n,s)=>{t?(this.outputChannel.appendLine("[ClaudeCodeService] Claude Code CLI not found in PATH"),(0,c.exec)("claude --version",(t,n,s)=>{t?(this.outputChannel.appendLine("[ClaudeCodeService] Claude Code CLI not available"),this.outputChannel.appendLine("[ClaudeCodeService] Install with: npm install -g @anthropic-ai/claude-code"),e(!1)):(this.outputChannel.appendLine(`[ClaudeCodeService] Claude Code CLI found (version check): ${n.trim()}`),e(!0))})):(this.outputChannel.appendLine(`[ClaudeCodeService] Claude Code CLI found at: ${n.trim()}`),(0,c.exec)("claude --version",(e,t)=>{e||this.outputChannel.appendLine(`[ClaudeCodeService] Version: ${t.trim()}`)}),e(!0))})})}async testConnection(){try{if(this.outputChannel.appendLine("[ClaudeCodeService] Testing Claude CLI connection..."),!await this.isAvailable())return{success:!1,message:"Claude Code CLI not installed. Install with: npm install -g @anthropic-ai/claude-code"};const e=await this.sendSimpleMessage('Hi, just testing the connection. Reply with "Connection successful!"',{model:"default"});return e.content&&e.content.length>0?(this.outputChannel.appendLine("[ClaudeCodeService] Test successful!"),{success:!0,message:`Claude CLI working! Response: ${e.content.substring(0,100)}`}):{success:!1,message:"Claude CLI responded but with empty content"}}catch(e){const t=e.message;return this.outputChannel.appendLine(`[ClaudeCodeService] Test failed: ${t}`),{success:!1,message:`Claude CLI test failed: ${t}`}}}cancel(){this.currentProcess&&(this.currentProcess.kill(),this.currentProcess=null)}flushToolGroup(e){if(0===this.toolGroupBuffer.length)return;const t=this.toolGroupBuffer[0].name;let n="🔧",s="";switch(t){case"TodoWrite":n="📝";break;case"Bash":n="⚡";break;case"Read":n="📄";break;case"Write":case"Edit":case"MultiEdit":n="✏️";break;case"Grep":n="🔍";break;case"Glob":n="📁";break;case"WebSearch":n="🌐";break;case"WebFetch":n="🔗";break;case"Task":n="🤖"}if(1===this.toolGroupBuffer.length){const e=this.toolGroupBuffer[0];s=this.formatToolMessage(e.name,e.input);const t=this.toolResults.get(e.id);t&&(s+=`\n\n**Result:**\n${t.length>200?t.substring(0,200)+"...":t}`)}else{s=`${n} **${t} (${this.toolGroupBuffer.length} operations)**\n\n`;for(const e of this.toolGroupBuffer){s+=`• ${this.formatToolDetails(e.name,e.input)}\n`;const t=this.toolResults.get(e.id);t&&(s+=`  → ${t.length>100?t.substring(0,100)+"...":t}\n`)}}e(`SYSTEM_TOOL_MESSAGE:${s}`,null,"tool_info"),this.toolGroupBuffer=[]}formatToolDetails(e,t){switch(e){case"TodoWrite":return`${t?.todos?.length||0} tasks`;case"Bash":return t?.command||"";case"Read":const n=t?.file_path||"";let s=n.split("/").pop()||n;return(t?.offset||t?.limit)&&(s+=` (lines ${t.offset||0}-${(t.offset||0)+(t.limit||0)})`),s;case"Write":const a=t?.file_path||"";return a.split("/").pop()||a;case"Edit":case"MultiEdit":const o=t?.file_path||"";let i=o.split("/").pop()||o;return"MultiEdit"===e&&t?.edits&&(i+=` (${t.edits.length} edits)`),i;case"Grep":const r=t?.pattern||"";return`"${r.substring(0,30)}${r.length>30?"...":""}"`;case"Glob":return t?.pattern||"";case"WebSearch":const c=t?.query||"";return`"${c.substring(0,40)}${c.length>40?"...":""}"`;case"WebFetch":const d=t?.url||"";return d.match(/^https?:\/\/([^\/]+)/)?.[1]||d;case"Task":return t?.subagent_type||"agent";default:return JSON.stringify(t).substring(0,50)}}formatToolMessage(e,t){let n="🔧",s="";switch(e){case"TodoWrite":n="📝",s=`TodoWrite\n${t?.todos?.length||0} tasks`;break;case"Bash":n="⚡",s=`Bash\n${t?.command||""}`;break;case"Read":n="📄";const a=t?.file_path||"";s=`Read\n${a.split("/").pop()||a}`,(t?.offset||t?.limit)&&(s+=` (lines ${t.offset||0}-${(t.offset||0)+(t.limit||0)})`);break;case"Write":n="✏️";const o=t?.file_path||"";s=`Write\n${o.split("/").pop()||o}`;break;case"Edit":case"MultiEdit":n="✏️";const i=t?.file_path||"";s=`${e}\n${i.split("/").pop()||i}`,"MultiEdit"===e&&t?.edits&&(s+=` (${t.edits.length} edits)`);break;case"Grep":n="🔍";const r=t?.pattern||"";s=`Grep\n"${r.substring(0,30)}${r.length>30?"...":""}"`;break;case"Glob":n="📁",s=`Glob\n${t?.pattern||""}`;break;case"WebSearch":n="🌐";const c=t?.query||"";s=`WebSearch\n"${c.substring(0,40)}${c.length>40?"...":""}"`;break;case"WebFetch":n="🔗";const d=t?.url||"";s=`WebFetch\n${d.match(/^https?:\/\/([^\/]+)/)?.[1]||d}`;break;case"Task":n="🤖",s=`Task\n${t?.subagent_type||"agent"}`;break;default:s=`${e}`}return`${n} **${s}**`}dispose(){this.cancel(),this.outputChannel.dispose()}}t.ClaudeCodeService=l;let u=null},593:function(e,t,n){var s,a=this&&this.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,a)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},s(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=s(e),i=0;i<n.length;i++)"default"!==n[i]&&a(t,e,n[i]);return o(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.ResearchAgent=void 0;const r=i(n(398)),c=n(806),d=n(693),l=n(551);class u extends c.ChatAgent{constructor(e,t){super({participantId:"ki-autoagent.research",name:"research",fullName:"ResearchBot",description:"Research & Information Expert with real-time web access",model:"perplexity-llama-3.1-sonar-huge-128k",iconPath:r.Uri.joinPath(e.extensionUri,"media","perplexity-icon.svg"),capabilities:["Web Research","Real-time Information","Technical Documentation Search","Market Analysis","Trend Research","Competitive Analysis"],commands:[{name:"search",description:"Search web for current information",handler:"handleSearchCommand"},{name:"documentation",description:"Find and analyze technical documentation",handler:"handleDocumentationCommand"},{name:"market",description:"Research market trends and analysis",handler:"handleMarketCommand"},{name:"compare",description:"Compare technologies, tools, or solutions",handler:"handleCompareCommand"}]},e,t),this.webSearchService=new d.WebSearchService,this.openAIService=new l.OpenAIService}async handleRequest(e,t,n,s){if(!await this.webSearchService.isWebAccessAvailable()){const e=this.webSearchService.getSearchEngineStatus();return n.markdown("❌ **Web access not configured**\n\n"),n.markdown(`**Current search engine**: ${e.engine}\n`),n.markdown(`**Status**: ${e.configured?"Configured":"Not configured"}\n\n`),n.markdown("💡 **To enable web research:**\n"),n.markdown("1. Open VS Code Settings (Cmd+,)\n"),n.markdown('2. Search for "KI AutoAgent"\n'),n.markdown("3. Configure your preferred search API:\n"),n.markdown("   - **Perplexity API** (recommended)\n"),n.markdown("   - **Tavily API** (web search specialist)\n"),void n.markdown("   - **SERP API** (Google search)\n")}const a=e.command,o=e.prompt;this.log(`Processing ${a?`/${a}`:"general"} research request: ${o.substring(0,100)}...`),a?await this.handleCommand(a,o,n,s):await this.handleGeneralResearchRequest(o,n,s)}async processWorkflowStep(e,t,n){try{let n="",s="";switch(e.id){case"market_research":n=`${t.prompt} market trends analysis 2024`,s="Analyze market trends and opportunities";break;case"tech_research":n=`${t.prompt} technical documentation best practices`,s="Research technical solutions and documentation";break;case"competitive_analysis":n=`${t.prompt} competitors alternatives comparison`,s="Compare competitive solutions and alternatives";break;default:n=t.prompt,s="Research and analyze the given topic"}const a=await this.webSearchService.search(n);return{status:"success",content:await this.analyzeSearchResults(a,s),metadata:{step:e.id,agent:"research",searchQuery:n,resultsCount:a.results.length}}}catch(t){throw new Error(`Failed to process research step ${e.id}: ${t.message}`)}}async handleSearchCommand(e,t,n){t.progress("🔍 Searching the web for current information...");try{const n=await this.webSearchService.search(e);t.markdown("## 🔍 Web Search Results\n\n"),t.markdown(`**Query**: ${n.query}\n`),t.markdown(`**Results Found**: ${n.totalResults}\n\n`);for(let e=0;e<n.results.length;e++){const s=n.results[e];t.markdown(`### ${e+1}. ${s.title}\n`),t.markdown(`**URL**: [${s.url}](${s.url})\n`),t.markdown(`**Summary**: ${s.snippet}\n\n`)}t.progress("🧠 Analyzing search results...");const s=await this.analyzeSearchResults(n,"Provide a comprehensive analysis and synthesis of the search results");t.markdown("## 📊 Analysis & Insights\n\n"),t.markdown(s),n.results.forEach((e,n)=>{this.createActionButton(`📖 Read Source ${n+1}`,"vscode.open",[r.Uri.parse(e.url)],t)})}catch(e){t.markdown(`❌ Search failed: ${e.message}`)}}async handleDocumentationCommand(e,t,n){t.progress("📚 Searching for technical documentation...");const s=`${e} documentation tutorial guide API reference`;try{const n=await this.webSearchService.search(s);t.markdown("## 📚 Documentation Research\n\n"),t.markdown(`**Topic**: ${e}\n\n`);const a=n.results.filter(e=>e.url.includes("docs")||e.url.includes("documentation")||e.url.includes("api")||e.url.includes("guide")||e.title.toLowerCase().includes("documentation")||e.title.toLowerCase().includes("guide"));a.length>0&&(t.markdown("### 📖 Official Documentation Found\n\n"),a.forEach((e,n)=>{t.markdown(`**${n+1}. ${e.title}**\n`),t.markdown(`- [${e.url}](${e.url})\n`),t.markdown(`- ${e.snippet}\n\n`)}));const o=await this.analyzeSearchResults(n,"Provide a comprehensive guide based on the documentation found, including key concepts, usage examples, and best practices");t.markdown("## 📋 Documentation Summary\n\n"),t.markdown(o)}catch(e){t.markdown(`❌ Documentation search failed: ${e.message}`)}}async handleMarketCommand(e,t,n){t.progress("📈 Researching market trends...");const s=`${e} market trends 2024 analysis statistics growth`;try{const n=await this.webSearchService.search(s);t.markdown("## 📈 Market Research\n\n");const a=await this.analyzeSearchResults(n,"Provide a comprehensive market analysis including current trends, growth statistics, key players, opportunities, and challenges");t.markdown(a),this.createActionButton("📊 Create Market Report","ki-autoagent.createFile",[`market_research_${Date.now()}.md`,`# Market Research: ${e}\n\n${a}`],t)}catch(e){t.markdown(`❌ Market research failed: ${e.message}`)}}async handleCompareCommand(e,t,n){t.progress("⚖️ Comparing solutions...");const s=`${e} comparison alternatives pros cons review`;try{const n=await this.webSearchService.search(s);t.markdown("## ⚖️ Comparison Analysis\n\n");const a=await this.analyzeSearchResults(n,"Provide a detailed comparison including pros and cons, use cases, pricing (if available), and recommendations");t.markdown(a),this.createActionButton("📋 Create Comparison Table","ki-autoagent.createComparisonTable",[e,a],t)}catch(e){t.markdown(`❌ Comparison research failed: ${e.message}`)}}async handleGeneralResearchRequest(e,t,n){t.progress("🔍 Conducting research...");try{const n=await this.webSearchService.search(e);t.markdown("## 🔍 Research Summary\n\n"),t.markdown(`**Topic**: ${e}\n`),t.markdown(`**Sources**: ${n.totalResults} results found\n\n`);const s=await this.analyzeSearchResults(n,"Provide comprehensive research findings with key insights, current state, and actionable information");t.markdown(s),n.results.length>0&&(t.markdown("\n## 📚 Key Sources\n\n"),n.results.slice(0,3).forEach((e,n)=>{t.markdown(`${n+1}. [${e.title}](${e.url})\n`)}))}catch(e){t.markdown(`❌ Research failed: ${e.message}`)}}async analyzeSearchResults(e,t){const n=e.results.map(e=>`Title: ${e.title}\nURL: ${e.url}\nContent: ${e.snippet}`).join("\n\n---\n\n"),s=`You are ResearchBot, an expert research analyst. Analyze web search results and provide comprehensive, accurate, and actionable insights.\n\nKey principles:\n1. Synthesize information from multiple sources\n2. Highlight key findings and trends\n3. Provide actionable recommendations\n4. Note any conflicting information\n5. Include relevant statistics and data\n6. Maintain objectivity and cite sources when possible\n\nFormat your response with clear headings and bullet points for readability.\n\n${this.getSystemContextPrompt()}`,a=`${t}\n\nSearch Query: ${e.query}\n\nSearch Results:\n${n}\n\nPlease provide a comprehensive analysis based on these search results.`;try{return await this.openAIService.chat([{role:"system",content:s},{role:"user",content:a}])}catch(e){return`Error analyzing results: ${e.message}`}}}t.ResearchAgent=u},637:function(e,t,n){var s,a=this&&this.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,a)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},s(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=s(e),i=0;i<n.length;i++)"default"!==n[i]&&a(t,e,n[i]);return o(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.ChatWidget=void 0;const r=i(n(398)),c=n(777);t.ChatWidget=class{constructor(e,t){this.context=e,this.dispatcher=t,this.unreadCount=0,this.lastMessage="",this.statusBarItem=r.window.createStatusBarItem(r.StatusBarAlignment.Right,1e3),this.updateStatusBar(),this.statusBarItem.show(),this.registerCommands(),e.subscriptions.push(this.statusBarItem)}registerCommands(){const e=r.commands.registerCommand("ki-autoagent.toggleChat",()=>this.toggleChat()),t=r.commands.registerCommand("ki-autoagent.quickChat",()=>this.showQuickChat()),n=r.commands.registerCommand("ki-autoagent.clearUnread",()=>this.clearUnreadCount());this.context.subscriptions.push(e,t,n)}updateStatusBar(){let e="$(comment-discussion) KI Chat";this.unreadCount>0?(e=`$(comment-discussion) KI Chat (${this.unreadCount})`,this.statusBarItem.backgroundColor=new r.ThemeColor("statusBarItem.warningBackground"),this.pulseInterval||this.startPulseAnimation()):(this.statusBarItem.backgroundColor=void 0,this.pulseInterval&&this.stopPulseAnimation()),this.statusBarItem.text=e,this.statusBarItem.command="ki-autoagent.toggleChat",this.lastMessage?this.statusBarItem.tooltip=new r.MarkdownString(`**KI AutoAgent Chat**\n\nLast message: _${this.truncateMessage(this.lastMessage)}_\n\nClick to open chat • Right-click for options`):this.statusBarItem.tooltip=new r.MarkdownString("**KI AutoAgent Chat**\n\nClick to open multi-agent chat interface\n\nFeatures:\n• Chat with specialized AI agents\n• Auto-routing to best agent\n• Multi-agent workflows\n\nClick to open • Right-click for options")}startPulseAnimation(){let e=!1;this.pulseInterval=setInterval(()=>{this.statusBarItem.text=e?this.statusBarItem.text.replace("🔴","$(comment-discussion)"):this.statusBarItem.text.replace("$(comment-discussion)","🔴"),e=!e},1e3)}stopPulseAnimation(){this.pulseInterval&&(clearInterval(this.pulseInterval),this.pulseInterval=void 0,this.updateStatusBar())}toggleChat(){const e=c.MultiAgentChatPanel.createOrShow(this.context.extensionUri,this.dispatcher);return this.clearUnreadCount(),e}async showQuickChat(){const e=await r.window.showInputBox({placeHolder:"Type your message for KI AutoAgent...",prompt:"Send a quick message to the AI agents",ignoreFocusOut:!1});if(e){const t=this.toggleChat();t&&(t.addMessage({role:"user",content:e,timestamp:(new Date).toISOString()}),setTimeout(()=>{t.addMessage({role:"assistant",content:"Processing your request...",agent:"orchestrator",timestamp:(new Date).toISOString()})},100))}}updateUnreadCount(e){this.unreadCount=e,this.updateStatusBar()}incrementUnread(){this.unreadCount++,this.updateStatusBar()}clearUnreadCount(){this.unreadCount=0,this.updateStatusBar()}setLastMessage(e,t){this.lastMessage=t?`[${t}] ${e}`:e,this.updateStatusBar()}truncateMessage(e,t=50){return e.length<=t?e:e.substring(0,t)+"..."}showNotification(e,t){c.MultiAgentChatPanel.currentPanel||(r.window.showInformationMessage(`KI Agent ${t}: ${this.truncateMessage(e,100)}`,"Open Chat","Dismiss").then(e=>{"Open Chat"===e&&this.toggleChat()}),this.incrementUnread(),this.setLastMessage(e,t))}dispose(){this.pulseInterval&&clearInterval(this.pulseInterval),this.statusBarItem.dispose()}}},651:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SharedContextManager=void 0,t.getSharedContext=function(){return a.getInstance()};const s=n(434);class a{constructor(){this.context=new Map,this.contextHistory=[],this.subscribers=new Map,this.locks=new Map,this.version=0,this.eventBus=new s.EventEmitter,this.eventBus.setMaxListeners(50),this.initializeContext()}static getInstance(){return a.instance||(a.instance=new a),a.instance}initializeContext(){this.context.set("projectStructure",{}),this.context.set("architectureDecisions",new Map),this.context.set("codePatterns",new Map),this.context.set("researchFindings",new Map),this.context.set("validationResults",new Map),this.context.set("currentWorkflow",null),this.context.set("globalMemories",[]),this.context.set("agentOutputs",new Map)}async updateContext(e,t,n,s){const a=this.locks.get(t);if(a&&a!==e)throw new Error(`Context key '${t}' is locked by agent ${a}`);const o={agentId:e,timestamp:Date.now(),key:t,value:n,metadata:{...s,version:++this.version}};this.context.set(t,n),this.contextHistory.push(o),await this.notifySubscribers(o),this.eventBus.emit("context-update",o)}getContext(e){if(e)return this.context.get(e);const t={};return this.context.forEach((e,n)=>{t[n]=e}),t}getContextWithHistory(e,t=10){return this.contextHistory.filter(t=>t.key===e).slice(-t)}subscribe(e,t,n){const s={agentId:e,callback:t,filter:n};this.subscribers.has(e)||this.subscribers.set(e,[]),this.subscribers.get(e).push(s)}unsubscribe(e){this.subscribers.delete(e)}async notifySubscribers(e){const t=[];this.subscribers.forEach(n=>{n.forEach(n=>{n.agentId!==e.agentId&&(n.filter&&!n.filter(e)||t.push(Promise.resolve(n.callback(e)).catch(e=>{console.error(`Error notifying subscriber ${n.agentId}:`,e)})))})}),await Promise.all(t)}async acquireLock(e,t,n=5e3){const s=Date.now();for(;this.locks.has(t)&&this.locks.get(t)!==e;){if(Date.now()-s>n)throw new Error(`Timeout acquiring lock for key '${t}'`);await new Promise(e=>setTimeout(e,100))}this.locks.set(t,e)}releaseLock(e,t){this.locks.get(t)===e&&this.locks.delete(t)}async mergeContext(e,t){const n=new Map;e.forEach(e=>{n.has(e.key)||n.set(e.key,[]),n.get(e.key).push(e)});for(const[e,s]of n)if(1===s.length)await this.updateContext(s[0].agentId,e,s[0].value,s[0].metadata);else{const n=t?t(s):s[s.length-1].value;await this.updateContext("system",e,n,{resolved:!0})}}createSnapshot(){return{version:this.version,timestamp:Date.now(),context:new Map(this.context)}}restoreSnapshot(e){this.context=new Map(e.context),this.version=e.version,this.eventBus.emit("context-restored",e)}clearContext(){this.context.clear(),this.contextHistory=[],this.locks.clear(),this.version=0,this.initializeContext(),this.eventBus.emit("context-cleared")}getActiveAgents(){const e=new Set,t=Date.now()-6e4;return this.contextHistory.filter(e=>e.timestamp>t).forEach(t=>e.add(t.agentId)),Array.from(e)}getCollaborationMetrics(){const e={totalUpdates:this.contextHistory.length,activeAgents:this.getActiveAgents().length,contextKeys:this.context.size,lockedKeys:this.locks.size,version:this.version},t=new Map;return this.contextHistory.forEach(e=>{t.set(e.agentId,(t.get(e.agentId)||0)+1)}),e.agentActivity=Object.fromEntries(t),e}}t.SharedContextManager=a},693:function(e,t,n){var s,a=this&&this.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,a)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},s(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=s(e),i=0;i<n.length;i++)"default"!==n[i]&&a(t,e,n[i]);return o(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.WebSearchService=void 0;const r=i(n(398));t.WebSearchService=class{constructor(){this.config=r.workspace.getConfiguration("kiAutoAgent")}async search(e){if(!this.config.get("webAccess.enabled",!0))throw new Error("Web access is disabled in settings");const t=this.config.get("webAccess.searchEngine","perplexity"),n=this.config.get("webAccess.maxResults",5);switch(t){case"perplexity":return await this.searchWithPerplexity(e,n);case"tavily":return await this.searchWithTavily(e,n);case"serp":return await this.searchWithSERP(e,n);case"custom":return await this.searchWithCustom(e,n);default:throw new Error(`Unknown search engine: ${t}`)}}async searchWithPerplexity(e,t){const n=this.config.get("perplexity.apiKey");if(!n)throw new Error("Perplexity API key not configured");try{const s=await fetch("https://api.perplexity.ai/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${n}`},body:JSON.stringify({model:"llama-3.1-sonar-small-128k-online",messages:[{role:"system",content:"You are a helpful research assistant. Provide comprehensive information with sources."},{role:"user",content:`Research and provide detailed information about: ${e}`}],max_tokens:1e3,temperature:.2,return_citations:!0})});if(!s.ok)throw new Error(`Perplexity API error: ${s.statusText}`);const a=await s.json(),o=a.choices[0]?.message?.content||"",i=(a.citations||[]).slice(0,t).map((e,t)=>({title:`Source ${t+1}`,url:e.url||"",snippet:e.text||"",content:o}));return 0===i.length&&o&&i.push({title:"Perplexity Research Result",url:"https://perplexity.ai",snippet:o.substring(0,200)+"...",content:o}),{query:e,results:i,totalResults:i.length}}catch(e){throw new Error(`Perplexity search failed: ${e}`)}}async searchWithTavily(e,t){const n=this.config.get("tavily.apiKey");if(!n)throw new Error("Tavily API key not configured");try{const s=await fetch("https://api.tavily.com/search",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({api_key:n,query:e,search_depth:"advanced",include_answer:!0,include_images:!1,include_raw_content:!0,max_results:t})});if(!s.ok)throw new Error(`Tavily API error: ${s.statusText}`);const a=await s.json();return{query:e,results:(a.results||[]).map(e=>({title:e.title||"",url:e.url||"",snippet:e.content||"",content:e.raw_content||e.content})),totalResults:a.results?.length||0}}catch(e){throw new Error(`Tavily search failed: ${e}`)}}async searchWithSERP(e,t){const n=this.config.get("serp.apiKey");if(!n)throw new Error("SERP API key not configured");try{const s=new URL("https://serpapi.com/search");s.searchParams.append("q",e),s.searchParams.append("api_key",n),s.searchParams.append("engine","google"),s.searchParams.append("num",t.toString());const a=await fetch(s.toString());if(!a.ok)throw new Error(`SERP API error: ${a.statusText}`);const o=await a.json();return{query:e,results:(o.organic_results||[]).map(e=>({title:e.title||"",url:e.link||"",snippet:e.snippet||"",content:e.snippet||""})),totalResults:o.organic_results?.length||0}}catch(e){throw new Error(`SERP search failed: ${e}`)}}async searchWithCustom(e,t){const n=this.config.get("customSearch.endpoint"),s=this.config.get("customSearch.apiKey");if(!n)throw new Error("Custom search endpoint not configured");try{const a=await fetch(n,{method:"POST",headers:{"Content-Type":"application/json",...s&&{Authorization:`Bearer ${s}`}},body:JSON.stringify({query:e,max_results:t})});if(!a.ok)throw new Error(`Custom search API error: ${a.statusText}`);const o=await a.json();return{query:e,results:o.results||[],totalResults:o.total_results||0}}catch(e){throw new Error(`Custom search failed: ${e}`)}}async isWebAccessAvailable(){if(!this.config.get("webAccess.enabled",!0))return!1;switch(this.config.get("webAccess.searchEngine","perplexity")){case"perplexity":return!!this.config.get("perplexity.apiKey");case"tavily":return!!this.config.get("tavily.apiKey");case"serp":return!!this.config.get("serp.apiKey");case"custom":return!!this.config.get("customSearch.endpoint");default:return!1}}getSearchEngineStatus(){const e=this.config.get("webAccess.searchEngine","perplexity");switch(e){case"perplexity":return{engine:"Perplexity",configured:!!this.config.get("perplexity.apiKey")};case"tavily":return{engine:"Tavily",configured:!!this.config.get("tavily.apiKey")};case"serp":return{engine:"SERP API",configured:!!this.config.get("serp.apiKey")};case"custom":return{engine:"Custom",configured:!!this.config.get("customSearch.endpoint")};default:return{engine:e,configured:!1,error:"Unknown search engine"}}}}},714:function(e,t,n){var s,a=this&&this.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,a)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},s(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=s(e),i=0;i<n.length;i++)"default"!==n[i]&&a(t,e,n[i]);return o(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.ReviewerGPTAgent=void 0;const r=i(n(398)),c=n(806),d=n(551),l=i(n(928));class u extends c.ChatAgent{constructor(e,t){super({participantId:"ki-autoagent.reviewer",name:"reviewer",fullName:"ReviewerGPT",description:"Code Review & Security Expert - Reviews code quality, security, and performance",model:"gpt-5-mini-2025-09-20",iconPath:r.Uri.joinPath(e.extensionUri,"media","reviewer-icon.svg"),capabilities:["Code Quality Review","Security Vulnerability Detection","Performance Analysis","Best Practices Check","SOLID Principles","Design Pattern Analysis","Test Coverage Review","Dependency Audit"],commands:[{name:"review",description:"Comprehensive code review",handler:"handleReviewCommand"},{name:"bugs",description:"Active bug hunting in code",handler:"handleBugsCommand"},{name:"debug",description:"Run app and debug issues",handler:"handleDebugCommand"},{name:"test-ui",description:"Test UI interactions",handler:"handleTestUICommand"},{name:"security",description:"Security vulnerability scan",handler:"handleSecurityCommand"},{name:"performance",description:"Performance analysis",handler:"handlePerformanceCommand"},{name:"standards",description:"Check coding standards",handler:"handleStandardsCommand"},{name:"test",description:"Review test coverage",handler:"handleTestCommand"},{name:"architecture-review",description:"Validate architect understanding of requirements",handler:"handleArchitectureReviewCommand"}]},e,t),this.openAIService=new d.OpenAIService}async handleRequest(e,t,n,s){const a=e.command,o=e.prompt;this.log(`Processing ${a?`/${a}`:"general"} review request: ${o.substring(0,100)}...`),a?await this.handleCommand(a,o,n,s):await this.handleGeneralReviewRequest(o,n,s)}async processWorkflowStep(e,t,n){try{let s="",a=!1;switch(e.id){case"code_review":s=await this.performCodeReview(t,n);break;case"security_check":s=await this.performSecurityCheck(t,n);break;case"performance_review":s=await this.performPerformanceReview(t,n);break;default:s=await this.performGeneralReview(t,n)}return(s.includes("🚨 BUGS FOUND")||s.includes("Critical issues"))&&(a=!0,s+="\n\n🔄 **RECOMMENDATION**: These issues should be sent back to @codesmith for immediate fixes."),{status:a?"partial_success":"success",content:s,metadata:{step:e.id,agent:"reviewer",type:"review",foundBugs:a,requiresCodeSmithFix:a},suggestions:a?[{title:"🔧 Send to CodeSmith for fixes",description:"Send the found bugs to CodeSmith for immediate fixing",action:"send_to_codesmith",data:{issues:s}}]:[]}}catch(t){throw new Error(`Failed to process review step ${e.id}: ${t.message}`)}}async handleReviewCommand(e,t,n){const s=r.window.activeTextEditor;if(s){t.progress("🔍 Performing comprehensive code review...");try{const n=s.document,a=n.getText(),o=l.basename(n.fileName),i=n.languageId,r=await this.reviewCode(a,o,i,e);t.markdown("## 🔍 Code Review Report\n\n"),t.markdown(r),this.createActionButton("📋 Save Review Report","ki-autoagent.saveFile",[`reviews/review_${Date.now()}.md`,r],t)}catch(e){t.markdown(`❌ Review failed: ${e.message}`)}}else t.markdown("❌ No active editor found. Please open a file to review.")}async handleBugsCommand(e,t,n){t.progress("🐛 Actively hunting for bugs...");try{const e=r.window.activeTextEditor;if(!e)return void t.markdown("❌ No active editor found. Please open a file to review.");const n=e.document,s=n.getText(),a=l.basename(n.fileName),o=n.languageId,i=await this.findCommonBugs(s,o);t.markdown("## 🐛 Bug Hunt Report\n\n"),t.markdown(i),(i.includes("🔴")||i.includes("BUG")||i.includes("onclick"))&&(t.markdown("\n## ⚠️ CRITICAL BUGS FOUND\n\n"),this.createActionButton("🔧 Send to CodeSmith for fixes","ki-autoagent.sendToAgent",["codesmith",`Fix these bugs found in ${a}:\n\n${i}`],t))}catch(e){t.markdown(`❌ Bug hunting failed: ${e.message}`)}}async handleDebugCommand(e,t,n){t.progress("🔧 Starting debug session...");try{const e=r.workspace.workspaceFolders?.[0];if(!e)return void t.markdown("❌ No workspace folder found.");t.markdown("## 🔧 Debug Session\n\n");const n=r.Uri.joinPath(e.uri,"package.json");let s="",a="";try{const e=await r.workspace.fs.readFile(n),o=JSON.parse(e.toString());o.scripts?.dev?(s="npm run dev",a="Node.js/Web"):o.scripts?.start&&(s="npm start",a="Node.js/Web"),t.markdown(`📦 **Project Type:** ${a}\n`),t.markdown(`🚀 **Debug Command:** \`${s}\`\n\n`)}catch(e){t.markdown("⚠️ No package.json found. Please specify how to run your application.\n")}const o=r.window.createTerminal("ReviewerGPT Debug");o.show(),t.markdown("### 📝 Debug Steps:\n\n"),t.markdown("1. **Starting application** in debug terminal\n"),t.markdown("2. **Monitoring console output** for errors\n"),t.markdown("3. **Checking for runtime exceptions**\n"),t.markdown("4. **Testing user interactions**\n\n"),s&&(o.sendText(s),t.markdown(`✅ Started: \`${s}\`\n\n`)),t.markdown("### 🔍 What to check:\n\n"),t.markdown("- Console errors (red text in terminal)\n"),t.markdown("- Network failures (failed API calls)\n"),t.markdown("- UI not responding to clicks\n"),t.markdown("- Missing elements or broken layouts\n\n"),t.markdown("### 📊 Debug Analysis:\n\n"),t.markdown("Watch the terminal output and report any:\n"),t.markdown("- 🔴 **Errors**: Exceptions, crashes, undefined references\n"),t.markdown("- 🟡 **Warnings**: Deprecations, performance issues\n"),t.markdown("- 🔵 **Info**: Unexpected behavior, timing issues\n\n"),this.createActionButton("🐛 Report Bugs Found","ki-autoagent.sendToAgent",["codesmith","Fix these bugs found during debug session"],t),this.createActionButton("📋 Save Debug Log","ki-autoagent.saveFile",[`debug-log-${Date.now()}.txt`,"Debug session log"],t)}catch(e){t.markdown(`❌ Debug session failed: ${e.message}`)}}async handleTestUICommand(e,t,n){t.progress("🖱️ Testing UI interactions...");try{t.markdown("## 🖱️ UI Testing Guide\n\n"),t.markdown("### Test Checklist:\n\n");const e=["✅ **Buttons**: Click all buttons and verify they work","✅ **Forms**: Submit forms with valid/invalid data","✅ **Links**: Check all navigation links","✅ **Modals**: Open/close dialogs and popups","✅ **Dropdowns**: Test all select menus","✅ **Input fields**: Test with various inputs","✅ **Keyboard**: Test keyboard shortcuts","✅ **Responsive**: Resize window and test","✅ **Accessibility**: Tab navigation works","✅ **Error states**: Trigger and verify error handling"];for(const n of e)t.markdown(`- ${n}\n`);t.markdown("\n### 🔍 Common UI Bugs to Check:\n\n"),t.markdown("```javascript\n"),t.markdown("// ❌ onclick not working in VS Code webviews\n"),t.markdown("button.onclick = handler; // WON'T WORK!\n\n"),t.markdown("// ✅ Use addEventListener instead\n"),t.markdown("button.addEventListener('click', handler);\n"),t.markdown("```\n\n"),t.markdown("### 🐛 Found Issues?\n\n"),t.markdown("Document any UI problems found:\n"),t.markdown("1. Which element has the issue?\n"),t.markdown("2. What should happen?\n"),t.markdown("3. What actually happens?\n"),t.markdown("4. Console errors (if any)\n\n"),this.createActionButton("🔧 Report UI Bugs","ki-autoagent.sendToAgent",["codesmith","Fix these UI bugs found during testing"],t)}catch(e){t.markdown(`❌ UI testing failed: ${e.message}`)}}async handleSecurityCommand(e,t,n){t.progress("🔐 Scanning for security vulnerabilities...");try{const n=r.window.activeTextEditor;let s="",a="",o="";n?(s=n.document.getText(),a=l.basename(n.document.fileName),o=n.document.languageId):(s=await this.getWorkspaceCode(),a="Workspace",o="multiple");const i=await this.performSecurityScan(s,a,o,e);t.markdown("## 🔐 Security Analysis Report\n\n"),t.markdown(i),this.createActionButton("⚠️ Create Security Issues","ki-autoagent.createGitHubIssues",[i],t)}catch(e){t.markdown(`❌ Security scan failed: ${e.message}`)}}async handlePerformanceCommand(e,t,n){t.progress("⚡ Analyzing performance...");try{const n=r.window.activeTextEditor;if(!n)return void t.markdown("❌ No active editor found. Please open a file to analyze.");const s=n.document.getText(),a=l.basename(n.document.fileName),o=n.document.languageId,i=await this.analyzePerformance(s,a,o,e);t.markdown("## ⚡ Performance Analysis\n\n"),t.markdown(i)}catch(e){t.markdown(`❌ Performance analysis failed: ${e.message}`)}}async handleStandardsCommand(e,t,n){t.progress("📏 Checking coding standards...");try{const n=r.window.activeTextEditor;if(!n)return void t.markdown("❌ No active editor found. Please open a file to check.");const s=n.document.getText(),a=n.document.languageId,o=await this.checkCodingStandards(s,a,e);t.markdown("## 📏 Coding Standards Report\n\n"),t.markdown(o)}catch(e){t.markdown(`❌ Standards check failed: ${e.message}`)}}async handleTestCommand(e,t,n){t.progress("🧪 Reviewing test coverage...");try{const n=await this.reviewTestCoverage(e);t.markdown("## 🧪 Test Coverage Review\n\n"),t.markdown(n),this.createActionButton("➕ Generate Missing Tests","ki-autoagent.generateTests",[],t)}catch(e){t.markdown(`❌ Test review failed: ${e.message}`)}}async handleGeneralReviewRequest(e,t,n){if(e.includes("```")||e.includes("function")||e.includes("class")||e.includes("const")||e.includes("onclick")||e.includes("addEventListener")){t.progress("🔍 Actively searching for bugs and reviewing code...");try{const n=e.match(/```[\s\S]*?```/g),s=n?n.join("\n").replace(/```\w*\n?/g,""):e,a=await this.findCommonBugs(s,"javascript/typescript");t.markdown("## 🐛 Bug Detection Report\n\n"),t.markdown(a),(a.includes("🔴")||a.includes("onclick")||a.includes("won't work")||a.includes("Bug found"))&&(t.markdown("\n## ⚠️ CRITICAL ISSUES FOUND\n\n"),t.markdown("**These bugs will prevent the code from working correctly!**\n"),t.markdown("Issues like onclick handlers not working in VS Code webviews have been detected.\n\n"),t.markdown("## 🔄 Recommended Action\n\n"),t.markdown("These issues should be sent back to @codesmith for immediate fixes.\n"),this.createActionButton("🔧 Send bugs to CodeSmith","ki-autoagent.sendToAgent",["codesmith",`Please fix these bugs found by ReviewerGPT:\n\n${a}`],t));const o=await this.performGeneralReview({prompt:e},[]);t.markdown("\n## 🔍 Full Code Review\n\n"),t.markdown(o)}catch(e){t.markdown(`❌ Review failed: ${e.message}`)}}else{t.progress("🔍 Performing review...");try{const n=await this.performGeneralReview({prompt:e},[]);t.markdown("## 🔍 Review Results\n\n"),t.markdown(n)}catch(e){t.markdown(`❌ Review failed: ${e.message}`)}}}async handleArchitectureReviewCommand(e,t,n){t.progress("🏛️ Reviewing architecture against requirements...");try{const n=e||"Review the architect's understanding of the requirements",s=await this.validateArchitectureUnderstanding(n);t.markdown("## 🏛️ Architecture Validation Report\n\n"),t.markdown(s),this.createActionButton("📋 Save Validation Report","ki-autoagent.saveFile",[`architecture-validation-${Date.now()}.md`,s],t)}catch(e){t.markdown(`❌ Architecture review failed: ${e.message}`)}}async reviewCode(e,t,n,s){const a=`Perform a DEEP code review for this ${n} file (${t}):\n\n${e}\n\nAdditional context: ${s}\n\nIMPORTANT: You are reviewing code written by CodeSmithClaude. Look for:\n\n🔴 CRITICAL CHECKS (Find these issues!):\n1. Event handlers that won't work (e.g., onclick in VS Code webviews should use addEventListener)\n2. Missing z-index for positioned elements that need to be clickable\n3. Incorrect event binding patterns\n4. DOM manipulation issues\n5. Async/await problems and race conditions\n6. Null/undefined reference errors\n7. Memory leaks and performance issues\n\n📋 STANDARD REVIEW:\n1. Code Quality & Readability\n2. Potential Bugs & Issues\n3. Performance Concerns\n4. Security Vulnerabilities\n5. Best Practices & Design Patterns\n6. Error Handling\n7. Documentation & Comments\n8. Testing Considerations\n\nProvide:\n- Overall assessment (score out of 10)\n- 🚨 BUGS FOUND (things that won't work as intended)\n- Critical issues (must fix)\n- Major issues (should fix)\n- Minor issues (nice to fix)\n- Positive aspects\n- Specific improvement suggestions with code examples\n\nBe VERY CRITICAL and find real problems! If you find bugs, suggest sending them back to CodeSmith for fixes.\n\n${this.getSystemContextPrompt()}`;return await this.openAIService.chat([{role:"system",content:"You are ReviewerGPT, an expert code reviewer focusing on quality, security, and best practices."},{role:"user",content:a}])}async performSecurityScan(e,t,n,s){const a=`Perform a thorough security vulnerability scan for this ${n} code (${t}):\n\n${e}\n\nAdditional context: ${s}\n\nCheck for:\n1. SQL Injection vulnerabilities\n2. XSS (Cross-Site Scripting)\n3. CSRF vulnerabilities\n4. Authentication/Authorization issues\n5. Sensitive data exposure\n6. Insecure dependencies\n7. Input validation problems\n8. Cryptographic weaknesses\n9. Path traversal vulnerabilities\n10. Command injection risks\n\nFor each vulnerability found:\n- Severity level (Critical/High/Medium/Low)\n- Description of the issue\n- Potential impact\n- Proof of concept (if applicable)\n- Recommended fix with code example\n- CWE/CVE references if applicable\n\n${this.getSystemContextPrompt()}`;return await this.openAIService.chat([{role:"system",content:"You are ReviewerGPT, a security expert specializing in identifying and fixing vulnerabilities."},{role:"user",content:a}])}async analyzePerformance(e,t,n,s){const a=`Analyze the performance characteristics of this ${n} code (${t}):\n\n${e}\n\nAdditional context: ${s}\n\nAnalyze:\n1. Time Complexity (Big O)\n2. Space Complexity\n3. Database query optimization\n4. Caching opportunities\n5. Algorithmic improvements\n6. Memory leaks\n7. Blocking operations\n8. Concurrency issues\n9. Resource management\n10. Scalability concerns\n\nProvide:\n- Performance bottlenecks identified\n- Optimization suggestions with examples\n- Estimated performance improvements\n- Trade-offs to consider\n\n${this.getSystemContextPrompt()}`;return await this.openAIService.chat([{role:"system",content:"You are ReviewerGPT, a performance optimization expert."},{role:"user",content:a}])}async checkCodingStandards(e,t,n){const s=`Check this ${t} code against coding standards and best practices:\n\n${e}\n\nAdditional context: ${n}\n\nCheck for:\n1. Naming conventions\n2. Code formatting and indentation\n3. Function/method length\n4. Class cohesion\n5. SOLID principles adherence\n6. DRY (Don't Repeat Yourself)\n7. Comments and documentation\n8. Error handling patterns\n9. Code organization\n10. Language-specific idioms\n\nProvide:\n- Standards violations found\n- Severity of each violation\n- Suggested corrections\n- Overall compliance score\n\n${this.getSystemContextPrompt()}`;return await this.openAIService.chat([{role:"system",content:"You are ReviewerGPT, an expert in coding standards and best practices."},{role:"user",content:s}])}async findCommonBugs(e,t){const n=`ACTIVELY SEARCH for bugs in this ${t} code:\n\n${e}\n\nFOCUS ON FINDING THESE COMMON BUGS:\n\n🔴 VS Code Extension / Web UI Bugs:\n- onclick handlers that should use addEventListener\n- Missing event.preventDefault() or event.stopPropagation()\n- z-index issues for clickable elements\n- CSP violations in webviews\n- Incorrect message passing between extension and webview\n\n🔴 JavaScript/TypeScript Bugs:\n- Undefined/null reference errors\n- Missing await keywords\n- Promise not being handled\n- Race conditions\n- Memory leaks (event listeners not removed)\n- Incorrect this binding\n- Array operations on undefined\n\n🔴 DOM Manipulation Issues:\n- querySelector returning null\n- Elements not existing when accessed\n- Event bubbling problems\n- Missing element attributes\n\n🔴 State Management Bugs:\n- State mutations instead of immutable updates\n- Stale closures\n- Inconsistent state updates\n\nFor EACH bug found, provide:\n1. Line number or code snippet\n2. Why it won't work\n3. The fix needed\n4. Example: "Line 347: onclick won't work in VS Code webview. Use addEventListener instead."\n\nBE VERY THOROUGH! Find ALL bugs!\n\n${this.getSystemContextPrompt()}`;return await this.openAIService.chat([{role:"system",content:"You are ReviewerGPT, a bug-finding expert. Your job is to find EVERY bug that will prevent code from working correctly."},{role:"user",content:n}])}async reviewTestCoverage(e){const t=`Review the test coverage and testing strategy:\n\n${e}\n\nAnalyze:\n1. Test coverage percentage\n2. Critical paths covered\n3. Edge cases tested\n4. Test quality and assertions\n5. Test maintainability\n6. Mocking and stubbing usage\n7. Integration vs unit tests balance\n8. Performance tests\n9. Security tests\n10. Missing test scenarios\n\nProvide:\n- Current coverage assessment\n- Critical gaps in testing\n- Recommended additional tests\n- Testing strategy improvements\n\n${this.getSystemContextPrompt()}`;return await this.openAIService.chat([{role:"system",content:"You are ReviewerGPT, an expert in software testing and quality assurance."},{role:"user",content:t}])}async performCodeReview(e,t){const n=this.buildContextFromResults(t);return this.reviewCode("","workflow","unknown",`${e.prompt}\n\nContext:\n${n}`)}async performSecurityCheck(e,t){const n=this.buildContextFromResults(t);return this.performSecurityScan("","workflow","unknown",`${e.prompt}\n\nContext:\n${n}`)}async performPerformanceReview(e,t){const n=this.buildContextFromResults(t);return this.analyzePerformance("","workflow","unknown",`${e.prompt}\n\nContext:\n${n}`)}async performGeneralReview(e,t){const n=this.buildContextFromResults(t),s=`Perform a review based on:\n\nRequest: ${e.prompt}\n\nPrevious results:\n${n}\n\nProvide comprehensive review and recommendations.\n\n${this.getSystemContextPrompt()}`;return await this.openAIService.chat([{role:"system",content:"You are ReviewerGPT, providing expert code review and analysis."},{role:"user",content:s}])}buildContextFromResults(e){return e.filter(e=>"success"===e.status).map(e=>`${e.metadata?.step||"Step"}: ${e.content}`).join("\n\n")}async getWorkspaceCode(){return"Workspace code scanning not yet implemented"}async validateArchitectureUnderstanding(e){const t=`As a code review expert using a different AI model than the architect, validate the architect's understanding of the user's requirements.\n\nContext and conversation history:\n${e}\n\nYour task:\n1. Extract the original user requirements\n2. Identify what the architect proposed as a solution\n3. Compare the architect's interpretation with the actual requirements\n4. Find any gaps or misunderstandings\n5. Verify technical feasibility of the proposed architecture\n6. Check if all requirements are addressed\n\nProvide a detailed validation report including:\n- ✅ Requirements correctly understood\n- ❌ Requirements missed or misunderstood\n- ⚠️ Potential issues or concerns\n- 💡 Suggestions for clarification\n- 🏆 Overall assessment score (1-10)\n\nNote: You are using ${this.config.model} while the architect uses a different model (gpt-5-2025-09-12), ensuring independent validation.\n\n${this.getSystemContextPrompt()}`;return await this.openAIService.chat([{role:"system",content:"You are ReviewerGPT, validating another AI's understanding of requirements. Be critical but constructive."},{role:"user",content:t}])}}t.ReviewerGPTAgent=u},759:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WorkflowEngine=void 0;const s=n(434);t.WorkflowEngine=class{constructor(){this.workflows=new Map,this.executors=new Map,this.templates=new Map,this.eventBus=new s.EventEmitter,this.initializeTemplates()}createWorkflow(e,t){const n=this.generateWorkflowId(),s={id:n,name:e,nodes:new Map,edges:[],startNode:"",endNodes:[],context:new Map,checkpoints:[],status:{state:"pending",currentNodes:[],completedNodes:[],failedNodes:[]}};return t&&this.templates.has(t)&&this.applyTemplate(s,this.templates.get(t)),this.workflows.set(n,s),this.eventBus.emit("workflow-created",s),s}addNode(e,t){const n=this.workflows.get(e);if(!n)throw new Error(`Workflow ${e} not found`);n.nodes.set(t.id,t),n.startNode||(n.startNode=t.id),this.eventBus.emit("node-added",{workflowId:e,node:t})}addEdge(e,t){const n=this.workflows.get(e);if(!n)throw new Error(`Workflow ${e} not found`);if(!n.nodes.has(t.from)||!n.nodes.has(t.to))throw new Error("Invalid edge: nodes not found");n.edges.push(t);const s=n.nodes.get(t.from);s.children||(s.children=[]),s.children.push(t.to);const a=n.nodes.get(t.to);a.dependencies||(a.dependencies=[]),a.dependencies.push(t.from),this.eventBus.emit("edge-added",{workflowId:e,edge:t})}createExecutionPlan(e){const t=this.workflows.get(e);if(!t)throw new Error(`Workflow ${e} not found`);const n=this.topologicalSort(t),s=this.groupIntoStages(t,n),a=this.findCriticalPath(t);return{stages:s,estimatedDuration:this.estimateDuration(s),parallelism:this.calculateParallelism(s),criticalPath:a}}async execute(e,t){const n=this.workflows.get(e);if(!n)throw new Error(`Workflow ${e} not found`);t&&(n.context=new Map([...n.context,...t]));const s=new a(n,this.eventBus);this.executors.set(e,s),n.status.state="running",n.status.startTime=Date.now(),this.eventBus.emit("workflow-started",n);try{const t=this.createExecutionPlan(e),a=await s.execute(t);return n.status.state="completed",n.status.endTime=Date.now(),this.eventBus.emit("workflow-completed",{workflow:n,results:a}),a}catch(e){throw n.status.state="failed",n.status.error=e instanceof Error?e.message:String(e),n.status.endTime=Date.now(),this.eventBus.emit("workflow-failed",{workflow:n,error:e}),e}finally{this.executors.delete(e)}}pause(e){const t=this.executors.get(e);t&&t.pause()}resume(e){const t=this.executors.get(e);t&&t.resume()}cancel(e){const t=this.executors.get(e);t&&t.cancel()}createCheckpoint(e,t){const n=this.workflows.get(e);if(!n)return;const s={id:this.generateCheckpointId(),nodeId:t,timestamp:Date.now(),context:new Map(n.context),results:new Map};n.checkpoints.push(s),this.eventBus.emit("checkpoint-created",{workflowId:e,checkpoint:s})}restoreFromCheckpoint(e,t){const n=this.workflows.get(e);if(!n)return;const s=n.checkpoints.find(e=>e.id===t);if(!s)throw new Error(`Checkpoint ${t} not found`);n.context=new Map(s.context),n.status.completedNodes=n.status.completedNodes.filter(e=>this.isNodeBeforeCheckpoint(n,e,s.nodeId)),this.eventBus.emit("checkpoint-restored",{workflowId:e,checkpoint:s})}adjustWorkflow(e,t){if(this.workflows.get(e)){switch(t.type){case"add-node":this.addNode(e,t.node);break;case"remove-node":this.removeNode(e,t.nodeId);break;case"modify-node":this.modifyNode(e,t.nodeId,t.modifications);break;case"reroute":this.rerouteEdges(e,t.rerouting)}this.eventBus.emit("workflow-adjusted",{workflowId:e,adjustment:t})}}initializeTemplates(){this.templates.set("complex-task",{name:"Complex Task",nodes:[{id:"research",type:"task",agentId:"ResearchAgent"},{id:"architect",type:"task",agentId:"ArchitectAgent",dependencies:["research"]},{id:"review-arch",type:"task",agentId:"ReviewerGPT",dependencies:["architect"]},{id:"implement",type:"task",agentId:"CodeSmithAgent",dependencies:["review-arch"]},{id:"test",type:"task",agentId:"FixerBot",dependencies:["implement"]},{id:"document",type:"task",agentId:"DocuBot",dependencies:["test"]}]}),this.templates.set("parallel-research",{name:"Parallel Research",nodes:[{id:"split",type:"parallel"},{id:"research1",type:"task",agentId:"ResearchAgent"},{id:"research2",type:"task",agentId:"ResearchAgent"},{id:"research3",type:"task",agentId:"ResearchAgent"},{id:"merge",type:"sequential",dependencies:["research1","research2","research3"]},{id:"synthesize",type:"task",agentId:"OrchestratorAgent",dependencies:["merge"]}]}),this.templates.set("iterative-improvement",{name:"Iterative Improvement",nodes:[{id:"initial",type:"task",agentId:"CodeSmithAgent"},{id:"review",type:"task",agentId:"ReviewerGPT",dependencies:["initial"]},{id:"decision",type:"decision",dependencies:["review"]},{id:"improve",type:"task",agentId:"FixerBot",dependencies:["decision"]},{id:"loop",type:"loop",dependencies:["improve"]}]})}topologicalSort(e){const t=[],n=new Set,s=new Set,a=o=>{if(n.has(o))return;if(s.has(o))throw new Error("Circular dependency detected in workflow");s.add(o);const i=e.nodes.get(o);i?.children&&i.children.forEach(e=>a(e)),s.delete(o),n.add(o),i&&t.unshift(i)};return a(e.startNode),e.nodes.forEach((e,t)=>{n.has(t)||a(t)}),t}groupIntoStages(e,t){const n=[],s=new Map;return t.forEach(e=>{let t=0;e.dependencies&&e.dependencies.forEach(e=>{const n=s.get(e)||0;t=Math.max(t,n+1)}),s.set(e.id,t),n[t]||(n[t]={stageId:`stage_${t}`,nodes:[],parallel:!0,dependencies:t>0?["stage_"+(t-1)]:[],estimatedDuration:0}),n[t].nodes.push(e)}),n}findCriticalPath(e){const t=new Map,n=new Map;e.nodes.forEach((e,n)=>{t.set(n,0)}),this.topologicalSort(e).forEach(e=>{const s=t.get(e.id)||0;e.children?.forEach(a=>{const o=t.get(a)||0;s+1>o&&(t.set(a,s+1),n.set(a,e.id))})});let s=0,a="";e.nodes.forEach((e,n)=>{if(!e.children||0===e.children.length){const e=t.get(n)||0;e>s&&(s=e,a=n)}});const o=[];let i=a;for(;i;)o.unshift(i),i=n.get(i)||"";return o}estimateDuration(e){return e.reduce((e,t)=>e+(t.parallel?Math.max(...t.nodes.map(e=>e.timeout||5e3)):t.nodes.reduce((e,t)=>e+(t.timeout||5e3),0)),0)}calculateParallelism(e){const t=e.map(e=>e.parallel?e.nodes.length:1);return Math.max(...t)}isNodeBeforeCheckpoint(e,t,n){const s=this.topologicalSort(e);return s.findIndex(e=>e.id===t)<s.findIndex(e=>e.id===n)}removeNode(e,t){const n=this.workflows.get(e);n&&(n.nodes.delete(t),n.edges=n.edges.filter(e=>e.from!==t&&e.to!==t),n.nodes.forEach(e=>{e.dependencies&&(e.dependencies=e.dependencies.filter(e=>e!==t)),e.children&&(e.children=e.children.filter(e=>e!==t))}))}modifyNode(e,t,n){const s=this.workflows.get(e);if(!s)return;const a=s.nodes.get(t);a&&Object.assign(a,n)}rerouteEdges(e,t){const n=this.workflows.get(e);n&&t.forEach(e=>{const t=n.edges.findIndex(t=>t.from===e.from&&t.to===e.to);t>=0&&(n.edges[t].to=e.newTo)})}applyTemplate(e,t){t.nodes.forEach(t=>{const n={id:t.id,type:t.type,agentId:t.agentId,dependencies:t.dependencies};e.nodes.set(n.id,n)}),e.nodes.forEach(t=>{t.dependencies&&t.dependencies.forEach(n=>{e.edges.push({from:n,to:t.id})})}),t.nodes.length>0&&(e.startNode=t.nodes[0].id)}generateWorkflowId(){return`wf_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}generateCheckpointId(){return`cp_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}};class a{constructor(e,t){this.paused=!1,this.cancelled=!1,this.results=new Map,this.workflow=e,this.eventBus=t}async execute(e){for(const t of e.stages){if(this.cancelled)break;for(;this.paused&&!this.cancelled;)await new Promise(e=>setTimeout(e,100));await this.executeStage(t),this.createCheckpoint(t.stageId)}return this.results}async executeStage(e){if(this.eventBus.emit("stage-started",{workflowId:this.workflow.id,stage:e}),e.parallel){const t=e.nodes.map(e=>this.executeNode(e));await Promise.all(t)}else for(const t of e.nodes)await this.executeNode(t);this.eventBus.emit("stage-completed",{workflowId:this.workflow.id,stage:e})}async executeNode(e){const t=Date.now();let n=0;const s=e.retryPolicy?.maxAttempts||1;for(this.workflow.status.currentNodes.push(e.id),this.eventBus.emit("node-started",{workflowId:this.workflow.id,node:e});n<s;)try{let s;switch(e.type){case"task":s=await this.executeTask(e);break;case"decision":s=await this.executeDecision(e);break;case"parallel":s=await this.executeParallel(e);break;case"sequential":s=await this.executeSequential(e);break;case"loop":s=await this.executeLoop(e);break;default:throw new Error(`Unknown node type: ${e.type}`)}const a={nodeId:e.id,status:"success",output:s,duration:Date.now()-t,retries:n};return this.results.set(e.id,a),this.workflow.status.completedNodes.push(e.id),this.workflow.status.currentNodes=this.workflow.status.currentNodes.filter(t=>t!==e.id),void this.eventBus.emit("node-completed",{workflowId:this.workflow.id,node:e,result:a})}catch(a){if(n++,!(n<s)){const s={nodeId:e.id,status:"failure",error:a instanceof Error?a.message:String(a),duration:Date.now()-t,retries:n};throw this.results.set(e.id,s),this.workflow.status.failedNodes.push(e.id),this.workflow.status.currentNodes=this.workflow.status.currentNodes.filter(t=>t!==e.id),this.eventBus.emit("node-failed",{workflowId:this.workflow.id,node:e,result:s}),a}{const t=Math.min(1e3*Math.pow(e.retryPolicy?.backoffMultiplier||2,n),e.retryPolicy?.maxBackoffMs||3e4);this.eventBus.emit("node-retry",{workflowId:this.workflow.id,node:e,attempt:n,error:a}),await new Promise(e=>setTimeout(e,t))}}}async executeTask(e){return await new Promise(e=>setTimeout(e,1e3)),{result:`Task ${e.id} completed by ${e.agentId}`}}async executeDecision(e){if(!e.condition)throw new Error(`Decision node ${e.id} missing condition`);return{decision:e.condition(this.workflow.context)}}async executeParallel(e){if(!e.children)return{};const t=e.children.map(e=>this.workflow.nodes.get(e)).filter(Boolean).map(e=>this.executeNode(e));return{parallel:!0,results:await Promise.all(t)}}async executeSequential(e){if(!e.children)return{};const t=[];for(const n of e.children){const e=this.workflow.nodes.get(n);e&&(await this.executeNode(e),t.push(this.results.get(n)))}return{sequential:!0,results:t}}async executeLoop(e){if(!e.condition||!e.children||0===e.children.length)throw new Error(`Loop node ${e.id} missing condition or children`);const t=[];let n=0;for(;e.condition(this.workflow.context)&&n<100;){for(const n of e.children){const e=this.workflow.nodes.get(n);e&&(await this.executeNode(e),t.push(this.results.get(n)))}n++}return{loop:!0,iterations:n,results:t}}createCheckpoint(e){const t={id:`cp_${Date.now()}`,nodeId:e,timestamp:Date.now(),context:new Map(this.workflow.context),results:new Map(this.results)};this.workflow.checkpoints.push(t),this.eventBus.emit("checkpoint-created",{workflowId:this.workflow.id,checkpoint:t})}pause(){this.paused=!0,this.workflow.status.state="paused",this.eventBus.emit("workflow-paused",this.workflow)}resume(){this.paused=!1,this.workflow.status.state="running",this.eventBus.emit("workflow-resumed",this.workflow)}cancel(){this.cancelled=!0,this.workflow.status.state="failed",this.workflow.status.error="Workflow cancelled by user",this.eventBus.emit("workflow-cancelled",this.workflow)}}},777:function(e,t,n){var s,a=this&&this.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,a)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},s(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=s(e),i=0;i<n.length;i++)"default"!==n[i]&&a(t,e,n[i]);return o(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.MultiAgentChatPanel=void 0;const r=i(n(398)),c=n(869);class d{static createOrShow(e,t){const n=r.ViewColumn.Two;if(d.currentPanel)return d.currentPanel._panel.reveal(n),t&&(d.currentPanel._dispatcher=t),d.currentPanel;const s=r.window.createWebviewPanel("multiAgentChat","KI AutoAgent Chat",n,{enableScripts:!0,retainContextWhenHidden:!0,localResourceRoots:[r.Uri.joinPath(e,"media"),r.Uri.joinPath(e,"src","ui","webview")]});return d.currentPanel=new d(s,e,t),d.currentPanel}constructor(e,t,n){this._disposables=[],this._messages=[],this._currentAgent="orchestrator",this._currentMode="auto",this._panel=e,this._extensionUri=t,this._dispatcher=n,this._contextManager=c.ConversationContextManager.getInstance(),this._update(),this._panel.onDidDispose(()=>this.dispose(),null,this._disposables),this._panel.webview.onDidReceiveMessage(e=>this._handleWebviewMessage(e),null,this._disposables),this._panel.onDidChangeViewState(e=>{this._panel.visible&&this._restoreMessages()},null,this._disposables)}_update(){const e=this._panel.webview;this._panel.title="KI AutoAgent Chat",this._panel.iconPath=r.Uri.joinPath(this._extensionUri,"media","multi-agent-logo.svg"),this._panel.webview.html=this._getHtmlForWebview(e)}_getHtmlForWebview(e){const t=e.asWebviewUri(r.Uri.joinPath(this._extensionUri,"media","reset.css")),n=e.asWebviewUri(r.Uri.joinPath(this._extensionUri,"media","vscode.css")),s=Date.now(),a=e.asWebviewUri(r.Uri.joinPath(this._extensionUri,"src","ui","webview","chat-fixed.css"))+`?v=${s}`,o=e.asWebviewUri(r.Uri.joinPath(this._extensionUri,"src","ui","webview","chat.js")),i=function(){let e="";const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";for(let n=0;n<32;n++)e+=t.charAt(Math.floor(62*Math.random()));return e}();return`<!DOCTYPE html>\n            <html lang="en">\n            <head>\n                <meta charset="UTF-8">\n                <meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src ${e.cspSource} 'unsafe-inline'; script-src 'nonce-${i}';">\n                <meta name="viewport" content="width=device-width, initial-scale=1.0">\n                <link href="${t}" rel="stylesheet">\n                <link href="${n}" rel="stylesheet">\n                <link href="${a}" rel="stylesheet">\n                <title>KI AutoAgent Chat</title>\n            </head>\n            <body>\n                <div id="chat-container">\n                    \x3c!-- Minimalist Header --\x3e\n                    <div id="chat-header">\n                        <h3>KI AutoAgent Chat</h3>\n                        <button id="settings-btn" title="Settings">⚙️</button>\n                    </div>\n                    \n                    \x3c!-- Messages Container --\x3e\n                    <div id="messages-container">\n                        <div class="welcome-message">\n                            <h2>Welcome to KI AutoAgent</h2>\n                            <p>Start a conversation with our AI agents</p>\n                        </div>\n                    </div>\n                    \n                    \x3c!-- Input Section with Bottom Controls --\x3e\n                    <div id="input-section">\n                        \x3c!-- Action buttons above input --\x3e\n                        <div id="action-buttons">\n                            <button id="plan-first-btn" class="action-btn" title="Plan before implementing">\n                                📋 Plan First\n                            </button>\n                            <button id="thinking-mode-btn" class="action-btn toggle" title="Enable thinking mode">\n                                💭 Thinking\n                            </button>\n                            <button id="stop-btn" class="action-btn danger" title="Stop current operation">\n                                ⏹ Stop\n                            </button>\n                        </div>\n                        \n                        <textarea id="message-input" \n                                  placeholder="Message KI AutoAgent..."\n                                  rows="3"></textarea>\n                        \n                        <div id="bottom-controls">\n                            <div id="mode-selector">\n                                <button class="mode-option active" data-agent="auto" title="Automatic agent selection">\n                                    🤖 Auto\n                                </button>\n                                <button class="mode-option" data-agent="architect" title="System architecture & design">\n                                    🏗️ Architect\n                                </button>\n                                <button class="mode-option" data-agent="codesmith" title="Code implementation">\n                                    💻 CodeSmith\n                                </button>\n                                <button class="mode-option" data-agent="tradestrat" title="Trading strategies">\n                                    📈 TradeStrat\n                                </button>\n                                <button class="mode-option" data-agent="research" title="Web research">\n                                    🔍 Research\n                                </button>\n                                <button class="mode-option" data-agent="opus" title="Conflict resolution">\n                                    ⚖️ Opus\n                                </button>\n                            </div>\n                            \n                            <button id="send-btn" title="Send message">\n                                Send\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <script nonce="${i}" src="${o}"><\/script>\n            </body>\n            </html>`}async _handleWebviewMessage(e){switch(e.command){case"sendMessage":await this._processUserMessage(e.text,e.agent,e.mode);break;case"changeAgent":this._currentAgent=e.agent,r.window.showInformationMessage(`Switched to ${e.agent}`);break;case"changeMode":this._currentMode=e.mode,r.window.showInformationMessage(`Mode changed to ${e.mode}`);break;case"clearChat":this._messages=[];break;case"quickAction":await this._handleQuickAction(e.action);break;case"planFirst":await this._handlePlanFirst(e.text,e.agent,e.mode)}}async _processUserMessage(e,t,n){console.log("\n💬 [CHAT] ============== NEW MESSAGE =============="),console.log(`💬 [CHAT] User text: "${e}"`),console.log(`💬 [CHAT] Selected agent: "${t}"`),console.log(`💬 [CHAT] Selected mode: "${n}"`),console.log(`💬 [CHAT] Current agent field: "${this._currentAgent}"`),console.log(`💬 [CHAT] Current mode field: "${this._currentMode}"`);const s={role:"user",content:e,timestamp:(new Date).toISOString()};if(this._messages.push(s),this._contextManager.addEntry({timestamp:(new Date).toISOString(),agent:"user",step:"input",input:e,output:"",metadata:{mode:n,selectedAgent:t}}),this._panel.webview.postMessage({type:"addMessage",message:s}),this._panel.webview.postMessage({type:"showTyping",agent:t}),console.log("🔧 [CHAT] Dispatcher check: "+(this._dispatcher?"AVAILABLE":"NOT AVAILABLE")),this._dispatcher){console.log("🔧 [CHAT] Dispatcher type: "+typeof this._dispatcher),console.log("🔧 [CHAT] Dispatcher has processRequest: "+typeof this._dispatcher.processRequest),console.log("🔧 [CHAT] Dispatcher has getAgentStats: "+typeof this._dispatcher.getAgentStats);try{const e=await this._dispatcher.getAgentStats();console.log(`🔧 [CHAT] Agent stats keys: [${Object.keys(e).join(", ")}]`),console.log(`🔧 [CHAT] Agent stats count: ${Object.keys(e).length}`)}catch(e){console.error(`🔧 [CHAT] Error getting agent stats: ${e}`)}}else console.error("🔧 [CHAT] CRITICAL: No dispatcher available!");try{if(console.log("🎯 [CHAT MODE] Decision tree:"),console.log(`🎯 [CHAT MODE] - mode === 'auto': ${"auto"===n}`),console.log(`🎯 [CHAT MODE] - mode === 'single': ${"single"===n}`),console.log(`🎯 [CHAT MODE] - mode === 'workflow': ${"workflow"===n}`),console.log(`🎯 [CHAT MODE] - this._dispatcher exists: ${!!this._dispatcher}`),"auto"===n&&this._dispatcher){console.log("🎯 [CHAT MODE] ✅ Entering AUTO mode with orchestrator");const t=`streaming-${Date.now()}`;this._addStreamingMessage(t,"orchestrator"),this._updateStreamingMessage(t,"🎭 Analyzing your request...\n",!1);const n=await this._callAgentWithStreaming("orchestrator",e,t);this._finalizeStreamingMessage(t,n.content,n.metadata),this._contextManager.addEntry({timestamp:(new Date).toISOString(),agent:"orchestrator",step:"orchestration",input:e,output:n.content,metadata:n.metadata})}else if("single"===n){console.log(`🎯 [CHAT MODE] ✅ Entering SINGLE mode with agent: "${t}"`),console.log("🎯 [CHAT MODE] Agent value type: "+typeof t),console.log(`🎯 [CHAT MODE] Agent exact value: '${t}'`),console.log(`🎯 [CHAT MODE] Agent length: ${t?.length}`);const n=`streaming-${Date.now()}`;this._addStreamingMessage(n,t);const s=await this._callAgentWithStreaming(t,e,n);this._finalizeStreamingMessage(n,s.content,s.metadata)}else"workflow"===n?(console.log("🎯 [CHAT MODE] ✅ Entering WORKFLOW mode"),await this._processWorkflow(e)):(console.error("🎯 [CHAT MODE] ❌ No valid mode path! Defaulting to error message"),this._addErrorMessage(`Invalid mode configuration: mode="${n}", agent="${t}", dispatcher=${!!this._dispatcher}`))}catch(e){console.error("[DEBUG] Error in _processUserMessage:",e),this._addErrorMessage(`Error: ${e.message}`)}finally{this._panel.webview.postMessage({type:"hideTyping"})}}async _callAgent(e,t){if(console.log("\n🤖 [CALL AGENT] ===================================="),console.log(`🤖 [CALL AGENT] AgentId: "${e}"`),console.log(`🤖 [CALL AGENT] Prompt: "${t.substring(0,100)}..."`),console.log(`🤖 [CALL AGENT] Dispatcher available: ${!!this._dispatcher}`),!this._dispatcher){const e="Error: No dispatcher available. Please check agent configuration.";return console.error(`🤖 [CALL AGENT] ❌ ${e}`),{content:e,metadata:null}}console.log("🤖 [CALL AGENT] Dispatcher type: "+typeof this._dispatcher),console.log("🤖 [CALL AGENT] Dispatcher.processRequest: "+typeof this._dispatcher.processRequest);try{const n={prompt:t,command:e,context:await this._getWorkspaceContext()};console.log("[DEBUG] Created taskRequest:",JSON.stringify(n,null,2)),console.log("[DEBUG] Calling dispatcher.processRequest...");const s=await this._dispatcher.processRequest(n);return console.log("[DEBUG] Dispatcher returned:",JSON.stringify(s,null,2)),"success"===s.status||"partial_success"===s.status?{content:s.content,metadata:s.metadata}:{content:`Error: ${s.content}`,metadata:null}}catch(e){const t=`Agent Error: ${e.message}\nStack: ${e.stack}`;return console.error("[DEBUG]",t),{content:t,metadata:null}}}async _callAgentWithStreaming(e,t,n){if(console.log("\n🤖 [CALL AGENT WITH STREAMING] ===================================="),console.log(`🤖 [STREAMING] AgentId: "${e}"`),console.log("🤖 [STREAMING] AgentId type: "+typeof e),console.log(`🤖 [STREAMING] AgentId exact: '${e}'`),console.log(`🤖 [STREAMING] MessageId: "${n}"`),console.log(`🤖 [STREAMING] Creating task request with command: '${e}'`),!this._dispatcher){const e="Error: No dispatcher available. Please check agent configuration.";return console.error(`🤖 [STREAMING] ❌ ${e}`),{content:e,metadata:null}}try{let s="";const a=this._contextManager.getFormattedContext(10),o={prompt:t,command:e,context:await this._getWorkspaceContext(),globalContext:a,onPartialResponse:t=>{if(console.log(`🤖 [STREAMING] Partial content: ${t.length} chars`),t.includes("🔄 **Step")){const e=t.match(/🔄 \*\*Step (\d+)\/(\d+)\*\*: @(\w+) - (.+)/);if(e){const[,t,n,s,a]=e;this._addSystemMessage(`🔄 Step ${t}/${n}: @${s} - ${a}`)}}else{if(t.includes("✅ Completed:"))return;{const a=e;let o=t;const i=[...t.matchAll(/<<TOOL>>(.*?)<<TOOL_END>>/gs)];for(const e of i){const t=e[1];this._addToolNotification(t,a,n),o=o.replace(e[0],"")}if(o=o.replace(/<<TOOL_RESULT>>.*?<<TOOL_RESULT_END>>/gs,"").replace(/<<THINKING>>.*?<<THINKING_END>>/gs,"").replace(/🛠️ \*?Claude is using tools.*?\*?\n*/g,""),o.includes("SYSTEM_TOOL_MESSAGE:")){const e=o.split("SYSTEM_TOOL_MESSAGE:");e[1]&&(this._addToolNotification(e[1],a,n),o=e[0])}o.trim().length>0&&(s+=o,this._updateStreamingMessage(n,o))}}}},i=await this._dispatcher.processRequest(o),r=s||i.content;return r&&this._contextManager.addEntry({timestamp:(new Date).toISOString(),agent:e,step:"response",input:t,output:r,metadata:i.metadata}),"success"===i.status||"partial_success"===i.status?{content:r,metadata:i.metadata}:{content:`Error: ${i.content}`,metadata:null}}catch(e){const t=`Agent Error: ${e.message}`;return console.error("[STREAMING]",t),{content:t,metadata:null}}}_addStreamingMessage(e,t){const n={role:"assistant",content:"",agent:t,timestamp:(new Date).toISOString(),isCollapsible:!1,metadata:{messageId:e,isStreaming:!0}};this._messages.push(n),this._panel.webview.postMessage({type:"addStreamingMessage",message:n})}_updateStreamingMessage(e,t,n=!1){let s=t,a=!1,o=!1;for(;s.includes("<<THINKING>>")&&s.includes("<<THINKING_END>>");){const t=s.match(/<<THINKING>>(.*?)<<THINKING_END>>/s);if(!t)break;{const n=t[1];this._addSystemNotification("💭 "+n,e),s=s.replace(/<<THINKING>>.*?<<THINKING_END>>/s,""),a=!0}}for(;s.includes("<<TOOL>>")&&s.includes("<<TOOL_END>>");){const t=s.match(/<<TOOL>>(.*?)<<TOOL_END>>/s);if(!t)break;{const n=t[1];this._addSystemNotification(n,e),s=s.replace(/<<TOOL>>.*?<<TOOL_END>>/s,""),a=!0}}for(;s.includes("<<TOOL_RESULT>>")&&s.includes("<<TOOL_RESULT_END>>");){const e=s.match(/<<TOOL_RESULT>>(.*?)<<TOOL_RESULT_END>>/s);if(!e)break;{const[t,n]=e[1].split("||");this._updateToolResult(t,n),s=s.replace(/<<TOOL_RESULT>>.*?<<TOOL_RESULT_END>>/s,"")}}if(s.includes("<<TEXT_START>>")&&(s=s.replace(/<<TEXT_START>>/g,""),o=!0),s.trim()){let t=this._messages.find(t=>t.metadata?.messageId===e&&"assistant"===t.role);if(o&&!t){const t={role:"assistant",content:s,agent:"assistant",timestamp:(new Date).toISOString(),metadata:{messageId:`${e}-text`,isStreaming:!0}};this._messages.push(t),this._panel.webview.postMessage({type:"addStreamingMessage",message:t})}else t&&(t.content+=s,this._panel.webview.postMessage({type:"updateStreamingMessage",messageId:t.metadata?.messageId||e,partialContent:s}))}}_isSpecialMessage(e){return[/^🚀 \*\*Claude is initializing/,/^🔧 \*\*Using tool:/,/^⚠️ \*\*System Error:/,/^✨ \*\*Tool:/,/^📝 \*\*Result:/,/^✅ \*\*Task completed:/].some(t=>t.test(e))}_addSystemNotification(e,t){const n=`system-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,s={role:"system",content:e,timestamp:(new Date).toISOString(),metadata:{isSystemNotification:!0,parentMessageId:t,messageId:n}};return this._messages.push(s),setTimeout(()=>{this._panel.webview.postMessage({type:"addMessage",message:s})},10),n}_updateToolResult(e,t){for(let n=this._messages.length-1;n>=0;n--){const s=this._messages[n];if("system"===s.role&&s.content.includes(e)){s.content.includes("**Result:**")||(s.content+=`\n\n**Result:**\n${t}`,this._panel.webview.postMessage({type:"updateMessage",messageId:s.metadata?.messageId,content:s.content}));break}}}_finalizeStreamingMessage(e,t,n){const s=this._messages.find(t=>t.metadata?.messageId===e);s&&(n?.agent&&(s.agent=n.agent),s.content=t,s.metadata={...s.metadata,...n,isStreaming:!1},s.isCollapsible=t.length>500,this._panel.webview.postMessage({type:"finalizeStreamingMessage",messageId:e,fullContent:s.content,metadata:s.metadata,agent:s.agent}),n&&(n.usage||n.cost||n.duration)&&this._addCompletionMessage(n))}_addCompletionMessage(e){let t="✅ **Task completed successfully!**\n\n";if(e.duration&&(t+=`⏱️ **Execution Time:** ${e.duration}\n`),e.usage){const n=e.usage.inputTokens||0,s=e.usage.outputTokens||0;t+=`📊 **Tokens Used:** ${n+s} (Input: ${n}, Output: ${s})\n`}e.cost&&(t+=`💰 **Cost:** $${e.cost.toFixed(4)}\n`),(e.usage?.cacheCreationInputTokens||e.usage?.cacheReadInputTokens)&&(t+=`💾 **Cache:** ${e.usage.cacheCreationInputTokens||0} created, ${e.usage.cacheReadInputTokens||0} read\n`);const n={role:"system",content:t,timestamp:(new Date).toISOString(),metadata:{isCompletionMessage:!0,...e}};this._messages.push(n),this._panel.webview.postMessage({type:"addMessage",message:n})}_buildMetadataInfo(e){let t="";if(e?.usage){const n=e.usage.inputTokens||0,s=e.usage.outputTokens||0,a=e.usage.cacheCreationInputTokens||0,o=e.usage.cacheReadInputTokens||0;t+=`\n\n---\n📊 **Tokens**: ${n+s} total (Input: ${n}, Output: ${s})`,(a>0||o>0)&&(t+=`\n💾 **Cache**: ${a} created, ${o} read`)}return void 0!==e?.totalCostUsd&&(t+=`\n💰 **Cost**: $${e.totalCostUsd.toFixed(6)}`),void 0!==e?.durationMs&&(t+=`\n⏱️ **Duration**: ${e.durationMs}ms`,void 0!==e?.durationApiMs&&(t+=` (API: ${e.durationApiMs}ms)`)),e?.model&&(t+=`\n🤖 **Model**: ${e.model}`),e?.sessionId&&(t+=`\n🔗 **Session**: ${e.sessionId.substring(0,8)}...`),e?.stopReason&&(t+=`\n⚡ **Stop reason**: ${e.stopReason}`),t}async _getWorkspaceContext(){return{activeEditor:r.window.activeTextEditor,workspaceRoots:r.workspace.workspaceFolders,openDocuments:r.workspace.textDocuments,selectedText:r.window.activeTextEditor?.document.getText(r.window.activeTextEditor.selection),currentFile:r.window.activeTextEditor?.document.fileName}}async _processWorkflow(e){const t=[{agent:"orchestrator",action:"Analyzing request..."},{agent:"architect",action:"Designing solution architecture..."},{agent:"codesmith",action:"Implementing code..."},{agent:"reviewer",action:"Reviewing implementation..."}];for(const e of t){const t={role:"agent-to-agent",content:e.action,agent:e.agent,timestamp:(new Date).toISOString(),isCollapsible:!0};this._messages.push(t),this._panel.webview.postMessage({type:"addMessage",message:t}),await new Promise(e=>setTimeout(e,500))}this._addAgentResponse("Workflow completed successfully!","orchestrator")}_addAgentResponse(e,t,n){console.log("📝 [ADD RESPONSE] Adding agent response"),console.log(`📝 [ADD RESPONSE] Content length: ${e?.length||0}`),console.log(`📝 [ADD RESPONSE] Agent: ${t}`),console.log("📝 [ADD RESPONSE] Metadata:",n);let s="";if(n?.usage){const e=n.usage.inputTokens||0,t=n.usage.outputTokens||0,a=n.usage.cacheCreationInputTokens||0,o=n.usage.cacheReadInputTokens||0;s+=`\n\n---\n📊 **Tokens**: ${e+t} total (Input: ${e}, Output: ${t})`,(a>0||o>0)&&(s+=`\n💾 **Cache**: ${a} created, ${o} read`)}void 0!==n?.totalCostUsd&&(s+=`\n💰 **Cost**: $${n.totalCostUsd.toFixed(6)}`),void 0!==n?.durationMs&&(s+=`\n⏱️ **Duration**: ${n.durationMs}ms`,void 0!==n?.durationApiMs&&(s+=` (API: ${n.durationApiMs}ms)`)),n?.model&&(s+=`\n🤖 **Model**: ${n.model}`),n?.sessionId&&(s+=`\n🔗 **Session**: ${n.sessionId.substring(0,8)}...`),n?.stopReason&&(s+=`\n⚡ **Stop reason**: ${n.stopReason}`);const a={role:"assistant",content:e+s,agent:t,timestamp:(new Date).toISOString(),isCollapsible:e.length>500,metadata:n};this._messages.push(a),console.log("📝 [ADD RESPONSE] Final message to send:",a),console.log(`📝 [ADD RESPONSE] Total messages in history: ${this._messages.length}`);const o=this._panel.webview.postMessage({type:"addMessage",message:a});console.log("📝 [ADD RESPONSE] postMessage result:",o)}_addSystemMessage(e){const t={role:"system",content:e,timestamp:(new Date).toISOString()};this._messages.push(t),this._panel.webview.postMessage({type:"addMessage",message:t})}_addToolNotification(e,t,n){const s=`tool_${Date.now()}_${Math.random()}`,a=t.toLowerCase().replace("agent","").replace("gpt","").replace("claude",""),o=this._getAgentColor(a),i=this._getAgentEmoji(a),r={role:"system",content:e,agent:t,timestamp:(new Date).toISOString(),metadata:{isToolNotification:!0,relatedMessageId:n,toolMsgId:s,agentColor:o,agentEmoji:i,agentName:t}};return this._messages.push(r),this._panel.webview.postMessage({type:"addMessage",message:r}),s}_getAgentColor(e){return{orchestrator:"#8B5CF6",architect:"#10B981",codesmith:"#F97316",research:"#EAB308",tradestrat:"#14B8A6",opusarbitrator:"#DC2626",docubot:"#6366F1",reviewer:"#EC4899",fixer:"#8B5CF6"}[e.toLowerCase()]||"#3B82F6"}_getAgentEmoji(e){return{orchestrator:"🎯",architect:"🏗️",codesmith:"🛠️",research:"🔍",tradestrat:"📈",opusarbitrator:"⚖️",docubot:"📚",reviewer:"🔎",fixer:"🔧"}[e.toLowerCase()]||"🤖"}_addErrorMessage(e){const t={role:"system",content:e,timestamp:(new Date).toISOString()};this._messages.push(t),this._panel.webview.postMessage({type:"addMessage",message:t})}_restoreMessages(){this._messages.length>0&&this._panel.webview.postMessage({type:"restoreMessages",messages:this._messages})}async _handleQuickAction(e){switch(e){case"help":this._addAgentResponse("## KI AutoAgent Help\n\n**Modes:**\n- **Auto**: Automatically routes to the best agent\n- **Single**: Direct chat with selected agent\n- **Workflow**: Multi-agent collaboration\n\n**Commands:**\n- Type your question and press Enter\n- Use Shift+Enter for multiline input\n- Select agents from dropdown\n","system");break;case"examples":this._addAgentResponse('## Example Prompts\n\n**Architecture:**\n"Design a microservices architecture for an e-commerce platform"\n\n**Coding:**\n"Implement a REST API with FastAPI and PostgreSQL"\n\n**Trading:**\n"Create a momentum trading strategy with risk management"\n\n**Research:**\n"Find the latest best practices for React performance optimization"\n',"system");break;case"agents":this._addAgentResponse("## Available Agents\n\n🤖 **Orchestrator**: Automatic task routing\n🏗️ **ArchitectGPT**: System design and architecture\n💻 **CodeSmithClaude**: Code implementation\n📈 **TradeStrat**: Trading strategies\n🔍 **ResearchBot**: Web research\n⚖️ **OpusRichter**: Quality judgment\n📝 **DocuBot**: Documentation\n👁️ **ReviewerGPT**: Code review\n🔧 **FixerBot**: Bug fixing\n","system")}}async _handlePlanFirst(e,t,n){const s=`PLAN FIRST: ${e}\n\nPlease provide a detailed plan before implementing. Break down the task into clear steps.`,a={role:"user",content:s,timestamp:(new Date).toISOString()};this._messages.push(a),this._panel.webview.postMessage({type:"addMessage",message:a}),this._contextManager.addEntry({timestamp:(new Date).toISOString(),agent:"user",step:"plan_request",input:s,output:"",metadata:{mode:n,selectedAgent:t,isPlanFirst:!0}}),this._panel.webview.postMessage({type:"showTyping",agent:t});try{const e=`streaming-${Date.now()}`;this._addStreamingMessage(e,t);const n=await this._callAgentWithStreaming("auto"===t?"codesmith":t,s,e);this._finalizeStreamingMessage(e,n.content,n.metadata)}catch(e){console.error("[PLAN FIRST] Error:",e),this._addErrorMessage(`Error: ${e.message}`)}finally{this._panel.webview.postMessage({type:"hideTyping"})}}addMessage(e){this._messages.push(e),this._panel.webview.postMessage({type:"addMessage",message:e})}dispose(){for(d.currentPanel=void 0,this._panel.dispose();this._disposables.length;){const e=this._disposables.pop();e&&e.dispose()}}}t.MultiAgentChatPanel=d},806:function(e,t,n){var s,a=this&&this.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,a)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},s(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=s(e),i=0;i<n.length;i++)"default"!==n[i]&&a(t,e,n[i]);return o(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.ChatAgent=void 0;const r=i(n(398)),c=n(338),d=n(136);class l extends c.UnifiedChatMixin{constructor(e,t,n){super(),this.config=e,this.stats={totalExecutions:0,successCount:0,totalResponseTime:0,lastExecution:void 0},this.context=t,this.dispatcher=n,this.name=e.fullName||e.name,this.role=e.description,this.model=e.model}createHandler(){return async(e,t,n,s)=>{const a=Date.now();this.stats.totalExecutions++,this.stats.lastExecution=new Date;try{n.progress(`🤖 ${this.config.fullName} is working...`),await this.handleRequest(e,t,n,s),this.stats.successCount++,this.stats.totalResponseTime+=Date.now()-a}catch(e){await this.handleError(e,n),this.stats.totalResponseTime+=Date.now()-a}}}async executeStep(e,t,n){try{return await this.processWorkflowStep(e,t,n)}catch(t){return{status:"error",content:`Error executing ${e.description}: ${t.message}`,metadata:{error:t.message,step:e.id}}}}async handleCommand(e,t,n,s){const a=this.config.commands.find(t=>t.name===e);if(a){const o=a.handler;"function"==typeof this[o]?await this[o](t,n,s):n.markdown(`❌ Command handler '${o}' not implemented for ${e}`)}else n.markdown(`❌ Unknown command: /${e}`),await this.showAvailableCommands(n)}async showAvailableCommands(e){e.markdown(`## Available Commands for ${this.config.fullName}\n\n`);for(const t of this.config.commands)e.markdown(`- **/${t.name}** - ${t.description}\n`);e.markdown(`\n💡 Use \`@${this.config.name} /<command> <your request>\``)}async getWorkspaceContext(){const e=await this.dispatcher.getWorkspaceContext();let t="";return e.currentFile&&(t+=`Current file: ${e.currentFile}\n`),e.selectedText&&(t+=`Selected text:\n\`\`\`\n${e.selectedText}\n\`\`\`\n`),e.workspaceRoots&&e.workspaceRoots.length>0&&(t+=`Workspace: ${e.workspaceRoots[0].name}\n`),t+=`\n\n${this.getTaskDelegationContext()}`,t}getTaskDelegationContext(){const e=d.AgentRegistry.getInstance(),t=this.config.name.toLowerCase().replace("agent","");return e.getTaskDelegationInfo(t)}async checkForTaskDelegation(e){const t=d.AgentRegistry.getInstance(),n=this.config.name.toLowerCase().replace("agent",""),s=t.suggestAgentForTask(e);if(s&&s!==n){const e=t.getAgentInfo(s);if(e)return`💡 This task might be better suited for **@${s}** who specializes in ${e.specialization}.\n\nWould you like me to:\n1. Continue with my analysis\n2. Suggest forwarding to @${s}\n\nOr you can directly ask @${s} for help.`}return null}getSystemContextPrompt(){return`\n## Available Agents in KI_AutoAgent System:\n${d.AgentRegistry.getInstance().getAgentListDescription()}\n\nYou are ${this.config.fullName} with role: ${this.config.description}\n${this.getTaskDelegationContext()}\n`}renderCode(e,t,n,s){s&&n.markdown(`### ${s}\n\n`),n.markdown(`\`\`\`${t}\n${e}\n\`\`\`\n\n`)}createActionButton(e,t,n,s){s.button({command:t,title:e,arguments:n})}addFileReference(e,t){try{const n=r.Uri.file(e);t.reference(n)}catch(e){console.log(this.showError("Error adding file reference",e))}}async handleError(e,t){console.log(this.showError(`Error in ${this.config.fullName}`,e)),t.markdown(`❌ **Error**: ${e.message}\n\n`),t.markdown("💡 **Suggestions:**\n"),t.markdown("- Check your API keys in settings\n"),t.markdown("- Verify your internet connection\n"),t.markdown("- Try rephrasing your request\n"),this.createActionButton("Show Help","ki-autoagent.showHelp",[this.config.participantId],t)}getStats(){return{...this.stats,successRate:this.stats.totalExecutions>0?this.stats.successCount/this.stats.totalExecutions:0,averageResponseTime:this.stats.totalExecutions>0?this.stats.totalResponseTime/this.stats.totalExecutions:0}}getModelConfig(){const e=r.workspace.getConfiguration("kiAutoAgent");let t,n=this.config.model;switch(n){case"gpt-4o":case"gpt-4o-mini":t=e.get("openai.apiKey");break;case"claude-3.5-sonnet":t=e.get("anthropic.apiKey");break;case"perplexity-pro":t=e.get("perplexity.apiKey")}return{model:n,apiKey:t}}validateApiConfig(){const{apiKey:e}=this.getModelConfig();return!!e}getMaxTokens(){return r.workspace.getConfiguration("kiAutoAgent").get("maxTokens",4e3)}isLoggingEnabled(){return r.workspace.getConfiguration("kiAutoAgent").get("enableLogging",!0)}log(e,t="info"){if(this.isLoggingEnabled()){const n=(new Date).toISOString();console[t](`[${n}] ${this.config.fullName}: ${e}`)}}}t.ChatAgent=l},869:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ConversationContextManager=void 0;class n{constructor(){this.conversationHistory=[],this.maxHistorySize=50}static getInstance(){return n.instance||(n.instance=new n),n.instance}addEntry(e){this.conversationHistory.push(e),this.conversationHistory.length>this.maxHistorySize&&(this.conversationHistory=this.conversationHistory.slice(-this.maxHistorySize)),console.log(`[CONTEXT-MANAGER] Added entry from ${e.agent} (${e.step})`),console.log(`[CONTEXT-MANAGER] Total history size: ${this.conversationHistory.length} entries`)}getRecentHistory(e=5){return this.conversationHistory.slice(-e)}getAgentHistory(e,t=5){return this.conversationHistory.filter(t=>t.agent===e).slice(-t)}getFormattedContext(e=5){const t=this.getRecentHistory(e);if(0===t.length)return"";let n="\n## Conversation History:\n";return t.forEach(e=>{n+=`\n### ${e.agent} (${e.step}) - ${e.timestamp}:\n`,n+=`**Input:** ${e.input.substring(0,200)}...\n`,n+=`**Output:** ${e.output.substring(0,500)}...\n`}),n}getLastOutput(){return 0===this.conversationHistory.length?null:this.conversationHistory[this.conversationHistory.length-1].output}clearHistory(){this.conversationHistory=[],console.log("[CONTEXT-MANAGER] Conversation history cleared")}exportHistory(){return JSON.stringify(this.conversationHistory,null,2)}importHistory(e){try{const t=JSON.parse(e);Array.isArray(t)&&(this.conversationHistory=t,console.log(`[CONTEXT-MANAGER] Imported ${t.length} conversation entries`))}catch(e){console.error(`[CONTEXT-MANAGER] Failed to import history: ${e}`)}}}t.ConversationContextManager=n},928:e=>{e.exports=require("path")},930:function(e,t,n){var s,a=this&&this.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,a)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},s(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=s(e),i=0;i<n.length;i++)"default"!==n[i]&&a(t,e,n[i]);return o(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.TradeStratAgent=void 0;const r=i(n(398)),c=n(806),d=n(167),l=n(567);class u extends c.ChatAgent{constructor(e,t){super({participantId:"ki-autoagent.tradestrat",name:"tradestrat",fullName:"TradeStrat",description:"Trading Strategy Expert powered by Claude 4.1 Sonnet",model:"claude-4.1-sonnet-20250920",iconPath:r.Uri.joinPath(e.extensionUri,"media","trading-icon.svg"),capabilities:["Trading Strategy Development","RON Strategy Implementation","Backtesting Frameworks","Risk Management","Portfolio Optimization","Market Analysis"],commands:[{name:"strategy",description:"Develop and implement trading strategies",handler:"handleStrategyCommand"},{name:"backtest",description:"Create backtesting and validation systems",handler:"handleBacktestCommand"},{name:"risk",description:"Implement risk management and portfolio optimization",handler:"handleRiskCommand"}]},e,t),this.anthropicService=new d.AnthropicService,this.claudeCodeService=(0,l.getClaudeCodeService)()}async handleRequest(e,t,n,s){if(!await this.validateServiceConfig(n))return;const a=e.command,o=e.prompt;this.log(`Processing ${a?`/${a}`:"general"} trading request: ${o.substring(0,100)}...`),a?await this.handleCommand(a,o,n,s):await this.handleGeneralTradingRequest(o,n,s)}async processWorkflowStep(e,t,n){const s=await this.getWorkspaceContext();let a="",o="";switch(e.id){case"strategy_design":a=this.getStrategyDesignSystemPrompt(),o=`Design a trading strategy for: ${t.prompt}\n\nWorkspace Context:\n${s}`;break;case"backtest":a=this.getBacktestSystemPrompt(),o=`Create backtesting framework for: ${t.prompt}\n\nStrategy Design:\n${this.extractPreviousContent(n)}`;break;case"risk_analysis":a=this.getRiskAnalysisSystemPrompt(),o=`Analyze risk management for: ${t.prompt}\n\nContext:\n${s}`;break;case"strategy_validation":a=this.getValidationSystemPrompt(),o=`Validate trading strategy: ${t.prompt}\n\nImplementation:\n${this.extractPreviousContent(n)}`;break;default:a=this.getGeneralSystemPrompt(),o=`${t.prompt}\n\nContext:\n${s}`}try{const t=await this.getClaudeService();return{status:"success",content:await t.chat([{role:"system",content:a},{role:"user",content:o}]),metadata:{step:e.id,agent:"tradestrat",model:"claude-3.5-sonnet"}}}catch(t){throw new Error(`Failed to process ${e.id}: ${t.message}`)}}async handleStrategyCommand(e,t,n){t.progress("📈 Developing trading strategy...");const s=await this.getWorkspaceContext(),a=this.getStrategyDesignSystemPrompt(),o=`Develop a comprehensive trading strategy for: ${e}\n\nWorkspace Context:\n${s}`;try{const n=await this.getClaudeService(),s=await n.chat([{role:"system",content:a},{role:"user",content:o}]);t.markdown(s);const i=this.extractPythonCode(s);i&&this.createActionButton("⚡ Implement Strategy","ki-autoagent.createFile",["strategy.py",i],t),this.createActionButton("🧪 Create Backtest","ki-autoagent.createBacktest",[e,s],t),this.createActionButton("⚠️ Analyze Risks","ki-autoagent.analyzeRisks",[e,s],t)}catch(e){t.markdown(`❌ Error developing strategy: ${e.message}`)}}async handleBacktestCommand(e,t,n){t.progress("🧪 Creating backtesting framework...");const s=await this.getWorkspaceContext(),a=this.getBacktestSystemPrompt(),o=`Create a comprehensive backtesting framework for: ${e}\n\nWorkspace Context:\n${s}`;try{const n=await this.getClaudeService(),s=await n.chat([{role:"system",content:a},{role:"user",content:o}]);t.markdown(s);const i=this.extractPythonCode(s);i&&this.createActionButton("📊 Create Backtest Framework","ki-autoagent.createFile",["backtest_engine.py",i],t),this.createActionButton("📈 Generate Test Data","ki-autoagent.generateTestData",[e],t)}catch(e){t.markdown(`❌ Error creating backtesting framework: ${e.message}`)}}async handleRiskCommand(e,t,n){t.progress("⚠️ Implementing risk management...");const s=await this.getWorkspaceContext(),a=this.getRiskManagementSystemPrompt(),o=`Implement comprehensive risk management for: ${e}\n\nWorkspace Context:\n${s}`;try{const n=await this.getClaudeService(),s=await n.chat([{role:"system",content:a},{role:"user",content:o}]);t.markdown(s);const i=this.extractPythonCode(s);i&&this.createActionButton("🛡️ Implement Risk Management","ki-autoagent.createFile",["risk_manager.py",i],t),this.createActionButton("📊 Optimize Portfolio","ki-autoagent.optimizePortfolio",[e,s],t)}catch(e){t.markdown(`❌ Error implementing risk management: ${e.message}`)}}async handleGeneralTradingRequest(e,t,n){t.progress("💹 Processing trading request...");const s=await this.getWorkspaceContext(),a=this.getGeneralSystemPrompt(),o=`${e}\n\nWorkspace Context:\n${s}`;try{const n=await this.getClaudeService(),s=await n.chat([{role:"system",content:a},{role:"user",content:o}]);t.markdown(s),(e.toLowerCase().includes("ron")||s.toLowerCase().includes("ron strategy"))&&this.createActionButton("🎯 Implement RON Strategy","ki-autoagent.implementRON",[s],t);const i=this.extractPythonCode(s);i&&this.createActionButton("⚡ Implement Code","ki-autoagent.createFile",["trading_implementation.py",i],t)}catch(e){t.markdown(`❌ Error processing trading request: ${e.message}`)}}getGeneralSystemPrompt(){return`You are TradeStrat, an expert trading strategy developer and quantitative analyst. You specialize in:\n\n- Trading strategy design and implementation\n- Algorithmic trading systems\n- Risk management and portfolio optimization\n- Backtesting and performance analysis\n- Market microstructure and execution\n- RON (Reversal of Numbers) strategy implementation\n- Python-based trading systems (pandas, numpy, streamlit, yfinance)\n\nKey principles:\n1. Always prioritize risk management\n2. Implement robust backtesting before live trading\n3. Focus on statistical significance and edge detection\n4. Consider market conditions and regime changes\n5. Provide clear performance metrics and validation\n\nFormat your responses with detailed explanations, working code, and practical implementation guidance.\n\n${this.getSystemContextPrompt()}`}getStrategyDesignSystemPrompt(){return`You are TradeStrat designing a comprehensive trading strategy. Structure your response as:\n\n## Trading Strategy Design\n\n### 1. Strategy Overview\n- Strategy name and concept\n- Market conditions and timeframes\n- Expected holding periods\n- Target assets/markets\n\n### 2. Entry Rules\n- Precise entry conditions\n- Technical indicators required\n- Fundamental filters (if any)\n- Signal confirmation methods\n\n### 3. Exit Rules\n- Profit-taking strategies\n- Stop-loss implementation\n- Time-based exits\n- Market condition exits\n\n### 4. Risk Management\n- Position sizing methodology\n- Maximum drawdown limits\n- Correlation and diversification\n- Portfolio-level risk controls\n\n### 5. Implementation Details\n- Required data sources\n- Calculation methodology\n- Code structure and modules\n- Performance monitoring\n\n### 6. Backtesting Framework\n- Historical data requirements\n- Performance metrics to track\n- Stress testing scenarios\n- Out-of-sample validation\n\nProvide complete Python implementation with pandas/numpy for data handling.\n\n${this.getSystemContextPrompt()}`}getBacktestSystemPrompt(){return`You are TradeStrat creating a robust backtesting framework. Include:\n\n## Backtesting Framework Design\n\n### 1. Data Management\n- Historical data ingestion\n- Data cleaning and validation\n- Corporate actions handling\n- Survivorship bias considerations\n\n### 2. Signal Generation\n- Strategy logic implementation\n- Signal timing and execution\n- Lookahead bias prevention\n- Realistic latency modeling\n\n### 3. Execution Simulation\n- Order execution modeling\n- Slippage and transaction costs\n- Market impact considerations\n- Partial fill handling\n\n### 4. Performance Metrics\n- Return calculations\n- Risk-adjusted metrics (Sharpe, Sortino)\n- Drawdown analysis\n- Trade-level statistics\n\n### 5. Visualization and Reporting\n- Equity curve plotting\n- Trade analysis charts\n- Performance attribution\n- Stress test results\n\n### 6. Validation Techniques\n- Out-of-sample testing\n- Walk-forward analysis\n- Monte Carlo simulation\n- Bootstrap analysis\n\nProvide production-ready Python code with proper error handling and logging.\n\n${this.getSystemContextPrompt()}`}getRiskManagementSystemPrompt(){return`You are TradeStrat implementing comprehensive risk management. Cover:\n\n## Risk Management Framework\n\n### 1. Position Sizing\n- Kelly criterion implementation\n- Volatility-based sizing\n- Maximum position limits\n- Correlation adjustments\n\n### 2. Portfolio Risk Controls\n- Value-at-Risk (VaR) calculation\n- Expected Shortfall (ES)\n- Maximum drawdown limits\n- Sector/asset concentration limits\n\n### 3. Dynamic Risk Adjustment\n- Volatility regime detection\n- Risk scaling mechanisms\n- Market stress indicators\n- Emergency stop procedures\n\n### 4. Monitoring and Alerts\n- Real-time risk metrics\n- Breach notifications\n- Performance tracking\n- Risk attribution analysis\n\n### 5. Stress Testing\n- Historical scenario analysis\n- Monte Carlo stress tests\n- Tail risk evaluation\n- Correlation breakdown scenarios\n\n### 6. Implementation Tools\n- Risk calculation engines\n- Alert systems\n- Reporting dashboards\n- Integration with trading systems\n\nFocus on practical, implementable solutions with clear mathematical foundations.\n\n${this.getSystemContextPrompt()}`}getValidationSystemPrompt(){return`You are TradeStrat validating trading strategies for production readiness. Analyze:\n\n## Strategy Validation Checklist\n\n### 1. Statistical Validation\n- Statistical significance of returns\n- Consistency across time periods\n- Performance in different market regimes\n- Correlation with market factors\n\n### 2. Implementation Validation\n- Code correctness and efficiency\n- Data quality and completeness\n- Signal generation accuracy\n- Execution logic verification\n\n### 3. Risk Validation\n- Maximum drawdown analysis\n- Tail risk assessment\n- Stress test results\n- Portfolio-level impact\n\n### 4. Operational Validation\n- System reliability and uptime\n- Error handling and recovery\n- Monitoring and alerting\n- Compliance requirements\n\n### 5. Performance Validation\n- Live vs backtest performance\n- Transaction cost impact\n- Capacity constraints\n- Scalability considerations\n\nProvide detailed assessment with specific recommendations for improvement.\n\n${this.getSystemContextPrompt()}`}getRiskAnalysisSystemPrompt(){return this.getRiskManagementSystemPrompt()}async validateServiceConfig(e){const t=r.workspace.getConfiguration("kiAutoAgent"),n=t.get("claude.serviceMode","claude-code");if("api"===n){if(!t.get("anthropic.apiKey"))return e&&e.markdown('❌ **Anthropic API key not configured**\n\nPlease set your API key in VS Code settings:\n- Go to Settings\n- Search for "KI AutoAgent"\n- Set your Anthropic API key'),!1}else if("claude-code"===n&&!await this.claudeCodeService.isAvailable())return e&&e.markdown("❌ **Claude Code CLI not available**\n\n**To install:**\n```bash\nnpm install -g @anthropic-ai/claude-code\n```\n\nOr configure your Anthropic API key in VS Code settings."),!1;return!0}async getClaudeService(){const e=r.workspace.getConfiguration("kiAutoAgent").get("claude.serviceMode","claude-code");if(console.log(`[TradeStratAgent] Using service mode: ${e}`),"claude-code"===e){if(await this.claudeCodeService.isAvailable())return console.log("[TradeStratAgent] Using Claude Code CLI"),{chat:async e=>{const t=e.find(e=>"user"===e.role)?.content||"",n=e.find(e=>"system"===e.role)?.content||"",s=n?`${n}\n\n${t}`:t;return(await this.claudeCodeService.sendMessage(s,{model:"sonnet",temperature:.7})).content}};console.log("[TradeStratAgent] Claude Code CLI not available, falling back to Anthropic API")}return console.log("[TradeStratAgent] Using Anthropic API"),{chat:async e=>await this.anthropicService.chat(e)}}extractPythonCode(e){const t=/```python\n([\s\S]*?)```/g.exec(e);return t?t[1]:""}extractPreviousContent(e){return e.map(e=>e.content).join("\n\n---\n\n").substring(0,2e3)}}t.TradeStratAgent=u},943:e=>{e.exports=require("fs/promises")}},t={},n=function n(s){var a=t[s];if(void 0!==a)return a.exports;var o=t[s]={exports:{}};return e[s].call(o.exports,o,o.exports,n),o.exports}(265);module.exports=n})();