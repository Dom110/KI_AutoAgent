(()=>{"use strict";var e={63:function(e,t,n){var a,r=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&r(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.ArchitectAgent=void 0;const o=s(n(398)),c=n(806),l=n(551);class d extends c.ChatAgent{constructor(e,t){super({participantId:"ki-autoagent.architect",name:"architect",fullName:"ArchitectGPT",description:"System Architecture & Design Expert powered by GPT-4o",model:"gpt-4o",iconPath:o.Uri.joinPath(e.extensionUri,"media","openai-icon.svg"),capabilities:["System Design","Architecture Patterns","Tech Stack Planning","Scalability Analysis","Design Documentation"],commands:[{name:"design",description:"Create system architecture and design patterns",handler:"handleDesignCommand"},{name:"analyze",description:"Analyze existing codebase architecture",handler:"handleAnalyzeCommand"},{name:"plan",description:"Create development and deployment plans",handler:"handlePlanCommand"}]},e,t),this.openAIService=new l.OpenAIService}async handleRequest(e,t,n,a){if(!this.validateApiConfig())return void n.markdown("❌ OpenAI API key not configured. Please set it in VS Code settings.");const r=e.command,i=e.prompt;this.log(`Processing ${r?`/${r}`:"general"} request: ${i.substring(0,100)}...`),r?await this.handleCommand(r,i,n,a):await this.handleGeneralArchitectureRequest(i,n,a)}async processWorkflowStep(e,t,n){const a=await this.getWorkspaceContext();let r="",i="";switch(e.id){case"analyze":r=this.getAnalyzeSystemPrompt(),i=`Analyze the architecture requirements for: ${t.prompt}\n\nWorkspace Context:\n${a}`;break;case"design":r=this.getDesignSystemPrompt(),i=`Create a system architecture design for: ${t.prompt}\n\nPrevious Analysis:\n${this.extractPreviousContent(n)}`;break;default:r=this.getGeneralSystemPrompt(),i=`${t.prompt}\n\nContext:\n${a}`}try{return{status:"success",content:await this.openAIService.chat([{role:"system",content:r},{role:"user",content:i}]),metadata:{step:e.id,agent:"architect",model:"gpt-4o"}}}catch(t){throw new Error(`Failed to process ${e.id}: ${t.message}`)}}async handleDesignCommand(e,t,n){t.progress("🏗️ Analyzing requirements and creating system design...");const a=await this.getWorkspaceContext(),r=this.getDesignSystemPrompt(),i=`Create a comprehensive system architecture design for: ${e}\n\nWorkspace Context:\n${a}`;try{const n=await this.openAIService.chat([{role:"system",content:r},{role:"user",content:i}]);t.markdown(n),this.createActionButton("📄 Create Architecture Document","ki-autoagent.createFile",["ARCHITECTURE.md",n],t),this.createActionButton("⚡ Plan Implementation","ki-autoagent.planImplementation",[e,n],t)}catch(e){t.markdown(`❌ Error creating design: ${e.message}`)}}async handleAnalyzeCommand(e,t,n){t.progress("🔍 Analyzing existing codebase architecture...");const a=await this.getWorkspaceContext(),r=await this.getProjectStructure(),i=this.getAnalyzeSystemPrompt(),s=`Analyze the architecture of this codebase: ${e}\n\nProject Structure:\n${r}\n\nWorkspace Context:\n${a}`;try{const e=await this.openAIService.chat([{role:"system",content:i},{role:"user",content:s}]);t.markdown(e),this.createActionButton("🚀 Suggest Improvements","ki-autoagent.suggestImprovements",[e],t)}catch(e){t.markdown(`❌ Error analyzing architecture: ${e.message}`)}}async handlePlanCommand(e,t,n){t.progress("📋 Creating development and deployment plans...");const a=await this.getWorkspaceContext(),r=this.getPlanSystemPrompt(),i=`Create a detailed development and deployment plan for: ${e}\n\nWorkspace Context:\n${a}`;try{const e=await this.openAIService.chat([{role:"system",content:r},{role:"user",content:i}]);t.markdown(e),this.createActionButton("🗺️ Create Roadmap","ki-autoagent.createFile",["ROADMAP.md",e],t)}catch(e){t.markdown(`❌ Error creating plan: ${e.message}`)}}async handleGeneralArchitectureRequest(e,t,n){t.progress("🤔 Processing architecture request...");const a=await this.getWorkspaceContext(),r=this.getGeneralSystemPrompt(),i=`${e}\n\nWorkspace Context:\n${a}`;try{const e=await this.openAIService.chat([{role:"system",content:r},{role:"user",content:i}]);t.markdown(e)}catch(e){t.markdown(`❌ Error processing request: ${e.message}`)}}getGeneralSystemPrompt(){return"You are ArchitectGPT, a senior system architect and design expert. You specialize in:\n\n- System architecture design and patterns\n- Technology stack selection and evaluation\n- Scalability and performance planning\n- Microservices and distributed systems\n- Database design and data modeling\n- API design and integration patterns\n- Security architecture\n- DevOps and deployment strategies\n\nAlways provide:\n1. Clear architectural reasoning\n2. Multiple solution options when applicable\n3. Trade-offs and considerations\n4. Implementation guidance\n5. Best practices and patterns\n\nFormat your responses with clear headings, diagrams where helpful (using mermaid syntax), and actionable recommendations."}getDesignSystemPrompt(){return"You are ArchitectGPT creating a comprehensive system architecture design. Follow this structure:\n\n## System Architecture Design\n\n### 1. Requirements Analysis\n- Functional requirements\n- Non-functional requirements (performance, scalability, security)\n- Constraints and assumptions\n\n### 2. High-Level Architecture\n- System overview\n- Major components and their responsibilities\n- Data flow and interactions\n\n### 3. Technology Stack\n- Recommended technologies with rationale\n- Alternatives considered\n- Integration points\n\n### 4. Database Design\n- Data model\n- Storage strategy\n- Performance considerations\n\n### 5. API Design\n- Interface specifications\n- Authentication/authorization\n- Rate limiting and caching\n\n### 6. Security Architecture\n- Security measures\n- Authentication/authorization\n- Data protection\n\n### 7. Deployment Architecture\n- Infrastructure requirements\n- Scaling strategy\n- Monitoring and observability\n\n### 8. Implementation Roadmap\n- Development phases\n- Dependencies and milestones\n- Risk mitigation\n\nUse mermaid diagrams where appropriate to illustrate the architecture."}getAnalyzeSystemPrompt(){return"You are ArchitectGPT analyzing an existing codebase architecture. Provide:\n\n## Architecture Analysis\n\n### 1. Current Architecture Overview\n- Identify architectural patterns used\n- Component structure and organization\n- Technology stack assessment\n\n### 2. Strengths\n- What's working well\n- Good design decisions\n- Proper patterns implementation\n\n### 3. Areas for Improvement\n- Architectural debt\n- Performance bottlenecks\n- Security concerns\n- Scalability limitations\n\n### 4. Recommendations\n- Prioritized improvement suggestions\n- Refactoring opportunities\n- Technology upgrades\n\n### 5. Next Steps\n- Immediate actions\n- Long-term architectural goals\n- Migration strategies\n\nBe specific and provide actionable insights based on the codebase structure."}getPlanSystemPrompt(){return"You are ArchitectGPT creating development and deployment plans. Structure your response as:\n\n## Development & Deployment Plan\n\n### 1. Project Setup\n- Repository structure\n- Development environment\n- Tool and dependency setup\n\n### 2. Development Phases\n- Phase breakdown with deliverables\n- Timeline estimates\n- Resource requirements\n\n### 3. Implementation Strategy\n- Development methodology\n- Code review process\n- Testing strategy\n\n### 4. Deployment Strategy\n- Environment setup (dev, staging, prod)\n- CI/CD pipeline\n- Rollback procedures\n\n### 5. Risk Management\n- Identified risks\n- Mitigation strategies\n- Contingency plans\n\n### 6. Success Metrics\n- KPIs and measurements\n- Monitoring and alerting\n- Performance benchmarks\n\nProvide realistic timelines and clear milestones."}async getProjectStructure(){try{return(await o.workspace.findFiles("**/*.{py,js,ts,jsx,tsx,json,md}","**/node_modules/**",50)).map(e=>e.fsPath.split("/").slice(-3).join("/")).join("\n")}catch(e){return"Unable to read project structure"}}extractPreviousContent(e){return e.map(e=>e.content).join("\n\n---\n\n").substring(0,2e3)}}t.ArchitectAgent=d},122:function(e,t,n){var a,r=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&r(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.CodeSmithAgent=void 0;const o=s(n(398)),c=n(806),l=n(167),d=n(659);class u extends c.ChatAgent{constructor(e,t){super({participantId:"ki-autoagent.codesmith",name:"codesmith",fullName:"CodeSmithClaude",description:"Senior Python/Web Developer powered by Claude 3.5 Sonnet",model:"claude-3.5-sonnet",iconPath:o.Uri.joinPath(e.extensionUri,"media","claude-icon.svg"),capabilities:["Python Development","Web Development","API Implementation","Testing & TDD","Code Optimization","Framework Integration"],commands:[{name:"implement",description:"Implement code based on specifications",handler:"handleImplementCommand"},{name:"optimize",description:"Optimize existing code for performance",handler:"handleOptimizeCommand"},{name:"test",description:"Generate comprehensive test suites",handler:"handleTestCommand"}]},e,t),this.anthropicService=new l.AnthropicService,this.claudeWebService=new d.ClaudeWebService}async handleRequest(e,t,n,a){if(!await this.validateServiceConfig(n))return;const r=e.command,i=e.prompt;this.log(`Processing ${r?`/${r}`:"general"} request: ${i.substring(0,100)}...`),r?await this.handleCommand(r,i,n,a):await this.handleGeneralImplementationRequest(i,n,a)}async processWorkflowStep(e,t,n){const a=await this.getWorkspaceContext();let r="",i="";switch(e.id){case"implement":r=this.getImplementationSystemPrompt(),i=`Implement the following: ${t.prompt}\n\nWorkspace Context:\n${a}`;break;case"test":r=this.getTestingSystemPrompt(),i=`Create comprehensive tests for: ${t.prompt}\n\nPrevious Implementation:\n${this.extractPreviousContent(n)}`;break;case"optimize":r=this.getOptimizationSystemPrompt(),i=`Optimize this implementation: ${t.prompt}\n\nContext:\n${a}`;break;default:r=this.getGeneralSystemPrompt(),i=`${t.prompt}\n\nContext:\n${a}`}try{const t=await this.getClaudeService();return{status:"success",content:await t.chat([{role:"system",content:r},{role:"user",content:i}]),metadata:{step:e.id,agent:"codesmith",model:"claude-3.5-sonnet"}}}catch(t){throw new Error(`Failed to process ${e.id}: ${t.message}`)}}async handleImplementCommand(e,t,n){t.progress("⚡ Implementing your requirements...");const a=await this.getWorkspaceContext(),r=this.getImplementationSystemPrompt(),i=`Implement the following requirements: ${e}\n\nWorkspace Context:\n${a}`;try{const n=await this.getClaudeService(),a=await n.chat([{role:"system",content:r},{role:"user",content:i}]);t.markdown(a);const s=this.extractCodeBlocks(a);for(const e of s)e.filename&&this.createActionButton(`📄 Create ${e.filename}`,"ki-autoagent.createFile",[e.filename,e.code],t);this.createActionButton("🧪 Generate Tests","ki-autoagent.generateTests",[e,a],t)}catch(e){t.markdown(`❌ Error during implementation: ${e.message}`)}}async handleOptimizeCommand(e,t,n){t.progress("🚀 Optimizing code for performance...");const a=await this.getWorkspaceContext(),r=this.getOptimizationSystemPrompt();let i="";if(a.includes("Selected text:"))i=a;else if(o.window.activeTextEditor){const e=o.window.activeTextEditor.document;i=`Current file: ${e.fileName}\n\`\`\`${e.languageId}\n${e.getText()}\n\`\`\``}const s=`Optimize the following code: ${e}\n\nCode to optimize:\n${i}`;try{const e=await this.getClaudeService(),n=await e.chat([{role:"system",content:r},{role:"user",content:s}]);t.markdown(n);const a=this.extractMainCodeBlock(n);a&&this.createActionButton("✨ Apply Optimization","ki-autoagent.insertAtCursor",[a],t)}catch(e){t.markdown(`❌ Error during optimization: ${e.message}`)}}async handleTestCommand(e,t,n){t.progress("🧪 Generating comprehensive test suite...");const a=await this.getWorkspaceContext(),r=this.getTestingSystemPrompt(),i=`Generate comprehensive tests for: ${e}\n\nWorkspace Context:\n${a}`;try{const e=await this.getClaudeService(),n=await e.chat([{role:"system",content:r},{role:"user",content:i}]);t.markdown(n);const a=this.extractTestFiles(n);for(const e of a)this.createActionButton(`🧪 Create ${e.filename}`,"ki-autoagent.createFile",[e.filename,e.code],t);this.createActionButton("▶️ Run Tests","ki-autoagent.runTests",[],t)}catch(e){t.markdown(`❌ Error generating tests: ${e.message}`)}}async handleGeneralImplementationRequest(e,t,n){t.progress("💻 Processing implementation request...");const a=await this.getWorkspaceContext(),r=this.getGeneralSystemPrompt(),i=`${e}\n\nWorkspace Context:\n${a}`;try{const e=await this.getClaudeService(),n=await e.chat([{role:"system",content:r},{role:"user",content:i}]);t.markdown(n);const a=this.extractCodeBlocks(n);for(const e of a)e.filename&&this.createActionButton(`📄 Create ${e.filename}`,"ki-autoagent.createFile",[e.filename,e.code],t)}catch(e){t.markdown(`❌ Error processing request: ${e.message}`)}}getGeneralSystemPrompt(){return"You are CodeSmithClaude, a senior Python and web developer with expertise in:\n\n- Python development (Django, FastAPI, Flask, Streamlit)\n- Web development (React, TypeScript, JavaScript)\n- API design and implementation\n- Database design and ORM usage\n- Testing strategies (pytest, unittest, Jest)\n- Code optimization and performance\n- Modern development practices\n\nAlways provide:\n1. Clean, readable, and well-documented code\n2. Proper error handling and validation\n3. Performance considerations\n4. Security best practices\n5. Testing recommendations\n\nFormat your responses with clear explanations and working code examples."}getImplementationSystemPrompt(){return"You are CodeSmithClaude implementing code based on specifications. Follow this structure:\n\n## Implementation Plan\n\n### 1. Analysis\n- Break down requirements\n- Identify components needed\n- Choose appropriate patterns\n\n### 2. Core Implementation\n- Main functionality with proper structure\n- Error handling and validation\n- Clear documentation\n\n### 3. Integration Points\n- How this connects to existing code\n- Dependencies and imports\n- Configuration requirements\n\n### 4. Usage Examples\n- How to use the implemented code\n- Example scenarios\n- Common patterns\n\n### 5. Next Steps\n- Testing recommendations\n- Potential improvements\n- Deployment considerations\n\nProvide complete, working code with filenames when appropriate. Focus on clean, maintainable solutions."}getOptimizationSystemPrompt(){return"You are CodeSmithClaude optimizing code for performance. Follow this approach:\n\n## Code Optimization Analysis\n\n### 1. Current Code Analysis\n- Identify performance bottlenecks\n- Analyze complexity and efficiency\n- Spot potential issues\n\n### 2. Optimization Strategies\n- Algorithm improvements\n- Data structure optimizations\n- Caching opportunities\n- Memory efficiency\n\n### 3. Optimized Implementation\n- Improved code with explanations\n- Performance comparisons\n- Benchmark suggestions\n\n### 4. Trade-offs\n- Performance vs readability\n- Memory vs speed\n- Complexity considerations\n\nAlways maintain code readability while improving performance. Explain your optimization choices."}getTestingSystemPrompt(){return"You are CodeSmithClaude creating comprehensive test suites. Structure your tests as:\n\n## Test Suite Design\n\n### 1. Test Strategy\n- Test types needed (unit, integration, e2e)\n- Coverage goals\n- Testing framework choice\n\n### 2. Unit Tests\n- Test individual functions/methods\n- Edge cases and error conditions\n- Mocking strategies\n\n### 3. Integration Tests\n- Component interactions\n- API endpoint testing\n- Database integration\n\n### 4. Test Utilities\n- Fixtures and test data\n- Helper functions\n- Setup/teardown\n\n### 5. Test Configuration\n- Test runner setup\n- CI/CD integration\n- Coverage reporting\n\nProvide complete, runnable tests with clear assertions and good coverage."}async validateServiceConfig(e){const t=o.workspace.getConfiguration("kiAutoAgent"),n=t.get("serviceMode","web");if("api"===n){if(!t.get("anthropic.apiKey"))return e&&e.markdown('❌ **Anthropic API key not configured**\n\nPlease set your API key in VS Code settings:\n- Go to Settings\n- Search for "KI AutoAgent"\n- Set your Anthropic API key'),!1}else if("web"===n&&!await this.claudeWebService.testConnection()){if(e){const t=await this.claudeWebService.getServerStatus();e.markdown(`❌ **Claude Web Service not available**\n\nError: ${t.error||"Connection failed"}\n\n**To fix this:**\n1. Make sure Claude Web Proxy server is running\n2. Check server URL: ${t.url}\n3. Ensure you're logged into Claude.ai in your browser`)}return!1}return!0}async getClaudeService(){return"web"===o.workspace.getConfiguration("kiAutoAgent").get("serviceMode","web")?{chat:async e=>await this.claudeWebService.chat(e)}:{chat:async e=>await this.anthropicService.chat(e)}}extractCodeBlocks(e){const t=/```(\w+)?\s*(?:\/\/\s*(.+\.[\w]+))?\n([\s\S]*?)```/g,n=[];let a;for(;null!==(a=t.exec(e));){const e=a[1]||"text",t=a[2]||this.inferFilename(e,a[3]),r=a[3];n.push({filename:t,language:e,code:r})}return n}extractTestFiles(e){return this.extractCodeBlocks(e).filter(e=>e.filename&&(e.filename.includes("test")||e.filename.includes("spec"))).map(e=>({filename:e.filename,code:e.code}))}extractMainCodeBlock(e){const t=this.extractCodeBlocks(e);return t.length>0?t[0].code:""}inferFilename(e,t){if("python"===e){const e=t.match(/class\s+(\w+)/);return e?`${e[1].toLowerCase()}.py`:"main.py"}if("typescript"===e||"javascript"===e){const n=t.match(/(?:class|interface)\s+(\w+)/);return n?`${n[1]}.${"typescript"===e?"ts":"js"}`:"index."+("typescript"===e?"ts":"js")}return`code.${e}`}extractPreviousContent(e){return e.map(e=>e.content).join("\n\n---\n\n").substring(0,2e3)}}t.CodeSmithAgent=u},167:function(e,t,n){var a,r=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&r(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.AnthropicService=void 0;const o=s(n(398));t.AnthropicService=class{constructor(){const e=o.workspace.getConfiguration("kiAutoAgent");this.apiKey=e.get("anthropic.apiKey",""),this.baseURL="https://api.anthropic.com/v1"}async chat(e,t="claude-3-5-sonnet-20241022",n=4e3,a=.7){if(!this.apiKey)throw new Error("Anthropic API key not configured");const r=e.find(e=>"system"===e.role),i=e.filter(e=>"system"!==e.role),s={model:t,max_tokens:n,temperature:a,system:r?.content||"",messages:i.map(e=>({role:e.role,content:e.content}))};try{const e=await fetch(`${this.baseURL}/messages`,{method:"POST",headers:{"Content-Type":"application/json","X-API-Key":this.apiKey,"anthropic-version":"2023-06-01"},body:JSON.stringify(s)});if(!e.ok){const t=await e.json().catch(()=>({error:{message:e.statusText}}));throw new Error(`Anthropic API error: ${t.error?.message||e.statusText}`)}const t=await e.json();if(!t.content||0===t.content.length)throw new Error("No response from Anthropic API");return t.content.filter(e=>"text"===e.type).map(e=>e.text).join("")}catch(e){if(e instanceof Error)throw e;throw new Error(`Anthropic API request failed: ${e}`)}}async streamChat(e,t,n="claude-3-5-sonnet-20241022",a=4e3,r=.7){if(!this.apiKey)throw new Error("Anthropic API key not configured");const i=e.find(e=>"system"===e.role),s=e.filter(e=>"system"!==e.role),o={model:n,max_tokens:a,temperature:r,system:i?.content||"",messages:s.map(e=>({role:e.role,content:e.content})),stream:!0};try{const e=await fetch(`${this.baseURL}/messages`,{method:"POST",headers:{"Content-Type":"application/json","X-API-Key":this.apiKey,"anthropic-version":"2023-06-01"},body:JSON.stringify(o)});if(!e.ok)throw new Error(`Anthropic API error: ${e.statusText}`);const n=e.body?.getReader();if(!n)throw new Error("Failed to get response stream");const a=new TextDecoder;for(;;){const{done:e,value:r}=await n.read();if(e)break;const i=a.decode(r).split("\n").filter(e=>""!==e.trim());for(const e of i)if(e.startsWith("data: ")){const n=e.substring(6);if("[DONE]"===n)return;try{const e=JSON.parse(n);if("content_block_delta"===e.type){const n=e.delta?.text;n&&t(n)}}catch(e){}}}}catch(e){throw new Error(`Anthropic streaming failed: ${e}`)}}validateApiKey(){return!!this.apiKey&&this.apiKey.startsWith("sk-ant-")}async testConnection(){try{return await this.chat([{role:"user",content:"Test connection"}],"claude-3-5-sonnet-20241022",10),!0}catch(e){return!1}}}},177:function(e,t,n){var a,r=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&r(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.VSCodeMasterDispatcher=void 0;const o=s(n(398));t.VSCodeMasterDispatcher=class{constructor(e){this.agents=new Map,this.projectTypes=new Map,this.intentPatterns=new Map,this.context=e,this.initializeProjectTypes(),this.initializeIntentPatterns()}async processRequest(e){try{const t=await this.getWorkspaceContext(),n=await this.detectIntent(e.prompt),a=e.projectType||await this.detectProjectType(t),r=this.createWorkflow(n,a);return await this.executeWorkflow(r,{...e,context:t,projectType:a})}catch(e){return{status:"error",content:`Error processing request: ${e.message}`,metadata:{error:e.message}}}}async detectIntent(e){const t=e.toLowerCase();return this.matchesPatterns(t,["design","architecture","system","plan","structure"])?{type:"architecture",confidence:.9,agent:"architect"}:this.matchesPatterns(t,["implement","code","create","build","develop"])?{type:"implementation",confidence:.85,agent:"codesmith"}:this.matchesPatterns(t,["document","readme","docs","explain","tutorial"])?{type:"documentation",confidence:.9,agent:"docu"}:this.matchesPatterns(t,["review","check","analyze","audit","security"])?{type:"review",confidence:.85,agent:"reviewer"}:this.matchesPatterns(t,["fix","debug","error","bug","problem","issue"])?{type:"debug",confidence:.9,agent:"fixer"}:this.matchesPatterns(t,["trading","strategy","backtest","ron","market","stock"])?{type:"trading",confidence:.95,agent:"tradestrat"}:this.matchesPatterns(t,["research","search","find","information","latest"])?{type:"research",confidence:.8,agent:"research"}:{type:"implementation",confidence:.5,agent:"codesmith"}}async detectProjectType(e){if(!e?.workspaceRoots||0===e.workspaceRoots.length)return"generic_software";const t=e.workspaceRoots[0];try{const e=o.Uri.joinPath(t.uri,"package.json");try{const t=await o.workspace.fs.readFile(e),n=JSON.parse(t.toString());if(n.dependencies?.streamlit||n.dependencies?.yfinance||n.dependencies?.pandas)return"trading_system";if(n.dependencies?.fastapi||n.dependencies?.express||n.dependencies?.flask)return"web_api";if(n.dependencies?.react||n.dependencies?.vue||n.dependencies?.angular)return"web_frontend"}catch(e){}const n=o.Uri.joinPath(t.uri,"requirements.txt");try{const e=(await o.workspace.fs.readFile(n)).toString();if(e.includes("yfinance")||e.includes("pandas")||e.includes("streamlit"))return"trading_system";if(e.includes("fastapi")||e.includes("flask")||e.includes("django"))return"web_api"}catch(e){}const a=(await o.workspace.findFiles("**/*.{py,js,ts,jsx,tsx}","**/node_modules/**",50)).map(e=>e.fsPath.toLowerCase());if(a.some(e=>e.includes("strategy")||e.includes("trading")||e.includes("backtest")))return"trading_system";if(a.some(e=>e.includes("api")||e.includes("server")||e.includes("endpoint")))return"web_api"}catch(e){console.error("Error detecting project type:",e)}return"generic_software"}createWorkflow(e,t){const n=this.projectTypes.get(t);let a=[];switch(e.type){case"architecture":a=[{id:"analyze",agent:"architect",description:"Analyze requirements and context"},{id:"design",agent:"architect",description:"Create architecture design"},{id:"review",agent:"reviewer",description:"Review architecture for best practices"}];break;case"implementation":a=[{id:"plan",agent:"architect",description:"Plan implementation approach"},{id:"implement",agent:"codesmith",description:"Implement the solution"},{id:"test",agent:"codesmith",description:"Create tests"},{id:"review",agent:"reviewer",description:"Review implementation"}];break;case"trading":a=[{id:"strategy_design",agent:"tradestrat",description:"Design trading strategy"},{id:"implement",agent:"codesmith",description:"Implement strategy code"},{id:"backtest",agent:"tradestrat",description:"Create backtesting framework"},{id:"review",agent:"reviewer",description:"Review for trading best practices"}];break;case"debug":a=[{id:"analyze",agent:"fixer",description:"Analyze the problem"},{id:"fix",agent:"fixer",description:"Implement fix"},{id:"test",agent:"codesmith",description:"Test the fix"}];break;default:a=[{id:"execute",agent:e.agent,description:"Execute task"}]}return n?.workflow&&(a=[...a,...n.workflow.filter(e=>!a.some(t=>t.id===e.id))]),a}async executeWorkflow(e,t){const n=[];let a={status:"success",content:"",suggestions:[],references:[]};for(const r of e)try{const e=this.agents.get(r.agent);if(!e)throw new Error(`Agent ${r.agent} not found`);const i=await e.executeStep(r,t,n);n.push(i),a.content+=`## ${r.description}\n\n${i.content}\n\n`,a.suggestions?.push(...i.suggestions||[]),a.references?.push(...i.references||[]),"error"===i.status&&(a.status="partial_success")}catch(e){a.status="error",a.content+=`❌ Error in ${r.description}: ${e.message}\n\n`}return a}async getWorkspaceContext(){const e=o.window.activeTextEditor,t=o.workspace.workspaceFolders,n=o.workspace.textDocuments;let a="",r="";return e&&(r=e.document.fileName,e.selection.isEmpty||(a=e.document.getText(e.selection))),{activeEditor:e,workspaceRoots:t,openDocuments:n,selectedText:a,currentFile:r}}registerAgent(e,t){this.agents.set(e,t)}async getAgentStats(){const e={};for(const[t,n]of this.agents)n.getStats&&(e[t]=await n.getStats());return e}matchesPatterns(e,t){return t.some(t=>e.includes(t))}initializeProjectTypes(){this.projectTypes.set("trading_system",{name:"Trading System",patterns:["streamlit","yfinance","pandas","trading","strategy"],qualityGates:["engine_parity","trading_validation","ron_compliance"],workflow:[{id:"strategy_validation",agent:"tradestrat",description:"Validate trading strategy logic"},{id:"risk_analysis",agent:"tradestrat",description:"Analyze risk management"}],primaryAgent:"tradestrat"}),this.projectTypes.set("web_api",{name:"Web API",patterns:["fastapi","flask","express","api"],qualityGates:["security_review","performance_check","api_design"],workflow:[{id:"security_review",agent:"reviewer",description:"Security vulnerability check"},{id:"api_documentation",agent:"docu",description:"Generate API documentation"}],primaryAgent:"codesmith"}),this.projectTypes.set("generic_software",{name:"Generic Software",patterns:[],qualityGates:["code_quality","performance","security"],workflow:[],primaryAgent:"codesmith"})}initializeIntentPatterns(){this.intentPatterns.set("architecture",[/\b(design|architect|structure|system)\b/i,/\b(plan|planning|blueprint)\b/i]),this.intentPatterns.set("implementation",[/\b(implement|code|create|build|develop)\b/i,/\b(function|class|method|api)\b/i])}}},191:function(e,t,n){var a,r=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&r(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.OpusArbitratorAgent=void 0;const o=s(n(398)),c=n(806),l=n(167),d=n(659);class u extends c.ChatAgent{constructor(e,t){super({participantId:"ki-autoagent.richter",name:"richter",fullName:"OpusArbitrator",description:"⚖️ Supreme Quality Judge powered by Claude Opus 4.1 - Final arbitrator for agent conflicts with superior reasoning capabilities",model:"claude-opus-4-1-20250805",iconPath:o.Uri.joinPath(e.extensionUri,"media","claude-icon.svg"),capabilities:["Agent Conflict Resolution","Supreme Decision Making","Complex Reasoning & Analysis","Multi-Agent Coordination","Final Authority on Technical Disputes"],commands:[{name:"judge",description:"Make supreme judgment on any matter",handler:"handleJudgeCommand"},{name:"evaluate",description:"Deep technical evaluation of options",handler:"handleEvaluateCommand"},{name:"resolve",description:"Resolve conflicts between agents",handler:"handleResolveCommand"},{name:"verdict",description:"Final binding verdict on decisions",handler:"handleVerdictCommand"}]},e,t),this.anthropicService=new l.AnthropicService,this.claudeWebService=new d.ClaudeWebService}async handleRequest(e,t,n,a){if(!await this.validateServiceConfig(n))return;const r=e.command,i=e.prompt;this.log(`Processing ${r?`/${r}`:"general"} arbitration request: ${i.substring(0,100)}...`),r?await this.handleCommand(r,i,n,a):await this.handleGeneralArbitrationRequest(i,n,a)}async processWorkflowStep(e,t,n){const a=await this.getWorkspaceContext();let r="",i="";switch(e.id){case"conflict_analysis":r=this.getConflictResolutionPrompt(),i=`Analyze this agent conflict: ${t.prompt}\n\nContext:\n${a}`;break;case"technical_evaluation":r=this.getDeepEvaluationPrompt(),i=`Evaluate technical options: ${t.prompt}\n\nPrevious Analysis:\n${this.extractPreviousContent(n)}`;break;case"final_judgment":r=this.getFinalVerdictPrompt(),i=`Deliver final judgment: ${t.prompt}\n\nContext:\n${a}`;break;default:r=this.getSupremeJudgmentPrompt(),i=`${t.prompt}\n\nContext:\n${a}`}try{const t=await this.getClaudeService();return{status:"success",content:await t.chat([{role:"system",content:r},{role:"user",content:i}]),metadata:{step:e.id,agent:"richter",model:"claude-opus-4-1-20250805"}}}catch(t){throw new Error(`Failed to process ${e.id}: ${t.message}`)}}async handleJudgeCommand(e,t,n){t.progress("👑 OpusArbitrator applying supreme judgment...");const a=await this.getWorkspaceContext(),r=this.getSupremeJudgmentPrompt(),i=`Apply supreme judgment: ${e}\n\nWorkspace Context:\n${a}`;try{const e=await this.getClaudeService(),n=await e.chat([{role:"system",content:r},{role:"user",content:i}]);t.markdown("## 👑 SUPREME JUDGMENT\n\n"),t.markdown(n),t.markdown("\n\n**⚖️ Judgment rendered by OpusArbitrator - Claude Opus 4.1**")}catch(e){t.markdown(`❌ **Judgment Error:** ${e.message}`)}}async handleResolveCommand(e,t,n){t.progress("⚖️ OpusArbitrator analyzing conflict...");const a=await this.getWorkspaceContext(),r=this.getConflictResolutionPrompt(),i=`Resolve this agent conflict: ${e}\n\nWorkspace Context:\n${a}`;try{const e=await this.getClaudeService(),n=await e.chat([{role:"system",content:r},{role:"user",content:i}]);t.markdown("## ⚖️ SUPREME ARBITRATION DECISION\n\n"),t.markdown(n),t.markdown("\n\n**🏛️ This decision is final and binding for all agents.**")}catch(e){t.markdown(`❌ **Arbitration Error:** ${e.message}`)}}async handleEvaluateCommand(e,t,n){t.progress("🔍 OpusArbitrator performing deep evaluation...");const a=await this.getWorkspaceContext(),r=this.getDeepEvaluationPrompt(),i=`Perform deep technical evaluation: ${e}\n\nWorkspace Context:\n${a}`;try{const e=await this.getClaudeService(),n=await e.chat([{role:"system",content:r},{role:"user",content:i}]);t.markdown("## 🔍 DEEP TECHNICAL EVALUATION\n\n"),t.markdown(n),t.markdown("\n\n**📊 Analysis conducted by OpusArbitrator with Claude Opus 4.1**")}catch(e){t.markdown(`❌ **Evaluation Error:** ${e.message}`)}}async handleVerdictCommand(e,t,n){t.progress("⚡ OpusArbitrator delivering final verdict...");const a=await this.getWorkspaceContext(),r=this.getFinalVerdictPrompt(),i=`Deliver final verdict on: ${e}\n\nWorkspace Context:\n${a}`;try{const e=await this.getClaudeService(),n=await e.chat([{role:"system",content:r},{role:"user",content:i}]);t.markdown("## ⚡ FINAL VERDICT\n\n"),t.markdown(n),t.markdown("\n\n**🏛️ VERDICT IS FINAL - All agents must comply**")}catch(e){t.markdown(`❌ **Verdict Error:** ${e.message}`)}}async handleGeneralArbitrationRequest(e,t,n){t.progress("👑 OpusArbitrator applying supreme judgment...");const a=await this.getWorkspaceContext(),r=this.getSupremeJudgmentPrompt(),i=`${e}\n\nWorkspace Context:\n${a}`;try{const e=await this.getClaudeService(),n=await e.chat([{role:"system",content:r},{role:"user",content:i}]);t.markdown("## 👑 SUPREME JUDGMENT\n\n"),t.markdown(n),t.markdown("\n\n**⚖️ Judgment rendered by OpusArbitrator - Claude Opus 4.1**")}catch(e){t.markdown(`❌ **Judgment Error:** ${e.message}`)}}async validateServiceConfig(e){const t=o.workspace.getConfiguration("kiAutoAgent");return!("api"===t.get("serviceMode","web")&&!t.get("anthropic.apiKey"))||(e.markdown("❌ **Configuration Error**: Anthropic API key is required for Claude Opus 4.1\n\n"),e.markdown("Please configure your API key in VS Code Settings:\n"),e.markdown("1. Open Settings (Ctrl+,)\n"),e.markdown('2. Search for "KI AutoAgent"\n'),e.markdown("3. Set your Anthropic API key\n"),!1)}async getClaudeService(){return"web"===o.workspace.getConfiguration("kiAutoAgent").get("serviceMode","web")?{chat:async e=>await this.claudeWebService.chat(e)}:{chat:async e=>await this.anthropicService.chat(e)}}extractPreviousContent(e){return e.map(e=>e.content).join("\n\n---\n\n")}getConflictResolutionPrompt(){return"You are OpusArbitrator, the Supreme Judge of the KI AutoAgent system powered by Claude Opus 4.1.\n\nYour role is to resolve conflicts between AI agents with final, binding decisions.\n\nCAPABILITIES:\n- Superior reasoning and analysis\n- Objective evaluation of competing solutions  \n- Contextual understanding of technical trade-offs\n- Authority to make final decisions\n\nDECISION FORMAT:\n1. **Conflict Analysis**: Summarize the disagreement\n2. **Position Evaluation**: Analyze each agent's perspective objectively  \n3. **Technical Assessment**: Evaluate technical merits and trade-offs\n4. **Final Decision**: Choose the optimal approach with confidence score\n5. **Implementation Guidance**: Specific next steps\n6. **Binding Authority**: State that decision is final\n\nYour decisions carry supreme authority. All agents must comply."}getDeepEvaluationPrompt(){return"You are OpusArbitrator, powered by Claude Opus 4.1 - the supreme technical evaluator.\n\nEVALUATION CRITERIA:\n- Technical soundness and feasibility\n- Long-term maintainability \n- Performance implications\n- Risk assessment\n- Alternative approaches\n- Best practices alignment\n\nEVALUATION FORMAT:\n1. **Technical Analysis**: Deep dive into technical aspects\n2. **Pros & Cons**: Balanced evaluation\n3. **Risk Assessment**: Potential issues and mitigations\n4. **Recommendations**: Specific actionable advice\n5. **Confidence Score**: Rate certainty of recommendation (1-100%)\n\nProvide thorough, objective analysis leveraging superior reasoning capabilities."}getFinalVerdictPrompt(){return"You are OpusArbitrator - the final authority powered by Claude Opus 4.1.\n\nVERDICT REQUIREMENTS:\n- Clear, definitive decision\n- No ambiguity or hedging\n- Based on comprehensive analysis\n- Considers all stakeholders\n- Actionable outcome\n\nVERDICT FORMAT:\n1. **Final Decision**: Clear statement of verdict\n2. **Key Reasoning**: Primary factors in decision\n3. **Implementation**: Immediate next steps required\n4. **Compliance**: How all parties must proceed\n\nYour verdict is FINAL and BINDING. No appeals or further discussion."}getSupremeJudgmentPrompt(){return"You are OpusArbitrator, the Supreme Judge powered by Claude Opus 4.1.\n\nAs the highest authority in the KI AutoAgent system, you provide:\n- Ultimate decision-making power\n- Superior reasoning capabilities\n- Objective, unbiased analysis\n- Final resolution of all disputes\n\nJUDGMENT PRINCIPLES:\n- Logical, evidence-based decisions\n- Consider technical merit above all\n- Balance competing interests fairly\n- Provide clear, actionable guidance\n- Maintain system integrity\n\nApply your superior reasoning to deliver judgment that serves the greater good of the project."}getSlashCommands(){return[{command:"judge",description:"Make supreme judgment on any matter"},{command:"evaluate",description:"Deep technical evaluation of options"},{command:"resolve",description:"Resolve conflicts between agents"},{command:"verdict",description:"Final binding verdict on decisions"}]}}t.OpusArbitratorAgent=u},265:function(e,t,n){var a,r=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&r(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.activate=function(e){console.log("🤖 KI AutoAgent extension is now active!");const t=o.window.createOutputChannel("KI AutoAgent");t.appendLine("🤖 KI AutoAgent Extension Activated"),t.appendLine("======================================"),t.appendLine(`⏰ Activation Time: ${(new Date).toLocaleString()}`),t.appendLine(`📦 Extension Version: ${e.extension.packageJSON.version}`),t.show(!0);const n=new c.VSCodeMasterDispatcher(e),a=(new f.ChatWidget(e,n),o.commands.registerCommand("ki-autoagent.showChat",()=>g.MultiAgentChatPanel.createOrShow(e.extensionUri,n)));e.subscriptions.push(a);const r=o.commands.registerCommand("ki-autoagent.toggleChat",()=>g.MultiAgentChatPanel.createOrShow(e.extensionUri,n));e.subscriptions.push(r);const i=o.commands.registerCommand("ki-autoagent.quickChat",()=>{g.MultiAgentChatPanel.createOrShow(e.extensionUri,n),o.window.showInformationMessage("🤖 KI AutoAgent Chat ready! Use @ki for universal assistance or specific agents like @richter, @architect, @codesmith")});e.subscriptions.push(i);const s=o.commands.registerCommand("ki-autoagent.clearUnread",()=>{t.clear(),t.appendLine("🧹 Cleared unread messages"),o.window.showInformationMessage("✅ KI AutoAgent: Unread messages cleared")});e.subscriptions.push(s),t.appendLine("📋 Commands registered:"),t.appendLine("  • KI AutoAgent: Show Chat"),t.appendLine("  • KI AutoAgent: Toggle Chat"),t.appendLine("  • KI AutoAgent: Quick Chat"),t.appendLine("  • KI AutoAgent: Clear Unread Messages"),t.appendLine(""),[new d.OrchestratorAgent(e,n),new h.OpusArbitratorAgent(e,n),new l.ArchitectAgent(e,n),new u.CodeSmithAgent(e,n),new m.TradeStratAgent(e,n),new p.ResearchAgent(e,n)].forEach(t=>{const a=t.config.participantId,r=o.chat.createChatParticipant(a,t.createHandler()),i=t.config.iconPath;i&&(r.iconPath=i),n.registerAgent(a.split(".")[1],t),e.subscriptions.push(r),console.log(`✅ Registered chat participant: ${a}`)}),function(e,t){const n=o.commands.registerCommand("ki-autoagent.createFile",async(e,t)=>{try{const n=o.workspace.workspaceFolders?.[0];if(!n)return void o.window.showErrorMessage("No workspace folder open");const a=o.Uri.joinPath(n.uri,e);await o.workspace.fs.writeFile(a,Buffer.from(t,"utf8"));const r=await o.workspace.openTextDocument(a);await o.window.showTextDocument(r),o.window.showInformationMessage(`✅ Created file: ${e}`)}catch(e){o.window.showErrorMessage(`❌ Failed to create file: ${e.message}`)}}),a=o.commands.registerCommand("ki-autoagent.insertAtCursor",async e=>{try{const t=o.window.activeTextEditor;if(!t)return void o.window.showErrorMessage("No active text editor");const n=t.selection.active;await t.edit(t=>{t.insert(n,e)}),o.window.showInformationMessage("✅ Content inserted at cursor")}catch(e){o.window.showErrorMessage(`❌ Failed to insert content: ${e.message}`)}}),r=o.commands.registerCommand("ki-autoagent.applySuggestion",async e=>{try{"file_creation"===e.type?await o.commands.executeCommand("ki-autoagent.createFile",e.filename,e.content):"code_insertion"===e.type?await o.commands.executeCommand("ki-autoagent.insertAtCursor",e.code):o.window.showInformationMessage(`Applied suggestion: ${e.description}`)}catch(e){o.window.showErrorMessage(`❌ Failed to apply suggestion: ${e.message}`)}}),i=o.commands.registerCommand("ki-autoagent.showAgentStats",async()=>{try{const e=await t.getAgentStats();if(0===Object.keys(e).length)return void o.window.showInformationMessage("No agent statistics available yet");const n=function(e){let t="# KI AutoAgent Statistics\n\n";t+=`Generated at: ${(new Date).toLocaleString()}\n\n`;for(const[n,a]of Object.entries(e)){const{totalExecutions:e,successRate:r,averageResponseTime:i,lastExecution:s}=a;t+=`## ${n}\n\n`,t+=`- **Total Executions:** ${e}\n`,t+=`- **Success Rate:** ${(100*r).toFixed(1)}%\n`,t+=`- **Average Response Time:** ${i.toFixed(0)}ms\n`,s&&(t+=`- **Last Execution:** ${new Date(s).toLocaleString()}\n`),t+="\n"}return t}(e),a=await o.workspace.openTextDocument({content:n,language:"markdown"});await o.window.showTextDocument(a)}catch(e){o.window.showErrorMessage(`❌ Failed to show stats: ${e.message}`)}}),s=o.commands.registerCommand("ki-autoagent.showHelp",async e=>{const t=function(e){let t="# KI AutoAgent Help\n\n";return e?t+=`## Help for ${e}\n\n`:(t+="## Getting Started\n\n",t+="KI AutoAgent is a universal multi-agent AI development platform for VS Code.\n\n",t+="### Available Agents\n\n",t+="- **@ki** - Universal orchestrator that automatically routes tasks\n",t+="- **@richter** - ⚖️ Supreme judge & conflict resolver (Claude Opus 4.1)\n",t+="- **@architect** - System architecture and design expert\n",t+="- **@codesmith** - Senior Python/Web developer\n",t+="- **@docu** - Technical documentation expert\n",t+="- **@reviewer** - Code review and security expert\n",t+="- **@fixer** - Bug fixing and optimization expert\n",t+="- **@tradestrat** - Trading strategy expert\n",t+="- **@research** - Research and information expert\n\n",t+="### Usage Examples\n\n",t+="```\n",t+="@ki create a REST API with FastAPI\n",t+="@richter judge which approach is better: microservices vs monolith\n",t+="@richter resolve this disagreement between @architect and @codesmith\n",t+="@architect design a microservices architecture\n",t+="@codesmith implement a Python class for user management\n",t+="@tradestrat develop a momentum trading strategy\n",t+="@fixer debug this error message\n",t+="```\n\n",t+="### Configuration\n\n",t+="1. Open VS Code Settings (Ctrl+,)\n",t+='2. Search for "KI AutoAgent"\n',t+="3. Configure your API keys:\n",t+="   - OpenAI API Key (for GPT models)\n",t+="   - Anthropic API Key (for Claude models)\n",t+="   - Perplexity API Key (for research)\n\n",t+="### Support\n\n",t+="For issues and feature requests, please visit the GitHub repository.\n"),t}(e),n=await o.workspace.openTextDocument({content:t,language:"markdown"});await o.window.showTextDocument(n)}),c=o.commands.registerCommand("ki-autoagent.planImplementation",async(e,t)=>{o.window.showInformationMessage("Creating implementation plan...")}),l=o.commands.registerCommand("ki-autoagent.executeWorkflow",async(e,t)=>{o.window.showInformationMessage("Executing workflow...")});e.subscriptions.push(n,a,r,i,s,c,l),console.log("✅ All extension commands registered")}(e,n),function(e){e.appendLine("🤖 KI AutoAgent VS Code Extension"),e.appendLine("======================================="),e.appendLine(""),e.appendLine("✅ Extension activated successfully!"),e.appendLine(""),e.appendLine("Available Agents:"),e.appendLine("• @ki - Universal orchestrator (routes to best agent)"),e.appendLine("• @richter - ⚖️ Supreme judge & conflict resolver (Opus 4.1)"),e.appendLine("• @architect - System architecture & design"),e.appendLine("• @codesmith - Code implementation & testing"),e.appendLine("• @docu - Documentation generation"),e.appendLine("• @reviewer - Code review & security"),e.appendLine("• @fixer - Bug fixing & debugging"),e.appendLine("• @tradestrat - Trading strategy development"),e.appendLine("• @research - Web research & information gathering"),e.appendLine(""),e.appendLine("Getting Started:"),e.appendLine("1. Open VS Code Chat panel (Ctrl+Shift+I)"),e.appendLine("2. Type @ki followed by your request"),e.appendLine("3. Or use specific agents like @architect, @codesmith, etc."),e.appendLine(""),e.appendLine("Configuration:"),e.appendLine("• Set your API keys in VS Code Settings"),e.appendLine('• Search for "KI AutoAgent" in settings'),e.appendLine("• Configure OpenAI, Anthropic, and Perplexity API keys"),e.appendLine(""),e.appendLine('Need help? Type "@ki /agents" to see all available agents!')}(t),t.appendLine("✅ All components initialized successfully!"),t.appendLine("")},t.deactivate=function(){console.log("👋 KI AutoAgent extension is deactivated")};const o=s(n(398)),c=n(177),l=n(63),d=n(270),u=n(122),m=n(930),p=n(593),h=n(191),g=n(777),f=n(637)},270:function(e,t,n){var a,r=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&r(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.OrchestratorAgent=void 0;const o=s(n(398)),c=n(806),l=n(551);class d extends c.ChatAgent{constructor(e,t){super({participantId:"ki-autoagent.orchestrator",name:"ki",fullName:"KI AutoAgent Orchestrator",description:"Universal AI assistant that automatically routes tasks to specialized agents",model:"gpt-4o",iconPath:o.Uri.joinPath(e.extensionUri,"media","orchestrator-icon.svg"),capabilities:["Intent Recognition","Agent Orchestration","Workflow Management","Project Type Detection","Multi-Agent Coordination"],commands:[{name:"task",description:"Execute a development task with automatic agent selection",handler:"handleTaskCommand"},{name:"agents",description:"Show available specialized agents",handler:"handleAgentsCommand"},{name:"workflow",description:"Create a multi-step development workflow",handler:"handleWorkflowCommand"}]},e,t),this.openAIService=new l.OpenAIService}async handleRequest(e,t,n,a){const r=e.command,i=e.prompt;this.log(`Orchestrator processing ${r?`/${r}`:"general"} request: ${i.substring(0,100)}...`),r?await this.handleCommand(r,i,n,a):await this.handleGeneralRequest(i,n,a)}async processWorkflowStep(e,t,n){return{status:"success",content:`Orchestrator coordinated step: ${e.description}`,metadata:{step:e.id,agent:"orchestrator"}}}async handleGeneralRequest(e,t,n){t.progress("🧠 Analyzing task and selecting optimal agents...");try{const n=await this.dispatcher.detectIntent(e),a=await this.dispatcher.getWorkspaceContext(),r=await this.dispatcher.detectProjectType(a);t.markdown("## 🎯 Task Analysis\n\n"),t.markdown(`**Intent:** ${n.type} (Confidence: ${(100*n.confidence).toFixed(0)}%)\n`),t.markdown(`**Primary Agent:** @${n.agent}\n`),t.markdown(`**Project Type:** ${r}\n\n`);const i=this.dispatcher.createWorkflow(n,r);i.length>1&&(t.markdown("## 🔄 Execution Workflow\n\n"),i.forEach((e,n)=>{t.markdown(`${n+1}. **@${e.agent}**: ${e.description}\n`)}),t.markdown("\n")),t.progress("⚡ Executing workflow...");const s={prompt:e,context:a,projectType:r},o=await this.dispatcher.executeWorkflow(i,s);t.markdown("## 📤 Results\n\n"),t.markdown(o.content),o.suggestions&&o.suggestions.length>0&&(t.markdown("## 💡 Suggested Actions\n\n"),o.suggestions.forEach(e=>{this.createActionButton(e.title,"ki-autoagent.applySuggestion",[e.data],t)})),o.references&&o.references.length>0&&(t.markdown("## 📁 Referenced Files\n\n"),o.references.forEach(e=>{t.reference(e)})),this.createActionButton("📊 Show Agent Statistics","ki-autoagent.showAgentStats",[],t)}catch(a){t.markdown(`❌ **Error during orchestration**: ${a.message}\n\n`),t.markdown("💡 **Fallback**: Routing to @codesmith for direct assistance...\n\n"),await this.handleFallback(e,t,n)}}async handleTaskCommand(e,t,n){t.markdown("## 📋 Task Execution\n\n"),t.markdown(`**Task:** ${e}\n\n`),await this.handleGeneralRequest(e,t,n)}async handleAgentsCommand(e,t,n){t.markdown("## 🤖 Available Specialized Agents\n\n");const a=[{name:"@architect",fullName:"ArchitectGPT",description:"System Architecture & Design Expert",model:"GPT-4o",specialties:"Design, Architecture, Planning"},{name:"@codesmith",fullName:"CodeSmithClaude",description:"Senior Python/Web Developer",model:"Claude Sonnet 4",specialties:"Implementation, Testing, Optimization"},{name:"@docu",fullName:"DocuBot",description:"Technical Documentation Expert",model:"GPT-4o",specialties:"Docs, README, API Reference"},{name:"@reviewer",fullName:"ReviewerGPT",description:"Code Review & Security Expert",model:"GPT-4o-mini",specialties:"QA, Security, Performance"},{name:"@fixer",fullName:"FixerBot",description:"Bug Fixing & Optimization Expert",model:"Claude Sonnet 4",specialties:"Debugging, Patching, Refactoring"},{name:"@tradestrat",fullName:"TradeStrat",description:"Trading Strategy Expert",model:"Claude Sonnet 4",specialties:"Strategies, Backtesting, Risk"},{name:"@richter",fullName:"OpusArbitrator",description:"⚖️ Supreme Quality Judge powered by Claude Opus 4.1",model:"Claude Opus 4.1",specialties:"Conflict Resolution, Supreme Decisions, Complex Reasoning"},{name:"@research",fullName:"ResearchBot",description:"Research & Information Expert",model:"Perplexity Pro",specialties:"Web Research, Documentation, Analysis"}];for(const e of a)t.markdown(`### ${e.name} - ${e.fullName}\n`),t.markdown(`**Model:** ${e.model}\n`),t.markdown(`**Description:** ${e.description}\n`),t.markdown(`**Specialties:** ${e.specialties}\n\n`);t.markdown("## 💡 Usage Examples\n\n"),t.markdown("- `@architect design a microservices architecture`\n"),t.markdown("- `@codesmith implement a REST API with FastAPI`\n"),t.markdown("- `@tradestrat create a momentum trading strategy`\n"),t.markdown("- `@fixer debug this error message`\n"),t.markdown("- `@richter judge which solution is better`\n"),t.markdown("- `@research find the latest Python testing frameworks`\n\n"),t.markdown("## 🔄 Automatic Routing\n\n"),t.markdown("You can also just describe your task naturally, and I'll automatically select the best agent(s) and create a workflow:\n\n"),t.markdown('- `"Create a trading bot with risk management"`\n'),t.markdown('- `"Build a REST API for user management"`\n'),t.markdown('- `"Fix the performance issue in this function"`\n');try{const e=await this.dispatcher.getAgentStats();if(Object.keys(e).length>0){t.markdown("## 📊 Agent Statistics\n\n");for(const[n,a]of Object.entries(e)){const{successRate:e,totalExecutions:r,averageResponseTime:i}=a;t.markdown(`**${n}**: ${r} executions, ${(100*e).toFixed(1)}% success rate, ${i.toFixed(0)}ms avg response\n`)}}}catch(e){}}async handleWorkflowCommand(e,t,n){t.progress("📋 Creating multi-step workflow...");try{const n=await this.getWorkspaceContext(),a=this.getWorkflowSystemPrompt(),r=`Create a detailed multi-step workflow for: ${e}\n\nWorkspace Context:\n${n}`,i=await this.openAIService.chat([{role:"system",content:a},{role:"user",content:r}]);t.markdown("## 🔄 Generated Workflow\n\n"),t.markdown(i),this.createActionButton("⚡ Execute This Workflow","ki-autoagent.executeWorkflow",[e,i],t)}catch(e){t.markdown(`❌ Error creating workflow: ${e.message}`)}}async handleFallback(e,t,n){try{const n="You are a helpful coding assistant. Provide clear, actionable assistance for development tasks.",a=await this.openAIService.chat([{role:"system",content:n},{role:"user",content:e}]);t.markdown(a)}catch(e){t.markdown(`❌ Fallback also failed: ${e.message}`)}}getWorkflowSystemPrompt(){return"You are a workflow planning expert. Create detailed, step-by-step workflows for development tasks.\n\nFor each workflow, provide:\n\n## Workflow: [Task Name]\n\n### Overview\nBrief description of what this workflow accomplishes.\n\n### Prerequisites\n- Required tools, knowledge, or setup\n\n### Steps\n1. **Step Name** (@agent-name)\n   - Detailed description\n   - Expected deliverables\n   - Dependencies\n\n2. **Next Step** (@agent-name)\n   - And so on...\n\n### Success Criteria\n- How to know the workflow is complete\n- Quality checks\n\n### Estimated Timeline\n- Time estimates for each phase\n\nAvailable agents:\n- @architect (system design, architecture)\n- @codesmith (implementation, testing)\n- @docu (documentation)\n- @reviewer (code review, security)\n- @fixer (debugging, fixes)\n- @tradestrat (trading strategies)\n- @richter (supreme arbitrator, conflict resolution, final decisions)\n- @research (web research, information)\n\nMake workflows realistic, actionable, and well-structured."}}t.OrchestratorAgent=d},398:e=>{e.exports=require("vscode")},551:function(e,t,n){var a,r=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&r(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.OpenAIService=void 0;const o=s(n(398));t.OpenAIService=class{constructor(){const e=o.workspace.getConfiguration("kiAutoAgent");this.apiKey=e.get("openai.apiKey",""),this.baseURL="https://api.openai.com/v1"}async chat(e,t="gpt-4o",n=4e3,a=.7){if(!this.apiKey)throw new Error("OpenAI API key not configured");const r={model:t,messages:e,max_tokens:n,temperature:a,stream:!1};try{const e=await fetch(`${this.baseURL}/chat/completions`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.apiKey}`},body:JSON.stringify(r)});if(!e.ok){const t=await e.json().catch(()=>({error:{message:e.statusText}}));throw new Error(`OpenAI API error: ${t.error?.message||e.statusText}`)}const t=await e.json();if(!t.choices||0===t.choices.length)throw new Error("No response from OpenAI API");return t.choices[0].message.content}catch(e){if(e instanceof Error)throw e;throw new Error(`OpenAI API request failed: ${e}`)}}async streamChat(e,t,n="gpt-4o",a=4e3,r=.7){if(!this.apiKey)throw new Error("OpenAI API key not configured");const i={model:n,messages:e,max_tokens:a,temperature:r,stream:!0};try{const e=await fetch(`${this.baseURL}/chat/completions`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.apiKey}`},body:JSON.stringify(i)});if(!e.ok)throw new Error(`OpenAI API error: ${e.statusText}`);const n=e.body?.getReader();if(!n)throw new Error("Failed to get response stream");const a=new TextDecoder;for(;;){const{done:e,value:r}=await n.read();if(e)break;const i=a.decode(r).split("\n").filter(e=>""!==e.trim());for(const e of i)if(e.startsWith("data: ")){const n=e.substring(6);if("[DONE]"===n)return;try{const e=JSON.parse(n),a=e.choices?.[0]?.delta?.content;a&&t(a)}catch(e){}}}}catch(e){throw new Error(`OpenAI streaming failed: ${e}`)}}validateApiKey(){return!!this.apiKey&&this.apiKey.startsWith("sk-")}async testConnection(){try{return await this.chat([{role:"user",content:"Test connection"}],"gpt-4o-mini",10),!0}catch(e){return!1}}}},593:function(e,t,n){var a,r=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&r(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.ResearchAgent=void 0;const o=s(n(398)),c=n(806),l=n(693),d=n(551);class u extends c.ChatAgent{constructor(e,t){super({participantId:"ki-autoagent.research",name:"research",fullName:"ResearchBot",description:"Research & Information Expert with real-time web access",model:"gpt-4o",iconPath:o.Uri.joinPath(e.extensionUri,"media","perplexity-icon.svg"),capabilities:["Web Research","Real-time Information","Technical Documentation Search","Market Analysis","Trend Research","Competitive Analysis"],commands:[{name:"search",description:"Search web for current information",handler:"handleSearchCommand"},{name:"documentation",description:"Find and analyze technical documentation",handler:"handleDocumentationCommand"},{name:"market",description:"Research market trends and analysis",handler:"handleMarketCommand"},{name:"compare",description:"Compare technologies, tools, or solutions",handler:"handleCompareCommand"}]},e,t),this.webSearchService=new l.WebSearchService,this.openAIService=new d.OpenAIService}async handleRequest(e,t,n,a){if(!await this.webSearchService.isWebAccessAvailable()){const e=this.webSearchService.getSearchEngineStatus();return n.markdown("❌ **Web access not configured**\n\n"),n.markdown(`**Current search engine**: ${e.engine}\n`),n.markdown(`**Status**: ${e.configured?"Configured":"Not configured"}\n\n`),n.markdown("💡 **To enable web research:**\n"),n.markdown("1. Open VS Code Settings (Cmd+,)\n"),n.markdown('2. Search for "KI AutoAgent"\n'),n.markdown("3. Configure your preferred search API:\n"),n.markdown("   - **Perplexity API** (recommended)\n"),n.markdown("   - **Tavily API** (web search specialist)\n"),void n.markdown("   - **SERP API** (Google search)\n")}const r=e.command,i=e.prompt;this.log(`Processing ${r?`/${r}`:"general"} research request: ${i.substring(0,100)}...`),r?await this.handleCommand(r,i,n,a):await this.handleGeneralResearchRequest(i,n,a)}async processWorkflowStep(e,t,n){try{let n="",a="";switch(e.id){case"market_research":n=`${t.prompt} market trends analysis 2024`,a="Analyze market trends and opportunities";break;case"tech_research":n=`${t.prompt} technical documentation best practices`,a="Research technical solutions and documentation";break;case"competitive_analysis":n=`${t.prompt} competitors alternatives comparison`,a="Compare competitive solutions and alternatives";break;default:n=t.prompt,a="Research and analyze the given topic"}const r=await this.webSearchService.search(n);return{status:"success",content:await this.analyzeSearchResults(r,a),metadata:{step:e.id,agent:"research",searchQuery:n,resultsCount:r.results.length}}}catch(t){throw new Error(`Failed to process research step ${e.id}: ${t.message}`)}}async handleSearchCommand(e,t,n){t.progress("🔍 Searching the web for current information...");try{const n=await this.webSearchService.search(e);t.markdown("## 🔍 Web Search Results\n\n"),t.markdown(`**Query**: ${n.query}\n`),t.markdown(`**Results Found**: ${n.totalResults}\n\n`);for(let e=0;e<n.results.length;e++){const a=n.results[e];t.markdown(`### ${e+1}. ${a.title}\n`),t.markdown(`**URL**: [${a.url}](${a.url})\n`),t.markdown(`**Summary**: ${a.snippet}\n\n`)}t.progress("🧠 Analyzing search results...");const a=await this.analyzeSearchResults(n,"Provide a comprehensive analysis and synthesis of the search results");t.markdown("## 📊 Analysis & Insights\n\n"),t.markdown(a),n.results.forEach((e,n)=>{this.createActionButton(`📖 Read Source ${n+1}`,"vscode.open",[o.Uri.parse(e.url)],t)})}catch(e){t.markdown(`❌ Search failed: ${e.message}`)}}async handleDocumentationCommand(e,t,n){t.progress("📚 Searching for technical documentation...");const a=`${e} documentation tutorial guide API reference`;try{const n=await this.webSearchService.search(a);t.markdown("## 📚 Documentation Research\n\n"),t.markdown(`**Topic**: ${e}\n\n`);const r=n.results.filter(e=>e.url.includes("docs")||e.url.includes("documentation")||e.url.includes("api")||e.url.includes("guide")||e.title.toLowerCase().includes("documentation")||e.title.toLowerCase().includes("guide"));r.length>0&&(t.markdown("### 📖 Official Documentation Found\n\n"),r.forEach((e,n)=>{t.markdown(`**${n+1}. ${e.title}**\n`),t.markdown(`- [${e.url}](${e.url})\n`),t.markdown(`- ${e.snippet}\n\n`)}));const i=await this.analyzeSearchResults(n,"Provide a comprehensive guide based on the documentation found, including key concepts, usage examples, and best practices");t.markdown("## 📋 Documentation Summary\n\n"),t.markdown(i)}catch(e){t.markdown(`❌ Documentation search failed: ${e.message}`)}}async handleMarketCommand(e,t,n){t.progress("📈 Researching market trends...");const a=`${e} market trends 2024 analysis statistics growth`;try{const n=await this.webSearchService.search(a);t.markdown("## 📈 Market Research\n\n");const r=await this.analyzeSearchResults(n,"Provide a comprehensive market analysis including current trends, growth statistics, key players, opportunities, and challenges");t.markdown(r),this.createActionButton("📊 Create Market Report","ki-autoagent.createFile",[`market_research_${Date.now()}.md`,`# Market Research: ${e}\n\n${r}`],t)}catch(e){t.markdown(`❌ Market research failed: ${e.message}`)}}async handleCompareCommand(e,t,n){t.progress("⚖️ Comparing solutions...");const a=`${e} comparison alternatives pros cons review`;try{const n=await this.webSearchService.search(a);t.markdown("## ⚖️ Comparison Analysis\n\n");const r=await this.analyzeSearchResults(n,"Provide a detailed comparison including pros and cons, use cases, pricing (if available), and recommendations");t.markdown(r),this.createActionButton("📋 Create Comparison Table","ki-autoagent.createComparisonTable",[e,r],t)}catch(e){t.markdown(`❌ Comparison research failed: ${e.message}`)}}async handleGeneralResearchRequest(e,t,n){t.progress("🔍 Conducting research...");try{const n=await this.webSearchService.search(e);t.markdown("## 🔍 Research Summary\n\n"),t.markdown(`**Topic**: ${e}\n`),t.markdown(`**Sources**: ${n.totalResults} results found\n\n`);const a=await this.analyzeSearchResults(n,"Provide comprehensive research findings with key insights, current state, and actionable information");t.markdown(a),n.results.length>0&&(t.markdown("\n## 📚 Key Sources\n\n"),n.results.slice(0,3).forEach((e,n)=>{t.markdown(`${n+1}. [${e.title}](${e.url})\n`)}))}catch(e){t.markdown(`❌ Research failed: ${e.message}`)}}async analyzeSearchResults(e,t){const n=e.results.map(e=>`Title: ${e.title}\nURL: ${e.url}\nContent: ${e.snippet}`).join("\n\n---\n\n"),a=`${t}\n\nSearch Query: ${e.query}\n\nSearch Results:\n${n}\n\nPlease provide a comprehensive analysis based on these search results.`;try{return await this.openAIService.chat([{role:"system",content:"You are ResearchBot, an expert research analyst. Analyze web search results and provide comprehensive, accurate, and actionable insights.\n\nKey principles:\n1. Synthesize information from multiple sources\n2. Highlight key findings and trends\n3. Provide actionable recommendations\n4. Note any conflicting information\n5. Include relevant statistics and data\n6. Maintain objectivity and cite sources when possible\n\nFormat your response with clear headings and bullet points for readability."},{role:"user",content:a}])}catch(e){return`Error analyzing results: ${e.message}`}}}t.ResearchAgent=u},637:function(e,t,n){var a,r=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&r(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.ChatWidget=void 0;const o=s(n(398)),c=n(777);t.ChatWidget=class{constructor(e,t){this.context=e,this.dispatcher=t,this.unreadCount=0,this.lastMessage="",this.statusBarItem=o.window.createStatusBarItem(o.StatusBarAlignment.Right,1e3),this.updateStatusBar(),this.statusBarItem.show(),this.registerCommands(),e.subscriptions.push(this.statusBarItem)}registerCommands(){const e=o.commands.registerCommand("ki-autoagent.toggleChat",()=>this.toggleChat()),t=o.commands.registerCommand("ki-autoagent.quickChat",()=>this.showQuickChat()),n=o.commands.registerCommand("ki-autoagent.clearUnread",()=>this.clearUnreadCount());this.context.subscriptions.push(e,t,n)}updateStatusBar(){let e="$(comment-discussion) KI Chat";this.unreadCount>0?(e=`$(comment-discussion) KI Chat (${this.unreadCount})`,this.statusBarItem.backgroundColor=new o.ThemeColor("statusBarItem.warningBackground"),this.pulseInterval||this.startPulseAnimation()):(this.statusBarItem.backgroundColor=void 0,this.pulseInterval&&this.stopPulseAnimation()),this.statusBarItem.text=e,this.statusBarItem.command="ki-autoagent.toggleChat",this.lastMessage?this.statusBarItem.tooltip=new o.MarkdownString(`**KI AutoAgent Chat**\n\nLast message: _${this.truncateMessage(this.lastMessage)}_\n\nClick to open chat • Right-click for options`):this.statusBarItem.tooltip=new o.MarkdownString("**KI AutoAgent Chat**\n\nClick to open multi-agent chat interface\n\nFeatures:\n• Chat with specialized AI agents\n• Auto-routing to best agent\n• Multi-agent workflows\n\nClick to open • Right-click for options")}startPulseAnimation(){let e=!1;this.pulseInterval=setInterval(()=>{this.statusBarItem.text=e?this.statusBarItem.text.replace("🔴","$(comment-discussion)"):this.statusBarItem.text.replace("$(comment-discussion)","🔴"),e=!e},1e3)}stopPulseAnimation(){this.pulseInterval&&(clearInterval(this.pulseInterval),this.pulseInterval=void 0,this.updateStatusBar())}toggleChat(){const e=c.MultiAgentChatPanel.createOrShow(this.context.extensionUri,this.dispatcher);return this.clearUnreadCount(),e}async showQuickChat(){const e=await o.window.showInputBox({placeHolder:"Type your message for KI AutoAgent...",prompt:"Send a quick message to the AI agents",ignoreFocusOut:!1});if(e){const t=this.toggleChat();t&&(t.addMessage({role:"user",content:e,timestamp:(new Date).toISOString()}),setTimeout(()=>{t.addMessage({role:"assistant",content:"Processing your request...",agent:"orchestrator",timestamp:(new Date).toISOString()})},100))}}updateUnreadCount(e){this.unreadCount=e,this.updateStatusBar()}incrementUnread(){this.unreadCount++,this.updateStatusBar()}clearUnreadCount(){this.unreadCount=0,this.updateStatusBar()}setLastMessage(e,t){this.lastMessage=t?`[${t}] ${e}`:e,this.updateStatusBar()}truncateMessage(e,t=50){return e.length<=t?e:e.substring(0,t)+"..."}showNotification(e,t){c.MultiAgentChatPanel.currentPanel||(o.window.showInformationMessage(`KI Agent ${t}: ${this.truncateMessage(e,100)}`,"Open Chat","Dismiss").then(e=>{"Open Chat"===e&&this.toggleChat()}),this.incrementUnread(),this.setLastMessage(e,t))}dispose(){this.pulseInterval&&clearInterval(this.pulseInterval),this.statusBarItem.dispose()}}},659:function(e,t,n){var a,r=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&r(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.ClaudeWebService=void 0;const o=s(n(398));t.ClaudeWebService=class{constructor(){const e=o.workspace.getConfiguration("kiAutoAgent");this.baseUrl=e.get("claudeWeb.serverUrl","http://localhost:8000"),this.planType=e.get("claudeWeb.planType","pro")}async chat(e,t=.7){if(!await this.checkServerAvailable())throw new Error("Claude Web Proxy server not available. Please start the server first.");try{const n=e.find(e=>"system"===e.role),a=e.filter(e=>"user"===e.role),r=a[a.length-1];if(!r)throw new Error("No user message provided");let i=r.content;n&&(i=`${n.content}\n\nUser: ${i}`);const s=await fetch(`${this.baseUrl}/chat`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({message:i,conversation_id:this.conversationId,temperature:t,plan_type:this.planType})});if(!s.ok){const e=await s.json().catch(()=>({error:"Unknown error"}));throw new Error(`Claude Web API error: ${e.error||s.statusText}`)}const o=await s.json();if(!o.success)throw new Error(`Claude Web error: ${o.error||"Unknown error"}`);return o.conversation_id&&(this.conversationId=o.conversation_id),o.response}catch(e){if(e instanceof Error)throw e;throw new Error(`Claude Web request failed: ${e}`)}}async streamChat(e,t,n=.7){if(!await this.checkServerAvailable())throw new Error("Claude Web Proxy server not available");try{const a=e.find(e=>"system"===e.role),r=e.filter(e=>"user"===e.role),i=r[r.length-1];if(!i)throw new Error("No user message provided");let s=i.content;a&&(s=`${a.content}\n\nUser: ${s}`);const o=await fetch(`${this.baseUrl}/chat/stream`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({message:s,conversation_id:this.conversationId,temperature:n,plan_type:this.planType})});if(!o.ok)throw new Error(`Claude Web streaming error: ${o.statusText}`);const c=o.body?.getReader();if(!c)throw new Error("Failed to get response stream");const l=new TextDecoder;for(;;){const{done:e,value:n}=await c.read();if(e)break;const a=l.decode(n).split("\n").filter(e=>""!==e.trim());for(const e of a)if(e.startsWith("data: ")){const n=e.substring(6);if("[DONE]"===n)return;try{const e=JSON.parse(n);e.chunk&&t(e.chunk),e.conversation_id&&(this.conversationId=e.conversation_id)}catch(e){}}}}catch(e){throw new Error(`Claude Web streaming failed: ${e}`)}}async checkServerAvailable(){try{return(await fetch(`${this.baseUrl}/health`,{method:"GET",timeout:5e3})).ok}catch(e){return!1}}async getServerStatus(){try{const e=await fetch(`${this.baseUrl}/status`,{method:"GET",timeout:5e3});if(e.ok){const t=await e.json();return{available:!0,url:this.baseUrl,version:t.version||"unknown"}}return{available:!1,url:this.baseUrl,error:`Server returned ${e.status}`}}catch(e){return{available:!1,url:this.baseUrl,error:e instanceof Error?e.message:"Connection failed"}}}async resetConversation(){this.conversationId=void 0}async startNewConversation(){try{const e=await fetch(`${this.baseUrl}/conversation/new`,{method:"POST",headers:{"Content-Type":"application/json"}});if(e.ok){const t=await e.json();return this.conversationId=t.conversation_id,this.conversationId}}catch(e){console.error("Failed to start new conversation:",e)}}getConversationId(){return this.conversationId}validateWebAccess(){const e=o.workspace.getConfiguration("kiAutoAgent"),t=e.get("claudeWeb.enabled",!0),n=e.get("claudeWeb.serverUrl","http://localhost:8000");return t&&!!n}async testConnection(){try{return(await this.getServerStatus()).available}catch(e){return!1}}}},693:function(e,t,n){var a,r=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&r(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.WebSearchService=void 0;const o=s(n(398));t.WebSearchService=class{constructor(){this.config=o.workspace.getConfiguration("kiAutoAgent")}async search(e){if(!this.config.get("webAccess.enabled",!0))throw new Error("Web access is disabled in settings");const t=this.config.get("webAccess.searchEngine","perplexity"),n=this.config.get("webAccess.maxResults",5);switch(t){case"perplexity":return await this.searchWithPerplexity(e,n);case"tavily":return await this.searchWithTavily(e,n);case"serp":return await this.searchWithSERP(e,n);case"custom":return await this.searchWithCustom(e,n);default:throw new Error(`Unknown search engine: ${t}`)}}async searchWithPerplexity(e,t){const n=this.config.get("perplexity.apiKey");if(!n)throw new Error("Perplexity API key not configured");try{const a=await fetch("https://api.perplexity.ai/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${n}`},body:JSON.stringify({model:"llama-3.1-sonar-small-128k-online",messages:[{role:"system",content:"You are a helpful research assistant. Provide comprehensive information with sources."},{role:"user",content:`Research and provide detailed information about: ${e}`}],max_tokens:1e3,temperature:.2,return_citations:!0})});if(!a.ok)throw new Error(`Perplexity API error: ${a.statusText}`);const r=await a.json(),i=r.choices[0]?.message?.content||"",s=(r.citations||[]).slice(0,t).map((e,t)=>({title:`Source ${t+1}`,url:e.url||"",snippet:e.text||"",content:i}));return 0===s.length&&i&&s.push({title:"Perplexity Research Result",url:"https://perplexity.ai",snippet:i.substring(0,200)+"...",content:i}),{query:e,results:s,totalResults:s.length}}catch(e){throw new Error(`Perplexity search failed: ${e}`)}}async searchWithTavily(e,t){const n=this.config.get("tavily.apiKey");if(!n)throw new Error("Tavily API key not configured");try{const a=await fetch("https://api.tavily.com/search",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({api_key:n,query:e,search_depth:"advanced",include_answer:!0,include_images:!1,include_raw_content:!0,max_results:t})});if(!a.ok)throw new Error(`Tavily API error: ${a.statusText}`);const r=await a.json();return{query:e,results:(r.results||[]).map(e=>({title:e.title||"",url:e.url||"",snippet:e.content||"",content:e.raw_content||e.content})),totalResults:r.results?.length||0}}catch(e){throw new Error(`Tavily search failed: ${e}`)}}async searchWithSERP(e,t){const n=this.config.get("serp.apiKey");if(!n)throw new Error("SERP API key not configured");try{const a=new URL("https://serpapi.com/search");a.searchParams.append("q",e),a.searchParams.append("api_key",n),a.searchParams.append("engine","google"),a.searchParams.append("num",t.toString());const r=await fetch(a.toString());if(!r.ok)throw new Error(`SERP API error: ${r.statusText}`);const i=await r.json();return{query:e,results:(i.organic_results||[]).map(e=>({title:e.title||"",url:e.link||"",snippet:e.snippet||"",content:e.snippet||""})),totalResults:i.organic_results?.length||0}}catch(e){throw new Error(`SERP search failed: ${e}`)}}async searchWithCustom(e,t){const n=this.config.get("customSearch.endpoint"),a=this.config.get("customSearch.apiKey");if(!n)throw new Error("Custom search endpoint not configured");try{const r=await fetch(n,{method:"POST",headers:{"Content-Type":"application/json",...a&&{Authorization:`Bearer ${a}`}},body:JSON.stringify({query:e,max_results:t})});if(!r.ok)throw new Error(`Custom search API error: ${r.statusText}`);const i=await r.json();return{query:e,results:i.results||[],totalResults:i.total_results||0}}catch(e){throw new Error(`Custom search failed: ${e}`)}}async isWebAccessAvailable(){if(!this.config.get("webAccess.enabled",!0))return!1;switch(this.config.get("webAccess.searchEngine","perplexity")){case"perplexity":return!!this.config.get("perplexity.apiKey");case"tavily":return!!this.config.get("tavily.apiKey");case"serp":return!!this.config.get("serp.apiKey");case"custom":return!!this.config.get("customSearch.endpoint");default:return!1}}getSearchEngineStatus(){const e=this.config.get("webAccess.searchEngine","perplexity");switch(e){case"perplexity":return{engine:"Perplexity",configured:!!this.config.get("perplexity.apiKey")};case"tavily":return{engine:"Tavily",configured:!!this.config.get("tavily.apiKey")};case"serp":return{engine:"SERP API",configured:!!this.config.get("serp.apiKey")};case"custom":return{engine:"Custom",configured:!!this.config.get("customSearch.endpoint")};default:return{engine:e,configured:!1,error:"Unknown search engine"}}}}},777:function(e,t,n){var a,r=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&r(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.MultiAgentChatPanel=void 0;const o=s(n(398));class c{static createOrShow(e,t){const n=o.ViewColumn.Two;if(c.currentPanel)return c.currentPanel._panel.reveal(n),t&&(c.currentPanel._dispatcher=t),c.currentPanel;const a=o.window.createWebviewPanel("multiAgentChat","KI AutoAgent Chat",n,{enableScripts:!0,retainContextWhenHidden:!0,localResourceRoots:[o.Uri.joinPath(e,"media"),o.Uri.joinPath(e,"src","ui","webview")]});return c.currentPanel=new c(a,e,t),c.currentPanel}constructor(e,t,n){this._disposables=[],this._messages=[],this._currentAgent="orchestrator",this._currentMode="auto",this._panel=e,this._extensionUri=t,this._dispatcher=n,this._update(),this._panel.onDidDispose(()=>this.dispose(),null,this._disposables),this._panel.webview.onDidReceiveMessage(e=>this._handleWebviewMessage(e),null,this._disposables),this._panel.onDidChangeViewState(e=>{this._panel.visible&&this._update()},null,this._disposables)}_update(){const e=this._panel.webview;this._panel.title="KI AutoAgent Chat",this._panel.iconPath=o.Uri.joinPath(this._extensionUri,"media","multi-agent-logo.svg"),this._panel.webview.html=this._getHtmlForWebview(e)}_getHtmlForWebview(e){const t=e.asWebviewUri(o.Uri.joinPath(this._extensionUri,"media","reset.css")),n=e.asWebviewUri(o.Uri.joinPath(this._extensionUri,"media","vscode.css")),a=Date.now(),r=e.asWebviewUri(o.Uri.joinPath(this._extensionUri,"src","ui","webview","chat-fixed.css"))+`?v=${a}`,i=e.asWebviewUri(o.Uri.joinPath(this._extensionUri,"src","ui","webview","chat.js")),s=function(){let e="";const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";for(let n=0;n<32;n++)e+=t.charAt(Math.floor(62*Math.random()));return e}();return`<!DOCTYPE html>\n            <html lang="en">\n            <head>\n                <meta charset="UTF-8">\n                <meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src ${e.cspSource} 'unsafe-inline'; script-src 'nonce-${s}';">\n                <meta name="viewport" content="width=device-width, initial-scale=1.0">\n                <link href="${t}" rel="stylesheet">\n                <link href="${n}" rel="stylesheet">\n                <link href="${r}" rel="stylesheet">\n                <title>KI AutoAgent Chat</title>\n            </head>\n            <body>\n                <div id="chat-container">\n                    \x3c!-- Minimalist Header --\x3e\n                    <div id="chat-header">\n                        <h3>KI AutoAgent Chat</h3>\n                        <button id="settings-btn" title="Settings">⚙️</button>\n                    </div>\n                    \n                    \x3c!-- Messages Container --\x3e\n                    <div id="messages-container">\n                        <div class="welcome-message">\n                            <h2>Welcome to KI AutoAgent</h2>\n                            <p>Start a conversation with our AI agents</p>\n                        </div>\n                    </div>\n                    \n                    \x3c!-- Input Section with Bottom Controls --\x3e\n                    <div id="input-section">\n                        <textarea id="message-input" \n                                  placeholder="Message KI AutoAgent..."\n                                  rows="3"></textarea>\n                        \n                        <div id="bottom-controls">\n                            <div id="mode-selector">\n                                <button class="mode-option active" data-agent="auto" title="Automatic agent selection">\n                                    🤖 Auto\n                                </button>\n                                <button class="mode-option" data-agent="architect" title="System architecture & design">\n                                    🏗️ Architect\n                                </button>\n                                <button class="mode-option" data-agent="codesmith" title="Code implementation">\n                                    💻 CodeSmith\n                                </button>\n                                <button class="mode-option" data-agent="tradestrat" title="Trading strategies">\n                                    📈 TradeStrat\n                                </button>\n                                <button class="mode-option" data-agent="research" title="Web research">\n                                    🔍 Research\n                                </button>\n                                <button class="mode-option" data-agent="opus" title="Conflict resolution">\n                                    ⚖️ Opus\n                                </button>\n                            </div>\n                            \n                            <button id="send-btn" title="Send message">\n                                Send\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <script nonce="${s}" src="${i}"><\/script>\n            </body>\n            </html>`}async _handleWebviewMessage(e){switch(e.command){case"sendMessage":await this._processUserMessage(e.text,e.agent,e.mode);break;case"changeAgent":this._currentAgent=e.agent,o.window.showInformationMessage(`Switched to ${e.agent}`);break;case"changeMode":this._currentMode=e.mode,o.window.showInformationMessage(`Mode changed to ${e.mode}`);break;case"clearChat":this._messages=[];break;case"quickAction":await this._handleQuickAction(e.action)}}async _processUserMessage(e,t,n){const a={role:"user",content:e,timestamp:(new Date).toISOString()};this._messages.push(a),this._panel.webview.postMessage({type:"addMessage",message:a}),this._panel.webview.postMessage({type:"showTyping",agent:t});try{if("auto"===n&&this._dispatcher){const t=await this._callAgent("orchestrator",e);this._addAgentResponse(t,"orchestrator")}else if("single"===n){const n=await this._callAgent(t,e);this._addAgentResponse(n,t)}else"workflow"===n&&await this._processWorkflow(e)}catch(e){this._addErrorMessage(`Error: ${e.message}`)}finally{this._panel.webview.postMessage({type:"hideTyping"})}}async _callAgent(e,t){if(!this._dispatcher)return"Error: No dispatcher available. Please check agent configuration.";try{const n={prompt:t,command:e,context:await this._getWorkspaceContext()},a=await this._dispatcher.processRequest(n);return"success"===a.status||"partial_success"===a.status?a.content:`Error: ${a.content}`}catch(e){return`Agent Error: ${e.message}`}}async _getWorkspaceContext(){return{activeEditor:o.window.activeTextEditor,workspaceRoots:o.workspace.workspaceFolders,openDocuments:o.workspace.textDocuments,selectedText:o.window.activeTextEditor?.document.getText(o.window.activeTextEditor.selection),currentFile:o.window.activeTextEditor?.document.fileName}}async _processWorkflow(e){const t=[{agent:"orchestrator",action:"Analyzing request..."},{agent:"architect",action:"Designing solution architecture..."},{agent:"codesmith",action:"Implementing code..."},{agent:"reviewer",action:"Reviewing implementation..."}];for(const e of t){const t={role:"agent-to-agent",content:e.action,agent:e.agent,timestamp:(new Date).toISOString(),isCollapsible:!0};this._messages.push(t),this._panel.webview.postMessage({type:"addMessage",message:t}),await new Promise(e=>setTimeout(e,500))}this._addAgentResponse("Workflow completed successfully!","orchestrator")}_addAgentResponse(e,t){const n={role:"assistant",content:e,agent:t,timestamp:(new Date).toISOString(),isCollapsible:e.length>500};this._messages.push(n),this._panel.webview.postMessage({type:"addMessage",message:n})}_addErrorMessage(e){const t={role:"system",content:e,timestamp:(new Date).toISOString()};this._messages.push(t),this._panel.webview.postMessage({type:"addMessage",message:t})}async _handleQuickAction(e){switch(e){case"help":this._addAgentResponse("## KI AutoAgent Help\n\n**Modes:**\n- **Auto**: Automatically routes to the best agent\n- **Single**: Direct chat with selected agent\n- **Workflow**: Multi-agent collaboration\n\n**Commands:**\n- Type your question and press Enter\n- Use Shift+Enter for multiline input\n- Select agents from dropdown\n","system");break;case"examples":this._addAgentResponse('## Example Prompts\n\n**Architecture:**\n"Design a microservices architecture for an e-commerce platform"\n\n**Coding:**\n"Implement a REST API with FastAPI and PostgreSQL"\n\n**Trading:**\n"Create a momentum trading strategy with risk management"\n\n**Research:**\n"Find the latest best practices for React performance optimization"\n',"system");break;case"agents":this._addAgentResponse("## Available Agents\n\n🤖 **Orchestrator**: Automatic task routing\n🏗️ **ArchitectGPT**: System design and architecture\n💻 **CodeSmithClaude**: Code implementation\n📈 **TradeStrat**: Trading strategies\n🔍 **ResearchBot**: Web research\n⚖️ **OpusRichter**: Quality judgment\n📝 **DocuBot**: Documentation\n👁️ **ReviewerGPT**: Code review\n🔧 **FixerBot**: Bug fixing\n","system")}}addMessage(e){this._messages.push(e),this._panel.webview.postMessage({type:"addMessage",message:e})}dispose(){for(c.currentPanel=void 0,this._panel.dispose();this._disposables.length;){const e=this._disposables.pop();e&&e.dispose()}}}t.MultiAgentChatPanel=c},806:function(e,t,n){var a,r=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&r(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.ChatAgent=void 0;const o=s(n(398));t.ChatAgent=class{constructor(e,t,n){this.config=e,this.stats={totalExecutions:0,successCount:0,totalResponseTime:0,lastExecution:void 0},this.context=t,this.dispatcher=n}createHandler(){return async(e,t,n,a)=>{const r=Date.now();this.stats.totalExecutions++,this.stats.lastExecution=new Date;try{n.progress(`🤖 ${this.config.fullName} is working...`),await this.handleRequest(e,t,n,a),this.stats.successCount++,this.stats.totalResponseTime+=Date.now()-r}catch(e){await this.handleError(e,n),this.stats.totalResponseTime+=Date.now()-r}}}async executeStep(e,t,n){try{return await this.processWorkflowStep(e,t,n)}catch(t){return{status:"error",content:`Error executing ${e.description}: ${t.message}`,metadata:{error:t.message,step:e.id}}}}async handleCommand(e,t,n,a){const r=this.config.commands.find(t=>t.name===e);if(r){const i=r.handler;"function"==typeof this[i]?await this[i](t,n,a):n.markdown(`❌ Command handler '${i}' not implemented for ${e}`)}else n.markdown(`❌ Unknown command: /${e}`),await this.showAvailableCommands(n)}async showAvailableCommands(e){e.markdown(`## Available Commands for ${this.config.fullName}\n\n`);for(const t of this.config.commands)e.markdown(`- **/${t.name}** - ${t.description}\n`);e.markdown(`\n💡 Use \`@${this.config.name} /<command> <your request>\``)}async getWorkspaceContext(){const e=await this.dispatcher.getWorkspaceContext();let t="";return e.currentFile&&(t+=`Current file: ${e.currentFile}\n`),e.selectedText&&(t+=`Selected text:\n\`\`\`\n${e.selectedText}\n\`\`\`\n`),e.workspaceRoots&&e.workspaceRoots.length>0&&(t+=`Workspace: ${e.workspaceRoots[0].name}\n`),t}renderCode(e,t,n,a){a&&n.markdown(`### ${a}\n\n`),n.markdown(`\`\`\`${t}\n${e}\n\`\`\`\n\n`)}createActionButton(e,t,n,a){a.button({command:t,title:e,arguments:n})}addFileReference(e,t){try{const n=o.Uri.file(e);t.reference(n)}catch(e){console.error("Error adding file reference:",e)}}async handleError(e,t){console.error(`Error in ${this.config.fullName}:`,e),t.markdown(`❌ **Error**: ${e.message}\n\n`),t.markdown("💡 **Suggestions:**\n"),t.markdown("- Check your API keys in settings\n"),t.markdown("- Verify your internet connection\n"),t.markdown("- Try rephrasing your request\n"),this.createActionButton("Show Help","ki-autoagent.showHelp",[this.config.participantId],t)}getStats(){return{...this.stats,successRate:this.stats.totalExecutions>0?this.stats.successCount/this.stats.totalExecutions:0,averageResponseTime:this.stats.totalExecutions>0?this.stats.totalResponseTime/this.stats.totalExecutions:0}}getModelConfig(){const e=o.workspace.getConfiguration("kiAutoAgent");let t,n=this.config.model;switch(n){case"gpt-4o":case"gpt-4o-mini":t=e.get("openai.apiKey");break;case"claude-3.5-sonnet":t=e.get("anthropic.apiKey");break;case"perplexity-pro":t=e.get("perplexity.apiKey")}return{model:n,apiKey:t}}validateApiConfig(){const{apiKey:e}=this.getModelConfig();return!!e}getMaxTokens(){return o.workspace.getConfiguration("kiAutoAgent").get("maxTokens",4e3)}isLoggingEnabled(){return o.workspace.getConfiguration("kiAutoAgent").get("enableLogging",!0)}log(e,t="info"){if(this.isLoggingEnabled()){const n=(new Date).toISOString();console[t](`[${n}] ${this.config.fullName}: ${e}`)}}}},930:function(e,t,n){var a,r=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=a(e),s=0;s<n.length;s++)"default"!==n[s]&&r(t,e,n[s]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.TradeStratAgent=void 0;const o=s(n(398)),c=n(806),l=n(167),d=n(659);class u extends c.ChatAgent{constructor(e,t){super({participantId:"ki-autoagent.tradestrat",name:"tradestrat",fullName:"TradeStrat",description:"Trading Strategy Expert powered by Claude 3.5 Sonnet",model:"claude-3.5-sonnet",iconPath:o.Uri.joinPath(e.extensionUri,"media","trading-icon.svg"),capabilities:["Trading Strategy Development","RON Strategy Implementation","Backtesting Frameworks","Risk Management","Portfolio Optimization","Market Analysis"],commands:[{name:"strategy",description:"Develop and implement trading strategies",handler:"handleStrategyCommand"},{name:"backtest",description:"Create backtesting and validation systems",handler:"handleBacktestCommand"},{name:"risk",description:"Implement risk management and portfolio optimization",handler:"handleRiskCommand"}]},e,t),this.anthropicService=new l.AnthropicService,this.claudeWebService=new d.ClaudeWebService}async handleRequest(e,t,n,a){if(!await this.validateServiceConfig(n))return;const r=e.command,i=e.prompt;this.log(`Processing ${r?`/${r}`:"general"} trading request: ${i.substring(0,100)}...`),r?await this.handleCommand(r,i,n,a):await this.handleGeneralTradingRequest(i,n,a)}async processWorkflowStep(e,t,n){const a=await this.getWorkspaceContext();let r="",i="";switch(e.id){case"strategy_design":r=this.getStrategyDesignSystemPrompt(),i=`Design a trading strategy for: ${t.prompt}\n\nWorkspace Context:\n${a}`;break;case"backtest":r=this.getBacktestSystemPrompt(),i=`Create backtesting framework for: ${t.prompt}\n\nStrategy Design:\n${this.extractPreviousContent(n)}`;break;case"risk_analysis":r=this.getRiskAnalysisSystemPrompt(),i=`Analyze risk management for: ${t.prompt}\n\nContext:\n${a}`;break;case"strategy_validation":r=this.getValidationSystemPrompt(),i=`Validate trading strategy: ${t.prompt}\n\nImplementation:\n${this.extractPreviousContent(n)}`;break;default:r=this.getGeneralSystemPrompt(),i=`${t.prompt}\n\nContext:\n${a}`}try{const t=await this.getClaudeService();return{status:"success",content:await t.chat([{role:"system",content:r},{role:"user",content:i}]),metadata:{step:e.id,agent:"tradestrat",model:"claude-3.5-sonnet"}}}catch(t){throw new Error(`Failed to process ${e.id}: ${t.message}`)}}async handleStrategyCommand(e,t,n){t.progress("📈 Developing trading strategy...");const a=await this.getWorkspaceContext(),r=this.getStrategyDesignSystemPrompt(),i=`Develop a comprehensive trading strategy for: ${e}\n\nWorkspace Context:\n${a}`;try{const n=await this.getClaudeService(),a=await n.chat([{role:"system",content:r},{role:"user",content:i}]);t.markdown(a);const s=this.extractPythonCode(a);s&&this.createActionButton("⚡ Implement Strategy","ki-autoagent.createFile",["strategy.py",s],t),this.createActionButton("🧪 Create Backtest","ki-autoagent.createBacktest",[e,a],t),this.createActionButton("⚠️ Analyze Risks","ki-autoagent.analyzeRisks",[e,a],t)}catch(e){t.markdown(`❌ Error developing strategy: ${e.message}`)}}async handleBacktestCommand(e,t,n){t.progress("🧪 Creating backtesting framework...");const a=await this.getWorkspaceContext(),r=this.getBacktestSystemPrompt(),i=`Create a comprehensive backtesting framework for: ${e}\n\nWorkspace Context:\n${a}`;try{const n=await this.getClaudeService(),a=await n.chat([{role:"system",content:r},{role:"user",content:i}]);t.markdown(a);const s=this.extractPythonCode(a);s&&this.createActionButton("📊 Create Backtest Framework","ki-autoagent.createFile",["backtest_engine.py",s],t),this.createActionButton("📈 Generate Test Data","ki-autoagent.generateTestData",[e],t)}catch(e){t.markdown(`❌ Error creating backtesting framework: ${e.message}`)}}async handleRiskCommand(e,t,n){t.progress("⚠️ Implementing risk management...");const a=await this.getWorkspaceContext(),r=this.getRiskManagementSystemPrompt(),i=`Implement comprehensive risk management for: ${e}\n\nWorkspace Context:\n${a}`;try{const n=await this.getClaudeService(),a=await n.chat([{role:"system",content:r},{role:"user",content:i}]);t.markdown(a);const s=this.extractPythonCode(a);s&&this.createActionButton("🛡️ Implement Risk Management","ki-autoagent.createFile",["risk_manager.py",s],t),this.createActionButton("📊 Optimize Portfolio","ki-autoagent.optimizePortfolio",[e,a],t)}catch(e){t.markdown(`❌ Error implementing risk management: ${e.message}`)}}async handleGeneralTradingRequest(e,t,n){t.progress("💹 Processing trading request...");const a=await this.getWorkspaceContext(),r=this.getGeneralSystemPrompt(),i=`${e}\n\nWorkspace Context:\n${a}`;try{const n=await this.getClaudeService(),a=await n.chat([{role:"system",content:r},{role:"user",content:i}]);t.markdown(a),(e.toLowerCase().includes("ron")||a.toLowerCase().includes("ron strategy"))&&this.createActionButton("🎯 Implement RON Strategy","ki-autoagent.implementRON",[a],t);const s=this.extractPythonCode(a);s&&this.createActionButton("⚡ Implement Code","ki-autoagent.createFile",["trading_implementation.py",s],t)}catch(e){t.markdown(`❌ Error processing trading request: ${e.message}`)}}getGeneralSystemPrompt(){return"You are TradeStrat, an expert trading strategy developer and quantitative analyst. You specialize in:\n\n- Trading strategy design and implementation\n- Algorithmic trading systems\n- Risk management and portfolio optimization\n- Backtesting and performance analysis\n- Market microstructure and execution\n- RON (Reversal of Numbers) strategy implementation\n- Python-based trading systems (pandas, numpy, streamlit, yfinance)\n\nKey principles:\n1. Always prioritize risk management\n2. Implement robust backtesting before live trading\n3. Focus on statistical significance and edge detection\n4. Consider market conditions and regime changes\n5. Provide clear performance metrics and validation\n\nFormat your responses with detailed explanations, working code, and practical implementation guidance."}getStrategyDesignSystemPrompt(){return"You are TradeStrat designing a comprehensive trading strategy. Structure your response as:\n\n## Trading Strategy Design\n\n### 1. Strategy Overview\n- Strategy name and concept\n- Market conditions and timeframes\n- Expected holding periods\n- Target assets/markets\n\n### 2. Entry Rules\n- Precise entry conditions\n- Technical indicators required\n- Fundamental filters (if any)\n- Signal confirmation methods\n\n### 3. Exit Rules\n- Profit-taking strategies\n- Stop-loss implementation\n- Time-based exits\n- Market condition exits\n\n### 4. Risk Management\n- Position sizing methodology\n- Maximum drawdown limits\n- Correlation and diversification\n- Portfolio-level risk controls\n\n### 5. Implementation Details\n- Required data sources\n- Calculation methodology\n- Code structure and modules\n- Performance monitoring\n\n### 6. Backtesting Framework\n- Historical data requirements\n- Performance metrics to track\n- Stress testing scenarios\n- Out-of-sample validation\n\nProvide complete Python implementation with pandas/numpy for data handling."}getBacktestSystemPrompt(){return"You are TradeStrat creating a robust backtesting framework. Include:\n\n## Backtesting Framework Design\n\n### 1. Data Management\n- Historical data ingestion\n- Data cleaning and validation\n- Corporate actions handling\n- Survivorship bias considerations\n\n### 2. Signal Generation\n- Strategy logic implementation\n- Signal timing and execution\n- Lookahead bias prevention\n- Realistic latency modeling\n\n### 3. Execution Simulation\n- Order execution modeling\n- Slippage and transaction costs\n- Market impact considerations\n- Partial fill handling\n\n### 4. Performance Metrics\n- Return calculations\n- Risk-adjusted metrics (Sharpe, Sortino)\n- Drawdown analysis\n- Trade-level statistics\n\n### 5. Visualization and Reporting\n- Equity curve plotting\n- Trade analysis charts\n- Performance attribution\n- Stress test results\n\n### 6. Validation Techniques\n- Out-of-sample testing\n- Walk-forward analysis\n- Monte Carlo simulation\n- Bootstrap analysis\n\nProvide production-ready Python code with proper error handling and logging."}getRiskManagementSystemPrompt(){return"You are TradeStrat implementing comprehensive risk management. Cover:\n\n## Risk Management Framework\n\n### 1. Position Sizing\n- Kelly criterion implementation\n- Volatility-based sizing\n- Maximum position limits\n- Correlation adjustments\n\n### 2. Portfolio Risk Controls\n- Value-at-Risk (VaR) calculation\n- Expected Shortfall (ES)\n- Maximum drawdown limits\n- Sector/asset concentration limits\n\n### 3. Dynamic Risk Adjustment\n- Volatility regime detection\n- Risk scaling mechanisms\n- Market stress indicators\n- Emergency stop procedures\n\n### 4. Monitoring and Alerts\n- Real-time risk metrics\n- Breach notifications\n- Performance tracking\n- Risk attribution analysis\n\n### 5. Stress Testing\n- Historical scenario analysis\n- Monte Carlo stress tests\n- Tail risk evaluation\n- Correlation breakdown scenarios\n\n### 6. Implementation Tools\n- Risk calculation engines\n- Alert systems\n- Reporting dashboards\n- Integration with trading systems\n\nFocus on practical, implementable solutions with clear mathematical foundations."}getValidationSystemPrompt(){return"You are TradeStrat validating trading strategies for production readiness. Analyze:\n\n## Strategy Validation Checklist\n\n### 1. Statistical Validation\n- Statistical significance of returns\n- Consistency across time periods\n- Performance in different market regimes\n- Correlation with market factors\n\n### 2. Implementation Validation\n- Code correctness and efficiency\n- Data quality and completeness\n- Signal generation accuracy\n- Execution logic verification\n\n### 3. Risk Validation\n- Maximum drawdown analysis\n- Tail risk assessment\n- Stress test results\n- Portfolio-level impact\n\n### 4. Operational Validation\n- System reliability and uptime\n- Error handling and recovery\n- Monitoring and alerting\n- Compliance requirements\n\n### 5. Performance Validation\n- Live vs backtest performance\n- Transaction cost impact\n- Capacity constraints\n- Scalability considerations\n\nProvide detailed assessment with specific recommendations for improvement."}getRiskAnalysisSystemPrompt(){return this.getRiskManagementSystemPrompt()}async validateServiceConfig(e){const t=o.workspace.getConfiguration("kiAutoAgent"),n=t.get("serviceMode","web");if("api"===n){if(!t.get("anthropic.apiKey"))return e&&e.markdown('❌ **Anthropic API key not configured**\n\nPlease set your API key in VS Code settings:\n- Go to Settings\n- Search for "KI AutoAgent"\n- Set your Anthropic API key'),!1}else if("web"===n&&!await this.claudeWebService.testConnection()){if(e){const t=await this.claudeWebService.getServerStatus();e.markdown(`❌ **Claude Web Service not available**\n\nError: ${t.error||"Connection failed"}\n\n**To fix this:**\n1. Make sure Claude Web Proxy server is running\n2. Check server URL: ${t.url}\n3. Ensure you're logged into Claude.ai in your browser`)}return!1}return!0}async getClaudeService(){return"web"===o.workspace.getConfiguration("kiAutoAgent").get("serviceMode","web")?{chat:async e=>await this.claudeWebService.chat(e)}:{chat:async e=>await this.anthropicService.chat(e)}}extractPythonCode(e){const t=/```python\n([\s\S]*?)```/g.exec(e);return t?t[1]:""}extractPreviousContent(e){return e.map(e=>e.content).join("\n\n---\n\n").substring(0,2e3)}}t.TradeStratAgent=u}},t={},n=function n(a){var r=t[a];if(void 0!==r)return r.exports;var i=t[a]={exports:{}};return e[a].call(i.exports,i,i.exports,n),i.exports}(265);module.exports=n})();