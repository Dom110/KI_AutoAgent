(()=>{"use strict";var e={86:e=>{e.exports=require("ws")},159:function(e,n,t){var s,o=this&&this.__createBinding||(Object.create?function(e,n,t,s){void 0===s&&(s=t);var o=Object.getOwnPropertyDescriptor(n,t);o&&!("get"in o?!n.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,s,o)}:function(e,n,t,s){void 0===s&&(s=t),e[s]=n[t]}),a=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var n=[];for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[n.length]=t);return n},s(e)},function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t=s(e),i=0;i<t.length;i++)"default"!==t[i]&&o(n,e,t[i]);return a(n,e),n});Object.defineProperty(n,"__esModule",{value:!0}),n.ModelSettingsManager=void 0;const r=i(t(398));class c{constructor(e){this.cachedModels=new Map,this.backendClient=e}static getInstance(e){return c.instance||(c.instance=new c(e)),c.instance}async refreshAvailableModels(){try{const e=await fetch(`http://${this.backendClient.getBackendUrl()}/api/models`),n=await e.json();for(const e of["openai","anthropic","perplexity"]){const n=await fetch(`http://${this.backendClient.getBackendUrl()}/api/models/${e}`),t=await n.json();this.cachedModels.set(e,t)}await this.updateSettingsSchema();const t=n;r.window.showInformationMessage(`✅ Model discovery complete! Found models from ${Object.keys(t).length} providers`)}catch(e){console.error("Failed to refresh models:",e),r.window.showWarningMessage("⚠️ Failed to discover AI models. Using defaults.")}}async discoverModelsOnStartup(){try{console.log("🔍 Discovering available AI models with descriptions...");const e=await fetch(`http://${this.backendClient.getBackendUrl()}/api/models/descriptions`);if(!e.ok){if(404===e.status)return void console.log("ℹ️  Model discovery not available in v6 backend (using defaults)");throw new Error(`HTTP ${e.status}: ${e.statusText}`)}const n=await e.json();this.cachedModels.clear();for(const[e,t]of Object.entries(n)){const n=t;this.cachedModels.set(e,{provider:e,models:n.models.map(e=>e.id),latest:n.models.slice(0,3).map(e=>e.id),recommended:n.recommended,descriptions:n.models})}console.log(`✅ Discovered ${n.openai.total} GPT models, ${n.anthropic.total} Claude models, ${n.perplexity.total} Perplexity models`),r.window.showInformationMessage(`🤖 Model Discovery Complete!\n• ${n.openai.total} GPT models (incl. Realtime, o1)\n• ${n.anthropic.total} Claude models (Opus, Sonnet)\n• ${n.perplexity.total} Perplexity models (Research)`)}catch(e){console.log("ℹ️  Model discovery not available (using defaults)")}}async showRichModelPicker(e,n){const t=this.cachedModels.get(e);if(!t||!t.descriptions){await this.discoverModelsOnStartup();const t=this.cachedModels.get(e);return t&&t.descriptions?this.showRichModelPicker(e,n):void r.window.showWarningMessage(`No models available for ${e}`)}const s=t.descriptions.map(e=>{const n=`${e.costPerMToken.input}/${e.costPerMToken.output} $/M tokens`,t=e.pros.join(", "),s=e.cons.join(", ");return{label:`$(star-full) ${e.name}`,description:`${e.tier} • ${n}`,detail:`✅ Best for: ${e.bestFor}\n👍 Pros: ${t}\n👎 Cons: ${s}`,model:e.id}});if(t.recommended){const e=Object.values(t.recommended);s.forEach(n=>{e.includes(n.model)&&(n.label=`⭐ ${n.label} (Recommended)`)})}const o=await r.window.showQuickPick(s,{placeHolder:n?`Select model for ${n}`:`Select ${e} model`,title:`${e.toUpperCase()} Model Selection`,matchOnDescription:!0,matchOnDetail:!0});return o?o.model:void 0}async updateSettingsSchema(){const e=this.cachedModels.get("openai"),n=this.cachedModels.get("anthropic"),t=this.cachedModels.get("perplexity");e&&e.latest.length>0&&console.log(`OpenAI models available: ${e.latest.join(", ")}`),n&&n.latest.length>0&&console.log(`Anthropic models available: ${n.latest.join(", ")}`),t&&t.latest.length>0&&console.log(`Perplexity models available: ${t.latest.join(", ")}`)}getAgentModel(e){const n=r.workspace.getConfiguration("kiAutoAgent.models");return{architect:n.get("openai.architect")||"gpt-4o-2024-11-20",orchestrator:n.get("openai.orchestrator")||"gpt-4o-2024-11-20",docubot:n.get("openai.docubot")||"gpt-4o-2024-11-20",reviewer:n.get("openai.reviewer")||"gpt-4o-mini-2024-07-18",performancebot:n.get("openai.performancebot")||"gpt-4o-2024-11-20",codesmith:n.get("anthropic.codesmith")||"claude-3.5-sonnet-20241022",fixer:n.get("anthropic.fixer")||"claude-3.5-sonnet-20241022",tradestrat:n.get("anthropic.tradestrat")||"claude-3.5-sonnet-20241022",opus:n.get("anthropic.opus")||"claude-3-opus-20240229",research:n.get("perplexity.research")||"llama-3.1-sonar-huge-128k-online"}[e.toLowerCase()]||"gpt-4o-2024-11-20"}async showModelSelectionPicker(e){const n=this.cachedModels.get(e);n&&0!==n.models.length||await this.refreshAvailableModels();const t=this.cachedModels.get(e)?.models||[];if(0===t.length)return void r.window.showWarningMessage(`No models available for ${e}`);const s=t.map(n=>({label:n,description:this.getModelDescription(n),detail:this.isRecommended(e,n)?"⭐ Recommended":void 0})),o=await r.window.showQuickPick(s,{placeHolder:`Select a ${e} model`,title:`${e.toUpperCase()} Model Selection`});return o?.label}getModelDescription(e){return e.includes("gpt-5")?"🚀 Latest GPT-5 model":e.includes("gpt-4o")?"⚡ Optimized GPT-4":e.includes("gpt-4")?"🧠 GPT-4 model":e.includes("mini")?"💨 Fast, lightweight model":e.includes("opus")?"🎭 Most capable Claude model":e.includes("sonnet")?"🎵 Balanced Claude model":e.includes("haiku")?"⚡ Fast Claude model":e.includes("huge")?"🔍 Most capable search model":e.includes("large")?"📊 Large search model":e.includes("small")?"💨 Fast search model":"🤖 AI Model"}isRecommended(e,n){const t=this.cachedModels.get(e);return!!t&&Object.values(t.recommended).includes(n)}registerCommands(e){e.subscriptions.push(r.commands.registerCommand("ki-autoagent.refreshModels",async()=>{await r.window.withProgress({location:r.ProgressLocation.Notification,title:"Discovering AI Models",cancellable:!1},async e=>{e.report({message:"Querying API endpoints..."}),await this.discoverModelsOnStartup()})})),e.subscriptions.push(r.commands.registerCommand("ki-autoagent.configureAgentModels",async()=>{const e=await r.window.showQuickPick([{label:"🎯 Orchestrator",id:"orchestrator",provider:"openai"},{label:"🏗️ Architect",id:"architect",provider:"openai"},{label:"💻 CodeSmith",id:"codesmith",provider:"anthropic"},{label:"🔍 Reviewer",id:"reviewer",provider:"openai"},{label:"🔧 Fixer",id:"fixer",provider:"anthropic"},{label:"📝 DocBot",id:"docubot",provider:"openai"},{label:"🔬 Research",id:"research",provider:"perplexity"},{label:"📈 TradeStrat",id:"tradestrat",provider:"anthropic"},{label:"⚖️ OpusArbitrator",id:"opus",provider:"anthropic"},{label:"⚡ Performance",id:"performancebot",provider:"openai"}],{placeHolder:"Select agent to configure model",title:"Agent Model Configuration"});if(!e)return;const n=await this.showRichModelPicker(e.provider,e.id);if(n){const t=r.workspace.getConfiguration("kiAutoAgent.models");await t.update(`${e.provider}.${e.id}`,n,r.ConfigurationTarget.Global),r.window.showInformationMessage(`✅ ${e.label} model set to: ${n}`)}})),e.subscriptions.push(r.commands.registerCommand("ki-autoagent.selectOpenAIModel",async()=>{const e=await this.showRichModelPicker("openai");e&&r.window.showInformationMessage(`Selected GPT model: ${e}\n\nUse "Configure Agent Models" to assign it to a specific agent.`)})),e.subscriptions.push(r.commands.registerCommand("ki-autoagent.selectAnthropicModel",async()=>{const e=await this.showRichModelPicker("anthropic");e&&r.window.showInformationMessage(`Selected Claude model: ${e}\n\nUse "Configure Agent Models" to assign it to a specific agent.`)})),e.subscriptions.push(r.commands.registerCommand("ki-autoagent.selectPerplexityModel",async()=>{const e=await this.showRichModelPicker("perplexity");e&&r.window.showInformationMessage(`Selected Perplexity model: ${e}\n\nUse "Configure Agent Models" to assign it to a specific agent.`)}))}}n.ModelSettingsManager=c},265:function(e,n,t){var s,o=this&&this.__createBinding||(Object.create?function(e,n,t,s){void 0===s&&(s=t);var o=Object.getOwnPropertyDescriptor(n,t);o&&!("get"in o?!n.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,s,o)}:function(e,n,t,s){void 0===s&&(s=t),e[s]=n[t]}),a=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var n=[];for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[n.length]=t);return n},s(e)},function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t=s(e),i=0;i<t.length;i++)"default"!==t[i]&&o(n,e,t[i]);return a(n,e),n});Object.defineProperty(n,"__esModule",{value:!0}),n.activate=async function(e){console.log("🚀 KI AutoAgent v6.0.0: v6 Integration Complete"),g=r.window.createOutputChannel("KI AutoAgent"),g.clear(),g.show(!0),g.appendLine("🚀 KI AutoAgent Extension v6.0.0 Activating"),g.appendLine("============================================"),g.appendLine(`Time: ${(new Date).toLocaleString()}`),g.appendLine(`VS Code Version: ${r.version}`),g.appendLine(""),g.appendLine("🆕 v6.0.0: 12 Intelligence Systems Integrated"),g.appendLine("🆕 v6.0.0: Manual Backend Start Required"),g.appendLine("🆕 v6.0.0: LangGraph Workflow Architecture"),g.appendLine("🆕 v6.0.0: Connects to ws://localhost:8002/ws/chat"),g.appendLine(""),g.appendLine("⚠️  v6.0.0: Extension does NOT auto-start backend"),g.appendLine("📝 Start backend manually: ~/git/KI_AutoAgent/venv/bin/python3 backend/api/server_v6_integrated.py"),g.appendLine(""),g.appendLine("📝 Registering commands..."),function(e){const n=r.commands.registerCommand("ki-autoagent.showChat",()=>{if(!p){const e="ws://localhost:8002/ws/chat";p=c.BackendClient.getInstance(e)}d.MultiAgentChatPanel.createOrShow(e.extensionUri,p)});e.subscriptions.push(n);const t=r.commands.registerCommand("ki-autoagent.showHelp",()=>{r.window.showInformationMessage('KI AutoAgent v6.0.0 - Use Ctrl+Shift+P and type "KI AutoAgent" to see all commands')});e.subscriptions.push(t);const s=r.commands.registerCommand("ki-autoagent.restartBackend",async()=>{if(p){g.appendLine("🔄 Reconnecting to v6 backend...");try{await p.connect(),r.window.showInformationMessage("✅ Reconnected to v6 backend successfully")}catch(e){g.appendLine(`❌ Reconnection failed: ${e.message}`),r.window.showErrorMessage("Failed to reconnect. Start backend manually: ~/git/KI_AutoAgent/venv/bin/python3 backend/api/server_v6_integrated.py")}}else r.window.showWarningMessage("Backend client not initialized")});e.subscriptions.push(s);const o=r.commands.registerCommand("ki-autoagent.showBackendStatus",async()=>{if(p){const e=p.isConnectedToBackend();r.window.showInformationMessage(`v6 Backend: ${e?"Connected ✅":"Disconnected ❌"} | URL: ws://localhost:8002/ws/chat`)}else r.window.showWarningMessage("Backend client not initialized")});e.subscriptions.push(o)}(e),g.appendLine("✅ Commands registered");const n=r.window.createStatusBarItem(r.StatusBarAlignment.Right,100);n.text="🤖 KI AutoAgent",n.tooltip="Click to open KI AutoAgent Chat",n.command="ki-autoagent.showChat",n.show(),e.subscriptions.push(n);try{g.appendLine("ℹ️  v6.0.0: Backend manages .env at ~/.ki_autoagent/config/.env"),g.appendLine("🔌 Initializing Backend Client for v6 server...");const n="ws://localhost:8002/ws/chat";p=c.BackendClient.getInstance(n),g.appendLine("🔗 Connecting to v6 backend WebSocket..."),g.appendLine("📍 URL: ws://localhost:8002/ws/chat");try{await p.connect(),g.appendLine("✅ Connected to v6 backend!")}catch(e){g.appendLine(`❌ Connection failed: ${e.message}`),g.appendLine(""),g.appendLine("⚠️  Backend not running! Start manually:"),g.appendLine("    ~/git/KI_AutoAgent/venv/bin/python3 backend/api/server_v6_integrated.py"),g.appendLine(""),r.window.showWarningMessage("v6 Backend not running. Start manually: ~/git/KI_AutoAgent/venv/bin/python3 backend/api/server_v6_integrated.py")}g.appendLine("🤖 Initializing Model Settings Manager..."),u=l.ModelSettingsManager.getInstance(p),u.registerCommands(e),g.appendLine("ℹ️  v6.0.0: Model discovery disabled (v6 uses default models)"),p.on("response",e=>{g.appendLine(`📨 Agent Response: ${e.agent}`),d.MultiAgentChatPanel.sendMessageToPanel(e)}),p.on("thinking",e=>{g.appendLine(`🤔 Agent Thinking: ${e.agent}`),d.MultiAgentChatPanel.sendMessageToPanel(e)}),p.on("progress",e=>{g.appendLine(`📊 ${e.agent}: ${e.message}`),d.MultiAgentChatPanel.sendMessageToPanel({type:"progress",agent:e.agent,content:e.message})}),p.on("error",e=>{g.appendLine(`❌ Backend Error: ${e.message||e}`),r.window.showErrorMessage(`Backend error: ${e.message||e}`)}),p.on("disconnected",()=>{g.appendLine("❌ Disconnected from backend"),r.window.showWarningMessage("Disconnected from Python backend. Trying to reconnect...")}),p.on("connected",()=>{g.appendLine("✅ Reconnected to backend"),r.window.showInformationMessage("Reconnected to Python backend")}),function(e){const n=r.commands.registerCommand("ki-autoagent.showBackendInstructions",()=>{r.window.createWebviewPanel("backendInstructions","v6 Backend Start Instructions",r.ViewColumn.One,{}).webview.html='\n                <html>\n                <body>\n                    <h1>Start v6 Backend Manually</h1>\n                    <h2>Required for v6.0.0</h2>\n                    <ol>\n                        <li>Open a terminal</li>\n                        <li>Navigate to KI_AutoAgent directory: <code>cd ~/git/KI_AutoAgent</code></li>\n                        <li>Start v6 server: <code>./venv/bin/python3 backend/api/server_v6_integrated.py</code></li>\n                    </ol>\n                    <p>The backend will be available at:</p>\n                    <ul>\n                        <li>HTTP: <a href="http://localhost:8002">http://localhost:8002</a></li>\n                        <li>WebSocket: <code>ws://localhost:8002/ws/chat</code></li>\n                    </ul>\n                    <h3>v6 Features:</h3>\n                    <ul>\n                        <li>✅ Query Classifier</li>\n                        <li>✅ Curiosity System</li>\n                        <li>✅ Predictive System</li>\n                        <li>✅ Neurosymbolic Engine</li>\n                        <li>✅ Tool Registry</li>\n                        <li>✅ Approval Manager</li>\n                        <li>✅ Workflow Adapter</li>\n                        <li>✅ Perplexity Integration</li>\n                        <li>✅ Asimov Rule 3</li>\n                        <li>✅ Learning System</li>\n                        <li>✅ Self-Diagnosis</li>\n                        <li>✅ Memory System v6</li>\n                    </ul>\n                </body>\n                </html>\n            '});e.subscriptions.push(n)}(e),g.appendLine(""),g.appendLine("✅ KI AutoAgent Extension v6.0.0 activated successfully!"),g.appendLine("✅ WebSocket connected to v6 backend: ws://localhost:8002/ws/chat"),g.appendLine("✅ All 12 v6 Intelligence Systems ready"),g.appendLine(""),g.appendLine('Use Ctrl+Shift+P and type "KI AutoAgent" to see available commands'),r.window.showInformationMessage("🤖 KI AutoAgent v6.0.0 is ready! Connected to v6 backend.")}catch(e){g.appendLine(`❌ Activation failed: ${e.message}`),r.window.showErrorMessage(`KI AutoAgent activation failed: ${e.message}`)}},n.deactivate=function(){g.appendLine("🛑 KI AutoAgent Extension deactivating..."),p&&(p.disconnect(),p.dispose()),g.appendLine("✅ Extension deactivated"),g.appendLine("ℹ️  v6 backend keeps running (manual management)"),g.dispose()};const r=i(t(398)),c=t(712),d=t(777),l=t(159);let g,p,u},398:e=>{e.exports=require("vscode")},434:e=>{e.exports=require("events")},712:function(e,n,t){var s,o=this&&this.__createBinding||(Object.create?function(e,n,t,s){void 0===s&&(s=t);var o=Object.getOwnPropertyDescriptor(n,t);o&&!("get"in o?!n.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,s,o)}:function(e,n,t,s){void 0===s&&(s=t),e[s]=n[t]}),a=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var n=[];for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[n.length]=t);return n},s(e)},function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t=s(e),i=0;i<t.length;i++)"default"!==t[i]&&o(n,e,t[i]);return a(n,e),n}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.BackendClient=void 0;const c=i(t(398)),d=r(t(86)),l=t(434);class g extends l.EventEmitter{constructor(e){super(),this.wsUrl=e,this.ws=null,this.reconnectTimer=null,this.reconnectAttempts=0,this.maxReconnectAttempts=5,this.isConnected=!1,this.messageQueue=[],this.debugChannel=null,this.outputChannel=c.window.createOutputChannel("Backend Client")}getBackendUrl(){const e=this.wsUrl.match(/ws:\/\/([^\/]+)/);return e?e[1]:"localhost:8002"}setDebugChannel(e){this.debugChannel=e,this.log("🔗 Debug channel connected to BackendClient")}log(e){this.outputChannel.appendLine(e),this.debugChannel&&this.debugChannel.appendLine(`[BackendClient] ${e}`)}static getInstance(e){if(!e){const n=c.workspace.getConfiguration("kiAutoAgent").get("backend.url","localhost:8002");e=`${n.startsWith("https")?"wss":"ws"}://${n.replace(/^https?:\/\//,"")}/ws/chat`}return g.instance||(g.instance=new g(e)),g.instance}async connect(){return new Promise((e,n)=>{try{const t=c.workspace.workspaceFolders,s=t&&t.length>0?t[0].uri.fsPath:null;if(!s){const e=new Error("No workspace folder open. Please open a folder or workspace.");return this.log(`❌ ${e.message}`),void n(e)}this.log(`🔌 Connecting to backend at ${this.wsUrl}...`),this.log(`📂 Workspace: ${s}`),this.ws=new d.default(this.wsUrl);let o=!1;this.ws.on("open",()=>{this.log("✅ WebSocket connected, waiting for server handshake...")}),this.ws.on("message",t=>{try{const a=JSON.parse(t.toString());if("connected"!==a.type||o)"initialized"===a.type?(o=!0,this.isConnected=!0,this.reconnectAttempts=0,this.log(`✅ Workspace initialized: ${a.workspace_path}`),this.log(`🔑 Session ID: ${a.session_id}`),this.emit("connected"),this.processMessageQueue(),e()):"error"===a.type?(this.log(`❌ Server error: ${a.message||a.error}`),o||n(new Error(a.message||"Initialization failed"))):this.handleMessage(a);else{this.log("📩 Received server welcome, sending init message...");const e={type:"init",workspace_path:s};this.ws?.send(JSON.stringify(e)),this.log(`📤 Sent init message with workspace: ${s}`)}}catch(e){this.log(`❌ Failed to parse message: ${e}`)}}),this.ws.on("error",e=>{this.log(`❌ WebSocket error: ${e.message}`),this.emit("error",e),this.isConnected||n(e)}),this.ws.on("close",()=>{this.isConnected=!1,this.log("❌ Disconnected from backend"),this.emit("disconnected"),this.scheduleReconnect()})}catch(e){this.log(`❌ Connection failed: ${e}`),n(e)}})}async sendChatMessage(e){const n={type:"chat",content:e.prompt,agent:e.agent||"orchestrator",metadata:{context:e.context,command:e.command,thinkingMode:e.thinkingMode,mode:e.mode}};return this.sendMessage(n)}async sendCommand(e,n={}){const t={type:"command",content:e,metadata:n};return this.sendMessage(t)}async sendWorkflow(e){const n={type:"workflow",metadata:{workflow:e}};return this.sendMessage(n)}async sendMessage(e){if(!this.isConnected||!this.ws)return this.log("⚠️ Not connected, queuing message"),this.messageQueue.push(e),void(this.reconnectTimer||await this.connect());try{this.ws.send(JSON.stringify(e)),this.log(`📤 Sent: ${e.type}`)}catch(n){throw this.log(`❌ Failed to send message: ${n}`),this.messageQueue.push(e),n}}handleMessage(e){const n=e;let t=`📨 Received: ${e.type}`;switch(e.agent&&(t+=` [${e.agent}]`),n.next_agent&&(t+=` → ${n.next_agent}`),this.log(t),this.debugChannel&&this.debugChannel.appendLine(`[PAYLOAD] ${JSON.stringify(e,null,2)}`),e.type){case"connection":case"connected":this.emit("welcome",e);break;case"agent_thinking":this.log(`💭 ${e.agent||"Agent"} thinking: ${e.content||e.message||""}`),this.emit("thinking",e),this.emit("agent_activity",e);break;case"response":this.log(`✅ LangGraph Response: ${e.agent||"orchestrator"} - Content: ${e.content?"Present":"Missing"}`),e.content&&this.log(`📝 Content preview: ${e.content.substring(0,100)}...`),this.emit("response",e);break;case"step_completed":this.log(`📊 Step Completed: ${e.agent||"orchestrator"}`),this.emit("step_completed",e);break;case"agent_progress":const n=e.message||e.content||"";if(!n||"undefined"===n){this.log(`⚠️ Skipping agent_progress with undefined content from ${e.agent}`);break}this.log(`📊 Agent Progress: ${e.agent} - ${n}`),this.emit("progress",e),this.emit("agent_activity",e);break;case"agent_response":this.log(`✅ Agent Response: ${e.agent} - Status: ${e.status}`),"error"===e.status&&this.log(`❌ Error Details: ${e.content}`),this.emit("response",e);break;case"stream_chunk":if(e.done)this.emit("response",{...e,type:"agent_response"});else{const n=e.content||e.message||"";if(!n||"undefined"===n){this.log(`⚠️ Skipping stream_chunk with undefined content from ${e.agent}`);break}this.emit("progress",e)}break;case"error":this.log(`❌ ERROR: ${e.message||e.error||JSON.stringify(e)}`),e.agent&&this.log(`   Agent: ${e.agent}`),e.details&&this.log(`   Details: ${JSON.stringify(e.details)}`),this.emit("error",e);break;case"complete":this.emit("complete",e);break;case"session_restore":this.log(`🔄 Session restore: ${e.status} - ${e.message}`),this.emit("session_restore",e);break;case"architecture_proposal":case"architecture_proposal_revised":this.log("🏛️ Architecture Proposal "+("architecture_proposal_revised"===e.type?"(Revised)":"")),this.log("📋 Proposal data: "+(e.proposal?"Present":"Missing")),this.emit(e.type,e);break;case"architectureApprovalProcessed":this.log(`✅ Architecture approval processed: ${e.decision}`),this.emit("architectureApprovalProcessed",e);break;case"agent_complete":this.log(`✅ ${e.agent} completed: ${e.content||""}`),this.emit("agent_activity",e);break;case"agent_tool_start":case"agent_tool_complete":const t="agent_tool_start"===e.type?"started":"completed";this.log(`🔧 ${e.agent} tool ${t}: ${e.tool} [${e.tool_status}]`),this.emit("agent_activity",e);break;case"status":const s=e;this.log(`📊 v6 Status: ${e.status} - ${e.message}`),s.next_agent&&(this.log(`   🔀 Routing: ${s.next_agent} (confidence: ${s.routing_confidence||"N/A"})`),s.routing_reason&&this.log(`   💭 Reason: ${s.routing_reason}`)),s.asimov_rule_enforced&&this.log(`   ⚖️  ASIMOV RULE ENFORCED: ${s.asimov_rule_enforced}`),this.emit("progress",e);break;case"approval_request":this.log(`🔐 v6 Approval Request: ${e.action_type} - ${e.description}`),this.emit("approval_request",e);break;case"result":const o=e;this.log(`🎉 Workflow Result - Success: ${o.success} - Quality: ${o.quality_score}`),"workflow_complete"===o.subtype&&(this.log(`   ⏱️ Execution Time: ${o.execution_time}`),this.log(`   📊 Agents Completed: ${o.agents_completed?.length||0}`),this.log(`   💾 Files Generated: ${o.files_generated||0}`)),this.emit("result",e),this.emit("workflow_complete",e),this.emit("complete",e);break;case"workflow_complete":this.log(`🎉 v6 Workflow Complete - Quality: ${e.quality_score} - Success: ${e.success}`),this.emit("workflow_complete",e),this.emit("complete",e);break;case"claude_cli_start":this.log(`🚀 Claude CLI Started: ${e.agent} (${e.model})`),this.log(`   Tools: ${e.tools?.join(", ")||"unknown"}`),this.log(`   Permission Mode: ${e.permission_mode||"unknown"}`),this.emit("agent_activity",{type:"agent_activity",activity_type:"agent_progress",agent:e.agent,content:"🚀 Starting Claude CLI code generation...",tool:"claude-cli",tool_status:"running"});break;case"claude_cli_complete":const a=e;this.log(`✅ Claude CLI Complete: ${e.agent}`),this.log("   Duration: "+(a.duration_ms?(a.duration_ms/1e3).toFixed(2)+"s":"unknown")),this.log(`   Events: ${a.events_count||"unknown"}`),this.log(`   Output Length: ${a.output_length||"unknown"} chars`),this.emit("agent_activity",{type:"agent_activity",activity_type:"agent_tool_complete",agent:e.agent,content:`✅ Code generation completed (${a.duration_ms?(a.duration_ms/1e3).toFixed(1)+"s":"unknown"})`,tool:"claude-cli",tool_status:"success"});break;case"claude_cli_error":const i=e;this.log(`❌ Claude CLI Error: ${e.agent}`),this.log(`   Error Type: ${i.error_type||"unknown"}`),this.log(`   Error: ${i.error||"unknown"}`),this.emit("agent_activity",{type:"agent_activity",activity_type:"agent_tool_complete",agent:e.agent,content:`❌ Code generation failed: ${i.error||"unknown error"}`,tool:"claude-cli",tool_status:"error"}),this.emit("error",{type:"error",agent:e.agent,message:`Claude CLI error: ${i.error}`,details:{error_type:i.error_type,duration_ms:i.duration_ms}});break;case"model_selection":const r=e.model||{};this.log(`🤖 Model Selection: ${r.name||"unknown"} (think=${r.think_mode||!1})`),this.emit("progress",{type:"progress",agent:e.agent||"orchestrator",message:`Selected model: ${r.name||"claude-sonnet-4"}`,metadata:{model:r}});break;default:this.log(`⚠️ Unhandled message type: ${e.type}`),this.emit("message",e)}}processMessageQueue(){for(;this.messageQueue.length>0;){const e=this.messageQueue.shift();e&&this.sendMessage(e).catch(e=>{this.log(`❌ Failed to send queued message: ${e}`)})}}scheduleReconnect(){if(this.reconnectAttempts>=this.maxReconnectAttempts)return this.log("❌ Max reconnection attempts reached"),void c.window.showErrorMessage("Failed to connect to Python backend. Please start it manually.");this.reconnectAttempts++;const e=Math.min(1e3*Math.pow(2,this.reconnectAttempts),1e4);this.log(`⏳ Reconnecting in ${e}ms (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})`),this.reconnectTimer=setTimeout(()=>{this.reconnectTimer=null,this.connect().catch(e=>{this.log(`❌ Reconnection failed: ${e}`)})},e)}disconnect(){this.reconnectTimer&&(clearTimeout(this.reconnectTimer),this.reconnectTimer=null),this.ws&&(this.ws.close(),this.ws=null),this.isConnected=!1}isConnectedToBackend(){return this.isConnected}dispose(){this.disconnect(),this.outputChannel.dispose(),this.removeAllListeners()}}n.BackendClient=g},777:function(e,n,t){var s,o=this&&this.__createBinding||(Object.create?function(e,n,t,s){void 0===s&&(s=t);var o=Object.getOwnPropertyDescriptor(n,t);o&&!("get"in o?!n.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,s,o)}:function(e,n,t,s){void 0===s&&(s=t),e[s]=n[t]}),a=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var n=[];for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[n.length]=t);return n},s(e)},function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t=s(e),i=0;i<t.length;i++)"default"!==t[i]&&o(n,e,t[i]);return a(n,e),n});Object.defineProperty(n,"__esModule",{value:!0}),n.MultiAgentChatPanel=void 0;const r=i(t(398));class c{static createOrShow(e,n){const t=r.ViewColumn.Beside;if(c.currentPanel)return void c.currentPanel._panel.reveal(t);const s=r.window.createWebviewPanel(c.viewType,"🤖 KI AutoAgent Chat",t,{enableScripts:!0,retainContextWhenHidden:!0});c.currentPanel=new c(s,e,n)}static sendMessageToPanel(e){c.currentPanel&&c.currentPanel.sendMessage(e)}constructor(e,n,t){this._disposables=[],this._isDisposed=!1,this._thinkingMode=!1,this._thinkingIntensity="normal",this._isProcessing=!1,this._conversationHistory=[],this._streamBuffer=new Map,this.lastProgressMessage=new Map,this.progressDebounceTimers=new Map,this.processedMessages=new Set,this._panel=e,this._extensionUri=n,this.backendClient=t,c.debugChannel||(c.debugChannel=r.window.createOutputChannel("KI AutoAgent Debug"),c.debugChannel.appendLine("🔍 Debug Console initialized"),c.debugChannel.show()),this.backendClient&&this.backendClient.setDebugChannel&&this.backendClient.setDebugChannel(c.debugChannel),this._update(),this._panel.webview.onDidReceiveMessage(async e=>{switch(e.type){case"chat":await this.handleChatMessage(e);break;case"selectAgent":await this.handleAgentSelection(e);break;case"command":await this.handleCommand(e);break;case"newChat":await this.handleNewChat();break;case"pause":await this.handlePause();break;case"resumeWithInstructions":await this.handleResumeWithInstructions(e.instructions);break;case"stopAndRollback":await this.handleStopAndRollback();break;case"toggleThinking":this.handleToggleThinking(e);break;case"showHistory":await this.handleShowHistory();break;case"loadHistory":await this.handleLoadHistory(e);break;case"debug":this.handleDebugMessage(e);break;case"architecture_approval":await this.handleArchitectureApproval(e)}},null,this._disposables),this._panel.onDidDispose(()=>this.dispose(),null,this._disposables),this.setupBackendHandlers()}setupBackendHandlers(){c.debugChannel.appendLine("🔗 Setting up backend handlers..."),this.backendClient.on("response",e=>{const n=e.agent||"orchestrator",t=e.content||"No content received";c.debugChannel.appendLine(`📥 Received response from ${n}: ${t.substring(0,100)}...`),c.debugChannel.appendLine(`📝 Full content length: ${t.length} characters`),this._isProcessing=!1,this._streamBuffer.delete(n);const s={type:"response",agent:n,content:t,timestamp:e.timestamp||(new Date).toISOString()};c.debugChannel.appendLine(`🚀 Sending to webview: ${JSON.stringify(s).substring(0,200)}...`),this.sendMessage(s),e.content&&this._conversationHistory.push({role:"assistant",content:e.content,agent:n,timestamp:(new Date).toISOString()})}),this.backendClient.on("thinking",e=>{const n=e.content||e.message||"";n&&"undefined"!==n&&"null"!==n?(c.debugChannel.appendLine(`💭 Agent thinking: ${e.agent||"orchestrator"}`),this.sendMessage({type:"agent_thinking",agent:e.agent||"orchestrator",content:n})):c.debugChannel.appendLine(`⚠️ Skipping thinking message with undefined content from ${e.agent}`)}),this.backendClient.on("progress",e=>{const n=e.agent||"orchestrator",t=e.content||e.message||"";if(!t||"undefined"===t)return;if(this.lastProgressMessage.get(n)===t)return;this.progressDebounceTimers.has(n)&&clearTimeout(this.progressDebounceTimers.get(n));const s=setTimeout(()=>{c.debugChannel.appendLine(`⏳ Progress from ${n}: ${t}`),this.sendMessage({type:"progress",agent:n,content:t,isStreaming:!1,timestamp:Date.now()}),this.lastProgressMessage.set(n,t),this.progressDebounceTimers.delete(n)},50);this.progressDebounceTimers.set(n,s)}),this.backendClient.on("complete",e=>{c.debugChannel.appendLine(`✅ Complete from ${e.agent}`),this._isProcessing=!1,this.sendMessage({type:"complete",agent:e.agent,metadata:e.metadata})}),this.backendClient.on("step_completed",e=>{c.debugChannel.appendLine(`📊 Step completed: ${e.agent} - ${e.task}`),this.sendMessage({type:"step_completed",agent:e.agent||"orchestrator",result:e.result||""})}),this.backendClient.on("approval_request",async e=>{c.debugChannel.appendLine(`🔐 Approval Request: ${e.action_type} - ${e.description}`),this.sendMessage({type:"progress",agent:e.agent||"orchestrator",content:`🔐 Approval needed: ${e.description}`,metadata:{approval_request:!0,request_id:e.request_id,action_type:e.action_type}}),setTimeout(async()=>{try{c.debugChannel.appendLine(`✅ Auto-approving: ${e.request_id}`),await this.backendClient.sendMessage({type:"approval_response",request_id:e.request_id,approved:!0,response:"Auto-approved by VS Code Extension"}),this.sendMessage({type:"progress",agent:"orchestrator",content:`✅ Approved: ${e.action_type}`})}catch(e){c.debugChannel.appendLine(`❌ Failed to send approval: ${e}`)}},100)}),this.backendClient.on("workflow_complete",e=>{c.debugChannel.appendLine(`🎉 Workflow Complete - Success: ${e.success}, Quality: ${e.quality_score}`);let n="✅ **Workflow Complete!**\n\n";n+=`**Quality Score:** ${e.quality_score||"N/A"}\n`,n+=`**Execution Time:** ${e.execution_time?(e.execution_time/1e3).toFixed(2)+"s":"N/A"}\n`,e.analysis&&(n+="\n**Analysis:**\n",n+=`- Complexity: ${e.analysis.complexity||"N/A"}\n`,n+=`- Risk Level: ${e.analysis.risk_level||"N/A"}\n`),e.adaptations&&(n+=`\n**Adaptations:** ${e.adaptations.total_adaptations||0}\n`),e.health&&(n+=`\n**System Health:** ${e.health.overall_health||"N/A"}\n`),e.errors&&e.errors.length>0&&(n+=`\n⚠️ **Errors:** ${e.errors.length}\n`),e.warnings&&e.warnings.length>0&&(n+=`\n⚠️ **Warnings:** ${e.warnings.length}\n`),this.sendMessage({type:"response",agent:"orchestrator",content:n,timestamp:(new Date).toISOString()}),this._conversationHistory.push({role:"assistant",content:n,agent:"orchestrator",timestamp:(new Date).toISOString()}),this._isProcessing=!1}),this.backendClient.on("error",e=>{c.debugChannel.appendLine(`❌ Backend error: ${e.message||e.error||JSON.stringify(e)}`),this._isProcessing=!1,r.window.showErrorMessage(`Backend error: ${e.message||"Unknown error"}`)}),this.backendClient.on("welcome",e=>{c.debugChannel.appendLine(`🎉 Connected to backend: ${e.message||"Connection established"}`)}),this.backendClient.on("session_restore",e=>{c.debugChannel.appendLine(`🔄 Session restore: ${e.status} - ${e.message}`),"running"===e.status?(r.window.showInformationMessage(`🔄 You have a task still running: "${e.task?.prompt?.substring(0,50)}..."`,"View Progress").then(n=>{"View Progress"===n&&e.progress&&e.progress.length>0&&e.progress.forEach(n=>{this.sendMessage({type:"progress",agent:e.task?.agent||"orchestrator",content:n.message,isStreaming:!1})})}),this._isProcessing=!0):"completed"===e.status&&r.window.showInformationMessage(`✅ Your previous task has completed: "${e.task?.prompt?.substring(0,50)}..."`,"View Result").then(n=>{"View Result"===n&&e.result&&this.sendMessage({type:"agentResponse",agent:e.task?.agent||"orchestrator",content:e.result.content||"Task completed",timestamp:(new Date).toISOString()})})}),this.backendClient.on("architecture_proposal",e=>{c.debugChannel.appendLine("📋 Architecture proposal received"),this.sendMessage({type:"architecture_proposal",proposal:e.proposal,session_id:e.session_id,formatted_message:e.formatted_message})}),this.backendClient.on("architecture_proposal_revised",e=>{c.debugChannel.appendLine("📋 Revised architecture proposal received"),this.sendMessage({type:"architecture_proposal_revised",proposal:e.proposal,session_id:e.session_id,formatted_message:e.formatted_message})}),this.backendClient.on("architectureApprovalProcessed",e=>{c.debugChannel.appendLine(`✅ Architecture approval processed: ${e.decision}`),this.sendMessage({type:"architectureApprovalProcessed",session_id:e.session_id,decision:e.decision,message:e.message})}),this.backendClient.on("agent_activity",e=>{c.debugChannel.appendLine(`🔧 Agent activity: ${e.type} from ${e.agent}`),this.sendMessage({type:"agent_activity",activity_type:e.type,agent:e.agent,content:e.content,tool:e.tool,tool_status:e.tool_status,tool_result:e.tool_result,timestamp:e.timestamp})}),c.debugChannel.appendLine("✅ Backend handlers setup complete")}async handleChatMessage(e){if(this._isProcessing)return void r.window.showWarningMessage("Please wait for the current operation to complete");this._isProcessing=!0,c.debugChannel.appendLine(`\n📨 User Message: ${e.content}`),c.debugChannel.appendLine(`   Agent: ${e.agent||"orchestrator"}`),c.debugChannel.appendLine(`   Mode: ${e.mode||"auto"}`),this.sendMessage({type:"userMessage",content:e.content}),this._conversationHistory.push({role:"user",content:e.content,timestamp:(new Date).toISOString()});const n=r.workspace.workspaceFolders,t=n?n[0].uri.fsPath:void 0;c.debugChannel.appendLine("📤 Sending message to backend..."),c.debugChannel.appendLine(`   Workspace: ${t}`),c.debugChannel.appendLine(`   Connected: ${this.backendClient.isConnectedToBackend()}`);try{await this.backendClient.sendChatMessage({prompt:e.content,agent:e.agent||"orchestrator",mode:e.mode||"auto",thinkingMode:this._thinkingMode,context:{workspace_path:t||process.cwd()}}),c.debugChannel.appendLine("✅ Message sent successfully")}catch(e){c.debugChannel.appendLine(`❌ Failed to send message: ${e.message}`),console.error("Send error:",e)}}async handleAgentSelection(e){this.sendMessage({type:"agentSelected",agent:e.agent})}async handleCommand(e){await this.backendClient.sendCommand(e.command,e.args)}async handleNewChat(){this._conversationHistory=[],this._isProcessing=!1,this.sendMessage({type:"clearChat"}),r.window.showInformationMessage("New chat session started")}async handlePause(){this.sendMessage({type:"pauseActivated"}),r.window.showInformationMessage("Task paused. You can add instructions or stop.")}async handleResumeWithInstructions(e){this.sendMessage({type:"resumed"}),r.window.showInformationMessage(e?"Resuming with additional instructions":"Resuming task")}async handleStopAndRollback(){this.backendClient&&await this.backendClient.sendMessage({type:"stopAndRollback"}),this._isProcessing=!1,this.sendMessage({type:"stoppedAndRolledBack"}),r.window.showInformationMessage("Task stopped and rolled back to last checkpoint")}handleToggleThinking(e){this._thinkingMode=e.enabled,e.intensity&&(this._thinkingIntensity=e.intensity),this.sendMessage({type:"thinkingModeChanged",enabled:this._thinkingMode,intensity:this._thinkingIntensity})}async handleShowHistory(){0!==this._conversationHistory.length?r.window.showInformationMessage(`Conversation has ${this._conversationHistory.length} messages`):r.window.showInformationMessage("No conversation history available")}async handleArchitectureApproval(e){c.debugChannel.appendLine(`📋 Handling architecture approval: ${e.decision}`);try{await this.backendClient.sendMessage({type:"architecture_approval",session_id:e.session_id,decision:e.decision,feedback:e.feedback||""}),c.debugChannel.appendLine(`✅ Architecture approval sent to backend: ${e.decision}`)}catch(e){c.debugChannel.appendLine(`❌ Error sending architecture approval: ${e}`),r.window.showErrorMessage(`Failed to send architecture approval: ${e}`)}}async handleLoadHistory(e){const n=r.workspace.workspaceFolders,t=n?n[0].uri.fsPath:void 0;if(t)try{const n=await fetch(`http://localhost:8002/api/conversation/history?limit=${e.limit||20}&project_path=${encodeURIComponent(t)}`);if(n.ok){const e=await n.json();if(e.history&&e.history.length>0){console.log(`Loaded ${e.history.length} messages from ${e.source} storage`);for(const n of e.history){const e="user"===n.role;this.sendMessage({type:"historyMessage",content:n.content,agent:n.agent||"unknown",isUser:e,timestamp:n.timestamp})}this._conversationHistory=e.history}}}catch(e){console.error("Failed to load conversation history:",e)}else console.log("No workspace folder found, skipping history load")}sendMessage(e){if(this._isDisposed)c.debugChannel.appendLine("⚠️ Webview disposed, skipping message (normal if chat was closed)");else{if(!["userMessage","clearChat","agentResponse","response","error","complete","historyMessage","agentThinking","agent_thinking"].includes(e.type)){const n=`${e.type}-${e.agent||""}-${e.content||""}-${e.timestamp||""}`;if(this.processedMessages.has(n))return void c.debugChannel.appendLine(`⚡ Skipping duplicate message: ${e.type} from ${e.agent}`);if(this.processedMessages.add(n),this.processedMessages.size>100){const e=Array.from(this.processedMessages);e.slice(0,e.length-100).forEach(e=>{this.processedMessages.delete(e)})}}try{this._panel&&this._panel.webview&&this._panel.webview.postMessage(e)}catch(n){c.debugChannel.appendLine(`⚠️ Error sending message (${e.type}): ${n}`)}}}handleDebugMessage(e){const n=(new Date).toLocaleTimeString(),t=e.level||"LOG",s=e.content||e.message||"";c.debugChannel.appendLine(`[${n}] [${t}] ${s}`),e.details&&c.debugChannel.appendLine(`  Details: ${JSON.stringify(e.details,null,2)}`)}_update(){const e=this._panel.webview;this._panel.title="🤖 KI AutoAgent Chat",this._panel.webview.html=this._getHtmlForWebview(e)}_getHtmlForWebview(e){return"<!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>KI AutoAgent Chat</title>\n            <style>\n                body {\n                    font-family: var(--vscode-font-family);\n                    margin: 0;\n                    padding: 0;\n                    display: flex;\n                    flex-direction: column;\n                    height: 100vh;\n                    background: var(--vscode-editor-background);\n                    color: var(--vscode-editor-foreground);\n                }\n\n                #header {\n                    padding: 10px;\n                    background: var(--vscode-titleBar-activeBackground);\n                    color: var(--vscode-titleBar-activeForeground);\n                    display: flex;\n                    align-items: center;\n                    gap: 10px;\n                }\n\n                #messages {\n                    flex: 1;\n                    overflow-y: auto;\n                    padding: 20px;\n                }\n\n                .message {\n                    margin-bottom: 15px;\n                    padding: 10px;\n                    border-radius: 8px;\n                    max-width: 80%;\n                }\n\n                .user-message {\n                    background: var(--vscode-input-background);\n                    margin-left: auto;\n                    border: 1px solid var(--vscode-input-border);\n                }\n\n                .agent-message {\n                    background: var(--vscode-editor-inactiveSelectionBackground);\n                }\n\n                .agent-thinking {\n                    opacity: 0.7;\n                    font-style: italic;\n                }\n\n                .agent-badge {\n                    display: inline-block;\n                    padding: 2px 6px;\n                    border-radius: 4px;\n                    font-size: 0.85em;\n                    margin-right: 5px;\n                    background: var(--vscode-badge-background);\n                    color: var(--vscode-badge-foreground);\n                }\n\n                #input-container {\n                    padding: 20px;\n                    background: var(--vscode-sideBar-background);\n                    border-top: 1px solid var(--vscode-panel-border);\n                }\n\n                #input-row {\n                    display: flex;\n                    gap: 10px;\n                    align-items: flex-end;\n                }\n\n                #message-input {\n                    flex: 1;\n                    padding: 10px;\n                    background: var(--vscode-input-background);\n                    color: var(--vscode-input-foreground);\n                    border: 1px solid var(--vscode-input-border);\n                    border-radius: 4px;\n                    font-size: 14px;\n                    font-family: var(--vscode-font-family);\n                    resize: none;\n                    overflow-y: auto;\n                    min-height: 40px;\n                    max-height: 150px;\n                    line-height: 1.4;\n                }\n\n                #send-button {\n                    padding: 10px 20px;\n                    background: var(--vscode-button-background);\n                    color: var(--vscode-button-foreground);\n                    border: none;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    font-weight: bold;\n                }\n\n                #send-button:hover {\n                    background: var(--vscode-button-hoverBackground);\n                }\n\n                #agent-selector {\n                    margin-bottom: 10px;\n                    display: flex;\n                    gap: 5px;\n                    flex-wrap: wrap;\n                }\n\n                .agent-option {\n                    padding: 5px 10px;\n                    background: var(--vscode-button-secondaryBackground);\n                    color: var(--vscode-button-secondaryForeground);\n                    border: none;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    font-size: 12px;\n                }\n\n                #plan-first-btn {\n                    padding: 5px 10px;\n                    background: var(--vscode-button-background);\n                    color: var(--vscode-button-foreground);\n                    border: none;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    font-size: 12px;\n                    font-weight: bold;\n                    margin-right: 10px;\n                }\n\n                #plan-first-btn:hover {\n                    background: var(--vscode-button-hoverBackground);\n                }\n\n                #plan-first-btn.active {\n                    background: var(--vscode-editorWarning-foreground);\n                    color: var(--vscode-editor-background);\n                }\n\n                .agent-option.selected {\n                    background: var(--vscode-button-background);\n                    color: var(--vscode-button-foreground);\n                }\n\n                .agent-option:hover {\n                    opacity: 0.8;\n                }\n\n                .header-btn {\n                    padding: 5px 10px;\n                    background: var(--vscode-button-secondaryBackground);\n                    color: var(--vscode-button-secondaryForeground);\n                    border: none;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    font-size: 12px;\n                }\n\n                .header-btn:hover {\n                    background: var(--vscode-button-secondaryHoverBackground);\n                }\n\n                .header-btn.active {\n                    background: var(--vscode-button-background);\n                    color: var(--vscode-button-foreground);\n                }\n\n                .header-btn.danger {\n                    background: #d73a49;\n                    color: white;\n                }\n\n                .header-btn.danger:hover {\n                    background: #cb2431;\n                }\n\n                .header-btn.danger:disabled {\n                    background: #6a6a6a;\n                    opacity: 0.5;\n                    cursor: not-allowed;\n                }\n\n                /* Activity indicator */\n                .activity-indicator {\n                    position: fixed;\n                    bottom: 20px;\n                    right: 20px;\n                    padding: 12px 18px;\n                    background: var(--vscode-notifications-background, #1e1e1e);\n                    border: 2px solid var(--vscode-notifications-border, #454545);\n                    border-radius: 10px;\n                    display: none;\n                    align-items: center;\n                    gap: 12px;\n                    z-index: 9999;\n                    box-shadow: 0 4px 16px rgba(0,0,0,0.4);\n                    min-width: 200px;\n                    max-width: 400px;\n                    font-family: var(--vscode-font-family);\n                }\n\n                .activity-indicator.active {\n                    display: flex;\n                }\n\n                .activity-indicator .spinner {\n                    width: 16px;\n                    height: 16px;\n                    border: 2px solid var(--vscode-progressBar-background);\n                    border-top-color: transparent;\n                    border-radius: 50%;\n                    animation: spin 1s linear infinite;\n                }\n\n                @keyframes spin {\n                    to { transform: rotate(360deg); }\n                }\n\n                .activity-indicator .text {\n                    color: var(--vscode-foreground, #cccccc);\n                    font-size: 13px;\n                    font-weight: 500;\n                    line-height: 1.4;\n                    word-wrap: break-word;\n                }\n\n                /* Progress bubble for updates */\n                .message.progress-update {\n                    background: var(--vscode-editor-inactiveSelectionBackground) !important;\n                    border: 1px solid var(--vscode-panel-border);\n                    padding: 8px 12px;\n                    margin: 5px 0;\n                }\n\n                /* Agent-specific bubble colors for dark mode - semi-transparent */\n                body.vscode-dark .message.architect,\n                body.vscode-dark .message.architect-bubble {\n                    background: rgba(30, 58, 95, 0.3) !important;\n                    border: 1px solid rgba(42, 74, 127, 0.5);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-dark .message.codesmith,\n                body.vscode-dark .message.codesmith-bubble {\n                    background: rgba(58, 46, 95, 0.3) !important;\n                    border: 1px solid rgba(74, 62, 127, 0.5);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-dark .message.orchestrator,\n                body.vscode-dark .message.orchestrator-bubble {\n                    background: rgba(74, 46, 74, 0.3) !important;\n                    border: 1px solid rgba(106, 78, 106, 0.5);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-dark .message.research,\n                body.vscode-dark .message.research-bubble {\n                    background: rgba(46, 74, 58, 0.3) !important;\n                    border: 1px solid rgba(62, 106, 74, 0.5);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-dark .message.reviewer,\n                body.vscode-dark .message.reviewer-bubble {\n                    background: rgba(74, 58, 46, 0.3) !important;\n                    border: 1px solid rgba(106, 90, 62, 0.5);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-dark .message.performance_bot,\n                body.vscode-dark .message.performance-bubble,\n                body.vscode-dark .message.performance-bot-bubble {\n                    background: rgba(90, 58, 46, 0.3) !important;\n                    border: 1px solid rgba(122, 90, 62, 0.5);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-dark .message.fixer,\n                body.vscode-dark .message.fixer-bubble {\n                    background: rgba(46, 90, 74, 0.3) !important;\n                    border: 1px solid rgba(62, 122, 106, 0.5);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-dark .message.docubot,\n                body.vscode-dark .message.docubot-bubble {\n                    background: rgba(90, 74, 46, 0.3) !important;\n                    border: 1px solid rgba(122, 106, 62, 0.5);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-dark .message.tradestrat,\n                body.vscode-dark .message.tradestrat-bubble {\n                    background: rgba(74, 46, 90, 0.3) !important;\n                    border: 1px solid rgba(106, 62, 122, 0.5);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-dark .message.opus-arbitrator,\n                body.vscode-dark .message.opus-arbitrator-bubble {\n                    background: rgba(90, 46, 46, 0.3) !important;\n                    border: 1px solid rgba(122, 62, 62, 0.5);\n                    backdrop-filter: blur(8px);\n                }\n\n                /* Light mode colors - semi-transparent */\n                body.vscode-light .message.architect,\n                body.vscode-light .message.architect-bubble {\n                    background: rgba(230, 242, 255, 0.5) !important;\n                    border: 1px solid rgba(179, 217, 255, 0.7);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-light .message.codesmith,\n                body.vscode-light .message.codesmith-bubble {\n                    background: rgba(240, 230, 255, 0.5) !important;\n                    border: 1px solid rgba(217, 179, 255, 0.7);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-light .message.orchestrator,\n                body.vscode-light .message.orchestrator-bubble {\n                    background: rgba(255, 230, 240, 0.5) !important;\n                    border: 1px solid rgba(255, 179, 217, 0.7);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-light .message.research,\n                body.vscode-light .message.research-bubble {\n                    background: rgba(230, 255, 240, 0.5) !important;\n                    border: 1px solid rgba(179, 255, 217, 0.7);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-light .message.reviewer,\n                body.vscode-light .message.reviewer-bubble {\n                    background: rgba(255, 245, 230, 0.5) !important;\n                    border: 1px solid rgba(255, 223, 179, 0.7);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-light .message.performance_bot,\n                body.vscode-light .message.performance-bubble,\n                body.vscode-light .message.performance-bot-bubble {\n                    background: rgba(255, 230, 230, 0.5) !important;\n                    border: 1px solid rgba(255, 179, 179, 0.7);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-light .message.fixer,\n                body.vscode-light .message.fixer-bubble {\n                    background: rgba(230, 255, 245, 0.5) !important;\n                    border: 1px solid rgba(179, 255, 233, 0.7);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-light .message.docubot,\n                body.vscode-light .message.docubot-bubble {\n                    background: rgba(255, 250, 230, 0.5) !important;\n                    border: 1px solid rgba(255, 240, 179, 0.7);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-light .message.tradestrat,\n                body.vscode-light .message.tradestrat-bubble {\n                    background: rgba(250, 230, 255, 0.5) !important;\n                    border: 1px solid rgba(240, 179, 255, 0.7);\n                    backdrop-filter: blur(8px);\n                }\n\n                body.vscode-light .message.opus-arbitrator,\n                body.vscode-light .message.opus-arbitrator-bubble {\n                    background: rgba(255, 230, 235, 0.5) !important;\n                    border: 1px solid rgba(255, 179, 190, 0.7);\n                    backdrop-filter: blur(8px);\n                }\n\n                #send-button {\n                    padding: 8px 16px;\n                    background: var(--vscode-button-background);\n                    color: var(--vscode-button-foreground);\n                    border: none;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    font-size: 14px;\n                    font-weight: 500;\n                    min-width: 80px;\n                }\n\n                #send-button:hover {\n                    background: var(--vscode-button-hoverBackground);\n                }\n\n                #send-button:active {\n                    transform: scale(0.98);\n                }\n\n                #send-button:disabled {\n                    opacity: 0.5;\n                    cursor: not-allowed;\n                }\n\n                /* Markdown Styles */\n                .message h1, .message h2, .message h3 {\n                    margin-top: 10px;\n                    margin-bottom: 5px;\n                    font-weight: bold;\n                }\n\n                .message h1 {\n                    font-size: 1.5em;\n                    color: var(--vscode-textLink-foreground);\n                }\n\n                .message h2 {\n                    font-size: 1.3em;\n                    color: var(--vscode-textLink-activeForeground);\n                }\n\n                .message h3 {\n                    font-size: 1.1em;\n                }\n\n                .message code {\n                    background: var(--vscode-textCodeBlock-background);\n                    color: var(--vscode-textPreformat-foreground);\n                    padding: 2px 4px;\n                    border-radius: 3px;\n                    font-family: var(--vscode-editor-font-family);\n                    font-size: 0.9em;\n                }\n\n                .message pre {\n                    background: var(--vscode-textCodeBlock-background);\n                    color: var(--vscode-textPreformat-foreground);\n                    padding: 10px;\n                    border-radius: 5px;\n                    overflow-x: auto;\n                    margin: 10px 0;\n                }\n\n                .message pre code {\n                    background: transparent;\n                    padding: 0;\n                }\n\n                .message ul, .message ol {\n                    margin: 5px 0;\n                    padding-left: 20px;\n                }\n\n                .message li {\n                    margin: 3px 0;\n                }\n\n                .message strong {\n                    font-weight: bold;\n                    color: var(--vscode-textLink-foreground);\n                }\n\n                .message em {\n                    font-style: italic;\n                    color: var(--vscode-descriptionForeground);\n                }\n\n                .message p {\n                    margin: 8px 0;\n                    line-height: 1.5;\n                }\n\n                .message blockquote {\n                    border-left: 3px solid var(--vscode-textBlockQuote-border);\n                    padding-left: 10px;\n                    margin: 10px 0;\n                    color: var(--vscode-textBlockQuote-color);\n                }\n\n                /* Warning button style for pause */\n                .header-btn.warning {\n                    background: #f0ad4e;\n                    color: white;\n                }\n\n                .header-btn.warning:hover {\n                    background: #ec971f;\n                }\n\n                .header-btn.warning:disabled {\n                    background: #6a6a6a;\n                    opacity: 0.5;\n                    cursor: not-allowed;\n                }\n\n                /* Pause overlay and dialog */\n                .pause-overlay {\n                    position: fixed;\n                    top: 0;\n                    left: 0;\n                    right: 0;\n                    bottom: 0;\n                    background: rgba(0, 0, 0, 0.5);\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                    z-index: 2000;\n                }\n\n                .pause-dialog {\n                    background: var(--vscode-editor-background);\n                    border: 1px solid var(--vscode-widget-border);\n                    border-radius: 8px;\n                    padding: 20px;\n                    max-width: 500px;\n                    width: 90%;\n                    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);\n                }\n\n                .pause-dialog h3 {\n                    margin: 0 0 15px 0;\n                    color: var(--vscode-foreground);\n                    font-size: 1.2em;\n                }\n\n                .pause-dialog p {\n                    margin: 10px 0;\n                    color: var(--vscode-foreground);\n                }\n\n                .pause-dialog textarea {\n                    width: 100%;\n                    background: var(--vscode-input-background);\n                    color: var(--vscode-input-foreground);\n                    border: 1px solid var(--vscode-input-border);\n                    border-radius: 4px;\n                    padding: 8px;\n                    font-family: var(--vscode-font-family);\n                    font-size: 14px;\n                    resize: vertical;\n                    margin-bottom: 15px;\n                }\n\n                .pause-dialog .pause-actions {\n                    display: flex;\n                    gap: 10px;\n                    justify-content: flex-end;\n                }\n\n                .pause-dialog .btn {\n                    padding: 8px 16px;\n                    border: none;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    font-size: 14px;\n                    transition: background 0.2s;\n                }\n\n                .pause-dialog .btn.primary {\n                    background: var(--vscode-button-background);\n                    color: var(--vscode-button-foreground);\n                }\n\n                .pause-dialog .btn.primary:hover {\n                    background: var(--vscode-button-hoverBackground);\n                }\n\n                .pause-dialog .btn.info {\n                    background: #17a2b8;\n                    color: white;\n                }\n\n                .pause-dialog .btn.info:hover {\n                    background: #138496;\n                }\n\n                .pause-dialog .btn.danger {\n                    background: #d73a49;\n                    color: white;\n                }\n\n                .pause-dialog .btn.danger:hover {\n                    background: #cb2431;\n                }\n\n                /* Initialization overlay */\n                .initialization-overlay {\n                    position: fixed;\n                    top: 0;\n                    left: 0;\n                    right: 0;\n                    bottom: 0;\n                    background: rgba(0, 0, 0, 0.85);\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    z-index: 10000;\n                    backdrop-filter: blur(5px);\n                }\n\n                .initialization-overlay.fade-out {\n                    animation: fadeOut 0.3s ease-out;\n                }\n\n                @keyframes fadeOut {\n                    from { opacity: 1; }\n                    to { opacity: 0; }\n                }\n\n                .initialization-content {\n                    background: var(--vscode-editor-background);\n                    border: 1px solid var(--vscode-panel-border);\n                    border-radius: 8px;\n                    padding: 30px;\n                    text-align: center;\n                    max-width: 400px;\n                }\n\n                .initialization-content .spinner {\n                    width: 50px;\n                    height: 50px;\n                    border: 3px solid var(--vscode-progressBar-background);\n                    border-top-color: transparent;\n                    border-radius: 50%;\n                    animation: spin 1s linear infinite;\n                    margin: 0 auto 20px;\n                }\n\n                .initialization-content h2 {\n                    margin: 0 0 10px;\n                    color: var(--vscode-editor-foreground);\n                }\n\n                .initialization-content p {\n                    margin: 0 0 20px;\n                    color: var(--vscode-descriptionForeground);\n                    font-size: 14px;\n                }\n\n                .progress-bar {\n                    width: 100%;\n                    height: 4px;\n                    background: var(--vscode-input-background);\n                    border-radius: 2px;\n                    overflow: hidden;\n                }\n\n                .progress-fill {\n                    height: 100%;\n                    background: var(--vscode-progressBar-background);\n                    width: 0;\n                    animation: progressAnimation 30s ease-out;\n                }\n\n                @keyframes progressAnimation {\n                    0% { width: 0%; }\n                    20% { width: 20%; }\n                    40% { width: 35%; }\n                    60% { width: 60%; }\n                    80% { width: 85%; }\n                    100% { width: 95%; }\n                }\n\n                /* Progress message styling */\n                .progress-update {\n                    background: var(--vscode-notebook-cellStatusBarItemHoverBackground);\n                    border-left: 3px solid var(--vscode-progressBar-background);\n                    padding: 10px;\n                    margin: 10px 0;\n                }\n\n                .progress-update .agent-badge {\n                    background: var(--vscode-progressBar-background);\n                    color: var(--vscode-editor-background);\n                    padding: 2px 8px;\n                    border-radius: 3px;\n                    font-size: 12px;\n                    font-weight: bold;\n                    margin-right: 8px;\n                }\n\n                .progress-content {\n                    color: var(--vscode-editor-foreground);\n                    margin-top: 5px;\n                }\n\n                /* v5.8.1: Agent Activity Visualization */\n                .agent-activity {\n                    background: var(--vscode-editor-inactiveSelectionBackground);\n                    border-radius: 8px;\n                    padding: 12px;\n                    margin: 12px 0;\n                    transition: opacity 0.3s ease;\n                }\n\n                .agent-activity .activity-header {\n                    margin-bottom: 8px;\n                }\n\n                .agent-activity .agent-badge {\n                    background: var(--vscode-badge-background);\n                    color: var(--vscode-badge-foreground);\n                    padding: 4px 10px;\n                    border-radius: 12px;\n                    font-size: 11px;\n                    font-weight: bold;\n                    text-transform: capitalize;\n                }\n\n                .agent-activity .activity-content {\n                    padding-left: 8px;\n                }\n\n                .agent-activity .activity-item {\n                    padding: 6px 0;\n                    font-size: 13px;\n                    color: var(--vscode-editor-foreground);\n                    opacity: 0.9;\n                }\n\n                .agent-activity .activity-item.thinking {\n                    font-style: italic;\n                    color: var(--vscode-descriptionForeground);\n                }\n\n                .agent-activity .activity-item.tool-running {\n                    color: var(--vscode-charts-blue);\n                }\n\n                .agent-activity .activity-item.tool-success {\n                    color: var(--vscode-charts-green);\n                }\n\n                .agent-activity .activity-item.tool-error {\n                    color: var(--vscode-charts-red);\n                }\n\n                .agent-activity .activity-item.complete {\n                    color: var(--vscode-charts-green);\n                    font-weight: 600;\n                }\n\n                /* Agent-specific activity colors (inherit from existing agent colors) */\n                .architect-activity {\n                    border-left: 4px solid rgba(42, 74, 127, 0.8);\n                }\n\n                .codesmith-activity {\n                    border-left: 4px solid rgba(74, 62, 127, 0.8);\n                }\n\n                .orchestrator-activity {\n                    border-left: 4px solid rgba(106, 78, 106, 0.8);\n                }\n\n                .reviewer-activity {\n                    border-left: 4px solid rgba(106, 90, 62, 0.8);\n                }\n\n                .fixer-activity {\n                    border-left: 4px solid rgba(62, 122, 106, 0.8);\n                }\n            </style>\n        </head>\n        <body>\n            <div id=\"header\">\n                <span style=\"font-size: 1.5em;\">🤖</span>\n                <h2 style=\"margin: 0;\">KI AutoAgent Chat</h2>\n                <div style=\"margin-left: auto; display: flex; gap: 10px; align-items: center;\">\n                    <button id=\"new-chat-btn\" class=\"header-btn\" title=\"New Chat\">➕ New</button>\n                    <button id=\"history-btn\" class=\"header-btn\" title=\"History\">📜 History</button>\n                    <button id=\"thinking-btn\" class=\"header-btn\" title=\"Toggle Thinking Mode\">💭 Thinking</button>\n                    <button id=\"agent-thinking-btn\" class=\"header-btn\" title=\"Agent Schritte anzeigen\">🧠 Agent Schritte</button>\n                    <button id=\"pause-btn\" class=\"header-btn warning\" title=\"Pause Task\">⏸️ Pause</button>\n                    <span style=\"opacity: 0.7; font-size: 0.9em;\">Backend ✅</span>\n                </div>\n            </div>\n\n            <div id=\"messages\"></div>\n\n            <div id=\"input-container\">\n                <div id=\"agent-selector\">\n                    <button id=\"plan-first-btn\" class=\"control-button\" title=\"Show plan before executing\">\n                        📋 Plan First\n                    </button>\n                    <button class=\"agent-option selected\" data-agent=\"orchestrator\">\n                        🎯 Orchestrator\n                    </button>\n                    <button class=\"agent-option\" data-agent=\"architect\">\n                        🏗️ Architect\n                    </button>\n                    <button class=\"agent-option\" data-agent=\"codesmith\">\n                        💻 CodeSmith\n                    </button>\n                    <button class=\"agent-option\" data-agent=\"research\">\n                        🔍 Research\n                    </button>\n                    <button class=\"agent-option\" data-agent=\"reviewer\">\n                        🔎 Reviewer\n                    </button>\n                    <button class=\"agent-option\" data-agent=\"docu\">\n                        📚 Documentation\n                    </button>\n                    <button class=\"agent-option\" data-agent=\"opus-arbitrator\">\n                        ⚖️ Arbitrator\n                    </button>\n                </div>\n\n                <div id=\"input-row\">\n                    <textarea\n                        id=\"message-input\"\n                        placeholder=\"Type your message... (Shift+Enter for new line)\"\n                        autofocus\n                        rows=\"1\"\n                    ></textarea>\n                    <button type=\"button\" id=\"send-button\">Send 📤</button>\n                    <button type=\"button\" id=\"stop-button\" style=\"display: none;\">Stop ⏹️</button>\n                </div>\n            </div>\n\n            <script>\n                const vscode = acquireVsCodeApi();\n\n                // Override console methods to send to VS Code debug console\n                const originalConsole = {\n                    log: console.log,\n                    error: console.error,\n                    warn: console.warn,\n                    debug: console.debug,\n                    info: console.info\n                };\n\n                function sendDebugMessage(level, args) {\n                    const message = Array.from(args).map(arg => {\n                        if (typeof arg === 'object') {\n                            return JSON.stringify(arg);\n                        }\n                        return String(arg);\n                    }).join(' ');\n\n                    vscode.postMessage({\n                        type: 'debug',\n                        level: level,\n                        content: message\n                    });\n\n                    // Also call original console method for webview developer tools\n                    originalConsole[level.toLowerCase()].apply(console, args);\n                }\n\n                console.log = function() { sendDebugMessage('LOG', arguments); };\n                console.error = function() { sendDebugMessage('ERROR', arguments); };\n                console.warn = function() { sendDebugMessage('WARN', arguments); };\n                console.debug = function() { sendDebugMessage('DEBUG', arguments); };\n                console.info = function() { sendDebugMessage('INFO', arguments); };\n\n                console.log('Chat UI Script initializing...');\n                const messagesDiv = document.getElementById('messages');\n                const messageInput = document.getElementById('message-input');\n                const sendButton = document.getElementById('send-button');\n                const stopButton = document.getElementById('stop-button');\n                const agentOptions = document.querySelectorAll('.agent-option');\n                const newChatBtn = document.getElementById('new-chat-btn');\n                const historyBtn = document.getElementById('history-btn');\n                const thinkingBtn = document.getElementById('thinking-btn');\n                const agentThinkingBtn = document.getElementById('agent-thinking-btn');\n                const pauseBtn = document.getElementById('pause-btn');\n                const planFirstBtn = document.getElementById('plan-first-btn');\n\n                // Debug check\n                console.log('Elements found:', {\n                    messagesDiv: !!messagesDiv,\n                    messageInput: !!messageInput,\n                    sendButton: !!sendButton,\n                    agentOptions: agentOptions.length\n                });\n\n                let selectedAgent = 'orchestrator';\n                let thinkingMode = false;\n                let isProcessing = false;\n                let planFirstMode = false;\n\n                // Load conversation history on startup\n                setTimeout(() => {\n                    console.log('Loading conversation history...');\n                    vscode.postMessage({\n                        type: 'loadHistory',\n                        limit: 20\n                    });\n                }, 500); // Small delay to ensure webview is ready\n\n                // Define addMessage function before it's used\n                function addMessage(content, type, agent) {\n                    const messageDiv = document.createElement('div');\n                    messageDiv.className = 'message ' + type + '-message';\n\n                    // Add agent-specific class for styling\n                    if (agent) {\n                        const agentClass = agent.toLowerCase().replace(/[^a-z0-9]/g, '-');\n                        messageDiv.classList.add(agentClass + '-bubble');\n                        const badge = document.createElement('span');\n                        badge.className = 'agent-badge';\n                        badge.textContent = agent;\n                        messageDiv.appendChild(badge);\n                    }\n\n                    const contentDiv = document.createElement('div');\n                    contentDiv.innerHTML = formatContent(content);\n                    messageDiv.appendChild(contentDiv);\n\n                    messagesDiv.appendChild(messageDiv);\n                    messagesDiv.scrollTop = messagesDiv.scrollHeight;\n                }\n\n                // Agent selection\n                agentOptions.forEach(option => {\n                    option.addEventListener('click', () => {\n                        agentOptions.forEach(opt => opt.classList.remove('selected'));\n                        option.classList.add('selected');\n                        selectedAgent = option.dataset.agent;\n\n                        vscode.postMessage({\n                            type: 'selectAgent',\n                            agent: selectedAgent\n                        });\n                    });\n                });\n\n                // Send message\n                function sendMessage() {\n                    const content = messageInput.value.trim();\n                    if (!content || isProcessing) {\n                        console.log('No content to send or still processing');\n                        return;\n                    }\n\n                    console.log('Sending message:', content, 'to agent:', selectedAgent);\n\n                    // Set processing state\n                    isProcessing = true;\n                    updatePauseButtonState();\n                    updateActivityIndicator(true, 'Sending message...');\n\n                    // Show stop button, hide send button\n                    if (stopButton) {\n                        stopButton.style.display = 'inline-block';\n                        sendButton.style.display = 'none';\n                    }\n\n                    // Disable inputs while processing\n                    if (messageInput) messageInput.disabled = true;\n\n                    vscode.postMessage({\n                        type: 'chat',\n                        content: content,\n                        agent: selectedAgent,\n                        mode: 'auto',\n                        planFirst: planFirstMode\n                    });\n\n                    messageInput.value = '';\n                    autoResizeTextarea();\n                }\n\n                // Bind send button\n                if (sendButton) {\n                    sendButton.addEventListener('click', (e) => {\n                        e.preventDefault();\n                        console.log('Send button clicked');\n                        sendMessage();\n                    });\n                } else {\n                    console.error('Send button not found!');\n                }\n\n                // Bind stop button\n                if (stopButton) {\n                    stopButton.addEventListener('click', (e) => {\n                        e.preventDefault();\n                        console.log('Stop button clicked');\n                        vscode.postMessage({\n                            type: 'stopAndRollback'\n                        });\n                        // Hide stop button, show send button\n                        stopButton.style.display = 'none';\n                        sendButton.style.display = 'inline-block';\n                        // Re-enable inputs\n                        if (messageInput) messageInput.disabled = false;\n                        isProcessing = false;\n                        updateActivityIndicator(false);\n                    });\n                }\n\n                // Header button handlers\n                newChatBtn.addEventListener('click', () => {\n                    if (confirm('Start a new chat session? Current conversation will be saved.')) {\n                        vscode.postMessage({ type: 'newChat' });\n                        messagesDiv.innerHTML = '';\n                    }\n                });\n\n                historyBtn.addEventListener('click', () => {\n                    vscode.postMessage({ type: 'showHistory' });\n                });\n\n                thinkingBtn.addEventListener('click', () => {\n                    thinkingMode = !thinkingMode;\n                    thinkingBtn.classList.toggle('active', thinkingMode);\n                    vscode.postMessage({\n                        type: 'toggleThinking',\n                        enabled: thinkingMode,\n                        intensity: 'normal'\n                    });\n                });\n\n                // Agent Thinking Button - zeigt interne Agent-Schritte\n                let showAgentThinking = false;\n                agentThinkingBtn.addEventListener('click', () => {\n                    showAgentThinking = !showAgentThinking;\n                    agentThinkingBtn.classList.toggle('active', showAgentThinking);\n                    vscode.postMessage({\n                        type: 'toggleAgentThinking',\n                        enabled: showAgentThinking\n                    });\n\n                    // Update existing messages visibility\n                    const thinkingMessages = document.querySelectorAll('.agent-thinking-message');\n                    thinkingMessages.forEach(msg => {\n                        msg.style.display = showAgentThinking ? 'block' : 'none';\n                    });\n                });\n\n                // Function to update pause button state\n                function updatePauseButtonState() {\n                    if (pauseBtn) {\n                        pauseBtn.disabled = !isProcessing || isPaused;\n                        pauseBtn.style.opacity = (isProcessing && !isPaused) ? '1.0' : '0.5';\n                        pauseBtn.style.cursor = (isProcessing && !isPaused) ? 'pointer' : 'not-allowed';\n                    }\n                }\n\n                let isPaused = false;\n\n                // Plan-First button handler\n                if (planFirstBtn) {\n                    planFirstBtn.addEventListener('click', () => {\n                        planFirstMode = !planFirstMode;\n                        planFirstBtn.classList.toggle('active', planFirstMode);\n\n                        // Show notification\n                        const mode = planFirstMode ? 'enabled' : 'disabled';\n                        const modeMessage = planFirstMode\n                            ? 'I will show you the execution plan before running tasks.'\n                            : 'I will execute tasks immediately.';\n                        addMessage('📋 Plan-First mode ' + mode + '. ' + modeMessage, 'system');\n\n                        // Save preference\n                        vscode.postMessage({\n                            type: 'planFirstMode',\n                            enabled: planFirstMode\n                        });\n                    });\n                }\n\n                pauseBtn.addEventListener('click', () => {\n                    if (isProcessing && !isPaused) {\n                        vscode.postMessage({ type: 'pause' });\n                        isPaused = true;\n                        showPauseUI();\n                        updatePauseButtonState();\n                    }\n                });\n\n                // Function to show pause UI with instruction input\n                function showPauseUI() {\n                    const pauseOverlay = document.createElement('div');\n                    pauseOverlay.className = 'pause-overlay';\n                    pauseOverlay.innerHTML = [\n                        '<div class=\"pause-dialog\">',\n                        '<h3>⏸️ Task Paused</h3>',\n                        '<p>Add additional instructions or stop the task:</p>',\n                        '<textarea id=\"pause-instructions\" placeholder=\"Enter additional instructions (optional)...\" rows=\"4\"></textarea>',\n                        '<div class=\"pause-actions\">',\n                        '<button id=\"resume-btn\" class=\"btn primary\">▶️ Resume</button>',\n                        '<button id=\"resume-with-instructions-btn\" class=\"btn info\">📝 Resume with Instructions</button>',\n                        '<button id=\"stop-rollback-btn\" class=\"btn danger\">🔄 Stop & Rollback</button>',\n                        '</div>',\n                        '</div>'\n                    ].join('');\n                    document.body.appendChild(pauseOverlay);\n\n                    // Handle pause dialog buttons\n                    document.getElementById('resume-btn').addEventListener('click', () => {\n                        vscode.postMessage({ type: 'resumeWithInstructions' });\n                        document.body.removeChild(pauseOverlay);\n                        isPaused = false;\n                        updatePauseButtonState();\n                    });\n\n                    document.getElementById('resume-with-instructions-btn').addEventListener('click', () => {\n                        const instructions = document.getElementById('pause-instructions').value;\n                        if (instructions.trim()) {\n                            vscode.postMessage({\n                                type: 'resumeWithInstructions',\n                                instructions: instructions\n                            });\n                            document.body.removeChild(pauseOverlay);\n                            isPaused = false;\n                            updatePauseButtonState();\n                        } else {\n                            alert('Please enter instructions or click Resume to continue without changes');\n                        }\n                    });\n\n                    document.getElementById('stop-rollback-btn').addEventListener('click', () => {\n                        if (confirm('Are you sure you want to stop and rollback to the last checkpoint?')) {\n                            vscode.postMessage({ type: 'stopAndRollback' });\n                            document.body.removeChild(pauseOverlay);\n                            isPaused = false;\n                            isProcessing = false;\n                            updatePauseButtonState();\n                        }\n                    });\n                }\n\n                // Create activity indicator\n                const activityIndicator = document.createElement('div');\n                activityIndicator.className = 'activity-indicator';\n\n                const spinner = document.createElement('div');\n                spinner.className = 'spinner';\n\n                const text = document.createElement('div');\n                text.className = 'text';\n                text.textContent = 'Processing...';\n\n                activityIndicator.appendChild(spinner);\n                activityIndicator.appendChild(text);\n                document.body.appendChild(activityIndicator);\n\n                function updateActivityIndicator(active, text = 'Processing...') {\n                    console.log('🔄 updateActivityIndicator called:', active, text);\n                    if (active) {\n                        activityIndicator.classList.add('active');\n                        const textElement = activityIndicator.querySelector('.text');\n                        if (textElement) {\n                            textElement.textContent = text;\n                        }\n                        console.log('✅ Activity indicator made active with text:', text);\n                    } else {\n                        activityIndicator.classList.remove('active');\n                        console.log('⏹️ Activity indicator hidden');\n                    }\n                }\n                // Auto-resize textarea\n                function autoResizeTextarea() {\n                    messageInput.style.height = 'auto';\n                    const newHeight = Math.min(messageInput.scrollHeight, 150);\n                    messageInput.style.height = newHeight + 'px';\n                }\n\n                // Handle textarea input\n                messageInput.addEventListener('input', autoResizeTextarea);\n\n                // Handle Enter key (send) vs Shift+Enter (new line)\n                messageInput.addEventListener('keydown', (e) => {\n                    if (e.key === 'Enter' && !e.shiftKey) {\n                        e.preventDefault();\n                        sendMessage();\n                    }\n                });\n\n                // Initialize textarea height\n                autoResizeTextarea();\n\n                // Handle messages from extension\n                window.addEventListener('message', event => {\n                    const message = event.data;\n\n                    switch (message.type) {\n                        case 'userMessage':\n                            addMessage(message.content, 'user');\n                            break;\n\n                        case 'historyMessage':\n                            // Display history message from persistent storage\n                            if (message.isUser) {\n                                addMessage(message.content, 'user');\n                            } else {\n                                addMessage(message.content, 'assistant', message.agent);\n                            }\n                            break;\n\n                        case 'agentThinking':\n                        case 'agent_thinking':  // LangGraph v5.0.0 sends 'agent_thinking' type\n                            isProcessing = true;\n                            updatePauseButtonState();\n                            updateActivityIndicator(true, message.content || message.message || 'Processing...');\n                            addThinkingMessage(message.agent || 'orchestrator', message.content || message.message);\n                            break;\n\n                        case 'progress':\n                            console.log('📊 Progress message received:', message.agent, message.content);\n                            // Update existing progress message or create new one\n                            updateProgressMessage(message.agent, message.content);\n                            updateActivityIndicator(true, message.content || 'Processing...');\n                            break;\n\n                        case 'agentResponse':\n                        case 'response':  // LangGraph v5.0.0 sends 'response' type\n                            // Always reset processing state on response\n                            isProcessing = false;\n                            updatePauseButtonState();\n                            updateActivityIndicator(false);\n                            removeThinkingMessage();\n                            removeProgressMessages();\n\n                            // Handle content - check if it's present\n                            if (message.content) {\n                                addMessage(message.content, 'agent', message.agent || 'orchestrator');\n                            } else {\n                                console.warn('Response received without content:', message);\n                            }\n\n                            // Re-enable input and button\n                            if (stopButton) {\n                                stopButton.style.display = 'none';\n                                sendButton.style.display = 'inline-block';\n                            }\n                            if (messageInput) messageInput.disabled = false;\n                            break;\n\n                        case 'result':\n                            // v6.1-alpha: Final workflow result with comprehensive output\n                            isProcessing = false;\n                            updatePauseButtonState();\n                            updateActivityIndicator(false);\n                            removeThinkingMessage();\n                            removeProgressMessages();\n\n                            // Extract result content - check multiple possible fields\n                            let resultContent = '';\n                            if (message.result && typeof message.result === 'object') {\n                                // result.result might be a string or object\n                                if (typeof message.result.result === 'string') {\n                                    resultContent = message.result.result;\n                                } else if (message.result.result) {\n                                    resultContent = JSON.stringify(message.result.result, null, 2);\n                                } else if (message.result.content) {\n                                    resultContent = message.result.content;\n                                } else {\n                                    // Fallback: stringify entire result\n                                    resultContent = JSON.stringify(message.result, null, 2);\n                                }\n                            } else if (typeof message.result === 'string') {\n                                resultContent = message.result;\n                            } else if (message.content) {\n                                resultContent = message.content;\n                            } else {\n                                resultContent = message.message || '✅ Workflow complete!';\n                            }\n\n                            // Add result as agent message\n                            if (resultContent) {\n                                addMessage(resultContent, 'agent', 'orchestrator');\n                            }\n\n                            // Re-enable input\n                            if (stopButton) {\n                                stopButton.style.display = 'none';\n                                sendButton.style.display = 'inline-block';\n                            }\n                            if (messageInput) messageInput.disabled = false;\n                            break;\n\n                        case 'complete':\n                        case 'step_completed':  // LangGraph v5.0.0 sends 'step_completed' for intermediate steps\n                            // For step_completed, don't reset processing state yet\n                            if (message.type === 'step_completed' && message.result) {\n                                // Show intermediate result\n                                updateProgressMessage(message.agent || 'orchestrator', message.result);\n                            } else {\n                                // For 'complete', reset everything\n                                isProcessing = false;\n                                updatePauseButtonState();\n                                updateActivityIndicator(false);\n                                removeThinkingMessage();\n                                removeProgressMessages();\n                                if (stopButton) {\n                                    stopButton.style.display = 'none';\n                                    sendButton.style.display = 'inline-block';\n                                }\n                                if (messageInput) messageInput.disabled = false;\n                            }\n                            break;\n\n                        case 'clearChat':\n                            messagesDiv.innerHTML = '';\n                            isProcessing = false;\n                            updatePauseButtonState();\n                            updateActivityIndicator(false);\n                            if (stopButton) {\n                                stopButton.style.display = 'none';\n                                sendButton.style.display = 'inline-block';\n                            }\n                            if (messageInput) messageInput.disabled = false;\n                            break;\n\n                        case 'pauseActivated':\n                            isPaused = true;\n                            updatePauseButtonState();\n                            break;\n\n                        case 'resumed':\n                            isPaused = false;\n                            updatePauseButtonState();\n                            break;\n\n                        case 'stoppedAndRolledBack':\n                            isProcessing = false;\n                            isPaused = false;\n                            updatePauseButtonState();\n                            updateActivityIndicator(false);\n                            removeThinkingMessage();\n                            removeProgressMessages();\n                            if (stopButton) {\n                                stopButton.style.display = 'none';\n                                sendButton.style.display = 'inline-block';\n                            }\n                            if (messageInput) messageInput.disabled = false;\n                            break;\n\n                        case 'architecture_proposal':\n                        case 'architecture_proposal_revised':\n                            // v5.2.0: Architecture Proposal System\n                            console.log('📋 Architecture proposal received:', message);\n\n                            // Remove any existing proposal cards\n                            const existingProposal = document.querySelector('.architecture-proposal-card');\n                            if (existingProposal) {\n                                existingProposal.remove();\n                            }\n\n                            // Create and display proposal card\n                            const proposalCard = createArchitectureProposalCard(\n                                message.proposal,\n                                message.session_id || '',\n                                message.type === 'architecture_proposal_revised'\n                            );\n                            messagesDiv.appendChild(proposalCard);\n                            messagesDiv.scrollTop = messagesDiv.scrollHeight;\n\n                            // Disable input while waiting for decision\n                            if (messageInput) messageInput.disabled = true;\n                            if (sendButton) sendButton.style.display = 'none';\n                            break;\n\n                        case 'architectureApprovalProcessed':\n                            // v5.2.0: Approval was processed\n                            console.log('✅ Architecture approval processed:', message.decision);\n\n                            // Remove proposal card\n                            const proposalToRemove = document.querySelector('.architecture-proposal-card');\n                            if (proposalToRemove) {\n                                proposalToRemove.remove();\n                            }\n\n                            // Show confirmation message\n                            addMessage(\n                                `Architecture proposal ${message.decision}. Continuing with implementation...`,\n                                'system',\n                                'architect'\n                            );\n\n                            // Re-enable input\n                            if (messageInput) messageInput.disabled = false;\n                            if (sendButton) sendButton.style.display = 'inline-block';\n                            break;\n\n                        case 'agent_activity':\n                            // v5.8.1: Agent Activity Visualization\n                            showAgentActivity(message);\n                            break;\n                    }\n                });\n\n                function addThinkingMessage(agent, content) {\n                    removeThinkingMessage();\n\n                    const messageDiv = document.createElement('div');\n                    messageDiv.className = 'message agent-message agent-thinking';\n                    messageDiv.id = 'thinking-message';\n\n                    const badge = document.createElement('span');\n                    badge.className = 'agent-badge';\n                    badge.textContent = agent;\n                    messageDiv.appendChild(badge);\n\n                    const contentDiv = document.createElement('div');\n                    contentDiv.innerHTML = formatContent(content || 'Thinking...');\n                    messageDiv.appendChild(contentDiv);\n\n                    messagesDiv.appendChild(messageDiv);\n                    messagesDiv.scrollTop = messagesDiv.scrollHeight;\n                }\n\n                function removeThinkingMessage() {\n                    const thinkingMsg = document.getElementById('thinking-message');\n                    if (thinkingMsg) {\n                        thinkingMsg.remove();\n                    }\n                }\n\n                // Map to track progress messages by agent\n                const progressMessages = new Map();\n\n                function updateProgressMessage(agent, content) {\n                    let progressDiv = progressMessages.get(agent);\n\n                    if (!progressDiv) {\n                        // Create new progress message\n                        progressDiv = document.createElement('div');\n                        progressDiv.className = 'message system-message progress-update';\n                        progressDiv.id = 'progress-' + agent.replace(/[^a-z0-9]/gi, '-');\n\n                        const badge = document.createElement('span');\n                        badge.className = 'agent-badge';\n                        badge.textContent = agent + ' Progress';\n                        progressDiv.appendChild(badge);\n\n                        const contentDiv = document.createElement('div');\n                        contentDiv.className = 'progress-content';\n                        progressDiv.appendChild(contentDiv);\n\n                        messagesDiv.appendChild(progressDiv);\n                        progressMessages.set(agent, progressDiv);\n                    }\n\n                    // Update content\n                    const contentDiv = progressDiv.querySelector('.progress-content');\n                    if (contentDiv) {\n                        contentDiv.innerHTML = formatContent(content);\n                    }\n\n                    messagesDiv.scrollTop = messagesDiv.scrollHeight;\n                }\n\n                function removeProgressMessages() {\n                    progressMessages.forEach((div, agent) => {\n                        if (div.parentNode) {\n                            div.parentNode.removeChild(div);\n                        }\n                    });\n                    progressMessages.clear();\n                }\n\n                // ============================================================================\n                // v5.8.1: Agent Activity Visualization\n                // ============================================================================\n\n                const agentActivityMap = new Map();  // agent -> activity div\n\n                function showAgentActivity(message) {\n                    const {activity_type, agent, content, tool, tool_status, tool_result} = message;\n\n                    // v6.1-alpha: Extract message content (support both 'content' and 'message' fields)\n                    const messageContent = content || message.message || '';\n\n                    // Skip if no content available\n                    if (!messageContent && activity_type !== 'agent_tool_start' && activity_type !== 'agent_tool_complete') {\n                        console.warn('Agent activity has no content:', message);\n                        return;\n                    }\n\n                    // Get or create agent activity container\n                    let activityDiv = agentActivityMap.get(agent);\n\n                    if (!activityDiv) {\n                        activityDiv = document.createElement('div');\n                        activityDiv.className = `agent-activity ${agent}-activity`;\n                        activityDiv.innerHTML = `\n                            <div class=\"activity-header\">\n                                <span class=\"agent-badge\">${agent}</span>\n                            </div>\n                            <div class=\"activity-content\"></div>\n                        `;\n                        messagesDiv.appendChild(activityDiv);\n                        agentActivityMap.set(agent, activityDiv);\n                    }\n\n                    const activityContent = activityDiv.querySelector('.activity-content');\n\n                    if (activity_type === 'agent_thinking') {\n                        activityContent.innerHTML = `<div class=\"activity-item thinking\">💭 ${messageContent}</div>`;\n                    } else if (activity_type === 'agent_progress') {\n                        const progressItem = document.createElement('div');\n                        progressItem.className = 'activity-item progress';\n                        progressItem.innerHTML = `📊 ${messageContent}`;\n                        activityContent.appendChild(progressItem);\n                    } else if (activity_type === 'agent_tool_start') {\n                        const toolItem = document.createElement('div');\n                        toolItem.className = 'activity-item tool-running';\n                        toolItem.id = `tool-${agent}-${tool}`;\n                        toolItem.innerHTML = `🔧 ${tool}() → ⏳ Running...`;\n                        activityContent.appendChild(toolItem);\n                    } else if (activity_type === 'agent_tool_complete') {\n                        const toolItem = document.getElementById(`tool-${agent}-${tool}`);\n                        if (toolItem) {\n                            const icon = tool_status === 'success' ? '✅' : '❌';\n                            toolItem.className = `activity-item tool-${tool_status}`;\n                            toolItem.innerHTML = `🔧 ${tool}() → ${icon} ${tool_status}`;\n                        }\n                    } else if (activity_type === 'agent_complete') {\n                        const completeItem = document.createElement('div');\n                        completeItem.className = 'activity-item complete';\n                        completeItem.innerHTML = `✅ ${content || 'Completed'}`;\n                        activityContent.appendChild(completeItem);\n\n                        // Remove activity div after 2 seconds\n                        setTimeout(() => {\n                            if (activityDiv.parentNode) {\n                                activityDiv.style.opacity = '0';\n                                setTimeout(() => {\n                                    if (activityDiv.parentNode) activityDiv.parentNode.removeChild(activityDiv);\n                                    agentActivityMap.delete(agent);\n                                }, 300);\n                            }\n                        }, 2000);\n                    }\n\n                    messagesDiv.scrollTop = messagesDiv.scrollHeight;\n                }\n\n                // ============================================================================\n                // v5.2.0: Architecture Proposal Card\n                // ============================================================================\n\n                function createArchitectureProposalCard(proposal, sessionId, isRevised) {\n                    const card = document.createElement('div');\n                    card.className = 'architecture-proposal-card message';\n                    card.style.cssText = `\n                        background: var(--vscode-editor-background);\n                        border: 2px solid var(--vscode-focusBorder);\n                        border-radius: 8px;\n                        padding: 20px;\n                        margin: 16px 0;\n                        box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n                    `;\n\n                    // Header\n                    const header = document.createElement('div');\n                    header.style.cssText = 'border-bottom: 1px solid var(--vscode-panel-border); padding-bottom: 12px; margin-bottom: 16px;';\n                    header.innerHTML = `\n                        <h2 style=\"margin: 0; color: var(--vscode-foreground); font-size: 20px;\">\n                            🏛️ Architecture Proposal ${isRevised ? '(Revised)' : ''}\n                        </h2>\n                        <p style=\"margin: 8px 0 0 0; color: var(--vscode-descriptionForeground); font-size: 13px;\">\n                            Please review the proposed architecture and provide your decision\n                        </p>\n                    `;\n                    card.appendChild(header);\n\n                    // Content sections\n                    const sections = [\n                        { title: '📊 Summary', content: proposal.summary, expanded: true },\n                        { title: '✨ Suggested Improvements', content: proposal.improvements, expanded: true },\n                        { title: '🛠️ Tech Stack', content: proposal.tech_stack, expanded: false },\n                        { title: '📁 Project Structure', content: proposal.structure, expanded: false },\n                        { title: '⚠️ Risks & Mitigations', content: proposal.risks, expanded: false },\n                        { title: '🔍 Research Insights', content: proposal.research_insights, expanded: false }\n                    ];\n\n                    sections.forEach((section, index) => {\n                        const sectionDiv = document.createElement('div');\n                        sectionDiv.style.cssText = 'margin-bottom: 16px;';\n\n                        const sectionHeader = document.createElement('div');\n                        sectionHeader.style.cssText = `\n                            cursor: pointer;\n                            padding: 8px;\n                            background: var(--vscode-list-hoverBackground);\n                            border-radius: 4px;\n                            font-weight: 600;\n                            display: flex;\n                            align-items: center;\n                            justify-content: space-between;\n                        `;\n\n                        const titleSpan = document.createElement('span');\n                        titleSpan.textContent = section.title;\n                        sectionHeader.appendChild(titleSpan);\n\n                        const toggleIcon = document.createElement('span');\n                        toggleIcon.textContent = section.expanded ? '▼' : '▶';\n                        toggleIcon.style.cssText = 'font-size: 10px;';\n                        sectionHeader.appendChild(toggleIcon);\n\n                        const sectionContent = document.createElement('div');\n                        sectionContent.style.cssText = `\n                            padding: 12px;\n                            margin-top: 8px;\n                            background: var(--vscode-editor-background);\n                            border-left: 3px solid var(--vscode-focusBorder);\n                            border-radius: 0 4px 4px 0;\n                            white-space: pre-wrap;\n                            display: ${section.expanded ? 'block' : 'none'};\n                        `;\n                        sectionContent.innerHTML = formatContent(section.content || 'No information provided');\n\n                        sectionHeader.onclick = () => {\n                            const isExpanded = sectionContent.style.display !== 'none';\n                            sectionContent.style.display = isExpanded ? 'none' : 'block';\n                            toggleIcon.textContent = isExpanded ? '▶' : '▼';\n                        };\n\n                        sectionDiv.appendChild(sectionHeader);\n                        sectionDiv.appendChild(sectionContent);\n                        card.appendChild(sectionDiv);\n                    });\n\n                    // Feedback textarea (initially hidden)\n                    const feedbackSection = document.createElement('div');\n                    feedbackSection.style.cssText = 'margin: 16px 0; display: none;';\n                    feedbackSection.id = 'feedback-section';\n\n                    const feedbackLabel = document.createElement('label');\n                    feedbackLabel.textContent = 'Your feedback or requested changes:';\n                    feedbackLabel.style.cssText = 'display: block; margin-bottom: 8px; font-weight: 500;';\n\n                    const feedbackTextarea = document.createElement('textarea');\n                    feedbackTextarea.id = 'proposal-feedback';\n                    feedbackTextarea.placeholder = 'Describe what you would like to change...';\n                    feedbackTextarea.style.cssText = `\n                        width: 100%;\n                        min-height: 80px;\n                        padding: 8px;\n                        background: var(--vscode-input-background);\n                        color: var(--vscode-input-foreground);\n                        border: 1px solid var(--vscode-input-border);\n                        border-radius: 4px;\n                        font-family: var(--vscode-font-family);\n                        resize: vertical;\n                    `;\n\n                    feedbackSection.appendChild(feedbackLabel);\n                    feedbackSection.appendChild(feedbackTextarea);\n                    card.appendChild(feedbackSection);\n\n                    // Action buttons\n                    const buttonContainer = document.createElement('div');\n                    buttonContainer.style.cssText = 'display: flex; gap: 12px; margin-top: 20px; padding-top: 16px; border-top: 1px solid var(--vscode-panel-border);';\n\n                    const approveBtn = createProposalButton('✅ Approve', '#28a745', () => {\n                        sendArchitectureApproval(sessionId, 'approved', '');\n                        card.style.opacity = '0.6';\n                        card.style.pointerEvents = 'none';\n                    });\n\n                    const modifyBtn = createProposalButton('✏️ Modify', '#ffc107', () => {\n                        const feedbackSection = card.querySelector('#feedback-section');\n                        if (feedbackSection.style.display === 'none') {\n                            feedbackSection.style.display = 'block';\n                            modifyBtn.textContent = '📤 Submit Changes';\n                        } else {\n                            const feedback = feedbackTextarea.value.trim();\n                            if (!feedback) {\n                                vscode.postMessage({\n                                    command: 'showError',\n                                    message: 'Please provide feedback for modifications'\n                                });\n                                return;\n                            }\n                            sendArchitectureApproval(sessionId, 'modified', feedback);\n                            card.style.opacity = '0.6';\n                            card.style.pointerEvents = 'none';\n                        }\n                    });\n\n                    const rejectBtn = createProposalButton('❌ Reject', '#dc3545', () => {\n                        if (confirm('Are you sure you want to reject this architecture proposal?')) {\n                            sendArchitectureApproval(sessionId, 'rejected', '');\n                            card.style.opacity = '0.6';\n                            card.style.pointerEvents = 'none';\n                        }\n                    });\n\n                    buttonContainer.appendChild(approveBtn);\n                    buttonContainer.appendChild(modifyBtn);\n                    buttonContainer.appendChild(rejectBtn);\n                    card.appendChild(buttonContainer);\n\n                    return card;\n                }\n\n                function createProposalButton(text, color, onClick) {\n                    const btn = document.createElement('button');\n                    btn.textContent = text;\n                    btn.style.cssText = `\n                        flex: 1;\n                        padding: 10px 20px;\n                        background: ${color};\n                        color: white;\n                        border: none;\n                        border-radius: 4px;\n                        font-weight: 600;\n                        cursor: pointer;\n                        transition: opacity 0.2s;\n                    `;\n                    btn.onmouseover = () => btn.style.opacity = '0.8';\n                    btn.onmouseout = () => btn.style.opacity = '1';\n                    btn.onclick = onClick;\n                    return btn;\n                }\n\n                function sendArchitectureApproval(sessionId, decision, feedback) {\n                    console.log(`📤 Sending architecture approval: ${decision}`, { sessionId, feedback });\n                    vscode.postMessage({\n                        type: 'architecture_approval',\n                        session_id: sessionId,\n                        decision: decision,\n                        feedback: feedback\n                    });\n                }\n\n                // ============================================================================\n                // End of v5.2.0 Architecture Proposal Card\n                // ============================================================================\n\n                // Initialization overlay functions\n                function showInitializationOverlay() {\n                    if (document.getElementById('initialization-overlay')) return;\n\n                    const overlay = document.createElement('div');\n                    overlay.id = 'initialization-overlay';\n                    overlay.className = 'initialization-overlay';\n                    overlay.innerHTML = [\n                        '<div class=\"initialization-content\">',\n                        '    <div class=\"spinner\"></div>',\n                        '    <h2>🚀 Initializing System</h2>',\n                        '    <p id=\"init-status\">Preparing KI AutoAgent...</p>',\n                        '    <div id=\"init-progress\" class=\"progress-bar\">',\n                        '        <div class=\"progress-fill\"></div>',\n                        '    </div>',\n                        '</div>'\n                    ].join('');\n                    document.body.appendChild(overlay);\n                }\n\n                function hideInitializationOverlay() {\n                    const overlay = document.getElementById('initialization-overlay');\n                    if (overlay) {\n                        overlay.classList.add('fade-out');\n                        setTimeout(() => overlay.remove(), 300);\n                    }\n                    isInitializing = false;\n                }\n\n                function updateInitStatus(status) {\n                    const statusEl = document.getElementById('init-status');\n                    if (statusEl) {\n                        statusEl.textContent = status;\n                    }\n                }\n\n                function formatContent(content) {\n                    // Enhanced markdown and formatting support\n                    if (!content) return '';\n\n                    // First escape HTML for security\n                    const escapeMap = {\n                        '&': '&amp;',\n                        '<': '&lt;',\n                        '>': '&gt;',\n                        '\"': '&quot;',\n                        \"'\": '&#039;'\n                    };\n\n                    let escaped = '';\n                    for (let i = 0; i < content.length; i++) {\n                        const char = content[i];\n                        escaped += escapeMap[char] || char;\n                    }\n\n                    // Convert markdown-style formatting\n                    // Headers\n                    escaped = escaped.replace(/^### (.+)$/gm, '<h3>$1</h3>');\n                    escaped = escaped.replace(/^## (.+)$/gm, '<h2>$1</h2>');\n                    escaped = escaped.replace(/^# (.+)$/gm, '<h1>$1</h1>');\n\n                    // Bold and Italic\n                    escaped = escaped.replace(/\\*\\*(.+?)\\*\\*/g, '<strong>$1</strong>');\n                    escaped = escaped.replace(/\\*(.+?)\\*/g, '<em>$1</em>');\n\n                    // Code blocks - match triple backticks\n                    const codeBlockStart = escaped.indexOf('&lt;code&gt;&lt;code&gt;&lt;code&gt;');\n                    if (codeBlockStart !== -1) {\n                        const codeBlockEnd = escaped.indexOf('&lt;code&gt;&lt;code&gt;&lt;code&gt;', codeBlockStart + 1);\n                        if (codeBlockEnd !== -1) {\n                            const before = escaped.substring(0, codeBlockStart);\n                            const code = escaped.substring(codeBlockStart + 39, codeBlockEnd);\n                            const after = escaped.substring(codeBlockEnd + 39);\n                            escaped = before + '&lt;pre&gt;&lt;code&gt;' + code + '&lt;/code&gt;&lt;/pre&gt;' + after;\n                        }\n                    }\n\n                    // Inline code - match single backticks\n                    escaped = escaped.replace(/&lt;code&gt;([^&]+)&lt;code&gt;/g, '&lt;code&gt;$1&lt;/code&gt;');\n\n                    // Lists\n                    escaped = escaped.replace(/^\\* (.+)$/gm, '<li>$1</li>');\n                    escaped = escaped.replace(/^- (.+)$/gm, '<li>$1</li>');\n                    escaped = escaped.replace(/^\\d+\\. (.+)$/gm, '<li>$1</li>');\n\n                    // Wrap consecutive li elements in ul\n                    escaped = escaped.replace(/(<li>.+<\\/li>\\s*)+/g, function(match) {\n                        return '<ul>' + match + '</ul>';\n                    });\n\n                    // Line breaks\n                    escaped = escaped.split('\\n\\n').join('</p><p>');\n                    escaped = escaped.split('\\n').join('<br>');\n\n                    // Wrap in paragraph if not already wrapped\n                    if (!escaped.startsWith('<')) {\n                        escaped = '<p>' + escaped + '</p>';\n                    }\n\n                    return escaped;\n                }\n            <\/script>\n        </body>\n        </html>"}dispose(){for(c.currentPanel=void 0,this._isDisposed=!0,this.backendClient&&(this.backendClient.removeAllListeners("response"),this.backendClient.removeAllListeners("thinking"),this.backendClient.removeAllListeners("progress"),this.backendClient.removeAllListeners("complete"),this.backendClient.removeAllListeners("error"),this.backendClient.removeAllListeners("welcome"),this.backendClient.removeAllListeners("stream_chunk"),c.debugChannel.appendLine("✅ Cleaned up BackendClient event listeners")),this._panel.dispose();this._disposables.length;){const e=this._disposables.pop();e&&e.dispose()}}}n.MultiAgentChatPanel=c,c.viewType="kiAutoAgentChat"}},n={},t=function t(s){var o=n[s];if(void 0!==o)return o.exports;var a=n[s]={exports:{}};return e[s].call(a.exports,a,a.exports,t),a.exports}(265);module.exports=t})();