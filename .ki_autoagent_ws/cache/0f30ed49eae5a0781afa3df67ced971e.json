{
  "timestamp": "2025-10-05T11:55:14.364466",
  "key": "system_layers",
  "value": {
    "layers": [
      {
        "name": "presentation",
        "level": 3,
        "components": [
          "verify_reviewer_test.py",
          "test_quick_infra.py",
          "quick_test_key.py",
          "claude_web_proxy/quick_test.py",
          "BACKUP_OLD_archived_typescript_implementation/agents/reviewer_gpt.py",
          "BACKUP_OLD_archived_typescript_implementation/orchestration/iteration_controller.py",
          "agents/specialized/reviewer_gpt_agent.py",
          "backend/test_quick_infra.py",
          "backend/quick_test_key.py",
          "backend/agents/specialized/reviewer_gpt_agent.py",
          "agent_projects/test_reviewer_validation.py",
          "agent_projects/test_playwright_review.py",
          "agent_projects/test_quick_approval.py",
          "agent_projects/test_quick_fix.py",
          "agent_projects/test_reviewer_with_auto_approval.py",
          "agent_projects/test_simple_review.py"
        ],
        "component_count": 16,
        "allowed_dependencies": [
          "business",
          "infrastructure"
        ],
        "violations": []
      },
      {
        "name": "business",
        "level": 2,
        "components": [
          "core/pause_handler.py",
          "utils/perplexity_service.py",
          "utils/claude_code_service.py",
          "utils/openai_service.py",
          "utils/anthropic_service.py",
          "backend/core/pause_handler.py",
          "backend/langgraph_system/intelligent_query_handler.py",
          "backend/langgraph_system/development_query_handler.py",
          "backend/services/diagram_service.py",
          "backend/services/__init__.py",
          "backend/services/project_cache.py",
          "backend/services/smart_file_watcher.py",
          "backend/services/gemini_video_service.py",
          "backend/services/code_search.py",
          "langgraph_system/intelligent_query_handler.py",
          "langgraph_system/development_query_handler.py",
          "services/diagram_service.py",
          "services/__init__.py",
          "services/smart_file_watcher.py",
          "services/code_search.py"
        ],
        "component_count": 20,
        "allowed_dependencies": [
          "data",
          "infrastructure"
        ],
        "violations": []
      },
      {
        "name": "data",
        "level": 1,
        "components": [
          "agents/specialized/performance_bot.py",
          "backend/agents/specialized/performance_bot.py",
          "backend/api/models_endpoint.py",
          "api/models_endpoint.py",
          "agent_projects/test_available_models.py"
        ],
        "component_count": 5,
        "allowed_dependencies": [
          "infrastructure"
        ],
        "violations": []
      },
      {
        "name": "infrastructure",
        "level": 0,
        "components": [
          "hello.py",
          "setup_project.py",
          "test_system_understanding.py",
          "test_dashboard_create.py",
          "send_approval.py",
          "__version__.py",
          "test_dashboard_request.py",
          "test_infrastructure_comprehensive.py",
          "test_api_keys.py",
          "real_whiteboard_request.py",
          "cli.py",
          "test_websocket_debug.py",
          "test_v4_features.py",
          "test_execution_time_fix.py",
          "test_langgraph_system.py",
          "send_real_request.py",
          "fixes/orchestrator_file_write_fix.py",
          "fixes/task_request_enhancement.py",
          "claude_web_proxy/claude_browser.py",
          "claude_web_proxy/fastapi_server.py",
          "claude_web_proxy/crewai_integration.py",
          "claude_web_proxy/setup_and_test.py",
          "claude_web_proxy/__init__.py",
          "claude_web_proxy/debug_browser_api.py",
          "core/memory_manager.py",
          "core/cache_manager.py",
          "core/__init__.py",
          "core/shared_context_manager.py",
          "core/conversation_context_manager.py",
          "core/git_checkpoint_manager.py",
          "core/exceptions.py",
          "core/analysis/semgrep_analyzer.py",
          "core/analysis/vulture_analyzer.py",
          "core/analysis/__init__.py",
          "core/analysis/radon_metrics.py",
          "core/analysis/layer_analyzer.py",
          "core/analysis/call_graph_analyzer.py",
          "core/indexing/tree_sitter_indexer.py",
          "core/indexing/__init__.py",
          "core/indexing/code_indexer.py",
          "config/capabilities_loader.py",
          "config/settings.py",
          "BACKUP_OLD_archived_typescript_implementation/agents/opus_arbitrator.py",
          "BACKUP_OLD_archived_typescript_implementation/agents/docu_bot.py",
          "BACKUP_OLD_archived_typescript_implementation/agents/base_agent.py",
          "BACKUP_OLD_archived_typescript_implementation/agents/research_bot.py",
          "BACKUP_OLD_archived_typescript_implementation/agents/__init__.py",
          "BACKUP_OLD_archived_typescript_implementation/agents/architect_gpt.py",
          "BACKUP_OLD_archived_typescript_implementation/agents/trade_strat.py",
          "BACKUP_OLD_archived_typescript_implementation/agents/fixer_bot.py",
          "BACKUP_OLD_archived_typescript_implementation/agents/codesmith_claude.py",
          "BACKUP_OLD_archived_typescript_implementation/claude_web_related/claude_web_integration_complete.py",
          "BACKUP_OLD_archived_typescript_implementation/claude_web_related/debug_login_flow.py",
          "BACKUP_OLD_archived_typescript_implementation/orchestration/execution_engine.py",
          "BACKUP_OLD_archived_typescript_implementation/orchestration/__init__.py",
          "BACKUP_OLD_archived_typescript_implementation/orchestration/intent_classifier.py",
          "BACKUP_OLD_archived_typescript_implementation/orchestration/master_dispatcher.py",
          "BACKUP_OLD_archived_typescript_implementation/orchestration/shared_context.py",
          "BACKUP_OLD_archived_typescript_implementation/orchestration/learning_system.py",
          "BACKUP_OLD_archived_typescript_implementation/orchestration/workflow_generator.py",
          "BACKUP_OLD_archived_typescript_implementation/orchestration/quality_gates/engine_parity_quality_gate.py",
          "BACKUP_OLD_archived_typescript_implementation/orchestration/quality_gates/security_quality_gate.py",
          "BACKUP_OLD_archived_typescript_implementation/orchestration/quality_gates/base_quality_gate.py",
          "BACKUP_OLD_archived_typescript_implementation/orchestration/quality_gates/ron_strategy_quality_gate.py",
          "BACKUP_OLD_archived_typescript_implementation/orchestration/quality_gates/trading_quality_gate.py",
          "BACKUP_OLD_archived_typescript_implementation/orchestration/quality_gates/__init__.py",
          "BACKUP_OLD_archived_typescript_implementation/orchestration/workflows/generic_software_workflow.py",
          "BACKUP_OLD_archived_typescript_implementation/orchestration/workflows/trading_system_workflow.py",
          "BACKUP_OLD_archived_typescript_implementation/orchestration/workflows/__init__.py",
          "BACKUP_OLD_archived_typescript_implementation/orchestration/workflows/base_workflow.py",
          "BACKUP_OLD_archived_typescript_implementation/orchestration/project_contexts/trading_project_context.py",
          "BACKUP_OLD_archived_typescript_implementation/orchestration/project_contexts/__init__.py",
          "BACKUP_OLD_archived_typescript_implementation/orchestration/project_contexts/web_app_context.py",
          "BACKUP_OLD_archived_typescript_implementation/orchestration/project_contexts/base_project_context.py",
          "tests/test_cache_manager.py",
          "tests/test_server_auto.py",
          "tests/test_file_capabilities_simple.py",
          "tests/test_direct_file_write.py",
          "tests/test_real_agent.py",
          "tests/test_server.py",
          "tests/test_agent_write_integration.py",
          "tests/test_agent_file_capabilities.py",
          "tests/test_integration.py",
          "agents/agent_registry.py",
          "agents/tools/__init__.py",
          "agents/tools/file_tools.py",
          "agents/tools/browser_tester.py",
          "agents/specialized/fixerbot_agent.py",
          "agents/specialized/tradestrat_agent.py",
          "agents/specialized/docubot_agent.py",
          "agents/specialized/architect_agent.py",
          "agents/specialized/codesmith_agent.py",
          "agents/specialized/fixer_gpt_agent.py",
          "agents/specialized/research_agent.py",
          "agents/specialized/orchestrator_agent_v2.py",
          "agents/specialized/opus_arbitrator_agent.py",
          "agents/specialized/orchestrator_agent.py",
          "agents/base/base_agent.py",
          "agents/base/prime_directives.py",
          "agents/base/chat_agent.py",
          "backend/test_system_understanding.py",
          "backend/__version__.py",
          "backend/test_infrastructure_comprehensive.py",
          "backend/test_api_keys.py",
          "backend/test_websocket_debug.py",
          "backend/test_v4_features.py",
          "backend/test_execution_time_fix.py",
          "backend/test_langgraph_system.py",
          "backend/fixes/orchestrator_file_write_fix.py",
          "backend/fixes/task_request_enhancement.py",
          "backend/core/memory_manager.py",
          "backend/core/cache_manager.py",
          "backend/core/__init__.py",
          "backend/core/shared_context_manager.py",
          "backend/core/conversation_context_manager.py",
          "backend/core/git_checkpoint_manager.py",
          "backend/core/exceptions.py",
          "backend/core/analysis/semgrep_analyzer.py",
          "backend/core/analysis/vulture_analyzer.py",
          "backend/core/analysis/__init__.py",
          "backend/core/analysis/radon_metrics.py",
          "backend/core/analysis/layer_analyzer.py",
          "backend/core/analysis/call_graph_analyzer.py",
          "backend/core/indexing/tree_sitter_indexer.py",
          "backend/core/indexing/__init__.py",
          "backend/core/indexing/code_indexer.py",
          "backend/config/capabilities_loader.py",
          "backend/config/settings.py",
          "backend/tests/test_cache_manager.py",
          "backend/tests/test_server_auto.py",
          "backend/tests/test_file_capabilities_simple.py",
          "backend/tests/test_direct_file_write.py",
          "backend/tests/test_real_agent.py",
          "backend/tests/test_server.py",
          "backend/tests/test_agent_write_integration.py",
          "backend/tests/test_agent_file_capabilities.py",
          "backend/tests/test_integration.py",
          "backend/agents/agent_registry.py",
          "backend/agents/tools/__init__.py",
          "backend/agents/tools/file_tools.py",
          "backend/agents/tools/browser_tester.py",
          "backend/agents/specialized/video_agent.py",
          "backend/agents/specialized/fixerbot_agent.py",
          "backend/agents/specialized/tradestrat_agent.py",
          "backend/agents/specialized/docubot_agent.py",
          "backend/agents/specialized/architect_agent.py",
          "backend/agents/specialized/codesmith_agent.py",
          "backend/agents/specialized/fixer_gpt_agent.py",
          "backend/agents/specialized/research_agent.py",
          "backend/agents/specialized/orchestrator_agent_v2.py",
          "backend/agents/specialized/opus_arbitrator_agent.py",
          "backend/agents/specialized/orchestrator_agent.py",
          "backend/agents/base/base_agent.py",
          "backend/agents/base/prime_directives.py",
          "backend/agents/base/chat_agent.py",
          "backend/utils/perplexity_service.py",
          "backend/utils/claude_code_service.py",
          "backend/utils/openai_service.py",
          "backend/utils/anthropic_service.py",
          "backend/langgraph_system/cache_manager.py",
          "backend/langgraph_system/__init__.py",
          "backend/langgraph_system/query_classifier.py",
          "backend/langgraph_system/workflow_self_diagnosis.py",
          "backend/langgraph_system/workflow.py",
          "backend/langgraph_system/state.py",
          "backend/langgraph_system/safe_orchestrator_executor.py",
          "backend/langgraph_system/extensions/dynamic_workflow.py",
          "backend/langgraph_system/extensions/__init__.py",
          "backend/langgraph_system/extensions/approval_manager.py",
          "backend/langgraph_system/extensions/tool_discovery.py",
          "backend/langgraph_system/extensions/persistent_memory.py",
          "backend/api/settings_endpoint.py",
          "backend/api/server_langgraph.py",
          "backend/api/__init__.py",
          "examples/claude_web_integration_example.py",
          "examples/video_analysis_demo.py",
          "examples/video_batch_demo.py",
          "examples/multi_agent_claude_web_demo.py",
          "scripts/create_version_info.py",
          "scripts/update_instructions.py",
          "langgraph_system/cache_manager.py",
          "langgraph_system/__init__.py",
          "langgraph_system/query_classifier.py",
          "langgraph_system/workflow_self_diagnosis.py",
          "langgraph_system/workflow.py",
          "langgraph_system/state.py",
          "langgraph_system/safe_orchestrator_executor.py",
          "langgraph_system/extensions/dynamic_workflow.py",
          "langgraph_system/extensions/__init__.py",
          "langgraph_system/extensions/approval_manager.py",
          "langgraph_system/extensions/tool_discovery.py",
          "langgraph_system/extensions/persistent_memory.py",
          "api/settings_endpoint.py",
          "api/server_langgraph.py",
          "api/__init__.py",
          "services/project_cache.py",
          "agent_projects/test_safe_executor_552.py",
          "agent_projects/test_no_approval.py",
          "agent_projects/test_architecture_proposal_workflow.py",
          "agent_projects/test_tetris_websocket_workflow.py",
          "agent_projects/test_stub_fixed.py",
          "agent_projects/test_simple_chat.py",
          "agent_projects/test_new_features.py",
          "agent_projects/chart_renderer.py",
          "agent_projects/test_self_diagnosis.py",
          "agent_projects/test_indexing_progress.py",
          "agent_projects/test_dashboard_auto_approve.py",
          "agent_projects/test_button_implementation.py",
          "agent_projects/test_routing_debug.py",
          "agent_projects/test_perplexity_integration.py",
          "agent_projects/test_self_diagnosis_simple.py",
          "agent_projects/test_show_approval.py",
          "agent_projects/approve_architecture.py",
          "agent_projects/test_intelligent_agents.py",
          "agent_projects/send_approval.py",
          "agent_projects/test_architect_progress.py",
          "agent_projects/test_connection.py",
          "agent_projects/test_chat_approval.py",
          "agent_projects/test_complex_workflow_simulation.py",
          "agent_projects/test_architect_json.py",
          "agent_projects/test_no_cache.py",
          "agent_projects/test_simple_workflow.py",
          "agent_projects/test_progress_enhanced.py",
          "agent_projects/test_orchestrator_steps.py",
          "agent_projects/test_agent_collaboration.py",
          "agent_projects/test_agents_fixed.py",
          "agent_projects/test_multi_agent_workflow.py",
          "agent_projects/test_final.py",
          "agent_projects/test_tetris_workflow.py",
          "agent_projects/test_query_class.py",
          "agent_projects/test_system.py",
          "agent_projects/test_websocket_debug.py",
          "agent_projects/test_code_verification.py",
          "agent_projects/test_research_api.py",
          "agent_projects/test_workflow_analysis.py",
          "agent_projects/test_dashboard_generation.py",
          "agent_projects/test_query_classifier_simple.py",
          "agent_projects/test_manual_approval.py",
          "agent_projects/test_websocket_messages.py",
          "agent_projects/test_complex_app_request.py",
          "agent_projects/test_instructions_learning.py",
          "agent_projects/test_tetris_now.py",
          "agent_projects/test_interactive_dashboard.py",
          "agent_projects/test_dashboard_simple.py",
          "agent_projects/test_tetris_complete.py",
          "agent_projects/test_infrastructure_analysis.py",
          "agent_projects/test_tetris_simple.py",
          "agent_projects/test_perplexity_raw.py",
          "agent_projects/test_whiteboard_real.py"
        ],
        "component_count": 249,
        "allowed_dependencies": [],
        "violations": []
      }
    ],
    "violations": [
      {
        "from": "test_api_keys.py",
        "to": "utils/openai_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "test_api_keys.py",
        "to": "utils/anthropic_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "cli.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "fixes/orchestrator_file_write_fix.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "fixes/orchestrator_file_write_fix.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "claude_web_proxy/setup_and_test.py",
        "to": "agent_projects/test_playwright_review.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "core/__init__.py",
        "to": "core/pause_handler.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "BACKUP_OLD_archived_typescript_implementation/agents/docu_bot.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "BACKUP_OLD_archived_typescript_implementation/agents/base_agent.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "BACKUP_OLD_archived_typescript_implementation/agents/research_bot.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "BACKUP_OLD_archived_typescript_implementation/agents/__init__.py",
        "to": "BACKUP_OLD_archived_typescript_implementation/agents/reviewer_gpt.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "BACKUP_OLD_archived_typescript_implementation/agents/architect_gpt.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "BACKUP_OLD_archived_typescript_implementation/agents/trade_strat.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "BACKUP_OLD_archived_typescript_implementation/agents/fixer_bot.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "BACKUP_OLD_archived_typescript_implementation/agents/codesmith_claude.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "BACKUP_OLD_archived_typescript_implementation/orchestration/intent_classifier.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "BACKUP_OLD_archived_typescript_implementation/orchestration/master_dispatcher.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "BACKUP_OLD_archived_typescript_implementation/orchestration/quality_gates/engine_parity_quality_gate.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "BACKUP_OLD_archived_typescript_implementation/orchestration/quality_gates/security_quality_gate.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "BACKUP_OLD_archived_typescript_implementation/orchestration/quality_gates/base_quality_gate.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "BACKUP_OLD_archived_typescript_implementation/orchestration/quality_gates/ron_strategy_quality_gate.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "BACKUP_OLD_archived_typescript_implementation/orchestration/quality_gates/trading_quality_gate.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "agents/specialized/fixerbot_agent.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "agents/specialized/fixerbot_agent.py",
        "to": "utils/claude_code_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "agents/specialized/tradestrat_agent.py",
        "to": "utils/claude_code_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "agents/specialized/docubot_agent.py",
        "to": "utils/openai_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "agents/specialized/architect_agent.py",
        "to": "utils/openai_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "agents/specialized/architect_agent.py",
        "to": "backend/services/project_cache.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "agents/specialized/architect_agent.py",
        "to": "backend/services/smart_file_watcher.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "agents/specialized/architect_agent.py",
        "to": "backend/services/code_search.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "agents/specialized/architect_agent.py",
        "to": "backend/services/diagram_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "agents/specialized/codesmith_agent.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "agents/specialized/codesmith_agent.py",
        "to": "utils/claude_code_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "agents/specialized/codesmith_agent.py",
        "to": "backend/services/diagram_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "agents/specialized/codesmith_agent.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "agents/specialized/codesmith_agent.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "agents/specialized/fixer_gpt_agent.py",
        "to": "utils/openai_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "agents/specialized/performance_bot.py",
        "to": "utils/openai_service.py",
        "from_layer": "data",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "data should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "agents/specialized/performance_bot.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "data",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "data should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "agents/specialized/research_agent.py",
        "to": "utils/perplexity_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "agents/specialized/orchestrator_agent_v2.py",
        "to": "utils/openai_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "agents/specialized/orchestrator_agent_v2.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "agents/specialized/opus_arbitrator_agent.py",
        "to": "utils/claude_code_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "agents/specialized/orchestrator_agent.py",
        "to": "utils/openai_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "agents/base/base_agent.py",
        "to": "core/pause_handler.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "agents/base/prime_directives.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "utils/claude_code_service.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "business",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "business should not depend on presentation. Refactor to use data."
      },
      {
        "from": "backend/test_api_keys.py",
        "to": "utils/openai_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/test_api_keys.py",
        "to": "utils/anthropic_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/fixes/orchestrator_file_write_fix.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "backend/fixes/orchestrator_file_write_fix.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "backend/core/__init__.py",
        "to": "core/pause_handler.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/specialized/video_agent.py",
        "to": "backend/services/gemini_video_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/specialized/video_agent.py",
        "to": "utils/openai_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/specialized/fixerbot_agent.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/specialized/fixerbot_agent.py",
        "to": "utils/claude_code_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/specialized/tradestrat_agent.py",
        "to": "utils/claude_code_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/specialized/docubot_agent.py",
        "to": "utils/openai_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/specialized/architect_agent.py",
        "to": "utils/openai_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/specialized/architect_agent.py",
        "to": "backend/services/project_cache.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/specialized/architect_agent.py",
        "to": "backend/services/smart_file_watcher.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/specialized/architect_agent.py",
        "to": "backend/services/code_search.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/specialized/architect_agent.py",
        "to": "backend/services/diagram_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/specialized/codesmith_agent.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/specialized/codesmith_agent.py",
        "to": "utils/claude_code_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/specialized/codesmith_agent.py",
        "to": "backend/services/diagram_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/specialized/codesmith_agent.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/specialized/codesmith_agent.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/specialized/fixer_gpt_agent.py",
        "to": "utils/openai_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/specialized/performance_bot.py",
        "to": "utils/openai_service.py",
        "from_layer": "data",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "data should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/specialized/performance_bot.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "data",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "data should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/specialized/research_agent.py",
        "to": "utils/perplexity_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/specialized/orchestrator_agent_v2.py",
        "to": "utils/openai_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/specialized/orchestrator_agent_v2.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/specialized/opus_arbitrator_agent.py",
        "to": "utils/claude_code_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/specialized/orchestrator_agent.py",
        "to": "utils/openai_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/base/base_agent.py",
        "to": "core/pause_handler.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/agents/base/prime_directives.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "backend/utils/claude_code_service.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "backend/utils/openai_service.py",
        "to": "utils/openai_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/utils/anthropic_service.py",
        "to": "utils/anthropic_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/langgraph_system/development_query_handler.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "business",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "business should not depend on presentation. Refactor to use data."
      },
      {
        "from": "backend/langgraph_system/query_classifier.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "backend/langgraph_system/workflow_self_diagnosis.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "backend/langgraph_system/workflow.py",
        "to": "backend/langgraph_system/intelligent_query_handler.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/langgraph_system/workflow.py",
        "to": "backend/langgraph_system/development_query_handler.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/langgraph_system/workflow.py",
        "to": "agents/specialized/reviewer_gpt_agent.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "backend/langgraph_system/workflow.py",
        "to": "agents/specialized/performance_bot.py",
        "from_layer": "infrastructure",
        "to_layer": "data",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on data. Refactor to use infrastructure."
      },
      {
        "from": "backend/langgraph_system/workflow.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "backend/langgraph_system/workflow.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "backend/langgraph_system/safe_orchestrator_executor.py",
        "to": "backend/langgraph_system/development_query_handler.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "backend/api/server_langgraph.py",
        "to": "backend/api/models_endpoint.py",
        "from_layer": "infrastructure",
        "to_layer": "data",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on data. Refactor to use infrastructure."
      },
      {
        "from": "backend/api/server_langgraph.py",
        "to": "backend/api/models_endpoint.py",
        "from_layer": "infrastructure",
        "to_layer": "data",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on data. Refactor to use infrastructure."
      },
      {
        "from": "backend/api/server_langgraph.py",
        "to": "backend/api/models_endpoint.py",
        "from_layer": "infrastructure",
        "to_layer": "data",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on data. Refactor to use infrastructure."
      },
      {
        "from": "backend/services/code_search.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "business",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "business should not depend on presentation. Refactor to use data."
      },
      {
        "from": "langgraph_system/development_query_handler.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "business",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "business should not depend on presentation. Refactor to use data."
      },
      {
        "from": "langgraph_system/query_classifier.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "langgraph_system/workflow_self_diagnosis.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "langgraph_system/workflow.py",
        "to": "backend/langgraph_system/intelligent_query_handler.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "langgraph_system/workflow.py",
        "to": "backend/langgraph_system/development_query_handler.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "langgraph_system/workflow.py",
        "to": "agents/specialized/reviewer_gpt_agent.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "langgraph_system/workflow.py",
        "to": "agents/specialized/performance_bot.py",
        "from_layer": "infrastructure",
        "to_layer": "data",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on data. Refactor to use infrastructure."
      },
      {
        "from": "langgraph_system/workflow.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "langgraph_system/workflow.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "langgraph_system/safe_orchestrator_executor.py",
        "to": "backend/langgraph_system/development_query_handler.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "api/server_langgraph.py",
        "to": "backend/api/models_endpoint.py",
        "from_layer": "infrastructure",
        "to_layer": "data",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on data. Refactor to use infrastructure."
      },
      {
        "from": "api/server_langgraph.py",
        "to": "backend/api/models_endpoint.py",
        "from_layer": "infrastructure",
        "to_layer": "data",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on data. Refactor to use infrastructure."
      },
      {
        "from": "api/server_langgraph.py",
        "to": "backend/api/models_endpoint.py",
        "from_layer": "infrastructure",
        "to_layer": "data",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on data. Refactor to use infrastructure."
      },
      {
        "from": "services/code_search.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "business",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "business should not depend on presentation. Refactor to use data."
      },
      {
        "from": "agent_projects/test_safe_executor_552.py",
        "to": "backend/langgraph_system/development_query_handler.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "agent_projects/test_new_features.py",
        "to": "agents/specialized/reviewer_gpt_agent.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "agent_projects/test_available_models.py",
        "to": "utils/openai_service.py",
        "from_layer": "data",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "data should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "agent_projects/test_available_models.py",
        "to": "utils/openai_service.py",
        "from_layer": "data",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "data should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "agent_projects/test_available_models.py",
        "to": "utils/anthropic_service.py",
        "from_layer": "data",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "data should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "agent_projects/test_available_models.py",
        "to": "utils/openai_service.py",
        "from_layer": "data",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "data should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "agent_projects/test_perplexity_integration.py",
        "to": "utils/perplexity_service.py",
        "from_layer": "infrastructure",
        "to_layer": "business",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on business. Refactor to use infrastructure."
      },
      {
        "from": "agent_projects/test_multi_agent_workflow.py",
        "to": "agents/specialized/reviewer_gpt_agent.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      },
      {
        "from": "agent_projects/test_code_verification.py",
        "to": "verify_reviewer_test.py",
        "from_layer": "infrastructure",
        "to_layer": "presentation",
        "severity": "error",
        "type": "upward_dependency",
        "suggestion": "infrastructure should not depend on presentation. Refactor to use infrastructure."
      }
    ],
    "quality_score": 0.3,
    "metrics": {
      "total_files": 290,
      "layered_files": 290,
      "unlayered_files": 0,
      "total_violations": 118,
      "critical_violations": 118,
      "warning_violations": 0,
      "layer_distribution": {
        "infrastructure": 249,
        "presentation": 16,
        "business": 20,
        "data": 5
      }
    },
    "timestamp": null
  }
}